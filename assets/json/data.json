[
  {
    "titulo": "1.- Primeros pasos",
    "subtitulo": "",
    "items": [
      {
        "titulo": "Instalación",
        "contenido": "<div style='font-size: 14.3px;'>  \n    <h1> Instalación</h1>\n    <ul>\n      <li>\n        Instalación \n        <ul>\n          <li>Requisitos del servidor</li>\n          <li>Instalar Laravel</li>\n          <li>Configuración</li>\n        </ul>\n      </li>\n      <li>\n        Configuración del servidor web \n        <ul>\n          <li>URLs amigables</li>\n        </ul>\n      </li>\n    </ul>\n    <p></p>\n    <h2>Instalación</h2>  \n    <h3>Requisitos del servidor</h3>\n    <p>El framework Laravel tiene algunos requisitos del sistema. Todos estos requisitos son cubiertos por la máquina virtual Laravel Homestead, así que es altamente recomendable que uses Homestead como tu entorno local de desarrollo de Laravel.</p>\n    <p>Sin embargo, si no estás utilizando Homestead, deberás asegurarte de que tu servidor cumpla con los siguientes requisitos:</p>\n    <ul>\n      <li>PHP &gt;= 7.1.3</li>\n      <li>BCMath PHP Extension</li>\n      <li>Ctype PHP Extension</li>\n      <li>JSON PHP Extension</li>\n      <li>Mbstring PHP Extension</li>\n      <li>Extensión OpenSSL de PHP</li>\n      <li>Extensión PDO de PHP</li>\n      <li>Extensión Tokenizer de PHP</li>\n      <li>Extensión XML de PHP</li>\n    </ul>  \n    <h3>Instalar Laravel</h3>\n    <p>\n      Laravel utiliza Composer para administrar sus dependencias. Por lo que, antes de utilizar Laravel, deberás asegurarte de tener Composer instalado en tu sistema.\n    </p>\n  \n    <p >TIP</p>\n    <p>\n      En la lección instalación de Composer y Laravel del curso gratuito Laravel desde cero\n              \n      de Styde puedes ver el proceso de instalación paso a paso.\n    </p>\n  \n    <h4> Mediante el instalador de Laravel</h4>\n    <p>Primero, descarga el instalador de Laravel usando Composer:</p>\n  \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>composer global require laravel/installer</pre style='background-color: #CFD8DC; color: #37474F;'></code>\n  \n    <p>Asegurate de colocar el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">vendor/bin</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"> en tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$PATH</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"> para que el ejecutable de Laravel pueda ser localizado en tu sistema. Este directorio existe en diferentes ubicaciones según el sistema operativo que estés utilizando; sin embargo, algunas de las ubicaciones más comunes son las siguientes:</p>\n    <ul>\n      <li>macOS: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$HOME/.composer/vendor/bin</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"></li>\n      <li>GNU / Distribuciones Linux: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$HOME/.config/composer/vendor/bin</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"></li>\n      <li>Windows: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">%USERPROFILE%\\AppData\\Roaming\\Composer\\vendor\\bin</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"></li>\n    </ul>\n    <p>Una vez instalado, el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">laravel new</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"> creará una nueva instalación de Laravel en el directorio que especifiques. Por ejemplo, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">laravel new blog</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"> creará un directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">blog</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"> que contendrá una nueva instalación de Laravel con todas las dependiencias de Laravel ya instaladas:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>laravel new blog</pre style='background-color: #CFD8DC; color: #37474F;'></code>\n  \n  <h4> Mediante composer create-project</h4>\n  <p>Alternativamente, también puedes instalar Laravel ejecutando el comando de Composer <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create-project</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"> en tu terminal:</p>\n  \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>composer create-project --pre style='background-color: #CFD8DC; color: #37474F;'fer-dist laravel/laravel blog\n</pre style='background-color: #CFD8DC; color: #37474F;'></code>\n  \n  <h4> Servidor de desarrollo local</h4>\n  <p>Si tienes instalado PHP de manera local y te gustaría utilizar el servidor de desarrollo incorporado en PHP para servir tu aplicación, puedes usar el comando de Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">serve</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">. Este comando iniciará un servidor de desarrollo en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">http://localhost:8000</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">:</p>\n  \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan serve    \n</pre style='background-color: #CFD8DC; color: #37474F;'></code>\n  \n  <p>Otras opciones de desarrollo local más robustas están disponibles mediante Homestead y Valet.</p>\n  <p></p>\n  <h3>Configuración</h3>\n  <h4> Directorio público</h4>\n  <p>Después de haber instalado Laravel, deberás configurar el documento raíz de tu servidor web para que sea el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">. El archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">index.php</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"> en este directorio funciona como controlador frontal (front controller) para todas las peticiones HTTP que entran a tu aplicación.</p>\n  <h4> Archivos de configuración</h4>\n  <p>Todos los archivos de configuración para el framework Laravel están almacenados en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">. Cada opción está documentada, así que siéntete libre de revisar estos archivos y familiarizarte con las opciones disponibles para ti.</p>\n  <h4> Permisos para directorios</h4>\n  <p>Después de haber instalado Laravel, necesitarás congigurar algunos permisos. Los directorios dentro de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">storage</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">bootstrap/cache</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"> deberán tener permiso de escritura para tu servidor web o Laravel no va a funcionar. Si estás utilizando la máquina virtual Homestead, estos permisos ya están establecidos.</p>\n  <h4> Clave de la aplicación</h4>\n  <p>Lo siguiente que debes hacer después de instalar Laravel es establecer la clave de tu aplicación a una cadena aleatoria. Si instalastes Laravel mediante Composer o el instalador de Laravel, esta clave ya ha sido establecida por el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">php artisan key:generate</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.</p>\n  <p>Típicamente, esta cadena debe tener una longitud de 32 caracteres. La clave puede ser establecida en el archivo de entorno <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">. Si no has renombrado el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env.example</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"> a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">, deberás hacerlo ahora. <strong>Si la clave de la aplicación no está establecida, ¡las sesiones de usuario y otros datos encriptados no serán seguros!</strong></p>\n  <h4> Configuración adicional</h4>\n  <p>Laravel casi no necesita de configuración adicional. ¡Eres libre de empezar a desarrollar! Sin embargo, puede que quieras revisar el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/app.php</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"> y su documentación. Contiene varias opciones como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">timezone</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">locale</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"> que es posible que desees ajustar en tu aplicación.</p>\n  <p>También puede que quieras configurar algunos componentes adicionales de Laravel, como:</p>\n  <ul>\n    <li>Cache</li>\n    <li>Base de Datos</li>\n    <li>Sesiones</li>\n  </ul>\n  <p></p>\n  <h2>Configuración del servidor web</h2>\n  <p></p>\n  <h3>URLs amigables</h3>\n  <h4>Apache</h4>\n  <p>Laravel incluye un archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public/.htaccess</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"> que es utilizado para proporcionar URLs sin el controlador frontal <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">index.php</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"> en la ruta. Antes de servir tu aplicación de Laravel con Apache, asegúrate de habilitar el módulo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mod_rewrite</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"> para que tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.htaccess</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"> funcione correctamente.</p>\n  <p>Si el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.htaccess</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"> que viene con Laravel no funciona con tu instalación de Apache, prueba esta alternativa:</p>\n  \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>Options +FollowSymLinks -Indexes\nRewriteEngine On\nRewriteCond %{HTTP:Authorization} .\nRewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^ index.php [L]</pre style='background-color: #CFD8DC; color: #37474F;'></code>\n  \n  <h4> Nginx</h4>\n  <p>Si estás utilizando Nginx, la siguiente directiva en la configuación de tu sitio va a dirigir todas las peticiones al controlador frontal <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">index.php</span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">:</p>\n  \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>location / {\n    try_files \\$uri \\$uri/ /index.php?\\$query_string;\n}\n</pre style='background-color: #CFD8DC; color: #37474F;'></code>\n  \n  <p>Cuando uses Homestead o Valet, las URLs amigables serán configuradas automáticamente.</p>\n</div>"
      },
      {
        "titulo": "Configuración",
        "contenido": "<div style='font-size: 14.2px;'> \n    <h1>Configuración</h1>\n    <ul>\n      <li>Introducción</li>\n      <li>\n        Configuración del entorno \n        <ul>\n          <li>Tipos de variables de entorno</li>\n          <li>Recuperar la configuración del entorno</li>\n          <li>Determinando el entorno actual</li>\n          <li>Ocultar variables de entorno a páginas de depuración</li>\n        </ul>\n      </li>\n      <li>Acceder a valores de configuración</li>\n      <li>Almacenamiento en caché de la configuración</li>\n      <li>Modo de mantenimiento</li>\n    </ul>\n    \n    <h2>Introducción</h2>\n    <p>Todos los archivos de configuración para el framework Laravel están almacenados en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config</span>. Cada opción está documentada, así que no dudes en consultar los archivos y familiarizarte con las opciones disponibles para ti.</p>\n    \n    <h2>Configuración del entorno</h2>\n    <p>A menudo es útil tener diferentes valores de configuración basados en el entorno en el que se ejecuta la aplicación. Por ejemplo, es posible que desees utilizar un servidor de caché localmente diferente al servidor que usas en producción.</p>\n    <p>Para hacer esto sencillo, Laravel utiliza la librería de PHP DotEnv por Vance Lucas. En una nueva instalación de Laravel, el directorio raíz de tu aplicación contendrá un archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env.example</span>. Si instalas Laravel por medio de Composer, este archivo será renombrado automáticamente a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span>. De lo contrario, deberás renombrar el archivo manualmente.</p>\n    <p>Tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span> deberá omitirse en el sistema de control de versiones de tu aplicación, ya que cada desarrollador / servidor que usa tu aplicación puede requerir una configuración de entorno diferente. Además, esto sería un riesgo de seguridad en caso de que un intruso obtenga acceso al repositorio de control de versiones de tu aplicación.</p>\n    <p>Si estás desarrollando con un equipo, es posible que desees continuar incluyendo el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env.example</span> en tu aplicación. Al poner valores de ejemplo (placeholder) en el archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env.example</span>, otros desarrolladores en tu equipo podrán ver claramente cuáles variables de entorno se necesitan para ejecutar tu aplicación. También puedes crear un archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env.testing</span>. Este archivo sobrescribirá el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span> al ejecutar pruebas con PHPUnit o al ejecutar comandos de Artisan con la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--env=testing</span>.</p>\n    \n    <p>TIP</p>\n    <p>Cualquier variable en tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span> puede ser anulada por variables de entorno externas tales como variables de entorno de nivel de servidor o de nivel de sistema.</p>\n    \n  \n  \n  <h3>Tipos de variables de entorno</h3>\n  <p>Todas las variables en tus archivos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span> se traducen como cadenas, así que algunos valores reservados han sido creados para permitirte retornar un rango más amplio de tipos desde la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">env()</span>:</p>\n  <table style=\"border: 1px solid #CFD8DC\">\n    <thead>\n      <tr>\n        <th>Valor en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span></th>\n        <th>Valor en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">env()</span></th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>true</td>\n        <td>(booleano) true</td>\n      </tr>\n      <tr>\n        <td>(true)</td>\n        <td>(booleano) true</td>\n      </tr>\n      <tr>\n        <td>false</td>\n        <td>(booleano) false</td>\n      </tr>\n      <tr>\n        <td>(false)</td>\n        <td>(booleano) false</td>\n      </tr>\n      <tr>\n        <td>empty</td>\n        <td>(cadena) ''</td>\n      </tr>\n      <tr>\n        <td>(empty)</td>\n        <td>(cadena) ''</td>\n      </tr>\n      <tr>\n        <td>null</td>\n        <td>(null) null</td>\n      </tr>\n      <tr>\n        <td>(null)</td>\n        <td>(null) null</td>\n      </tr>\n    </tbody>\n  </table>\n  <p>Si necesitas definir una variable de entorno con un valor que contiene espacios, puedes hacerlo  encerrando el valor en comillas dobles.</p>\n  \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>APP_NAME=\"My Application\"\n</code></pre>\n  \n  \n  <h3>Recuperar la configuración del entorno</h3>\n  <p>Todas las variables listadas en este archivo van a ser cargadas en la variable super-global de PHP <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$_ENV</span> cuando tu aplicación reciba una solicitud. Sin embargo, puedes utilizar el helper <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">env</span> para recuperar valores de estas variables en tus archivos de configuración. De hecho, si revisas los archivos de configuración de Laravel, podrás notar que varias de estas opciones ya están utilizando este helper:</p>\n  \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>'debug' =&gt; env('APP_DEBUG', false),\n</code></pre>\n  \n  <p>El segundo valor pasado a la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">env</span> es el \"valor predeterminado\". Este valor será utilizado si no se encuentra una variable de entorno existente para la clave proporcionada.</p>\n  \n  <h3>Determinando el entorno actual</h3>\n  <p>El entorno actual de la aplicación es determinado por medio de la variable <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">APP_ENV</span> desde tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span>. Puedes acceder a este valor por medio del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">environment</span> del facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App</span>:</p>\n  \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$environment = App::environment();\n</code></pre>\n  \n  <p>También puedes pasar argumentos al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">environment</span> para verificar si el entorno coincide con un valor determinado. El método va a retornar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span> si el entorno coincide con cualquiera de los valores dados:</p>\n  \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>if (App::environment('local')) {\n    // The environment is local\n}\nif (App::environment(['local', 'staging'])) {\n    // The environment is either local OR staging...\n}\n</code></pre>\n  \n  \n    <p>TIP</p>\n    <p>La detección del entorno actual de la aplicación puede ser anulada por una variable de entorno <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">APP_ENV</span> a nivel del servidor. Esto puede ser útil cuando necesites compartir la misma aplicación para diferentes configuraciones de entorno, para que puedas configurar un host determinado para que coincida con un entorno determinado en las configuraciones de tu servidor.</p>\n  \n  \n  <h3>Ocultar variables de entorno a páginas de depuración</h3>\n  <p>Cuando una excepción no es capturada y la variable de entorno <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">APP_DEBUG</span> es igual a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>, la página de depuración mostrará todas las variables de entorno y sus contenidos. En algunos casos vas a querer ocultar ciertas variables. Puedes hacer esto actualizando la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">debug_blacklist</span> en tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/app.php</span>.</p>\n  <p>Algunas variables están disponibles tanto en las variables de entorno y en los datos del servidor / petición. Por lo tanto, puede que necesites ocultarlos tanto para <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$_ENV</span> como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$_SERVER</span>:</p>\n  \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>return [\n    // ...\n    'debug_blacklist' =&gt; [\n        '_ENV' =&gt; [\n            'APP_KEY',\n            'DB_PASSWORD',\n        ],\n        '_SERVER' =&gt; [\n            'APP_KEY',\n            'DB_PASSWORD',\n        ],\n        '_POST' =&gt; [\n            'password',\n        ],\n    ],\n];\n</code></pre>\n  \n  \n  <h2>Acceder a valores de configuración</h2>\n  <p>Puedes acceder fácilmente a tus valores de configuración utilizando la funcion helper global <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config</span> desde cualquier lugar de tu aplicación. Se puede acceder a los valores de configuración usanto la sintaxis de \"punto\", que incluye el nombre del archivo y la opción a la que deseas acceder. También puedes especificar un valor predeterminado que se devolverá si la opción de configuración no existe:</p>\n  \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$value = config('app.timezone');\n</code></pre>\n  \n  <p>Para establecer valores de configuración en tiempo de ejecución, pasa un arreglo al helper <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config</span>:</p>\n  \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>config(['app.timezone' =&gt; 'America/Chicago']);\n</code></pre>\n  \n  \n  <h2>Almacenamiento en caché de la configuración</h2>\n  <p>Para dar a tu aplicación un aumento de velocidad, debes almacenar en caché todos tus archivos de configuración en un solo archivo usando el comando de Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config:cache</span>. Esto combinará todas las opciónes de configuración para tu aplicación en un solo archivo que será cargado rápidamente por el framework.</p>\n  <p>Usualmente deberías ejecutar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">php artisan config:cache</span> como parte de tu rutina de despliegue a producción. El comando no se debe ejecutar durante el desarrollo local ya que las opciones de configuración con frecuencia deberán cambiarse durante el desarrollo de tu aplicación.</p>\n  \n    <p>Nota</p>\n    <p>Si ejecutas el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config:cache</span> durante el proceso de despliegue, debes asegurarte de llamar solo a la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">env</span> desde tus archivos de configuración. Una vez que la configuración se ha almacenado en caché, el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span> no será cargado y todas las llamadas a la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">env</span> retornarán <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>.</p>\n  \n  \n  <h2>Modo de mantenimiento</h2>\n  <p>Cuando tu aplicación se encuentre en modo de mantenimiento, se mostrará una vista personalizada para todas las solicitudes en tu aplicación. Esto facilita la \"desactivación\" de tu aplicación mientras se está actualizando o cuando se realiza mantenimiento. Se incluye una verificación de modo de mantenimiento en la pila de middleware predeterminada para tu aplicación. Si la aplicación está en modo de mantenimiento, una excepción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">MaintenanceModeException</span> será lanzada con un código de estado 503.</p>\n  <p>Para habilitar el modo de mantenimiento, ejecuta el comando de Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">down</span>:</p>\n  \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan down\n</code></pre>\n  \n  <p>También puedes proporcionar las opciones <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">message</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">retry</span> al comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">down</span>. El valor de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">message</span> se puede usar para mostrar o registrar un mensaje personalizado, mientras que el valor de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">retry</span> se establecerá como el valor de cabecera HTTP <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Retry-After</span>:</p>\n  \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan down --message=\"Upgrading Database\" --retry=60\n</code></pre>\n  \n  <p>Incluso en modo de mantenimiento, se les puede permitir acceder a la aplicación a direcciones IP  o redes específicas usando la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">allow</span> del comando:</p>\n  \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan down --allow=127.0.0.1 --allow=192.168.0.0/16\n</code></pre>\n  \n  <p>Para deshabilitar el modo de mantenimiento, usa el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">up</span>:</p>\n  \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan up\n</code></pre>\n  \n  \n    <p>TIP</p>\n    <p>Puedes personalizar la plantilla predeterminada del modo de mantenimiento al definir tu propia plantilla en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views/errors/503.blade.php</span>.</p>\n  \n  <h4>Modo de mantenimiento y colas</h4>\n  <p>Mientras tu aplicación esté en modo de mantenimiento, no se manejarán trabajos en cola. Los trabajos continuarán siendo manejados de forma normal una vez que la aplicación esté fuera del modo de mantenimiento.</p>\n  <h4>Alternativas al modo de mantenimiento</h4>\n  <p>Como el modo de mantenimiento requiere que tu aplicación tenga varios segundos de tiempo de inactividad, considera alternativas como Envoyer para lograr hacer deploy de Laravel sin tiempo de inactividad.</p>\n</div>"
      },
      {
        "titulo": "Estructura de directorios",
        "contenido": "<div style='font-size: 14.2px'> \n  \n    <h1>Estructura de Directorios</h1>\n    <ul>\n      <li>Introducción</li>\n      <li>\n        Directorio Raíz \n        <ul>\n          <li>Directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app</span></li>\n          <li>Directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">bootstrap</span></li>\n          <li>Directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config</span></li>\n          <li>Directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database</span></li>\n          <li>Directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public</span></li>\n          <li>Directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources</span></li>\n          <li>Directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">routes</span></li>\n          <li>Directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">storage</span></li>\n          <li>Directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tests</span></li>\n          <li>Directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">vendor</span></li>\n        </ul>\n      </li>\n      <li>\n        Directorio App \n        <ul>\n          <li>Directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Broadcasting</span></li>\n          <li>Directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Console</span></li>\n          <li>Directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Events</span></li>\n          <li>Directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Exceptions</span></li>\n          <li>Directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Http</span></li>\n          <li>Directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Jobs</span></li>\n          <li>Directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Listeners</span></li>\n          <li>Directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Mail</span></li>\n          <li>Directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Notifications</span></li>\n          <li>Directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Policies</span></li>\n          <li>Directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Providers</span></li>\n          <li>Directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Rules</span></li>\n        </ul>\n      </li>\n    </ul>\n \n    <h2>Introducción</h2>\n    <p>La estructura por defecto de aplicación de Laravel está pensada para proporcionar un buen punto de inicio tanto para grandes y pequeñas aplicaciones. Pero, eres libre de organizar tu aplicación como quieras. Laravel no impone casi ninguna restricción sobre donde una clase es ubicada - siempre y cuando Composer pueda cargar automáticamente la clase.</p>\n    <h4>¿Donde está el directorio de modelos?</h4>\n    <p>Al comenzar con Laravel, muchos desarrolladores son confundidos por la falta de un directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">models</span>. Sin embargo, la falta de dicho directorio es intencional. Encontramos la palabra \"models\" ambigua dado que significa muchas cosas diferentes para muchas personas. Algunos desarrolladores se refieren al \"modelo\" de una aplicación como la totalidad de toda su lógica de negocio, mientras que otros se refieren a los \"modelos\" como clases que interactuan con una base de datos relacional.</p>\n    <p>Por esta razón, elegimos ubicar los modelos de Eloquent por defecto en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app</span> y permitir al desarrollar ubicarlos en algun otro sitio si así lo eligen.</p>\n \n    <h2>Directorio Raíz</h2>\n \n    <h4>Directorio App</h4>\n    <p>El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app</span> contiene el código prinicipal de tu aplicación. Exploraremos este directorio con más detalle pronto; sin embargo, casi todas las clases en tu aplicación estarán en este directorio.</p>\n \n    <h4>Directorio Bootstrap</h4>\n    <p>El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">bootstrap</span> contiene el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app.php</span> que maqueta el framework. Este directorio también almacena un directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cache</span> que contiene archivos generados por el framework para optimización de rendimiento como los archivos de cache de rutas y servicios.</p>\n \n    <h4>Directorio Config</h4>\n    <p>El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config</span>, como el nombre implica, contiene todos los archivos de configuración de tu aplicación. Es una buena idea leer todos estos archivos y familiarizarte con todas las opciones disponibles para ti.</p>\n \n    <h4>Directorio Database</h4>\n    <p>El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database</span> contiene las migraciones de tu base de datos, model factories y seeders. Si lo deseas, puedes también usar este directorio para almacenar una base de datos SQLite.</p>\n \n    <h4>Directorio Public</h4>\n    <p>El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public</span> contiene el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">index.php</span>, el cual es el punto de acceso para todas las solicitudes llegan a tu aplicación y configura la autocarga. Este directorio también almacena tus assets, tales como imagenes, JavaScript y CSS.</p>\n \n    <h4>Directorio Resources</h4>\n    <p>El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources</span> contiene tus vistas así como también tus assets sin compilar tales como LESS, Sass o JavaScript. Este directorio también almacena todos tus archivos de idioma.</p>\n \n    <h4>Directorio Routes</h4>\n    <p>El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">routes</span> contiene todas las definiciones de rutas para tu aplicación. Por defecto, algunos archivos de rutas son incluidos con Laravel: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">web.php</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">api.php</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">console.php</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">channels.php</span>.</p>\n    <p>El archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">web.php</span> contiene rutas que <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RouteServiceProvider</span> coloca en el grupo de middleware <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">web</span>, que proporciona estado de sesión, protección CSRF y encriptación de cookies. Si tu aplicación no ofrece una API sin estado, todas tus rutas probablemente serán definidas en el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">web.php</span>.</p>\n    <p>El archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">api.php</span> contiene rutas que <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RouteServiceProvider</span> coloca en el grupo de middleware <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">api</span>, que proporcionan limitación de velocidad. Estas rutas están pensadadas para no tener estado, así que las solicitudes que llegan a la aplicación a través de estas rutas están pensadas para ser autenticadas mediante tokens y no tendrán acceso al estado de sesión.</p>\n    <p>El archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">console.php</span> es donde puedes definir todas los comandos basados en Closures de tu aplicación. Cada Closure está enlazado a una instancia de comando permitiendo una forma simple de interactuar con los métodos de entrada y salida de cada comando. Aunque este archivo no define ninguna ruta HTTP, sí define puntos de entrada en consola (rutas) a tu aplicación.</p>\n    <p>El archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">channels.php</span> es donde puedes registrar todos los canales de transmisión de eventos que tu aplicación soporta.</p>\n \n    <h4>Directorio Storage</h4>\n    <p>El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">storage</span> contiene tus plantillas compiladas de Blade, sesiones basadas en archivos, archivos de caches y otros archivos generados por el framework. Este directorio está segregado en los directorios <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">framework</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">logs</span>. El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app</span> puede ser usado para almacenar cualquier archivo generado por tu aplicación. El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">framework</span> es usado para almacenar archivos generados por el framework y cache. Finalmente, el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">logs</span> contiene los archivos de registros de tu aplicación.</p>\n    <p>El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">storage/app/public</span> puede ser usado para almacenar archivos generados por el usario, tales como imagenes de perfil, que deberían ser accesibles públicamente. Debes crear un enlace simbólico en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public/storage</span> que apunte a este directorio. Puedes crear el enlace usando el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">php artisan storage:link</span>.</p>\n \n    <h4>El Directorio Tests</h4>\n    <p>\n      El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tests</span> contiene tus pruebas automatizadas. Una prueba de ejemplo de \n      \n        PHPUnit\n        <outboundlink></outboundlink>\n      \n      es proporcionada. Cada clase de prueba debe estar precedida por la palabra <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Test</span>. Puedes ejecutar tus pruebas usando los comandos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">phpunit</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">php vendor/bin/phpunit</span>.\n    </p>\n \n    <h4>Directorio Vendor</h4>\n    <p>\n      El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">vendor</span> contiene tus dependencias de \n      \n        Composer\n        <outboundlink></outboundlink>\n      \n      .\n    </p>\n \n    <h2>Directorio App</h2>\n    <p>\n      La mayoría de tu aplicación está almacenada el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app</span>. Por defecto, este directorio está regido por el nombre de espacio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App</span> y es cargado automáticamente por Composer usando el \n      \n        estándar de autocarga PSR-4\n        <outboundlink></outboundlink>\n      \n      .\n    </p>\n    <p>El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app</span> contiene una variedad de directorios adicionales tales como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Console</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Http</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Providers</span>. Piensa en los directorios <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Console</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Http</span> como si proporcionaran una API al núcleo de tu aplicación, pero no contienen lógica de la aplicación como tal. En otras palabras, son dos formas de emtir comandos a tu aplicación. El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Console</span> contiene todos tus comandos de Artisan, mientras que el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Http</span> contiene tus controladores, middleware y solicitudes.</p>\n    <p>Una variedad de otros directorios serán generados dentro del directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app</span> cuando uses los comandos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make</span> de Artisan para generar clases. Así que, por ejemplo, el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Jobs</span> no existirá hasta que ejecutes el comando de Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:job</span> para generar una clase job.</p>\n    \n    <p class=\"custom-block-title\">TIP</p>\n    <p>Muchas de las clases en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app</span> pueden ser generadas por Artisan mediante comandos. Para ver los comandos disponibles, ejecuta el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">php artisan list make</span> en tu terminal.</p>\n    \n  \n    <h4>Directorio Broadcasting</h4>\n    <p>El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Broadcasting</span> contiene todas las clases de broadcast de tu aplicación. Estas clases son generadas usando el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:channel</span>. Este directorio no existe por defecto, pero será creado para ti cuando crees tu primer canal. Para aprender más sobre canales, revisa la documentación sobre broadcasting de eventos.</p>\n    <h4>El Directorio Console</h4>\n    <p>El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Console</span> contiene todos los comandos personalizados de Artisan para tu aplicación. Estos comandos pueden ser generados usando el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:command</span>. Este directorio también almacena el kernel de tu consola, que es donde tus comandos personalizados de Artisan son registrados y tus tareas programadas son definidas.</p>\n    <h4>Directorio Events</h4>\n    <p>Este directorio no existe por defecto, pero será creado para ti por los comandos de Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">event:generate</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:event</span>. El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Events</span> almacena clases de eventos. Los eventos pueden ser usados para alertar a otras partes de tu aplicación que una acción dada ha ocurrido, proporcionando una gran cantidad de flexibilidad y desacoplamiento.</p>\n    <h4>Directorio Exceptions</h4>\n    <p>El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Exceptions</span> contiene el manejador de excepciones de tu aplicación y también es un buen lugar para colocar cualquier excepción lanzada por tu aplicación. Si te gustaría personalizar cómo las excepciones son mostradas o renderizadas, debes modificar la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Handler</span> en este directorio.</p>\n    <h4>Directorio Http</h4>\n    <p>El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Http</span> contiene tus controladores, middleware y form requests. Casi toda la lógica para manejar las solicitudes que llegan a tu aplicación serán colocadas en este directorio.</p>\n    <h4>Directorio Jobs</h4>\n    <p>Este directorio no existe por defecto, pero será creado para ti si ejecutas el comando de Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:job</span>. El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Jobs</span> almacena las colas de trabajos para tu aplicación. Los trabajos pueden ser encolados por tu aplicación o ejecutados sincrónicamente dentro del ciclo de vida actual de la solicitud. Los trabajos que son ejecutados sincrónicamente durante la solicitud actual son algunas veces referidos como \"comandos\" dado que son una implementación del patrón de comandos.</p>\n    <h4>Directorio Listeners</h4>\n    <p>Este directorio no existe por defecto, pero será creado para ti si ejecutas los comandos de Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">event:generate</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:listener</span>. El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Listeners</span> contiene las clases que manejan tus eventos. Los listeners de eventos reciben una instancia de evento y realizan la lógica en respuesta al evento siendo ejecutado. Por ejemplo, un evento <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">UserRegistered</span> puede ser manejado por un listener <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">SendWelcomeEmail</span>.</p>\n    <h4>Directorio Mail</h4>\n    <p>Este directorio no existe por defecto, pero será creado para ti si ejecutas el comando de artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:mail</span>. El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Mail</span> contiene todas tus clases que representan correos electrónicos enviados por tu aplicación. Los objetos de correo te permiten encapsular toda la lógica para construir un correo en una única y sencilla clase y que puede ser enviado usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Mail::send</span>.</p>\n    <h4>Directorio Notifications</h4>\n    <p>Este directorio no existe por defecto, pero será creado para ti si ejecutas el comando de Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:notification</span>. El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Notifications</span> contiene todas las notificaciones \"transaccionales\" que son enviadas por tu aplicación, tales como notificaciones sencillas sobre eventos que ocurren dentro de tu aplicación. Las características de notifcaciones de Laravel abstrae el envío de notificaciones sobre una variedad de drivers como email, Slack, SMS o almacenados en la base de datos.</p>\n    <h4>Directorio Policies</h4>\n    <p>Este directorio no existe por defecto, pero será creado para ti si ejecutas el comando de Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:policy</span>. El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Policies</span> contiene las clases de las políticas de autorización de tu aplicación. Las políticas son usadas para determinar si un usuario puede realizar una acción dada contra un recurso. Para más información, revisa la documentación sobre autorización.</p>\n    <h4>Directorio Providers</h4>\n    <p>El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Providers</span> contiene todos los proveedores de servicios para tu aplicación. Los proveedores de servicios maquetan tu aplicación al enlazar servicios en el contenedor de servicios, registrando eventos o realizando cualquier otra tarea para preparar tu aplicación para solicitudes entrantes.</p>\n    <p>En una aplicación de Laravel nueva, este directorio ya contendrá algunos proveedores. Eres libre de agregar tus propios proveedores a este directorio según sea necesario.</p>\n    <h4>Directorio Rules</h4>\n    <p>Este directorio no existe por defecto, pero será creado para ti si ejecutas el comando de Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:rule</span>. El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Rules</span> contiene los objetos para las reglas de validación personalizadas de tu aplicación. Las reglas son usadas para encapsular lógica de validación complicada en un simple objeto. Para más información, revisa la documentación sobre validación.</p>\n  </div>"
      },
      {
        "titulo": "Despliegue",
        "contenido": "<h1>Despliegue</h1>\n    <ul>\n      <li>Introducción</li>\n      <li>\n        Configuración del servidor \n        <ul>\n          <li>Nginx</li>\n        </ul>\n      </li>\n      <li>\n        Optimización \n        <ul>\n          <li>Optimizar autoloader</li>\n          <li>Optimizar configuración local</li>\n          <li>Optimizar carga de rutas</li>\n        </ul>\n      </li>\n      <li>Deploy en forge</li>\n    </ul>\n    <p></p>\n    <h2>Introducción</h2>\n    <p>Una vez que estés listo para hacer deploy de tu aplicación de Laravel a producción, deberías considerar algunos aspectos importantes para hacer que tu aplicación se ejecute de la forma más eficientemente posible. En este documento, vamos a cubrir muy buenos puntos para hacer que tu aplicación de Laravel sea desplegada correctamente.</p>\n    <p></p>\n    <h2>Configuración del servidor</h2>\n    <p></p>\n    <h3>Nginx</h3>\n    <p>\n      Si estás haciendo deploy de tu aplicación hacia un servidor que está ejecutando Nginx, puedes utilizar el siguiente archivo de configuración como punto de inicio para configurar tu servidor web. Principalmente, este archivo tendrá que ser personalizado dependiendo de la configuración de tu servidor. Si deseas asistencia en la administración de tu servidor, considera utilizar un servicio como \n      \n        Laravel Forge\n        \n      \n      :\n    </p>\n    \n      <pre style='background-color: #CFD8DC; color: #37474F;'><code>server {\n    listen 80;\n    server_name example.com;\n    root /example.com/public;\n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header X-Content-Type-Options \"nosniff\";\n    index index.html index.htm index.php;\n    charset utf-8;\n    location / {\n        try_files \\$uri \\$uri/ /index.php?\\$query_string;\n    }\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location = /robots.txt  { access_log off; log_not_found off; }\n    error_page 404 /index.php;\n    location ~ \\.php\\$ {\n        fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;\n        fastcgi_index index.php;\n        fastcgi_param SCRIPT_FILENAME \\$realpath_root\\$fastcgi_script_name;\n        include fastcgi_params;\n    }\n    location ~ /\\.(?!well-known).* {\n        deny all;\n    }\n}\n</code></pre>\n    \n    <p></p>\n    <h2>Optimización</h2>\n    <p></p>\n    <h3>Optimizar autoloader</h3>\n    <p>Al hacer deploy a producción, debes asegurarte de optimizar el autoloader de Composer, para que éste pueda localizar rápidamente el archivo apropiado para cargar una clase dada:</p>\n    \n      <pre style='background-color: #CFD8DC; color: #37474F;'><code>composer install --optimize-autoloader --no-dev\n</code></pre>\n    \n    \n      <p>TIP</p>\n      <p>Adicionalmente, para optimizar el autoloader, deberás asegurarte de incluir siempre el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">composer.lock</span> al controlador de versiones de tu proyecto. Las dependencias de tu proyecto se instalarán más rápido cuando exista el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">composer.lock</span>.</p>\n    \n  \n  <p></p>\n  <h3>Optimizar configuración local</h3>\n  <p>Al hacer deploy de tu aplicación a producción, deberás asegurarte de ejecutar el comando de Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config:cache</span> durante el proceso de deploy:</p>\n  \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan config:cache\n</code></pre>\n  \n  <p>Este comando combinará todos los archivos de configuración de Laravel en un solo archivo en caché, lo que reduce en gran medida la cantidad de consultas que el framework debe hacer al sistema de archivos cuando carga tus valores de configuración.</p>\n  \n    <p>Nota</p>\n    <p>Si ejecutas el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config:cache</span> durante el proceso de despliegue, debes asegurarte de que sólo estás llamando a la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">env</span> desde dentro de tus archivos de configuración. Una vez que la configuración ha sido agregada, el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span> no será cargado y todas las llamadas a la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">env</span> retornarán <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>.</p>\n  \n  <p></p>\n  <h3>Optimizar carga de rutas</h3>\n  <p>Si estás construyendo una aplicación muy grande que contenga muchas rutas, deberías asegurarte de ejecutar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">route:cache</span> de Artisan durante el proceso de deploy.</p>\n  \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan route:cache\n</code></pre>\n  \n  <p>Este comando reduce todas tus rutas registradas en una única llamada al método dentro del archivo en cache, mejorando el rendimiento de registro de rutas cuando se tienen cientos de ellas.</p>\n  \n    <p>Nota</p>\n    <p>Ya que esta característica utiliza la serialización de PHP, sólo se pueden almacenar en cache las rutas para las aplicaciones que estén basadas exclusivamente en controladores. PHP no es capaz de serealizar Closures.</p>\n  \n  <p></p>\n  <h2>Deploy en forge</h2>\n  <p>\n    Si no estás del todo listo para administrar la configuración de tu servidor o si no te sientes cómodo configurando los diferentes servicios necesarios para ejecutar aplicaciones robustas de Laravel, \n    \n      Laravel Forge\n    es una excelente alternativa.\n  </p>\n  <p>Laravel Forge puede crear servidores en varios proveedores de infraestructura como pueden ser DigitalOcean, Linode, AWS y más. Adicionalmente, Forge instala y administra todas las herramientas necesarias para construir aplicaciones robustas de Laravel como Nginx, MySQL, Redis, Memcached, Beanstalk y más.</p>"
      }
    ]
  },
  {
    "titulo": "2.- Arquitectura de laravel 8",
    "subtitulo": "",
    "items": [
      {
        "titulo": "Ciclo de vida",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1> Ciclo de vida de la solicitud</h1>\n<ul>\n    <li>Introducción</li>\n    <li>Resumen del ciclo de vida</li>\n    <li>Enfoque en los proveedores de servicios</li>\n</ul>\n<h2> Introducción</h2>\n<p>Al usar cualquier herramienta en el \"mundo real\", te sientes más cómodo si entiendes como esa herramienta funciona. El desarrollo de aplicaciones no es diferente. Cuando entiendes cómo tus herramientas de desarrollo funcionan, te sientes más cómodo y seguro usándolas.</p>\n<p>El objetivo de este documento es darte un buen resumen sobre cómo el framework Laravel funciona. Al conocer el framework mejor, todo lo demás se siente menos \"mágico\" y te sentirás más cómodo construyendo tus aplicaciones. Si no entiendes todos los términos de una sola vez, ¡no te desesperes! Sólo trata de obtener una comprensión básica de lo que está sucediendo y tus conocimientos crecerán a medida que exploras otras secciones de la documentación.</p>\n<h2> Resumen del ciclo de vida</h2>\n<h3> Lo primero</h3>\n<p>El punto de entrada para todas las solicitudes a una aplicación de Laravel es el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public/index.php</span>. Todas las solicitudes son dirigidas a este archivo por la configuración de tu servidor web (Apache / Nginx). El archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">index.php</span> no contiene mucho código. En su lugar, es un punto de partida para cargar el resto del framework.</p>\n<p>\n    El archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">index.php</span> carga la definición de autocarga generada por Composer y luego retorna una instancia de la aplicación de Laravel desde el script <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">bootstrap/app.php</span>. La primera acción tomada por Laravel es crear una instancia de la aplicación /\n    contenedor de servicios\n    .\n</p>\n<h3> Kernel de HTTP / Consola</h3>\n<p>Luego, la solicitud entrante es enviada ya sea al kernel HTTP o al kernel de la consola, dependiendo del tipo de solicitud que está entrando en la aplicación. Estos dos kernels funcionan como la ubicación principal a través de la cual todas las solicitudes pasan. Por ahora, vamos a enfocarnos sólo en el kernel HTTP, que está ubicado en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Http/Kernel.php</span>.</p>\n<p>\n    El kernel HTTP extiende de la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Foundation\\Http\\Kernel</span>, que define un arreglo de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">bootstrappers</span> que se ejecutarán antes de que la solicitud sea ejecutada. Estos maquetadores configuran el manejo de errores, registros,\n    detectan en el entorno de la aplicación\n    y realizan otras tareas que necesitan ser ejecutadas antes de que la solicitud sea manejada.\n</p>\n<p>\n    El kernel HTTP también define una lista de\n    middleware\n    HTTP que todas las solicitudes deben pasar antes de ser manejadas por la aplicación. Estos middleware manejan la lectura y escritura de la\n    sesión HTTP\n    , determinando si la aplicación está en modo de mantenimiento,\n    verificando el token CSRF\n    y más.\n</p>\n<p>La firma del método para el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">handle</span> del kernel HTTP es bastante simple: recibe un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Request</span> y retorna un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Response</span>. Piensa en el Kernel como una caja negra grande que representa toda tu aplicación. Aliméntala con solicitudes HTTP y retornará respuestas HTTP.</p>\n<h4> Proveedores de servicios</h4>\n<p>\n    Una de las acciones de maquetado más importantes del Kernel es cargar los\n    proveedores de servicios\n    de tu aplicación. Todos los proveedores de servicios de la aplicación son configurados en el arreglo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">providers</span> del archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/app.php</span>. Primero, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">register</span> será llamado en todos los proveedores, luego, una vez que todos los proveedores sean registrados, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span> será llamado.\n</p>\n<p>Los proveedores de servicios son responsables de estructurar todos los distintos componentes del framework, como la base de datos, colas, validaciones y componentes de rutas. Dado que estructuran y configuran cada característica ofrecida por el framework, los proveedores de servicios son el aspecto más importante de todo el proceso de estructuración de Laravel.</p>\n<h4> Despachar la solicitud</h4>\n<p>Una vez que la aplicación ha sido estructurada y todos los proveedores de servicios han sido registrados, la solicitud o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Request</span> será manejada por el enrutador para su despacho. El enrutador enviará la solicitud a una ruta o controlador, así como ejecutará cualquier middleware específico de ruta.</p>\n<h2> Enfoque en los proveedores de servicios</h2>\n<p>Los proveedores de servicios son realmente la clave para estructurar una aplicación de Laravel. La instancia de la aplicación es creada, los proveedores de servicios son registrados y la solicitud es entregada a la aplicación ya estructurada. ¡Es realmente así de simple!</p>\n<p>Tener un firme conocimiento sobre cómo una aplicación de Laravel es construída y estructurada mediante proveedores de servicios es muy útil. Los proveedores de servicios por defecto de tu aplicación están almacenados en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Providers</span>.</p>\n<p>Por defecto, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AppServiceProvider</span> está casi vacío. Este proveedor es un buen lugar para agregar tu propia estructura de componentes y enlaces al contenedor de servicios de tu aplicación. Para aplicaciones grandes, puedes desear crear múltiples proveedores de servicios, cada uno que estructure componentes de una manera más granular.</p>\n</div>"
      },
      {
        "titulo": "Contenedor de servicio",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1> Contenedor de servicios</h1>\n<ul>\n    <li>Introducción</li>\n    <li>\n        Enlaces\n        <ul>\n            <li>Fundamentos de los enlaces</li>\n            <li>Enlazando interfaces a implementaciones</li>\n            <li>Enlaces contextuales</li>\n            <li>Etiquetado</li>\n            <li>Extendiendo enlaces</li>\n        </ul>\n    </li>\n    <li>\n        Resolviendo\n        <ul>\n            <li>Método make</li>\n            <li>Inyección automática</li>\n        </ul>\n    </li>\n    <li>Eventos del contenedor</li>\n    <li>PSR-11</li>\n</ul>\n<h2> Introducción</h2>\n<p>El contenedor de servicios de Laravel es una herramienta poderosa para administrar dependencias de clases y realizar inyección de dependencias. La inyección de dependencias es una frase bonita para básicamente decir: las dependencias de clases son \"inyectadas\" en la clase mediante el constructor o, en algunos casos, métodos \"setter\".</p>\n<p>Echemos un vistazo a un ejemplo sencillo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse App\\User;\nuse App\\Repositories\\UserRepository;\nuse App\\Http\\Controllers\\Controller;\nclass UserController extends Controller\n{\n    /**\n    * The user repository implementation.\n    *\n    * @var UserRepository\n    */\n    protected \\$users;\n    /**\n    * Create a new controller instance.\n    *\n    * @param  UserRepository  \\$users\n    * @return void\n    */\n    public function __construct(UserRepository \\$users)\n    {\n        \\$this-&gt;users = \\$users;\n    }\n    /**\n    * Show the profile for the given user.\n    *\n    * @param  int  \\$id\n    * @return Response\n    */\n    public function show(\\$id)\n    {\n        \\$user = \\$this-&gt;users-&gt;find(\\$id);\n        return view('user.profile', ['user' =&gt; \\$user]);\n    }\n}\n</code></pre>\n<p>\n    En este ejemplo, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">UserController</span> necesita retornar usuarios desde una fuente de datos. Así que, <strong>inyectaremos</strong> un servicio que es capaz de retornar los usuarios. En este conexto, nuestro <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">UserRepository</span> probablemente usa\n    Eloquent\n    para retornar la información de los usuarios desde la base de datos. Sin embargo, dado que el repositorio es inyectado, somos capaces de cambiarlo fácilmente con otra implementación. También somos capaces de \"simular\" o crear una implementación de ejemplo de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">UserRepository</span> al probar nuestra aplicación.\n</p>\n<p>Un conocimiento profundo del contenedor de servicios de Laravel es esencial para construir aplicaciones grandes y poderosas así como también contribuir al núcleo de Laravel.</p>\n<h2> Enlaces</h2>\n<h3> Fundamentos de los enlaces</h3>\n<p>\n    La mayoría de los enlaces de tu contenedor de servicios serán registrados dentro de\n    proveedores de servicios\n    , así que la mayoría de estos ejemplos muestra el uso del contenedor en ese contexto.\n</p>\n<p>TIP</p>\n<p>No hay necesidad de enlazar clases al contenedor si no dependen de ninguna interfaz. El contenedor no necesita ser instruido en cómo construir esos objetos, dado que puede resolver dichos objetos automáticamente usando reflejos.</p>\n<h4> Enlaces sencillos</h4>\n<p>Dentro de un proveedor de servicios, siempre tienes acceso al contenedor mediante la propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$this-&gt;app</span>. Podemos registrar un enlace usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">bind</span>, pasando el nombre de la clase o interfaz que deseamos registrar junto con una <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span> que retorna una instancia de la clase:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$this-&gt;app-&gt;bind('HelpSpot\\API', function (\\$app) {\n    return new HelpSpot\\API(\\$app-&gt;make('HttpClient'));\n});\n</code></pre>\n<p>Observa que recibimos el contenedor como argumento. Podemos entonces usar el contenedor para resolver sub-dependencias del objeto que estamos construyendo.</p>\n<h4> Enlazando un singleton</h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">singleton</span> enlaza una clase o interfaz al contenedor que debería ser resuelto una sola vez. Una vez que el enlace de un singleton es resuelto, la misma instancia de objeto será retornada en llamadas siguientes al contenedor:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$this-&gt;app-&gt;singleton('HelpSpot\\API', function (\\$app) {\n    return new HelpSpot\\API(\\$app-&gt;make('HttpClient'));\n});\n</code></pre>\n<h4> Enlazando instancias</h4>\n<p>También puedes enlazar una instancia de objeto existente al contenedor usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">instance</span>. La instancia dada siempre será retornada en llamadas siguientes al contenedor:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$api = new HelpSpot\\API(new HttpClient);\n\\$this-&gt;app-&gt;instance('HelpSpot\\API', \\$api);\n</code></pre>\n<h4> Enlazando valores primitivos</h4>\n<p>Algunas veces tendrás una clase que recibe algunas clases inyectadas, pero que también necesita un valor primitivo inyectado, como un entero. Puedes fácilmente usar enlaces contextuales para inyectar cualquier valor que tu clase pueda necesitar:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$this-&gt;app-&gt;when('App\\Http\\Controllers\\UserController')\n          -&gt;needs('\\$variableName')\n          -&gt;give(\\$value);\n</code></pre>\n<h3> Enlazando interfaces a implementaciones</h3>\n<p>Una característica muy poderosa del contenedor de servicios es su habilidad para enlazar una interfaz a una implementación dada. Por ejemplo, vamos a suponer que tenemos una interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">EventPusher</span> y una implementación <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RedisEventPusher</span>. Una vez que hemos programado nuestra implementación <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RedisEventPusher</span> de esta interfaz, podemos registrarla con el contenedor de servicios de la siguiente manera:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$this-&gt;app-&gt;bind(\n    'App\\Contracts\\EventPusher',\n    'App\\Services\\RedisEventPusher'\n);\n</code></pre>\n<p>Esta sentencia le dice al contenedor que debe inyectar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RedisEventPusher</span> cuando una clase necesita una implementación de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">EventPusher</span>. Ahora podemos determinar el tipo de la interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">EventPusher</span> en un constructor o cualquier otra ubicación donde las dependencias son inyectadas por el contenedor de servicios:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use App\\Contracts\\EventPusher;\n/**\n* Create a new class instance.\n*\n* @param  EventPusher  \\$pusher\n* @return void\n*/\npublic function __construct(EventPusher \\$pusher)\n{\n    \\$this-&gt;pusher = \\$pusher;\n}\n</code></pre>\n<h3> Enlaces contextuales</h3>\n<p>Algunas veces tendrás dos clases que usan la misma interfaz, pero quieres inyectar diferentes implementaciones en cada clase. Por ejemplo, dos controladores pueden depender de diferentes implementaciones del contrato <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Contracts\\Filesystem\\Filesystem</span>. Laravel proporciona una simple y fluida interfaz para definir este comportamiento:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Storage;\nuse App\\Http\\Controllers\\PhotoController;\nuse App\\Http\\Controllers\\VideoController;\nuse Illuminate\\Contracts\\Filesystem\\Filesystem;\n\\$this-&gt;app-&gt;when(PhotoController::class)\n          -&gt;needs(Filesystem::class)\n          -&gt;give(function () {\n              return Storage::disk('local');\n          });\n\\$this-&gt;app-&gt;when([VideoController::class, UploadController::class])\n          -&gt;needs(Filesystem::class)\n          -&gt;give(function () {\n              return Storage::disk('s3');\n          });\n</code></pre>\n<h3> Etiquetado</h3>\n<p>Ocasionalmente, puedes necesitar resolver todo de una determinada \"categoría\" de enlaces. Por ejemplo, puede que estés construyendo un agregador de reportes que recibe un arreglo de diferentes implementaciones de la interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Report</span>. Luego de registrar las implementaciones de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Report</span>, puedes asignarles una etiqueta usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tag</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$this-&gt;app-&gt;bind('SpeedReport', function () {\n    //\n});\n\\$this-&gt;app-&gt;bind('MemoryReport', function () {\n    //\n});\n\\$this-&gt;app-&gt;tag(['SpeedReport', 'MemoryReport'], 'reports');\n</code></pre>\n<p>Una vez que los servicios han sido etiquetados, puedes resolverlos fácilmente mediante el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tagged</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$this-&gt;app-&gt;bind('ReportAggregator', function (\\$app) {\n    return new ReportAggregator(\\$app-&gt;tagged('reports'));\n});\n</code></pre>\n<h3> Extendiendo enlaces</h3>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">extend</span> te permite modificar servicios resueltos. Por ejemplo, cuando un servicio es resuelto, puedes ejecutar código adicional para decorar o configurar el servicio. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">extend</span> acepta un Closure, que debe retornar el servicio modificado, como único argumento:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$this-&gt;app-&gt;extend(Service::class, function (\\$service) {\n    return new DecoratedService(\\$service);\n});\n</code></pre>\n<h2> Resolviendo</h2>\n<h4> Método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make</span></h4>\n<p>Puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make</span> para resolver una instancia de clase fuera del contenedor. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make</span> acepta el nombre de la clase o interfaz que deseas resolver:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$api = \\$this-&gt;app-&gt;make('HelpSpot\\API');\n</code></pre>\n<p>Si estás en una ubicación de tu código que no tiene acceso a la variable <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$app</span>, puedes usar el helper global <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resolve</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$api = resolve('HelpSpot\\API');\n</code></pre>\n<p>Si algunas de las dependencias de tu clase no son resueltas mediante el contenedor, puedes inyectarlas pasándolas como un arreglo asociativo al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">makeWith</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$api = \\$this-&gt;app-&gt;makeWith('HelpSpot\\API', ['id' =&gt; 1]);\n</code></pre>\n<h4> Inyección automática</h4>\n<p>Alternativamente, y de forma importante, puedes \"determinar el tipo\" de la dependencia en el constructor de una clase que es resuelta por el contenedor, incluyendo controladores, listeners de eventos, colas, middleware y más. En la práctica, así es como la mayoría de tus objetos deben ser resueltos por el contenedor.</p>\n<p>Por ejemplo, puedes determinar el tipo de un repositorio definido por tu aplicación en el constructor de un controlador. El repositorio será automáticamente resuelto e inyectado en la clase:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse App\\Users\\Repository as UserRepository;\nclass UserController extends Controller\n{\n    /**\n    * The user repository instance.\n    */\n    protected \\$users;\n    /**\n    * Create a new controller instance.\n    *\n    * @param  UserRepository  \\$users\n    * @return void\n    */\n    public function __construct(UserRepository \\$users)\n    {\n        \\$this-&gt;users = \\$users;\n    }\n    /**\n    * Show the user with the given ID.\n    *\n    * @param  int  \\$id\n    * @return Response\n    */\n    public function show(\\$id)\n    {\n        //\n    }\n}\n</code></pre>\n<h2> Eventos del contenedor</h2>\n<p>El contenedor de servicios ejecuta un evento cada vez que resuelve un objeto. Puedes escuchar a este evento usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resolving</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$this-&gt;app-&gt;resolving(function (\\$object, \\$app) {\n    // Called when container resolves object of any type...\n});\n\\$this-&gt;app-&gt;resolving(HelpSpot\\API::class, function (\\$api, \\$app) {\n    // Called when container resolves objects of type \"HelpSpot\\API\"...\n});\n</code></pre>\n<p>Como puedes ver, el objeto siendo resuelto será pasado a la función de retorno, permitiéndote establecer cualquier propiedad adicional en el objeto antes de que sea entregado a su consumidor.</p>\n<h2> PSR-11</h2>\n<p>\n    El contenedor de servicios de Laravel implementa la interfaz\n    PSR-11\n    . Por lo tanto, puedes determinar el tipo de la interfaz de contenedor PSR-11 para obtener una instancia del contenedor de Laravel:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Psr\\Container\\ContainerInterface;\nRoute::get('/', function (ContainerInterface \\$container) {\n    \\$service = \\$container-&gt;get('Service');\n    //\n});\n</code></pre>\n<p>Una excepción es mostrada si el identificador dado no puede ser resuelto. La excepción será una instancia de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Psr\\Container\\NotFoundExceptionInterface</span> si el identificador nunca fue enlazado. Si el identificador fue enlazado pero ha sido incapaz de resolver, una instancia de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Psr\\Container\\ContainerExceptionInterface</span> será mostrada.</p>\n</div>"
      },
      {
        "titulo": "Proveedores de servicio",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1> Proveedores de Servicios</h1>\n<ul>\n    <li>Introducción</li>\n    <li>\n        Escribiendo proveedores de servicios\n        <ul>\n            <li>Método register</li>\n            <li>Método boot</li>\n        </ul>\n    </li>\n    <li>Registrando proveedores</li>\n    <li>Proveedores diferidos</li>\n</ul>\n<h2> Introducción</h2>\n<p>Los proveedores de servicios son la parte central de la maquetación de una aplicación Laravel. Tu propia aplicación, así como todos los servicios principales de Laravel son maquetados usando proveedores de servicios.</p>\n<p>Pero, ¿qué queremos decir por \"maquetación\"? En general, nos referimos a <strong>registrar</strong> cosas, incluyendo registrar enlaces de contenedores de servicios, listeners de eventos, middleware e incluso rutas. Los proveedores de servicios son el lugar principal para configurar tu aplicación.</p>\n<p>Si abres el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/app.php</span> incluido con Laravel, verás un arreglo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">providers</span>. Estos son todos los proveedores de servicio que serán cargados para tu aplicación. Observa que muchos de éstos son proveedores \"diferidos\", lo que significa que no serán cargados en cada solicitud, sino sólo cuando los servicios que proporcionan sean necesarios.</p>\n<p>En este resumen aprendarás a escribir tus propios proveedores de servicio y registrarlos en tu aplicación de Laravel.</p>\n<h2> Escribiendo proveedores de servicios</h2>\n<p>\n    Todos los proveedores de servicios extienden de la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Support\\ServiceProvider</span>. La mayoría de los proveedores de servicio contienen un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">register</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span>. Dentro del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">register</span>, debes\n    <strong>\n        enlazar cosas sólo al\n        contenedor de servicios\n    </strong>\n    . Nunca debes tratar de registrar ningún listener de eventos, rutas o cualquier otra pieza de funcionalidad dentro del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">register</span>.\n</p>\n<p>La línea de comandos Artisan puede generar un nuevo proveedor mediante el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:provider</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan make:provider RiakServiceProvider\n</code></pre>\n<h3> Método register</h3>\n<p>\n    Como mencionamos anteriormente, dentro del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">register</span>, debes sólo enlazar cosas al\n    contenedor de servicio\n    . Nunca debes intentar registrar ningún listener de eventos, rutas o cualquier otra pieza de funcionalidad dentro del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">register</span>. De lo contrario, puedes accidentalmente usar un servicio que es proporcionado por un proveedor de servicio que no aún no  se ha cargado.\n</p>\n<p>Vamos a echar un vistazo a un proveedor de servicio básico. Dentro de cualquiera de los métodos de tu proveedor de servicios, siempre tienes acceso a la propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$app</span> que proporciona acceso al contenedor de servicios:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Providers;\nuse Riak\\Connection;\nuse Illuminate\\Support\\ServiceProvider;\nclass RiakServiceProvider extends ServiceProvider\n{\n    /**\n    * Register bindings in the container.\n    *\n    * @return void\n    */\n    public function register()\n    {\n        \\$this-&gt;app-&gt;singleton(Connection::class, function (\\$app) {\n            return new Connection(config('riak'));\n        });\n    }\n}\n</code></pre>\n<p>\n    Este proveedor de servicios sólo define un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">register</span> y usa dicho método para definir una implementación de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Riak\\Connection</span> en el contenedor de servicios. Si no entiendes cómo el contenedor de servicios funciona, revisa\n    su documentación\n    .\n</p>\n<h4> Propiedades <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">bindings</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">singletons</span></h4>\n<p>Si tu proveedor de servicios registra muchos bindings simples, puedes querer usar las propiedades <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">bindings</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">singletons</span> en lugar de manualmente registrar cada binding de contenedor. Cuando el proveedor de servicios es cargado por el framework, automáticamente comprobará dichas propiedades y registrará sus bindings:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Providers;\nuse App\\Contracts\\ServerProvider;\nuse App\\Contracts\\DowntimeNotifier;\nuse App\\Services\\ServerToolsProvider;\nuse Illuminate\\Support\\ServiceProvider;\nuse App\\Services\\PingdomDowntimeNotifier;\nuse App\\Services\\DigitalOceanServerProvider;\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n    * All of the container bindings that should be registered.\n    *\n    * @var array\n    */\n    public \\$bindings = [\n        ServerProvider::class =&gt; DigitalOceanServerProvider::class,\n    ];\n    /**\n    * All of the container singletons that should be registered.\n    *\n    * @var array\n    */\n    public \\$singletons = [\n        DowntimeNotifier::class =&gt; PingdomDowntimeNotifier::class,\n        ServerToolsProvider::class =&gt; ServerToolsProvider::class,\n    ];\n}\n</code></pre>\n<h3> Método boot</h3>\n<p>\n    Entonces, ¿qué sucede si necesitamos registrar un\n    view composer\n    dentro de nuestro proveedor de servicios? Esto debería ser hecho dentro del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span>. <strong>Este método es llamado luego de que todos los demás proveedores de servicio sean registrados</strong>, lo que quiere decir que tienes acceso a todos los demás proveedores de servicio que han sido registrados por el framework:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Providers;\nuse Illuminate\\Support\\ServiceProvider;\nclass ComposerServiceProvider extends ServiceProvider\n{\n    /**\n    * Bootstrap any application services.\n    *\n    * @return void\n    */\n    public function boot()\n    {\n        view()-&gt;composer('view', function () {\n            //\n        });\n    }\n}\n</code></pre>\n<h4> Inyección de dependencias en el método boot</h4>\n<p>\n    Puedes escribir manualmente las dependencias para el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span> de tu proveedor de servicios. El\n    contenedor de servicios\n    inyectará automáticamente cualquier dependencia que necesites:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Contracts\\Routing\\ResponseFactory;\npublic function boot(ResponseFactory \\$response)\n{\n    \\$response-&gt;macro('caps', function (\\$value) {\n        //\n    });\n}\n</code></pre>\n<h2> Registrando proveedores</h2>\n<p>Todos los proveedores de servicios son registrados en el archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/app.php</span>. Este archivo contiene un arreglo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">providers</span> donde puedes listar los nombres de clase de tus proveedores de servicios. Por defecto, una serie de proveedores de servicios principales de Laravel son listados en este arreglo. Estos proveedores maquetan los componentes principales de Laravel, como mailer, queue, cache entre otros.</p>\n<p>Para registrar tu proveedor, agregalo al arreglo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'providers' =&gt; [\n    // Other Service Providers\n    App\\Providers\\ComposerServiceProvider::class,\n],\n</code></pre>\n<h2> Proveedores diferidos</h2>\n<p>\n    Si tu proveedor <strong>sólo</strong> está registrando enlaces en el\n    contenedor de servicios\n    , puedes elegir diferir su registro hasta que uno de los enlaces registrados sea necesario. Diferir la carga de dicho proveedor mejorará el rendimiento de tu aplicación, ya que no es cargado desde el sistema de archivos en cada solicitud.\n</p>\n<p>Laravel compila y almacena una lista de todos los servicios suministrados por proveedores de servicios diferidos, junto con el nombre de clase de su proveedor de servicio. Luego, sólo cuando intentas resolver uno de estos servicios Laravel carga el proveedor de servicio.</p>\n<p>Para diferir la carga de un proveedor, Implementa la interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\Illuminate\\Contracts\\Support\\DeferrableProvider</span> y define un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">provides</span>. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">provides</span> debe retornar los enlaces del contenedor de servicio registrados por el proveedor:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Providers;\nuse Riak\\Connection;\nuse Illuminate\\Support\\ServiceProvider;\nuse Illuminate\\Contracts\\Support\\DeferrableProvider;\nclass RiakServiceProvider extends ServiceProvider implements DeferrableProvider\n{\n    /**\n    * Register the service provider.\n    *\n    * @return void\n    */\n    public function register()\n    {\n        \\$this-&gt;app-&gt;singleton(Connection::class, function (\\$app) {\n            return new Connection(\\$app['config']['riak']);\n        });\n    }\n    /**\n    * Get the services provided by the provider.\n    *\n    * @return array\n    */\n    public function provides()\n    {\n        return [Connection::class];\n    }\n}\n</code></pre>\n</div>"
      },
      {
        "titulo": "Facades",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1> Facades</h1>\n<ul>\n    <li>Introducción</li>\n    <li>\n        Cuándo usar facades\n        <ul>\n            <li>Facades vs. inyección de dependencias</li>\n            <li>Facades vs. funciones helper</li>\n        </ul>\n    </li>\n    <li>Cómo funcionan las facades</li>\n    <li>Facades en tiempo real</li>\n    <li>Referencia de clases de facades</li>\n</ul>\n<h2> Introducción</h2>\n<p>\n    Las Facades proveen una interfaz \"estática\" a las clases disponibles en el\n    contenedor de servicios\n    de la aplicación. Laravel viene con numerosas facades, las cuales brindan acceso a casi todas las características de Laravel. Las facades de Laravel sirven como \"proxies estáticas\" a las clases subyacentes en el contenedor de servicios, brindando el beneficio de una sintaxis tersa y expresiva, mantieniendo mayor verificabilidad y flexibilidad que los métodos estáticos tradicionales.\n</p>\n<p>Todas las facades de Laravel se definen en el namespace <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Support\\Facades</span> . Entonces, podemos fácilmente acceder a una facade de esta forma:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Cache;\nRoute::get('/cache', function () {\n    return Cache::get('key');\n});\n</code></pre>\n<p>A través de la documentación de Laravel, muchos de los ejemplos usarán facades para demostrar varias características del framework.</p>\n<h2> Cuándo usar facades</h2>\n<p>Las Facades tienen múltiples beneficios. Brindan una sintaxis tersa y memorizable que permite utilizar las características de Laravel sin tener que recordar nombres de clase largos que deben ser inyectados o configurados manualmente. Además, debido a su uso único de los métodos dinámicos PHP, son fáciles de probar.</p>\n<p>Sin embargo, deben guardarse ciertas precauciones al hacer uso de facades. El peligro principal de las facades es la corrupción de alcance de clases. Como las facades son tan fáciles de usar y no requieren inyección, puede resultar fácil dejar que tus clases sigan creciendo y usar muchas facades en una sola clase. Usando inyección de dependencias, este potencial es mitigado por la retroalimentación visual que un constructor grande te da cuando tu clase está creciendo demasiado. Entonces, al usar facades, pon especial atención al tamaño de tu clase para que su alcance de responsabilidades permanezca limitado.</p>\n<p>TIP</p>\n<p>\n    Cuando se construye un paquete de terceros que interactúa con Laravel, es mejor inyectar\n    contratos de Laravel\n    en vez de usar facades. Como los paquetes son construidos fuera de Laravel, no tendrás acceso a las funciones (helpers) de testing para facades de Laravel.\n</p>\n<h3> Facades vs. inyección de dependencias</h3>\n<p>Uno de los principales beneficios de la inyección de dependencias es la habilidad de intercambiar implementaciones de la clase inyectada. Esto es útil durante las pruebas debido a que puedes inyectar un mock o un stub y comprobar que esos métodos son llamados en el stub.</p>\n<p>Típicamente, no sería posible imitar (mock) o sustituir (stub) un método de clase verdaderamente estático. Sin embargo, como las facades utilizan métodos dinámicos para hacer proxy de llamadas de método a objetos resueltos desde el contenedor de servicios, podemos de hecho probar las facades exactamente cómo probaríamos una instancia de clase inyectada. Por ejemplo, dada la siguiente ruta:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Cache;\nRoute::get('/cache', function () {\n    return Cache::get('key');\n});\n</code></pre>\n<p>Podemos escribir la siguiene prueba para verificar que el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cache::get</span> fue llamado con el argumento esperado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Cache;\n/**\n* A basic functional test example.\n*\n* @return void\n*/\npublic function testBasicExample()\n{\n    Cache::shouldReceive('get')\n            -&gt;with('key')\n            -&gt;andReturn('value');\n    \\$this-&gt;visit('/cache')\n            -&gt;see('value');\n}\n</code></pre>\n<h3> Facades vs. funciones helper</h3>\n<p>Además de las facades, Laravel incluye una variedad de funciones \"helper\", las cuales pueden realizar tareas comunes como generar vistas, disparar eventos, despachar trabajos, o mandar respuestas HTTP. Muchas de estas funciones helper realizan la misma función que su facade correspondiente. Por ejemplo, éstas llamadas facade y helper son equivalentes:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return View::make('profile');\nreturn view('profile');\n</code></pre>\n<p>No hay diferencia práctica en lo absoluto entre facades y funciones helper. Al usar funciones helper, aún se pueden probar como se probaría la facade correspondiente. Por ejemplo, dada la siguiente ruta:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('/cache', function () {\n    return cache('key');\n});\n</code></pre>\n<p>Bajo la superficie, el helper <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cache</span> llamará al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span> en la clase subyacente a la facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cache</span>. Entonces, aún cuando estamos usando la función helper, podemos escribir la siguiente prueba para verificar que el método fue llamado con el argumento esperado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Cache;\n/**\n* A basic functional test example.\n*\n* @return void\n*/\npublic function testBasicExample()\n{\n    Cache::shouldReceive('get')\n         -&gt;with('key')\n         -&gt;andReturn('value');\n    \\$this-&gt;visit('/cache')\n         -&gt;see('value');\n}\n</code></pre>\n<h2> Cómo funcionan las facades</h2>\n<p>En una aplicación Laravel, una facade es una clase que provee acceso a un objeto desde el contenedor. La maquinaria que hace este trabajo está en la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Facade</span>. Las facades de Laravel y cualquier facade personalizada que crees, extenderá la clase base <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Support\\Facades\\Facade</span>.</p>\n<p>La clase base <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Facade</span> hace uso del método mágico <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">__callStatic()</span> para aplazar las llamadas desde tu facade a un objeto resuelto desde el contenedor. En el ejemplo siguiente, se realiza una llamada al sistema de caché de Laravel. Al mirar este código, se puede suponer que se llama al método estático <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span> en la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cache</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Support\\Facades\\Cache;\nclass UserController extends Controller\n{\n    /**\n    * Show the profile for the given user.\n    *\n    * @param  int  \\$id\n    * @return Response\n    */\n    public function showProfile(\\$id)\n    {\n        \\$user = Cache::get('user:'.\\$id);\n        return view('profile', ['user' =&gt; \\$user]);\n    }\n}\n</code></pre>\n<p>Nótese que cerca del inicio del archivo estamos \"importando\" la facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cache</span> Esta facade sirve como proxy para acceder a la implementación subyacente de la interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Contracts\\Cache\\Factory</span>. Cualquier llamada que hagamos usando la facade será pasada a la instancia subyacente del servicio de caché de Laravel.</p>\n<p>Si observamos la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Support\\Facades\\Cache</span> verás que no hay método estático <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>class Cache extends Facade\n{\n    /**\n    * Get the registered name of the component.\n    *\n    * @return string\n    */\n    protected static function getFacadeAccessor() { return 'cache'; }\n}\n</code></pre>\n<p>En su lugar, la facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cache</span> extiende la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Facade</span> y define el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">getFacadeAccessor()</span>. El trabajo de este método es devolver el nombre de un enlace de contenedor de servicios. Cuando un usuario referencia cualquier método estático en la facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cache</span>, Laravel resuelve el enlace <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cache</span> desde el contenedor de servicios y ejecuta el método solicitado (en este caso, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span>) contra ese objeto.</p>\n<h2> Facades en tiempo real</h2>\n<p>Usando facades en tiempo real, puedes tratar cualquier clase en tu aplicación como si fuera una facade. Para ilustrar cómo esto puede ser utilizado, examinemos una alternativa. Por ejemplo, asumamos que nuestro modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Podcast</span> tiene un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">publish</span>. Sin embargo, para publicar el podcast, necesitamos inyectar una instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Publisher</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App;\nuse App\\Contracts\\Publisher;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Podcast extends Model\n{\n    /**\n    * Publish the podcast.\n    *\n    * @param  Publisher  \\$publisher\n    * @return void\n    */\n    public function publish(Publisher \\$publisher)\n    {\n        \\$this-&gt;update(['publishing' =&gt; now()]);\n        \\$publisher-&gt;publish(\\$this);\n    }\n}\n</code></pre>\n<p>Inyectar una implementación de publisher dentro del método nos permite probar fácilmente el método aislado porque podemos imitar (mock) el publisher inyectado. Sin embargo, requiere que pasemos una instancia publisher cada vez que llamamos al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">publish</span>. Usando facades en tiempo real, podemos mantener la misma verificabilidad sin que se requiera pasar explícitamente una instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Publisher</span>. Para generar una facade en tiempo real, se añade el prefijo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Facades</span> al namespace de la clase importada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App;\nuse Facades\\App\\Contracts\\Publisher;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Podcast extends Model\n{\n    /**\n    * Publish the podcast.\n    *\n    * @return void\n    */\n    public function publish()\n    {\n        \\$this-&gt;update(['publishing' =&gt; now()]);\n        Publisher::publish(\\$this);\n    }\n}\n</code></pre>\n<p>Cuando la facade en tiempo real es utilizada, la implementación publisher será resuelta en el contenedor de servicios usando la porción de la interfaz o nombre de clase que aparece después del prefijo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Facades</span>. Al probar, podemos usar las funciones helpers de testing para facades integradas en Laravel para imitar (mock) esta llamada de método:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace Tests\\Feature;\nuse App\\Podcast;\nuse Tests\\TestCase;\nuse Facades\\App\\Contracts\\Publisher;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nclass PodcastTest extends TestCase\n{\n    use RefreshDatabase;\n    /**\n    * A test example.\n    *\n    * @return void\n    */\n    public function test_podcast_can_be_published()\n    {\n        \\$podcast = factory(Podcast::class)-&gt;create();\n        Publisher::shouldReceive('publish')-&gt;once()-&gt;with(\\$podcast);\n        \\$podcast-&gt;publish();\n    }\n}\n</code></pre>\n<h2> Referencia de clases de facades</h2>\n<p>A continuación encontrarás cada facade y su clase subyacente. Esta es una herrameinta útil para explorar rápidamente dentro de la documentación API para cualquier raíz de facade dada. La llave service container binding también ha sido incluida donde aplica.</p>\n<table style=\"border: 1px solid #CFD8DC\">\n    <thead>\n    <tr>\n        <th>Facade</th>\n        <th>Class</th>\n        <th>Service Container Binding</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>App</td>\n        <td>Illuminate\\Foundation\\Application</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app</span></td>\n    </tr>\n    <tr>\n        <td>Artisan</td>\n        <td>\n            Illuminate\\Contracts\\Console\\Kernel\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">artisan</span></td>\n    </tr>\n    <tr>\n        <td>Auth</td>\n        <td>\n            Illuminate\\Auth\\AuthManager\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">auth</span></td>\n    </tr>\n    <tr>\n        <td>Auth (Instance)</td>\n        <td>\n            Illuminate\\Contracts\\Auth\\Guard\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">auth.driver</span></td>\n    </tr>\n    <tr>\n        <td>Blade</td>\n        <td>\n            Illuminate\\View\\Compilers\\BladeCompiler\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">blade.compiler</span></td>\n    </tr>\n    <tr>\n        <td>Broadcast</td>\n        <td>\n            Illuminate\\Contracts\\Broadcasting\\Factory\n        </td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Broadcast (Instance)</td>\n        <td>\n            Illuminate\\Contracts\\Broadcasting\\Broadcaster\n        </td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Bus</td>\n        <td>\n            Illuminate\\Contracts\\Bus\\Dispatcher\n        </td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Cache</td>\n        <td>\n            Illuminate\\Cache\\CacheManager\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cache</span></td>\n    </tr>\n    <tr>\n        <td>Cache (Instance)</td>\n        <td>\n            Illuminate\\Cache\\Repository\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cache.store</span></td>\n    </tr>\n    <tr>\n        <td>Config</td>\n        <td>\n            Illuminate\\Config\\Repository\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config</span></td>\n    </tr>\n    <tr>\n        <td>Cookie</td>\n        <td>\n            Illuminate\\Cookie\\CookieJar\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cookie</span></td>\n    </tr>\n    <tr>\n        <td>Crypt</td>\n        <td>\n            Illuminate\\Encryption\\Encrypter\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">encrypter</span></td>\n    </tr>\n    <tr>\n        <td>DB</td>\n        <td>\n            Illuminate\\Database\\DatabaseManager\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">db</span></td>\n    </tr>\n    <tr>\n        <td>DB (Instance)</td>\n        <td>\n            Illuminate\\Database\\Connection\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">db.connection</span></td>\n    </tr>\n    <tr>\n        <td>Event</td>\n        <td>\n            Illuminate\\Events\\Dispatcher\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">events</span></td>\n    </tr>\n    <tr>\n        <td>File</td>\n        <td>\n            Illuminate\\Filesystem\\Filesystem\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">files</span></td>\n    </tr>\n    <tr>\n        <td>Gate</td>\n        <td>\n            Illuminate\\Contracts\\Auth\\Access\\Gate\n        </td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Hash</td>\n        <td>\n            Illuminate\\Contracts\\Hashing\\Hasher\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hash</span></td>\n    </tr>\n    <tr>\n        <td>Lang</td>\n        <td>\n            Illuminate\\Translation\\Translator\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">translator</span></td>\n    </tr>\n    <tr>\n        <td>Log</td>\n        <td>\n            Illuminate\\Log\\LogManager\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">log</span></td>\n    </tr>\n    <tr>\n        <td>Mail</td>\n        <td>\n            Illuminate\\Mail\\Mailer\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mailer</span></td>\n    </tr>\n    <tr>\n        <td>Notification</td>\n        <td>\n            Illuminate\\Notifications\\ChannelManager\n        </td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Password</td>\n        <td>\n            Illuminate\\Auth\\Passwords\\PasswordBrokerManager\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">auth.password</span></td>\n    </tr>\n    <tr>\n        <td>Password (Instance)</td>\n        <td>\n            Illuminate\\Auth\\Passwords\\PasswordBroker\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">auth.password.broker</span></td>\n    </tr>\n    <tr>\n        <td>Queue</td>\n        <td>\n            Illuminate\\Queue\\QueueManager\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue</span></td>\n    </tr>\n    <tr>\n        <td>Queue (Instance)</td>\n        <td>\n            Illuminate\\Contracts\\Queue\\Queue\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue.connection</span></td>\n    </tr>\n    <tr>\n        <td>Queue (Base Class)</td>\n        <td>\n            Illuminate\\Queue\\Queue\n        </td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Redirect</td>\n        <td>\n            Illuminate\\Routing\\Redirector\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redirect</span></td>\n    </tr>\n    <tr>\n        <td>Redis</td>\n        <td>\n            Illuminate\\Redis\\RedisManager\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redis</span></td>\n    </tr>\n    <tr>\n        <td>Redis (Instance)</td>\n        <td>\n            Illuminate\\Redis\\Connections\\Connection\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redis.connection</span></td>\n    </tr>\n    <tr>\n        <td>Request</td>\n        <td>\n            Illuminate\\Http\\Request\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">request</span></td>\n    </tr>\n    <tr>\n        <td>Response</td>\n        <td>\n            Illuminate\\Contracts\\Routing\\ResponseFactory\n        </td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Response (Instance)</td>\n        <td>\n            Illuminate\\Http\\Response\n        </td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Route</td>\n        <td>\n            Illuminate\\Routing\\Router\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">router</span></td>\n    </tr>\n    <tr>\n        <td>Schema</td>\n        <td>\n            Illuminate\\Database\\Schema\\Builder\n        </td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Session</td>\n        <td>\n            Illuminate\\Session\\SessionManager\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">session</span></td>\n    </tr>\n    <tr>\n        <td>Session (Instance)</td>\n        <td>\n            Illuminate\\Session\\Store\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">session.store</span></td>\n    </tr>\n    <tr>\n        <td>Storage</td>\n        <td>\n            Illuminate\\Filesystem\\FilesystemManager\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">filesystem</span></td>\n    </tr>\n    <tr>\n        <td>Storage (Instance)</td>\n        <td>\n            Illuminate\\Contracts\\Filesystem\\Filesystem\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">filesystem.disk</span></td>\n    </tr>\n    <tr>\n        <td>URL</td>\n        <td>\n            Illuminate\\Routing\\UrlGenerator\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url</span></td>\n    </tr>\n    <tr>\n        <td>Validator</td>\n        <td>\n            Illuminate\\Validation\\Factory\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">validator</span></td>\n    </tr>\n    <tr>\n        <td>Validator (Instance)</td>\n        <td>\n            Illuminate\\Validation\\Validator\n        </td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>View</td>\n        <td>\n            Illuminate\\View\\Factory\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">view</span></td>\n    </tr>\n    <tr>\n        <td>View (Instance)</td>\n        <td>\n            Illuminate\\View\\View\n        </td>\n        <td></td>\n    </tr>\n    </tbody>\n</table>\n</div>"
      },
      {
        "titulo": "Contratos",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1> Contratos</h1>\n<ul>\n    <li>\n        Introducción\n        <ul>\n            <li>Contratos vs. facades</li>\n        </ul>\n    </li>\n    <li>\n        Cuando usar contratos\n        <ul>\n            <li>Bajo acoplamiento</li>\n            <li>Simplicidad</li>\n        </ul>\n    </li>\n    <li>Cómo usar contratos</li>\n    <li>Referencia de contratos</li>\n</ul>\n<h2> Introducción</h2>\n<p>Los Contratos de Laravel son un conjunto de interfaces que definen los servicios principales proporcionados por el framework. Por ejemplo, un contrato <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Contracts\\Queue\\Queue</span> define los métodos necesarios para las colas de trabajo, mientras que el contrato <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Contracts\\Mail\\Mailer</span> define los métodos necesarios para el envío de correos electrónicos.</p>\n<p>\n    Cada contrato tiene una implementación correspondiente provista por el framework. Por ejemplo, laravel proporciona una implementación de cola con una variedad de conductores (drivers), y una implementación de envío de correo electrónico que funciona con\n    SwiftMailer\n    <outboundlink></outboundlink>\n    .\n</p>\n<p>\n    Todos los contratos de Laravel viven en\n    su repositorio de GitHub propio\n    <outboundlink></outboundlink>\n    . Esto proporciona un punto de referencia rápido para todos los contratos disponibles, así como un paquete único y desacoplado que puede ser utilizado por los desarrolladores de paquetes.\n</p>\n<h3> Contratos vs. facades</h3>\n<p>\n    Los\n    facades\n    de Laravel y las funciones de ayuda (helpers) proporcionan una forma sencilla de utilizar los servicios de Laravel sin necesidad de determinar el tipo y resolver contratos fuera del contenedor de servicios. En la mayoría de los casos, cada facade tiene un contrato equivalente.\n</p>\n<p>A diferencia de las facades, que no necesitan que las requieras en el constructor de su clase, los contratos te permiten definir dependencias explícitas para tus clases. Algunos desarrolladores prefieren definir explícitamente sus dependencias de esta manera y, por lo tanto, prefieren usar contratos, mientras que otros desarrolladores disfrutan de la conveniencia de las facades.</p>\n<p>TIP</p>\n<p>La mayoría de las aplicaciones funcionarán bien sin importar si prefieres facades o contratos. Sin embargo, si estás construyendo un paquete, debes considerar seriamente el uso de contratos, ya que será más fáciles de probar en un contexto paquete.</p>\n<h2> Cuando usar contratos</h2>\n<p>Como se discutió en otro lugar, gran parte de la decisión de usar contratos o facades se reducirá a los gustos personales y los gustos de su equipo de desarrollo. Tanto los contratos como las facades se pueden utilizar para crear aplicaciones Laravel robustas y bien probadas. Mientras mantengas enfocadas las responsabilidades de tu clase, notarás muy pocas diferencias prácticas entre el uso de contratos y facades.</p>\n<p>Sin embargo, todavía puede tener varias preguntas con respecto a los contratos. Por ejemplo, ¿por qué usar interfaces? ¿No es más complicado usar interfaces? Detallemos las razones para utilizar interfaces en los siguientes encabezados: bajo acoplamiento y simplicidad.</p>\n<h3> Bajo acoplamiento</h3>\n<p>Primero, revisemos algunos códigos que están estrechamente acoplado a una implementación de caché. Considera lo siguiente:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Orders;\nclass Repository\n{\n    /**\n    * The cache instance.\n    */\n    protected \\$cache;\n    /**\n    * Create a new repository instance.\n    *\n    * @param  \\SomePackage\\Cache\\Memcached  \\$cache\n    * @return void\n    */\n    public function __construct(\\SomePackage\\Cache\\Memcached \\$cache)\n    {\n        \\$this-&gt;cache = \\$cache;\n    }\n    /**\n    * Retrieve an Order by ID.\n    *\n    * @param  int  \\$id\n    * @return Order\n    */\n    public function find(\\$id)\n    {\n        if (\\$this-&gt;cache-&gt;has(\\$id)) {\n            //\n        }\n    }\n}\n</code></pre>\n<p>En esta clase, el código está estrechamente acoplado a una implementación de caché determinada. Está estrechamente acoplado porque dependemos de una clase de caché concreta de un proveedor de paquetes. Si la API de ese paquete cambia, nuestro código también debe cambiar.</p>\n<p>Del mismo modo, si queremos reemplazar nuestra tecnología de caché subyacente (Memcached) con otra tecnología (Redis), nuevamente tendremos que modificar nuestro repositorio. Nuestro repositorio no debe tener tanto conocimiento sobre quién les proporciona los datos o cómo los proporcionan.</p>\n<p><strong>En lugar de este enfoque, podemos mejorar nuestro código dependiendo de una interfaz simple e independiente del proveedor:</strong></p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Orders;\nuse Illuminate\\Contracts\\Cache\\Repository as Cache;\nclass Repository\n{\n    /**\n    * The cache instance.\n    */\n    protected \\$cache;\n    /**\n    * Create a new repository instance.\n    *\n    * @param  Cache  \\$cache\n    * @return void\n    */\n    public function __construct(Cache \\$cache)\n    {\n        \\$this-&gt;cache = \\$cache;\n    }\n}\n</code></pre>\n<p>Ahora el código no está acoplado a ningún proveedor específico, ni siquiera a Laravel. Dado que el paquete de contratos no contiene implementación ni dependencias, puede escribir fácilmente una implementación alternativa de cualquier contrato dado, lo que le permite reemplazar su implementación de caché sin modificar ninguno de los códigos que consumen caché.</p>\n<h3> Simplicidad</h3>\n<p>Cuando todos los servicios de Laravel están claramente definidos dentro de interfaces simples, es muy fácil determinar la funcionalidad ofrecida por un servicio dado. <strong>Los contratos sirven como documentación sucinta de las características del framework.</strong></p>\n<p>Además, cuando dependes de interfaces simples, tu código es más fácil de entender y mantener. En lugar de rastrear qué métodos están disponibles dentro de una clase grande y complicada, puedes hacer referencia a una interfaz sencilla y limpia.</p>\n<h2> Cómo usar contratos</h2>\n<p>Entonces, ¿Cómo se obtiene una implementación de un contrato? En realidad es bastante simple.</p>\n<p>Muchos tipos de clases en Laravel se resuelven a través del contenedor de servicio, incluyendo controladores, los escuchadores de eventos, middleware, trabajos de cola e incluso una Closure de ruta. Por lo tanto, para obtener una implementación de un contrato, puede simplemente \"declarar el tipo\" de la interfaz en el constructor de la clase que se está resolviendo.</p>\n<p>Por ejemplo, veamos este listener de eventos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Listeners;\nuse App\\User;\nuse App\\Events\\OrderWasPlaced;\nuse Illuminate\\Contracts\\Redis\\Factory;\nclass CacheOrderInformation\n{\n    /**\n    * The Redis factory implementation.\n    */\n    protected \\$redis;\n    /**\n    * Create a new event handler instance.\n    *\n    * @param  Factory  \\$redis\n    * @return void\n    */\n    public function __construct(Factory \\$redis)\n    {\n        \\$this-&gt;redis = \\$redis;\n    }\n    /**\n    * Handle the event.\n    *\n    * @param  OrderWasPlaced  \\$event\n    * @return void\n    */\n    public function handle(OrderWasPlaced \\$event)\n    {\n        //\n    }\n}\n</code></pre>\n<p>Cuando se resuelve el escuchador de evento, el contenedor de servicios leerá las declaraciones de tipo en el constructor de la clase e inyectará el valor apropiado. Para obtener más información sobre cómo registrar cosas en el contenedor de servicios, consulte su documentación.</p>\n<h2> Referencia de contratos</h2>\n<p>Esta tabla proporciona una referencia rápida a todos los contratos de Laravel y sus facades equivalentes:</p>\n<table style=\"border: 1px solid #CFD8DC\">\n    <thead>\n    <tr>\n        <th>Contrato</th>\n        <th>Referencias de la Facade</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>\n            Illuminate\\Contracts\\Auth\\Access\\Authorizable\n        </td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>\n            Illuminate\\Contracts\\Auth\\Access\\Gate\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Gate</span></td>\n    </tr>\n    <tr>\n        <td>\n            Illuminate\\Contracts\\Auth\\Authenticatable\n        </td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>\n            Illuminate\\Contracts\\Auth\\CanResetPassword\n        </td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>\n            Illuminate\\Contracts\\Auth\\Factory\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Auth</span></td>\n    </tr>\n    <tr>\n        <td>\n            Illuminate\\Contracts\\Auth\\Guard\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Auth::guard()</span></td>\n    </tr>\n    <tr>\n        <td>\n            Illuminate\\Contracts\\Auth\\PasswordBroker\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Password::broker()</span></td>\n    </tr>\n    <tr>\n        <td>\n            Illuminate\\Contracts\\Auth\\PasswordBrokerFactory\n        </td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Password</span></td>\n    </tr>\n    <tr>\n        <td>\n            Illuminate\\Contracts\\Auth\\StatefulGuard\n        </td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>\n            Illuminate\\Contracts\\Auth\\SupportsBasicAuth\n        </td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>\n            Illuminate\\Contracts\\Auth\\UserProvider\n        </td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Bus\\Dispatcher</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Bus</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Bus\\QueueingDispatcher</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Bus::dispatchToQueue()</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Broadcasting\\Factory</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Broadcast</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Broadcasting\\Broadcaster</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Broadcast::connection()</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Broadcasting\\ShouldBroadcastNow</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Cache\\Factory</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cache</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Cache\\Lock</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Cache\\LockProvider</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Cache\\Repository</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cache::driver()</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Cache\\Store</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Config\\Repository</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Config</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Console\\Application</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Console\\Kernel</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Artisan</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Container\\Container</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Cookie\\Factory</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cookie</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Cookie\\QueueingFactory</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cookie::queue()</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Database\\ModelIdentifier</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Debug\\ExceptionHandler</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Encryption\\Encrypter</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Crypt</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Events\\Dispatcher</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Event</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Filesystem\\Cloud</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Storage::cloud()</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Filesystem\\Factory</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Storage</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Filesystem\\Filesystem</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Storage::disk()</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Foundation\\Application</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Hashing\\Hasher</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Hash</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Http\\Kernel</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Mail\\MailQueue</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Mail::queue()</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Mail\\Mailable</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Mail\\Mailer</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Mail</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Notifications\\Dispatcher</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Notification</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Notifications\\Factory</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Notification</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Pagination\\LengthAwarePaginator</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Pagination\\Paginator</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Pipeline\\Hub</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Pipeline\\Pipeline</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Queue\\EntityResolver</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Queue\\Factory</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Queue</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Queue\\Job</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Queue\\Monitor</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Queue</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Queue\\Queue</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Queue::connection()</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Queue\\QueueableCollection</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Queue\\QueueableEntity</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Queue\\ShouldQueue</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Redis\\Factory</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Redis</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Routing\\BindingRegistrar</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Route</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Routing\\Registrar</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Route</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Routing\\ResponseFactory</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Response</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Routing\\UrlGenerator</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">URL</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Routing\\UrlRoutable</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Session\\Session</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Session::driver()</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Support\\Arrayable</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Support\\Htmlable</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Support\\Jsonable</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Support\\MessageBag</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Support\\MessageProvider</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Support\\Renderable</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Support\\Responsable</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Translation\\Loader</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Translation\\Translator</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Lang</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Validation\\Factory</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Validator</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Validation\\ImplicitRule</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Validation\\Rule</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Validation\\ValidatesWhenResolved</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\Validation\\Validator</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Validator::make()</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\View\\Engine</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\View\\Factory</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">View</span></td>\n    </tr>\n    <tr>\n        <td>Illuminate\\Contracts\\View\\View</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">View::make()</span></td>\n    </tr>\n    </tbody>\n</table>\n</div>"
      }
    ]
  },
  {
    "titulo": "3.- Conceptos Basicos",
    "subtitulo": "",
    "items": [
      {
        "titulo": "Rutas",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Rutas</h1>\n<ul>\n    <li>\n        Rutas básicas\n        <ul>\n            <li>Redireccionar rutas</li>\n            <li>Las rutas de vistas</li>\n        </ul>\n    </li>\n    <li>\n        Los parámetros de rutas\n        <ul>\n            <li>Los parámetros requeridos</li>\n            <li>Los parámetros opcionales</li>\n            <li>Las restricciones de expresiones regulares</li>\n        </ul>\n    </li>\n    <li>Las rutas nombradas</li>\n    <li>\n        Los grupos de ruta\n        <ul>\n            <li>Los middleware</li>\n            <li>Los espacios de nombres</li>\n            <li>Enrutamiento de subdominios</li>\n            <li>Los prefijos de ruta</li>\n            <li>Los prefijos por nombre de ruta</li>\n        </ul>\n    </li>\n    <li>\n        Enlazamiento de modelo de ruta (route model binding)\n        <ul>\n            <li>Enlazamiento implícito</li>\n            <li>Enlazamiento explícito</li>\n        </ul>\n    </li>\n    <li>Rutas Fallback</li>\n    <li>Límite de rango</li>\n    <li>La suplantación del método del formulario</li>\n    <li>Accediendo la ruta actual</li>\n</ul>\n<p></p>\n<h2>Rutas básicas</h2>\n<p>Las rutas de Laravel más básicas aceptan una URI y una <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span>,\n    proporcionando un método muy fácil y expresivo de definición de rutas:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('foo', function () {\n    return 'Hello World';\n});\n</code></pre>\n<h4>Los archivos de ruta predeterminados</h4>\n<p>Todas las rutas de Laravel están definidas en tus archivos de ruta, los cuales están localizados\n    en el directorio <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">routes</span>.\n    Estos archivos son cargados automáticamente por el framework. El archivo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">routes\\web.php</span>\n    define rutas que son para tu interface web. Estas rutas son asignadas al grupo de middleware\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">web</span>, el\n    cual proporciona características como estado de sesión y protección CSRF. Las rutas en <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">routes\\api.php</span>\n    son independientes de estado y son asignadas al grupo de middleware <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">api</span>.\n</p>\n<p>Para las principales aplicaciones, empezarás definiendo rutas en tu archivo <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">routes/web.php</span>.\n    Las rutas definidas en <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">routes/web.php</span>\n    pueden ser accedidas colocando la URL de la ruta definida en tu navegador. Por ejemplo, puede\n    acceder a la siguiente ruta al navegar a <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">http://your-app.dev/user</span>\n    en tu navegador:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('/user', 'UserController@index');\n</code></pre>\n<p>Las rutas definidas en el archivo <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">routes/api.php</span>\n    son agrupadas dentro de un grupo de ruta por el <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RouteServiceProvider</span>.Dentro\n    de este grupo, el prefijo de URI <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">/api</span>\n    es aplicado automáticamente de modo que no es necesario aplicarlo manualmente en todas las rutas\n    en el archivo. Puedes modificar el prefijo y otras opciones de grupos de ruta al modificar tu\n    clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RouteServiceProvider</span>.\n</p>\n<h4>Métodos disponibles del enrutador</h4>\n<p>El enrutador permite que registres rutas que responden a cualquier verbo HTTP:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get(\\$uri, \\$callback);\nRoute::post(\\$uri, \\$callback);\nRoute::put(\\$uri, \\$callback);\nRoute::patch(\\$uri, \\$callback);\nRoute::delete(\\$uri, \\$callback);\nRoute::options(\\$uri, \\$callback);\n</code></pre>\n<p>Algunas veces puede que necesites registrar una ruta que responda a verbos HTTP múltiples. Puedes\n    hacerlo usando el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">match</span>.\n    También, puedes incluso registrar una ruta que responda a todos los verbos HTTP usando el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">any</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::match(['get', 'post'], '/', function () {\n    //\n});\nRoute::any('/', function () {\n    //\n});\n</code></pre>\n<h4>Protección CSRF</h4>\n<p>\n    Cualquiera de los formularios HTML que apunten a rutas <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">POST</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">PUT</span>, or\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DELETE</span>\n    que sean definidas en el archivo de rutas <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">web</span>\n    deberían incluir un campo de token CSRF. De otra manera, la solicitud será rechazada. Puedes\n    leer más sobre protección CSRF en la\n    documentación de CSRF\n    :\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;form method=\"POST\" action=\"/profile\"&gt;\n    {{ csrf_field() }}\n    ...\n&lt;/form&gt;\n</code></pre>\n<p></p>\n<h3>Redireccionar rutas</h3>\n<p>Si estás definiendo una ruta que redirecciona a otra URI, puedes usar el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Route::redirect</span>.\n    Este método proporciona una forma abreviada conveniente de modo que no tengas que definir una\n    ruta completa o de controlador para ejecutar una redirección básica:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::redirect('/here', '/there');\n</code></pre>\n<p>Por defecto, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Route::redirect</span>\n    retorna un código de estado <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">302</span>.\n    Puedes personalizar el código de estado usando el tercer parámetro opcional:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::redirect('/here', '/there', 301);\n</code></pre>\n<p>Puedes usar el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Route::permanentRedirect</span>\n    para retornar un código de estado <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">301</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::permanentRedirect('/here', '/there');\n</code></pre>\n<p></p>\n<h3>Rutas de vista</h3>\n<p>Si tu ruta necesita solamente devolver una vista, puedes usar el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Route::view</span>.\n    Igual que el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redirect</span>,\n    este método proporciona una forma abreviada básica de modo que no tengas que definir una ruta\n    completa o de controlador. El método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">view</span>\n    acepta una URI como su primer argumento y un nombre de vista como su segundo argumento. Además,\n    puedes proporcionar una arreglo de datos para pasar a la vista como un tercer argumento\n    opcional:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::view('/welcome', 'welcome');\nRoute::view('/welcome', 'welcome', ['name' =&gt; 'Taylor']);\n</code></pre>\n<p></p>\n<h2>Parámetros de ruta</h2>\n<p></p>\n<h3>Parámetros requeridos</h3>\n<p>Con frecuencia necesitarás capturar segmentos de la URI dentro de tu ruta. Por ejemplo, puedes\n    necesitar capturar un ID de usuario de la URL. Puedes hacer eso al definir los parámetros de\n    ruta:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('user/{id}', function (\\$id) {\n    return 'User '.\\$id;\n});\n</code></pre>\n<p>Puedes definir tantos parámetros de ruta como requieras para tu ruta:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('posts/{post}/comments/{comment}', function (\\$postId, \\$commentId) {\n    //\n});\n</code></pre>\n<p>Los parámetros de ruta siempre son encerrados dentro de <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">{}</span>,\n    deberían consistir de caracteres alfabéticos y no pueden contener un caracter <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-</span>. En\n    lugar de usar el caracter <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-</span>, use\n    el guión bajo (<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">_</span>).\n    Los parámetros de ruta son inyectados dentro de las funciones de retorno de ruta / controlador\n    en base a su orden - los nombres de los argumentos de la función de retorno / controlador no\n    importan.</p>\n<p></p>\n<h3>Parámetros opcionales</h3>\n<p>Ocasionalmente puede que necesites especificar un parámetro de ruta, pero que aparezca como un\n    parámetro opcional de esa ruta. Puedes hacer eso al colocar un signo de interrogación <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">?</span>\n    después del nombre del parámetro. Asegúrate de dar un valor por defecto a la variable\n    correspondiente de la ruta.</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('user/{name?}', function (\\$name = null) {\n    return \\$name;\n});\nRoute::get('user/{name?}', function (\\$name = 'John') {\n    return \\$name;\n});\n</code></pre>\n<p></p>\n<h3>Restricciones con expresiones regulares</h3>\n<p>Puedes restringir el formato de tus parámetros de ruta usando el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where</span> en\n    una instancia de ruta. El método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where</span>\n    acepta el nombre del parámetro y una expresión regular que defina cómo el parámetro debería\n    estar conformado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('user/{name}', function (\\$name) {\n    //\n})-&gt;where('name', '[A-Za-z]+');\nRoute::get('user/{id}', function (\\$id) {\n    //\n})-&gt;where('id', '[0-9]+');\nRoute::get('user/{id}/{name}', function (\\$id, \\$name) {\n    //\n})-&gt;where(['id' =&gt; '[0-9]+', 'name' =&gt; '[a-z]+']);\n</code></pre>\n<p></p>\n<h4>Restricciones globales</h4>\n<p>Si prefieres que un parámetro de ruta siempre esté restringido por una expresión regular dada,\n    puedes usar el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pattern</span>.\n    Deberías definir estos patrones en el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span>\n    de tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RouteServiceProvider</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Definir los enlaces de modelo de tus rutas, patrones, filtros, etc.\n*\n* @return void\n*/\npublic function boot()\n{\n    Route::pattern('id', '[0-9]+');\n    parent::boot();\n}\n</code></pre>\n<p>Una vez que el patrón ha sido definido, es aplicado automáticamente a todas las rutas que usen\n    ese nombre de parámetro:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('user/{id}', function (\\$id) {\n    // Only executed if {id} is numeric...\n});\n</code></pre>\n<p></p>\n<h4>Slashes codificados</h4>\n<p>El componente de rutas de Laravel permite todos los caracteres excepto <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">/</span>. Debes\n    explícitamente permitir que <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">/</span> sea\n    parte de tu placeholder usando una expresión regular de la condición <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('search/{search}', function (\\$search) {\n    return \\$search;\n})-&gt;where('search', '.*');\n</code></pre>\n<p>Nota</p>\n<p>Los slashes codificados sólo están soportados dentro del último segmento de la ruta.</p>\n<p></p>\n<h2>Rutas nombradas</h2>\n<p>Las rutas nombradas permiten la generación de URLs o redirecciones para rutas específicas de una\n    forma conveniente. Puedes especificar un nombre para una ruta al encadenar el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">name</span>\n    en la definición de la ruta:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('user/profile', function () {\n    //\n})-&gt;name('profile');\n</code></pre>\n<p>También puedes especificar los nombes de ruta para acciones de controlador:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('user/profile', 'UserController@showProfile')-&gt;name('profile');\n</code></pre>\n<h4>Generación de URLs para las rutas nombradas</h4>\n<p>Una vez que has asignado un nombre a una ruta dada, puedes usar el nombre de la ruta cuando estás\n    generando URLs o redireccionas por medio de la función <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">route</span>\n    global:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>// Generating URLs...\n\\$url = route('profile');\n// Generando Redirecciones...\nreturn redirect()-&gt;route('profile');\n</code></pre>\n<p>Si la ruta nombrada posee parámetros, puedes pasar los parámetros como el segundo argumento de la\n    función <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">route</span>.\n    Los parámetros dados serán insertados automáticamente dentro de la URL en sus posiciones\n    correctas:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('user/{id}/profile', function (\\$id) {\n    //\n})-&gt;name('profile');\n\\$url = route('profile', ['id' =&gt; 1]);\n</code></pre>\n<h4>Inspeccionando la ruta actual</h4>\n<p>Si requieres determinar si la solicitud actual fue enrutada por una ruta nombrada dada, puedes\n    usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">named</span>\n    en una instancia de Ruta. Por ejemplo, puedes verficar el nombre de ruta actual desde el\n    middleware de una ruta.</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Manejar una solicitud entrante.\n*\n* @param  \\Illuminate\\Http\\Request  \\$request\n* @param  \\Closure  \\$next\n* @return mixed\n*/\npublic function handle(\\$request, Closure \\$next)\n{\n    if (\\$request-&gt;route()-&gt;named('profile')) {\n        //\n    }\n    return \\$next(\\$request);\n}\n</code></pre>\n<p></p>\n<h2>Los grupos de ruta</h2>\n<p>Los grupos de ruta permiten que tu compartas atributos de ruta, tales como los middleware o los\n    espacios de nombres, a través de un número grande de rutas sin necesidad de definir esos\n    atributos en cada ruta individual. Los atributos compartidos son especificados en un formato de\n    arreglo como el primer parámetro al método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Route::group</span>.\n</p>\n<p>Los grupos anidados intentan \"fusionar\" de forma inteligente los atributos al grupo de sus\n    padres. Los middleware y condiciones <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where</span>\n    son mezcladas (merged) mientras que los nombres, nombres de espacio y prefijos son agregados\n    (appended). Las delimitaciones de nombres de espacio y los slashes en los prefijos de URLs son\n    automáticamente agregados cuando es apropiado.</p>\n<p></p>\n<h3>Los middleware</h3>\n<p>Para asignar los middleware a todas las rutas dentro de un grupo, puedes usar el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">middleware</span>\n    antes de la definición del grupo. Los middleware son ejecutados en base al orden en el cual son\n    listados en el arreglo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::middleware(['first', 'second'])-&gt;group(function () {\n    Route::get('/', function () {\n        // Uses first &amp; second Middleware\n    });\n    Route::get('user/profile', function () {\n        // Uses first &amp; second Middleware\n    });\n});\n</code></pre>\n<p></p>\n<h3>Los espacios de nombres</h3>\n<p>Otro uso común para los grupos de ruta es la asignación del mismo espacio de nombre de PHP a un\n    grupo de controladores usando el métod <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">namespace</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::namespace('Admin')-&gt;group(function () {\n    // Controladores dentro del espacio de nombre \"App\\Http\\Controllers\\Admin\"\n});\n</code></pre>\n<p>Recuerda que por defecto, el <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RouteServiceProvider</span>\n    incluye tus archivos de ruta dentro de un grupo de espacio de nombre, permitiéndote que\n    registres rutas de controlador sin especificar el prefijo de espacio de nombre <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Http\\Controllers</span>\n    completo. Así, puedes necesitar especificar solamente la porción del espacio de nombre que viene\n    después del espacio de nombre <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Http\\Controllers</span>\n    base.</p>\n<p></p>\n<h3>El enrutamiento de subdominio</h3>\n<p>Los grupos de ruta también pueden ser usados para manejar enrutamiento de sub-dominio. Los\n    Sub-dominios pueden ser asignados a parámetros de ruta justamente como URIs de ruta,\n    permitiendote que captures una porción del sub-dominio para uso en tu ruta o controlador. El\n    sub-dominio puede ser especificado al ejecutar el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">domain</span>\n    antes de definir el grupo.</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::domain('{account}.myapp.com')-&gt;group(function () {\n    Route::get('user/{id}', function (\\$account, \\$id) {\n        //\n    });\n});\n</code></pre>\n<p>Nota</p>\n<p>Para asegurarte de que tus rutas de subdominios son accesibles, debes registrar rutas de\n    subdominios antes de registrar rutas de dominio principal. Esto evitará que las rutas\n    princripales sobrescriban rutas de subdominios que tienen la misma URI.</p>\n<p></p>\n<h3>Prefijos de rutas</h3>\n<p>El método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">prefix</span>\n    puede ser usado para poner un prefijo a cada ruta en el grupo con una URI dada. Por ejemplo,\n    puedes desear poner un prefijo a todas las URIs de ruta dentro del grupo con <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">admin</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::prefix('admin')-&gt;group(function () {\n    Route::get('users', function () {\n        // Coincide con la URL \"/admin/users\"\n    });\n});\n</code></pre>\n<p></p>\n<h3>Los prefijos de nombre de ruta</h3>\n<p>El método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">name</span> puede\n    ser usado para poner prefijo a cada nombre de ruta en el grupo con una cadena dada. Por ejemplo,\n    puedes desear poner prefijo a todos los nombres de ruta agrupados con <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">admin</span>.\n    La cadena dada es prefijada al nombre de ruta exactamente cómo es especificada, así que nos\n    aseguraremos de proporcionar el caracter de terminación <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.</span> en\n    el prefijo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::name('admin.')-&gt;group(function () {\n    Route::get('users', function () {\n        // Nombre asignado de ruta \"admin.users\"...\n    });\n});\n</code></pre>\n<p></p>\n<h2>Enlazamiento de modelo de ruta (route model binding)</h2>\n<p>Cuando estamos inyectando un ID de modelo a una ruta o acción de controlador, usualmente\n    consultarás para obtener el modelo que corresponde a esa ID. El enlazamiento de modelo de ruta\n    de Laravel proporciona una forma conveniente de inyectar directamente las instancias del modelo\n    en tus rutas. Por ejemplo, en lugar de inyectar un ID de usuario, puedes inyectar la instancia\n    del modelo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span>\n    completa que coincida con el ID dado.</p>\n<p></p>\n<h3>Enlazamiento implícito</h3>\n<p>Laravel resuelve automáticamente los modelos de Eloquent en rutas o acciones de controlador cuyos\n    nombres de variables declaradas coincidan con un nombre de segmento de ruta. Por ejemplo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('api/users/{user}', function (App\\User \\$user) {\n    return \\$user-&gt;email;\n});\n</code></pre>\n<p>Debido a que la variable <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$user</span>\n    está declarada como el modelo de Eloquent <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\User</span>\n    y el nombre de variable coincide con el segmento de URI <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">{user}</span>,\n    Laravel inyectará automáticamente la instancia del modelo que tenga un ID coincidiendo con el\n    valor correspondiente en la URI de la solicitud. Si una instancia del modelo que coincida no es\n    encontrada en la base de datos, una respuesta HTTP 400 será generada automáticamente.</p>\n<h4>Personalizando el nombre de clave</h4>\n<p>Si prefieres que el enlazamiento del modelo use una columna de base de datos distinta del <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">id</span> cuando\n    estás obteniendo una clase de modelo dada, puedes sobreescribir el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">getRouteKeyName</span>\n    en el módelo de Eloquent:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Obtener la clave de la ruta para el modelo.\n*\n* @return string\n*/\npublic function getRouteKeyName()\n{\n    return 'slug';\n}\n</code></pre>\n<p></p>\n<h3>Enlazamiento explícito</h3>\n<p>Para registrar un enlazamiento explícito, usa el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">model</span> del\n    enrutador para especificar la clase para un parámetro dado. Deberías definir tu enlazamiento del\n    modelo explícito en el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span>\n    de la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RouteServiceProvider</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>public function boot()\n{\n    parent::boot();\n    Route::model('user', App\\User::class);\n}\n</code></pre>\n<p>Seguido, define una ruta que contenga un parámetro <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">{user}</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('profile/{user}', function (App\\User \\$user) {\n    //\n});\n</code></pre>\n<p>Debido a que hemos enlazado todos los parámetros de <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">{user}</span> al\n    modelo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\User</span>,\n    una instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span>\n    será inyectada dentro de la ruta. Así, por ejemplo, una solicitud a <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">profile/1</span>\n    inyectará la instancia de la base de datos la cual tiene una ID de <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">1</span>.</p>\n<p>Si una instancia de modelo que coincida no es encontrada en la base de datos, una respuesta HTTP\n    404 será generada automáticamente.</p>\n<h4>Personalizando la lógica de resolución</h4>\n<p>Si deseas usar tu propia lógica de resolución, puedes usar el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Route::bind</span>.\n    La <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span>\n    que pases al método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">bind</span>\n    recibirá el valor del segmento de URI y debería devolver la instancia de la clase que debería\n    ser inyectada dentro de la ruta:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Bootstrap any application services.\n*\n* @return void\n*/\npublic function boot()\n{\n    parent::boot();\n    Route::bind('user', function (\\$value) {\n        return App\\User::where('name', \\$value)-&gt;first() ?? abort(404);\n    });\n}\n</code></pre>\n<p>Como alternativa, puedes sobreescribir el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resolveRouteBinding</span>\n    en tu modelo Eloquent. Este método recibirá el valor del segmento URI y debe devolver la\n    instancia de la clase que se debe inyectar en la ruta:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Retrieve the model for a bound value.\n*\n* @param  mixed  \\$value\n* @return \\Illuminate\\Database\\Eloquent\\Model|null\n*/\npublic function resolveRouteBinding(\\$value)\n{\n    return \\$this-&gt;where('name', \\$value)-&gt;first() ?? abort(404);\n}\n</code></pre>\n<p></p>\n<h2>Rutas fallback</h2>\n<p>Usando el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Route::fallback</span>,\n    puedes definir una ruta que será ejecutada cuando ninguna otra ruta coincida con la petición\n    entrante. Típicamente, las peticiones no gestionadas automáticamente mostrarán una página 404 a\n    través del manejador de excepciones de tu aplicación. Sin embargo, ya que puedes definir la ruta\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fallback</span>\n    dentro de tu archivo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">routes/web.php</span>,\n    todo middleware en el grupo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">web</span>\n    aplicará a la ruta. Eres libre de añadir middleware adicionales a esta ruta de ser necesario:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::fallback(function () {\n    //\n});\n</code></pre>\n<p>Nota</p>\n<p>La ruta alternativa siempre debe ser la última ruta registrada por tu aplicación.</p>\n<p></p>\n<h2>Límite de rango</h2>\n<p>Laravel incluye un middleware para limitar el rango de acceso a rutas dentro de tu aplicación.\n    Para empezar, asigna el middleware <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">throttle</span>\n    a una ruta o grupo de rutas. EL middleware <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">throttle</span>\n    acepta dos parámetros que determinan el máximo número de peticiones que pueden hacerse en un\n    número de minutos dado. Por ejemplo, específiquemos que un usuario autenticado puede acceder al\n    siguiente grupo de rutas sesenta veces por minuto:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::middleware('auth:api', 'throttle:60,1')-&gt;group(function () {\n    Route::get('/user', function () {\n        //\n    });\n});\n</code></pre>\n<h4>Limite de rango dinámico</h4>\n<p>Puedes especificar un máximo de peticiones dinámicas basado en un atribto del modelo <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span>\n    autenticado. Por ejemplo, si tu modelo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span>\n    contiene un atributo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">rate_limit</span>,\n    puedes pasar el nombre del atributo al middleware <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">throttle</span>\n    de modo que sea usado para calcular el conteo máximo de peticiones:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::middleware('auth:api', 'throttle:rate_limit,1')-&gt;group(function () {\n    Route::get('/user', function () {\n        //\n    });\n});\n</code></pre>\n<p></p>\n<h2>La suplantación de método del formulario</h2>\n<p>Los formularios HTML no soportan acciones <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">PUT</span>, <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">PATCH</span> o\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DELETE</span>.\n    Así que, cuando estés definiendo rutas <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">PUT</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">PATCH</span> o\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DELETE</span>\n    que son llamadas desde un formulario HTML, necesitarás agregar un campo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">_method</span>\n    oculto para el formulario. El valor enviado con el campo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">_method</span>\n    será usado como el método de solicitud HTTP:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;form action=\"/foo/bar\" method=\"POST\"&gt;\n    &lt;input type=\"hidden\" name=\"_method\" value=\"PUT\"&gt;\n    &lt;input type=\"hidden\" name=\"_token\" value=\"{{ csrf_token() }}\"&gt;\n&lt;/form&gt;\n</code></pre>\n<p>Puedes usar la directiva Blade <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@method</span>\n    para generar la entrada <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">_method</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;form action=\"/foo/bar\" method=\"POST\"&gt;\n    @method('PUT')\n    @csrf\n&lt;/form&gt;\n</code></pre>\n<p></p>\n<h2>Accesando la ruta actual</h2>\n<p>Puedes usar los métodos <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">current</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">currentRouteName</span>,\n    y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">currentRouteAction</span>\n    en la clase facade <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Route</span>\n    para accesar la información sobre el manejador de ruta de la solicitud entrante:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$route = Route::current();\n\\$name = Route::currentRouteName();\n\\$action = Route::currentRouteAction();\n</code></pre>\n<p>\n    Consulta la documentación de la API sobre la\n    clase subyacente de la clase facade <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Route</span>\n    y la\n    instancia de ruta\n    para revisar todos los métodos disponibles.\n</p>\n</div>"
      },
      {
        "titulo": "Middleware",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Middleware</h1>\n<ul>\n    <li>Introducción</li>\n    <li>Definiendo un Middleware</li>\n    <li>\n        Registrando un Middleware\n        <ul>\n            <li>Middleware Globales</li>\n            <li>Asignando un Middleware a una Ruta</li>\n            <li>Middleware Grupales</li>\n            <li>Clasificación de Middleware</li>\n        </ul>\n    </li>\n    <li>Parámetros en los Middleware</li>\n    <li>Middleware Terminable</li>\n</ul>\n<p></p>\n<h2>Introducción</h2>\n<p>Los Middleware proporcionan un mecanismo conveniente para filtrar consultas HTTP en toda tu\n    aplicación. Por ejemplo, Laravel incluye un middleware que verifica si el usuario de tu\n    aplicación está autenticado. Si el usuario no está autenticado, el middleware redireccionará al\n    usuario a la pantalla de inicio de sesión. Sin embargo, si el usuario es autenticado, el\n    middleware permitirá que la consulta proceda dentro de la aplicación.</p>\n<p>Middleware adicionales pueden ser escritos para realizar una variedad de tareas además de\n    autenticar. Un núcleo de un middleware podría ser responsable de agregar los encabezados\n    apropiados para todas las respuestas que va dejando tu aplicación. Un middleware de registro\n    podría registrar todas las consultas entrantes en tu aplicación.</p>\n<p>Hay varios middleware incluidos en el framework Laravel, incluyendo middleware para autenticación\n    y protección CSRF. Todos esos middleware están localizados en el directorio <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Http/Middleware</span>.\n</p>\n<p></p>\n<h2>Definiendo un Middleware</h2>\n<p>Para crear un nuevo middleware, usa el comando de Artisan: <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:middleware</span>\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan make:middleware CheckAge\n</code></pre>\n<p>Este comando ubicará una nueva clase <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">CheckAge</span>\n    dentro de tu directorio <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Http/Middleware</span>.\n    En este middleware, nosotros solo permitiremos el acceso a la ruta si la <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">edad</span>\n    suministrada es mayor que 200. De otra forma, redireccionaremos a los usuarios de vuelta a la\n    URL <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">home</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Middleware;\nuse Closure;\nclass CheckAge\n{\n    /**\n    * Handle an incoming request.\n    *\n    * @param  \\Illuminate\\Http\\Request  \\$request\n    * @param  \\Closure  \\$next\n    * @return mixed\n    */\n    public function handle(\\$request, Closure \\$next)\n    {\n        if (\\$request-&gt;age &lt;= 200) {\n            return redirect('home');\n        }\n        return \\$next(\\$request);\n    }\n}\n</code></pre>\n<p>Como puedes ver, si la <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">edad</span> dada\n    es menor o igual a <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">200</span>,\n    el middleware retornará una redirección HTTP al cliente; de otra forma, la solicitud pasará más\n    adentro de la aplicación. Para pasar la solicitud más profundo dentro de la aplicación\n    (permitiendo al middleware \"pasar\") llama al callback <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$next</span>\n    con el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$request</span>.\n</p>\n<p>Es mejor visualizar el middleware como una serie de \"capas\" que deben pasar las solicitudes HTTP\n    antes de que lleguen a tu aplicación. Cada capa puede examinar la solicitud e incluso rechazarla\n    por completo.</p>\n<p>TIP</p>\n<p>\n    Todos los middleware son resueltos a través del\n    contenedor de servicio\n    , de esta forma, puedes declarar el tipo de cualquier dependencia que necesites dentro del\n    constructor del middleware.\n</p>\n<h3>Middleware Before y After</h3>\n<p>Que un middleware se ejecute antes o después de una solicitud depende del middleware en sí mismo.\n    Por ejemplo, el siguiente middleware podría realizar alguna tarea <strong>antes</strong> que la\n    solicitud sea manejada por la aplicación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Middleware;\nuse Closure;\nclass BeforeMiddleware\n{\n    public function handle(\\$request, Closure \\$next)\n    {\n        // Perform action\n        return \\$next(\\$request);\n    }\n}\n</code></pre>\n<p>Sin embargo, este middleware podría realizar esta tarea <strong>despúes</strong> de que la\n    solicitud sea manejada por la aplicación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Middleware;\nuse Closure;\nclass AfterMiddleware\n{\n    public function handle(\\$request, Closure \\$next)\n    {\n        \\$response = \\$next(\\$request);\n        // Perform action\n        return \\$response;\n    }\n}\n</code></pre>\n<p></p>\n<h2>Registrando un Middleware</h2>\n<p></p>\n<h3>Middleware Globales</h3>\n<p>Si tu quieres que un middleware corra durante cada solicitud HTTP a tu aplicación, lista la clase\n    del middleware en la propiedad <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$middleware</span>\n    de tu clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Http/Kernel.php</span>.\n</p>\n<p></p>\n<h3>Asignando un Middleware a las Rutas</h3>\n<p>Si te gustaría asignar un middleware a rutas específicas, deberías primero asignar una clave al\n    middleware en tu archivo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Http/Kernel.php</span>.\n    Por defecto, la propiedad<span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$routeMiddleware</span>\n    de esta clase contiene entradas para los middleware incluidos con Laravel. Para agregar uno\n    propio, adjúntalo a esta lista y asígnale una clave de tu elección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>// Within App\\Http\\Kernel Class...\nprotected \\$routeMiddleware = [\n    'auth' =&gt; \\App\\Http\\Middleware\\Authenticate::class,\n    'auth.basic' =&gt; \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n    'bindings' =&gt; \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n    'cache.headers' =&gt; \\Illuminate\\Http\\Middleware\\SetCacheHeaders::class,\n    'can' =&gt; \\Illuminate\\Auth\\Middleware\\Authorize::class,\n    'guest' =&gt; \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n    'signed' =&gt; \\Illuminate\\Routing\\Middleware\\ValidateSignature::class,\n    'throttle' =&gt; \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n    'verified' =&gt; \\Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified::class,\n];\n</code></pre>\n<p>Una vez el middleware ha sido definido en el núcleo HTTP, puedes usar el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">middleware</span>\n    para asignar un middleware a una ruta:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('admin/profile', function () {\n    //\n})-&gt;middleware('auth');\n</code></pre>\n<p>Puedes además asignar multiples middleware a la ruta:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('/', function () {\n    //\n})-&gt;middleware('first', 'second');\n</code></pre>\n<p>Cuando asignas middleware, puedes además pasar un nombre de clase plenamente calificado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use App\\Http\\Middleware\\CheckAge;\nRoute::get('admin/profile', function () {\n    //\n})-&gt;middleware(CheckAge::class);\n</code></pre>\n<p></p>\n<h3>Grupos de Middleware</h3>\n<p>Algunas veces puedes querer agrupar varios middleware bajo una sola clave para hacerlos más\n    fáciles de asignar a las rutas. Puedes hacer esto usando la propiedad <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$middlewareGroups</span>\n    de tu kernel HTTP.</p>\n<p>Por defecto, Laravel viene con los grupos de middleware <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">web</span> y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">api</span> que\n    contienen middleware comunes que puedes aplicar a la UI de tu web y a las rutas de tu API:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* The application's route middleware groups.\n*\n* @var array\n*/\nprotected \\$middlewareGroups = [\n    'web' =&gt; [\n        \\App\\Http\\Middleware\\EncryptCookies::class,\n        \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n        \\Illuminate\\Session\\Middleware\\StartSession::class,\n        \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n        \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n    ],\n    'api' =&gt; [\n        'throttle:60,1',\n        'auth:api',\n    ],\n];\n</code></pre>\n<p>Los grupos de Middleware pueden ser asignados a las rutas y las acciones de los controladores\n    usando la misma sintaxis como los middleware individuales. De nuevo, los grupos de middleware\n    hacen más conveniente asignar muchos middleware a una ruta a la vez:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('/', function () {\n    //\n})-&gt;middleware('web');\nRoute::group(['middleware' =&gt; ['web']], function () {\n    //\n});\n</code></pre>\n<p>TIP</p>\n<p>Por defecto, el grupo de middleware <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">web</span> es\n    automaticamente aplicado a tu archivo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">routes/web.php</span>\n    por el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RouteServiceProvider</span>.\n</p>\n<p></p>\n<h3>Clasificación de Middleware</h3>\n<p>Raramente, necesitarás que tu middleware se ejecute en un orden específico pero no tienes control\n    sobre su orden cuando son asignados a una ruta. En este caso, puedes especificar la prioridad de\n    tu middleware usando la propiedad <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$middlewarePriority</span>\n    de tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Http/Kernel.php</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* The priority-sorted list of middleware.\n*\n* This forces non-global middleware to always be in the given order.\n*\n* @var array\n*/\nprotected \\$middlewarePriority = [\n    \\Illuminate\\Session\\Middleware\\StartSession::class,\n    \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n    \\App\\Http\\Middleware\\Authenticate::class,\n    \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n    \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n    \\Illuminate\\Auth\\Middleware\\Authorize::class,\n];\n</code></pre>\n<p></p>\n<h2>Parámetros en los middleware</h2>\n<p>Los middleware pueden además recibir parámetros adicionales. Por ejemplo, si tu aplicación\n    necesita verificar que el usuario autenticado tiene un \"rol\" dado antes de ejecutar una acción\n    dada, podrías crear un middleware <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">CheckRole</span>\n    que reciba un nombre de rol como un argumento adicional.</p>\n<p>Los parámetros adicionales en el middleware serán pasados al middleware después del argumento\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$next</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Middleware;\nuse Closure;\nclass CheckRole\n{\n    /**\n    * Handle the incoming request.\n    *\n    * @param  \\Illuminate\\Http\\Request  \\$request\n    * @param  \\Closure  \\$next\n    * @param  string  \\$role\n    * @return mixed\n    */\n    public function handle(\\$request, Closure \\$next, \\$role)\n    {\n        if (! \\$request-&gt;user()-&gt;hasRole(\\$role)) {\n            // Redirect...\n        }\n        return \\$next(\\$request);\n    }\n}\n</code></pre>\n<p>Los parámetros en los middleware pueden ser especificados al definir la ruta separando el nombre\n    del middleware y los parámetros con <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">:</span>.\n    Múltiples parámetros deben ser delimitados por comas:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::put('post/{id}', function (\\$id) {\n    //\n})-&gt;middleware('role:editor');\n</code></pre>\n<p></p>\n<h2>Middleware terminable</h2>\n<p>Algunas veces un middleware puede necesitar hacer algún trabajo después de que la respuesta HTTP\n    ha sido preparada. Por ejemplo, el middleware \"session\" incluído con Laravel escribe los datos\n    de la sesión para almacenarlos después de que la respuesta ha sido totalmente preparada. Si\n    defines un método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">terminate</span>\n    en tu middleware, este automáticamente será llamado despúes de que la respuesta esté lista para\n    ser enviada al navegador.</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace Illuminate\\Session\\Middleware;\nuse Closure;\nclass StartSession\n{\n    public function handle(\\$request, Closure \\$next)\n    {\n        return \\$next(\\$request);\n    }\n    public function terminate(\\$request, \\$response)\n    {\n        // Store the session data...\n    }\n}\n</code></pre>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">terminate</span>\n    debería recibir tanto la consulta como la respuesta. Una vez has definido el middleware\n    terminable, deberías agregarlo a la lista de rutas o como un middleware global en el archivo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Http/Kernel.php</span>.\n</p>\n<p>Cuando llamas al método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">terminate</span>\n    en tu middleware, Laravel resolverá una instancia fresca del middleware del contenedor de\n    servicio. Si deseas utilizar la misma instancia del middleware cuando los métodos <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">handle</span>\n    y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">terminate</span>\n    sean llamados, registra el middleware con el contenedor usando el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">singleton</span>\n    del contenedor.</p>\n    </div>"
      },
      {
        "titulo": "Protección CSRF",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Protección CSRF</h1>\n<ul>\n    <li>Introducción</li>\n    <li>Excluyendo URIs</li>\n    <li>X-CSRF-Token</li>\n    <li>X-XSRF-Token</li>\n</ul>\n<p></p>\n<h2>Introducción</h2>\n<p>\n    Laravel hace que sea fácil proteger tu aplicación de ataques de tipo\n    cross-site request forgery\n    <outboundlink></outboundlink>\n    (CSRF). Los ataques de tipo CSRF son un tipo de explotación de vulnerabilidad malicioso por el\n    cual comandos no autorizados son ejecutados en nombre de un usuario autenticado.\n</p>\n<p>Laravel genera automáticamente un \"token\" CSRF para cada sesión de usuario activa manejada por la\n    aplicación. Este token es usado para verificar que el usuario autenticado es quien en realidad\n    está haciendo la petición a la aplicación.</p>\n<p>En cualquier momento que definas un formulario HTML en tu aplicación, debes incluir un campo de\n    token CSRF en el formulario con el propósito de que el middleware para protección CSRF pueda\n    validar la solicitud. Puedes usar la directiva de Blade <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@csrf</span>\n    para generar el campo de token:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;form method=\"POST\" action=\"/profile\"&gt;\n    @csrf\n    ...\n&lt;/form&gt;\n</code></pre>\n<p>\n    El\n    middleware\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">VerifyCsrfToken</span>,\n    el cual es incluido en el grupo de middleware <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">web</span>,\n    verificará automáticamente que el token en el campo de la solicitud coincida con el almacenado\n    en la sesión.\n</p>\n<h4>Tokens CSRF &amp; JavaScript</h4>\n<p>Cuando se crean aplicaciones controladas por JavaScript, es conveniente hacer que tu biblioteca\n    HTTP de JavaScript agregue el token CSRF a cada petición saliente. Por defecto, el archivo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/js/bootstrap.js</span>\n    registra el valor de la meta etiqueta <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">csrf-token</span>\n    con la biblioteca HTTP Axios. Si no estás usando esta biblioteca, necesitarás configurar este\n    comportamiento de forma manual para tu aplicación.</p>\n<p></p>\n<h2>Excluyendo las URIs de la protección CSRF</h2>\n<p>\n    Algunas veces puedes desear excluir un conjunto de URIs de la protección CSRF. Por ejemplo, si\n    estás usando\n    Stripe\n    <outboundlink></outboundlink>\n    para procesar pagos y estás utilizando su sistema webhook, necesitarás excluir tu ruta de\n    manejador webhook de Stripe de la protección CSRF ya que Stripe no sabrá que token CSRF enviar a\n    sus rutas.\n</p>\n<p>Típicamente, deberías colocar este tipo de rutas afuera del grupo de middleware <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">web</span> que el\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RouteServiceProvider</span>\n    aplica a todas las rutas en el archivo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">routes/web.php</span>.\n    Sin embargo, también puedes excluir las rutas al añadir sus URIs a la propiedad <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">except</span>\n    del middleware <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">VerifyCsrfToken</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Middleware;\nuse Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken as Middleware;\nclass VerifyCsrfToken extends Middleware\n{\n    /**\n    * The URIs that should be excluded from CSRF verification.\n    *\n    * @var array\n    */\n    protected \\$except = [\n        'stripe/*',\n        'http://example.com/foo/bar',\n        'http://example.com/foo/*',\n    ];\n}\n</code></pre>\n<p>TIP</p>\n<p>\n    El middleware CSRF está deshabilitado automáticamente al\n    ejecutar pruebas\n    .\n</p>\n<p></p>\n<h2>X-CSRF-TOKEN</h2>\n<p>Además de comprobar el token CSRF como parámetro POST, el middleware <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">VerifyCsrfToken</span>\n    también comprobará el encabezado de solicitud <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">X-CSRF-TOKEN</span>.\n    Podrías, por ejemplo, almacenar el token en una etiqueta <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">meta</span>\n    de HTML:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;meta name=\"csrf-token\" content=\"{{ csrf_token() }}\"&gt;\n</code></pre>\n<p>Entonces, una vez que has creado la etiqueta <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">meta</span>,\n    puedes instruir una biblioteca como jQuery para añadir automáticamente el token a todos los\n    encabezados de las peticiones. Esto proporciona protección CSRF fácil y conveniente para tus\n    aplicaciones basadas en AJAX.</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$.ajaxSetup({\n    headers: {\n        'X-CSRF-TOKEN': \\$('meta[name=\"csrf-token\"]').attr('content')\n    }\n});\n</code></pre>\n<p>TIP</p>\n<p>Por defecto, el archivo <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/js/bootstrap.js</span>\n    registra el valor de la etiqueta meta <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">csrf-token</span>\n    con la biblioteca HTTP Axios. Si no estás usando esta biblioteca, necesitarás configurar este\n    comportamiento de forma manual para tu aplicación.</p>\n<p></p>\n<h2>X-XSRF-TOKEN</h2>\n<p>Laravel almacena el token CSRF actual en una cookie <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">XSRF-TOKEN</span>\n    que es incluida con cada respuesta generada por el framework. Puedes usar el valor del cookie\n    para establecer el encabezado de la solicitud <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">X-XSRF-TOKEN</span>.\n</p>\n<p>Esta cookie primeramente es enviada por conveniencia ya que algunos frameworks JavaScript y\n    librerías, como Angular y Axios colocan automáticamente su valor en el encabezado <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">X-XSRF-TOKEN</span>.\n</p>\n</div>"
      },
      {
        "titulo": "Controladores",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Controladores</h1>\n<ul>\n    <li>Introducción</li>\n    <li>\n        Controladores básicos\n        <ul>\n            <li>Definiendo controladores</li>\n            <li>Controladores y espacios de nombres</li>\n            <li>Controladores de acción única</li>\n        </ul>\n    </li>\n    <li>Middleware de controlador</li>\n    <li>\n        Controladores de recursos\n        <ul>\n            <li>Rutas de recursos parciales</li>\n            <li>Nombrando rutas de recursos</li>\n            <li>Nombrando parámetros de rutas de recursos</li>\n            <li>Configuración regional para URIs de recursos</li>\n            <li>Complementando controladores de recursos</li>\n        </ul>\n    </li>\n    <li>Inyección de dependencias y controladores</li>\n    <li>Caché de rutas</li>\n</ul>\n<p></p>\n<h2>Introducción</h2>\n<p>En lugar de definir toda la lógica de manejo de solicitud como Closure en archivos de ruta,\n    puedes desear organizar este comportamiento usando clases Controller. Los controladores pueden\n    agrupar la lógica de manejo de solicitud relacionada dentro de una sola clase. Los controladores\n    son almacenados en el directorio <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Http/Controllers</span>.\n</p>\n<p></p>\n<h2>Controladores básicos</h2>\n<p></p>\n<h3>Definiendo controladores</h3>\n<p>A continuación se muestra un ejemplo de una clase de controlador básica. Nota que el controlador\n    extiende la clase de controlador base incluida con Laravel. La clase base proporciona unos\n    cuantos métodos de conveniencia tal como el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">middleware</span>,\n    el cual puede ser usado para conectar un middleware a acciones de controlador:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse App\\User;\nuse App\\Http\\Controllers\\Controller;\nclass UserController extends Controller\n{\n    /**\n    * Show the profile for the given user.\n    *\n    * @param  int  \\$id\n    * @return View\n    */\n    public function show(\\$id)\n    {\n        return view('user.profile', ['user' =&gt; User::findOrFail(\\$id)]);\n    }\n}\n</code></pre>\n<p>Puedes definir una ruta a esta acción de controlador de esta forma:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('user/{id}', 'UserController@show');\n</code></pre>\n<p>Ahora, cuando una solicitud coincide con la URI de la ruta especificada, se ejecutará el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">show</span> de\n    la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">UserController</span>.\n    Los parámetros de ruta también se pasarán al método.</p>\n<p>TIP</p>\n<p>Los controladores no están <strong>obligados</strong> a extender de la clase base. Sin embargo,\n    no tendrás acceso a características de conveniencia tales como los métodos <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">middleware</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">validate</span>,\n    y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dispatch</span>.\n</p>\n<p></p>\n<h3>Controladores y espacios de nombres</h3>\n<p>Es muy importante notar que no necesitamos especificar el espacio de nombre completo del\n    controlador al momento de definir la ruta del controlador. Debido a que el <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RouteServiceProvider</span>\n    carga sus archivos de ruta dentro de un grupo de ruta que contiene el espacio de nombre,\n    solamente necesitaremos la porción del nombre de la clase que viene después de la porción <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Http\\Controllers</span>\n    del espacio de nombre.</p>\n<p>Si eliges anidar tus controladores dentro del directorio <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Http\\Controllers</span>,\n    usa el nombre de clase específico relativo al espacio de nombre raíz <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Http\\Controllers</span>.\n    Así, si tu clase de controlador completa es <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Http\\Controllers\\Photos\\AdminController</span>,\n    deberías registrar rutas al controlador de esta forma:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('foo', 'Photos\\AdminController@method');\n</code></pre>\n<p></p>\n<h3>Controladores de acción única</h3>\n<p>Si prefieres definir un controlador que maneja solamente una acción única, debes colocar un único\n    método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">__invoke</span>\n    en el controlador:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse App\\User;\nuse App\\Http\\Controllers\\Controller;\nclass ShowProfile extends Controller\n{\n    /**\n    * Show the profile for the given user.\n    *\n    * @param  int  \\$id\n    * @return View\n    */\n    public function __invoke(\\$id)\n    {\n        return view('user.profile', ['user' =&gt; User::findOrFail(\\$id)]);\n    }\n}\n</code></pre>\n<p>Al momento de registrar rutas para controladores de acción única, no necesitarás especificar un\n    método:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('user/{id}', 'ShowProfile');\n</code></pre>\n<p>Puedes generar un controlador invocable usando la opción <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--invokable</span>\n    del comando Artisan <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:controller</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan make:controller ShowProfile --invokable\n</code></pre>\n<p></p>\n<h2>Middleware de controlador</h2>\n<p>Los Middleware pueden ser asignados a las rutas del controlador en tus archivos de ruta:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('profile', 'UserController@show')-&gt;middleware('auth');\n</code></pre>\n<p>Sin embargo, es más conveniente especificar los middleware dentro del constructor de tu\n    controlador. Usando el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">middleware</span>\n    del constructor de tu controlador, puedes asignar fácilmente los middleware a la acción del\n    controlador. Incluso puedes restringir los middleware a sólo ciertos métodos en la clase del\n    controlador:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>class UserController extends Controller\n{\n    /**\n    * Instantiate a new controller instance.\n    *\n    * @return void\n    */\n    public function __construct()\n    {\n        \\$this-&gt;middleware('auth');\n        \\$this-&gt;middleware('log')-&gt;only('index');\n        \\$this-&gt;middleware('subscribed')-&gt;except('store');\n    }\n}\n</code></pre>\n<p>También los controladores permiten que registres los middleware usando una Closure. Esto\n    proporciona una forma conveniente de definir un middleware para un solo controlador sin definir\n    una clase middleware completa:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$this-&gt;middleware(function (\\$request, \\$next) {\n    // ...\n    return \\$next(\\$request);\n});\n</code></pre>\n<p>TIP</p>\n<p>Puedes asignar los middleware a un subconjunto de acciones de controlador, esto puede indicar que\n    tu controlador está creciendo demasiado. En lugar de esto, considera dividir tu controlador en\n    varios controladores más pequeños.</p>\n<p></p>\n<h2>Controladores de recursos</h2>\n<p>El enrutamiento de recurso de Laravel asigna las rutas típicas \"CRUD\" a un controlador con una\n    sola línea de código. Por ejemplo, puedes desear crear un controlador que maneje todas las\n    solicitudes HTTP para \"photos\" almacenadas por tu aplicación. Usando el comando Artisan <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:controller</span>,\n    podemos crear fácilmente tal controlador:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan make:controller PhotoController --resource\n</code></pre>\n<p>Este comando creará un controlador en <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Http/Controllers/PhotoController.php</span>.\n    El controlador contendrá un método para cada una de las operaciones de recursos disponibles.</p>\n<p>Seguidamente, puedes registrar una ruta de recurso genérica al controlador:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::resource('photos', 'PhotoController');\n</code></pre>\n<p>Esta declaración de ruta única crea varias rutas para manejar una variedad de acciones del\n    recurso. El controlador generado ya tendrá los métodos separados para cada una de las acciones,\n    incluyendo comentarios que te informan de los verbos HTTP y URIs que manejan.</p>\n<p>Puedes registrar muchos controladores de recursos a la vez pasando un arreglo al método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::resources([\n    'photos' =&gt; 'PhotoController',\n    'posts' =&gt; 'PostController'\n]);\n</code></pre>\n<h4>Acciones manejadas por el controlador de recursos</h4>\n<table>\n    <thead>\n    <tr>\n        <th>Tipo</th>\n        <th>URI</th>\n        <th>Acción</th>\n        <th>Nombre de la Ruta</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>GET</td>\n        <td><span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">/photos</span>\n        </td>\n        <td>índice</td>\n        <td>photos.index</td>\n    </tr>\n    <tr>\n        <td>GET</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">/photos/create</span>\n        </td>\n        <td>crear</td>\n        <td>photos.create</td>\n    </tr>\n    <tr>\n        <td>POST</td>\n        <td><span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">/photos</span>\n        </td>\n        <td>guardar</td>\n        <td>photos.store</td>\n    </tr>\n    <tr>\n        <td>GET</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">/photos/{photo}</span>\n        </td>\n        <td>mostrar</td>\n        <td>photos.show</td>\n    </tr>\n    <tr>\n        <td>GET</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">/photos/{photo}/edit</span>\n        </td>\n        <td>editar</td>\n        <td>photos.edit</td>\n    </tr>\n    <tr>\n        <td>PUT/PATCH</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">/photos/{photo}</span>\n        </td>\n        <td>actualizar</td>\n        <td>photos.update</td>\n    </tr>\n    <tr>\n        <td>DELETE</td>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">/photos/{photo}</span>\n        </td>\n        <td>eliminar</td>\n        <td>photos.destroy</td>\n    </tr>\n    </tbody>\n</table>\n<h4>Especificando el modelo del recurso</h4>\n<p>Si estás usando el enlace de modelo de ruta (route model binding) y deseas que los métodos del\n    controlador de recursos declaren el tipo de una instancia de modelo, puedes usar la opción <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--model</span>\n    al momento de generar el controlador:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan make:controller PhotoController --resource --model=Photo\n</code></pre>\n<h4>Suplantar los métodos de formulario</h4>\n<p>Debido a que los formularios no pueden hacer solicitudes <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">PUT</span>, <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">PATCH</span>, o\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DELETE</span>,\n    necesitarás agregar un campo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">_method</span>\n    oculto para suplantar estos verbos HTTP. La directiva de Blade <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@method</span>\n    puede crear este campo para ti:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;form action=\"/foo/bar\" method=\"POST\"&gt;\n    @method('PUT')\n&lt;/form&gt;\n</code></pre>\n<p></p>\n<h3>Rutas de recursos parciales</h3>\n<p>Al momento de declarar una ruta de recurso, puedes especificar un subconjunto de acciones que el\n    controlador debería manejar en lugar de conjunto completo de acciones por defecto.</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::resource('photos', 'PhotoController')-&gt;only([\n    'index', 'show'\n]);\nRoute::resource('photos', 'PhotoController')-&gt;except([\n    'create', 'store', 'update', 'destroy'\n]);\n</code></pre>\n<h4>Rutas de recursos para APIs</h4>\n<p>Al momento de declarar rutas de recursos que serán consumidas por APIs, normalmente te gustará\n    excluir rutas que presentan plantillas HTML tales como <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span>\n    y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">edit</span>.\n    Por conveniencia, puedes usar el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">apiResource</span>\n    para excluir automáticamente éstas dos rutas:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::apiResource('photos', 'PhotoController');\n</code></pre>\n<p>Puedes registrar muchos controladores de recursos de API de una sola vez pasando un arreglo al\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">apiResources</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::apiResources([\n    'photos' =&gt; 'PhotoController',\n    'posts' =&gt; 'PostController'\n]);\n</code></pre>\n<p>Para generar rápidamente un controlador de recursos API que no incluya los métodos <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span> o\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">edit</span>,\n    usa la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--api</span>\n    cuando ejecutas el comando <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:controller</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan make:controller API/PhotoController --api\n</code></pre>\n<p></p>\n<h3>Nombrando rutas de recursos</h3>\n<p>De forma predeterminada, todas las acciones de controlador de recursos tienen un nombre de ruta;\n    sin embargo, puedes sobrescribir esos nombres al pasar un arreglo de nombres con tus\n    opciones:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::resource('photos', 'PhotoController')-&gt;names([\n    'create' =&gt; 'photos.build'\n]);\n</code></pre>\n<p></p>\n<h3>Nombrando parámetros de rutas de recursos</h3>\n<p>De forma predeterminada, <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Route::resource</span>\n    creará los parámetros de ruta para tus rutas de recursos basado en la versión \"singularizada\"\n    del nombre de recurso. Puedes sobrescribir fácilmente esto para cada recurso usando el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">parameters</span>.\n    El arreglo pasado al método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">parameters</span>\n    debería ser un arreglo asociativo de nombres de recursos y nombres de parámetros:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::resource('users', 'AdminUserController')-&gt;parameters([\n    'users' =&gt; 'admin_user'\n]);\n</code></pre>\n<p>El ejemplo anterior genera las URIs siguientes para la ruta <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">show</span> del\n    recurso:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/users/{admin_user}\n</code></pre>\n<p></p>\n<h3>Configuración regional para URIs de recursos</h3>\n<p>De forma predeterminada, <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Route::resource</span>\n    creará URIs de recursos usando verbos en Inglés. Si necesitas configurar los verbos de acción\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span> y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">edit</span> a\n    un idioma, puedes usar el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Route::resourceVerbs</span>.\n    Esto puede ser hecho en el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span>\n    de tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AppServiceProvider</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Route;\n/**\n* Bootstrap any application services.\n*\n* @return void\n*/\npublic function boot()\n{\n    Route::resourceVerbs([\n        'create' =&gt; 'crear',\n        'edit' =&gt; 'editar',\n    ]);\n}\n</code></pre>\n<p>Una vez que los verbos han sido personalizados, un registro de ruta de recurso tal como <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Route::resource('fotos', 'PhotoController')</span>\n    producirá las siguientes URIs:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/fotos/crear\n/fotos/{foto}/editar\n</code></pre>\n<p></p>\n<h3>Complementando controladores de recursos</h3>\n<p>Si necesitas agregar rutas adicionales para un controlador de recursos más allá del conjunto\n    predeterminado de rutas de recursos, deberías definir esas rutas antes de que ejecutes <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Route::resource</span>;\n    de otra forma, las rutas definidas por el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resource</span>\n    pueden tomar precedencia involuntariamente sobre tus rutas complementarias:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('photos/popular', 'PhotoController@method');\nRoute::resource('photos', 'PhotoController');\n</code></pre>\n<p>TIP</p>\n<p>Recuerda mantener la lógica de tus controladores enfocada. Si te encuentras a ti mismo\n    necesitando rutinariamente métodos fuera del conjunto típico de acciones de recurso, considera\n    dividir tu controlador en dos controladores más pequeños.</p>\n<p></p>\n<h2>Inyección de dependencias y controladores</h2>\n<h4>Inyección al constructor</h4>\n<p>El contenedor de servicio de Laravel es usado para resolver todos los controladores de Laravel.\n    Como resultado, estás habilitado para declarar el tipo de cualquier dependencia que tu\n    controlador pueda necesitar en su constructor. Las dependencias declaradas serán automáticamente\n    resueltas e inyectadas dentro de la instancia del controlador:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse App\\Repositories\\UserRepository;\nclass UserController extends Controller\n{\n    /**\n    * The user repository instance.\n    */\n    protected \\$users;\n    /**\n    * Create a new controller instance.\n    *\n    * @param  UserRepository  \\$users\n    * @return void\n    */\n    public function __construct(UserRepository \\$users)\n    {\n        \\$this-&gt;users = \\$users;\n    }\n}\n</code></pre>\n<p>También puedes declarar el tipo de cualquier Contrato de Laravel. Si el contenedor puede\n    resolverlo, puedes declararlo. Dependiendo de tu aplicación, inyectar tus dependencias dentro de\n    tu controlador puede proporcionar mejo capacidad para pruebas.</p>\n<h4>Inyección de métodos</h4>\n<p>Adicional a la inyección al constructor, también puedes declarar el tipo de dependencias en los\n    métodos de tu controlador. Un caso de uso común para la inyección de método está inyectando la\n    instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Http\\Request</span>\n    dentro de tus métodos de controlador:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Http\\Request;\nclass UserController extends Controller\n{\n    /**\n    * Store a new user.\n    *\n    * @param  Request  \\$request\n    * @return Response\n    */\n    public function store(Request \\$request)\n    {\n        \\$name = \\$request-&gt;name;\n        //\n    }\n}\n</code></pre>\n<p>Si tu método de controlador también está esperando entrada de un parámetro de ruta, lista tus\n    argumentos de ruta después de tus otras dependencias. Por ejemplo, si tu ruta es definida como\n    esto:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::put('user/{id}', 'UserController@update');\n</code></pre>\n<p>Aún puedes declarar el tipo de la clase <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Http\\Request</span>\n    y acceder a tu parámetro <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">id</span> al\n    definir tu método de controlador de la siguiente manera:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Http\\Request;\nclass UserController extends Controller\n{\n    /**\n    * Update the given user.\n    *\n    * @param  Request  \\$request\n    * @param  string  \\$id\n    * @return Response\n    */\n    public function update(Request \\$request, \\$id)\n    {\n        //\n    }\n}\n</code></pre>\n<p></p>\n<h2>Caché de rutas</h2>\n<p>Nota</p>\n<p>Las rutas basadas en Closure no pueden ser cacheadas. Para usar caché de rutas, debes convertir\n    cualquiera de las rutas Closure a clases de controlador.</p>\n<p>Si tu aplicación está usando exclusivamente rutas basadas en controlador, deberías tomar ventaja\n    de la caché de rutas de Laravel. Usar la cache de rutas reducirá drásticamente la cantidad de\n    tiempo que toma registrar todas las rutas de tu aplicación. En algunos casos, incluso la rapidez\n    de tu registro de rutas puede llegar a ser hasta 100 veces más rápida.</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan route:cache\n</code></pre>\n<p>Después de ejecutar este comando, tu archivo de rutas cacheado será cargado en cada solicitud.\n    Recuerda, si agregas cualquier ruta nueva necesitarás generar una caché de ruta nueva. Debido a\n    esto, deberías ejecutar solamente el comando <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">route:cache</span>\n    durante el despliegue o puesta en producción del proyecto.</p>\n<p>Puedes usar el comando <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">route:clear</span>\n    para limpiar la caché de ruta:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan route:clear\n</code></pre>\n</div>"
      },
      {
        "titulo": "Peticiones",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Solicitudes HTTP</h1>\n<ul>\n    <li>\n        Accediendo a la solicitud\n        <ul>\n            <li>Ruta y método de la solicitud</li>\n            <li>Solicitudes PSR-7</li>\n        </ul>\n    </li>\n    <li>Recorte y normalización de entrada</li>\n    <li>\n        Obteniendo datos ingresados\n        <ul>\n            <li>Datos antiguos</li>\n            <li>Cookies</li>\n        </ul>\n    </li>\n    <li>\n        Archivos\n        <ul>\n            <li>Obteniendo archivos cargados</li>\n            <li>Almacenando archivos cargados</li>\n        </ul>\n    </li>\n    <li>Configurando proxies de confianza</li>\n</ul>\n<p></p>\n<h2>Accediendo a la solicitud</h2>\n<p>\n    Para obtener una instancia de la solicitud HTTP actual por medio de una inyección de\n    dependencia, deberías poner la referencia de la clase <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Http\\Request</span>\n    en tu método de controlador. La instancia de la solicitud entrante automáticamente será\n    inyectada por el\n    contenedor de servicio\n    :\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Http\\Request;\nclass UserController extends Controller\n{\n    /**\n    * Store a new user.\n    *\n    * @param  Request  \\$request\n    * @return Response\n    */\n    public function store(Request \\$request)\n    {\n        \\$name = \\$request-&gt;input('name');\n        //\n    }\n}\n</code></pre>\n<h4>Inyección de dependencias Y parametros de rutas</h4>\n<p>Si tu método de controlador también está esperando la entrada de un parámetro de ruta deberías\n    listar tus parámetros de ruta después de tus otras dependencias. Por ejemplo, si tu ruta es\n    definida como sigue:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::put('user/{id}', 'UserController@update');\n</code></pre>\n<p>Todavía puedes poner la referencia de la clase <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Http\\Request</span>\n    y acceder a tu parámetro de ruta <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">id</span> al\n    definir tu método de controlador como sigue:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Http\\Request;\nclass UserController extends Controller\n{\n    /**\n    * Update the specified user.\n    *\n    * @param  Request  \\$request\n    * @param  string  \\$id\n    * @return Response\n    */\n    public function update(Request \\$request, \\$id)\n    {\n        //\n    }\n}\n</code></pre>\n<h4>Accediendo la solicitud a través de closures de rutas</h4>\n<p>También puedes poner la referencia de la clase <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Http\\Request</span>\n    en una Closure de ruta. El contenedor de servicio automáticamente inyectará la solicitud\n    entrante dentro de la Closure que es ejecutada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Http\\Request;\nRoute::get('/', function (Request \\$request) {\n    //\n});\n</code></pre>\n<p></p>\n<h3>Ruta y método de la solicitud</h3>\n<p>La instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Http\\Request</span>\n    proporciona una variedad de métodos para examinar la solicitud HTTP para tu aplicación y\n    extiende la clase <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Symfony\\Component\\HttpFoundation\\Request</span>.\n    Discutiremos algunos de los métodos más importantes a continuación.</p>\n<h4>Obteniendo la ruta de la solicitud</h4>\n<p>El método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">path</span>\n    devuelve la información de ruta de la solicitud. Así, si la solicitud entrante tiene como\n    destino <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">http://domain.com/foo/bar</span>,\n    el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">path</span>\n    devolverá <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">foo/bar</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$uri = \\$request-&gt;path();\n</code></pre>\n<p>El método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">is</span> te\n    permite verificar que la ruta de la solicitud entrante coincide con un patrón dado. Puedes usar\n    el caracter <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">*</span> para\n    especificar que cualquier cadena puede coincidir al momento de utilizar este método:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>if (\\$request-&gt;is('admin/*')) {\n    //\n}\n</code></pre>\n<h4>Obteniendo la URL de la solicitud</h4>\n<p>Para obtener la URL completa de la solicitud entrante puedes usar los métodos <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url</span> o\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fullUrl</span>.\n    El método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url</span>\n    devolverá la URL sin la cadena de la consulta, mientras que el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fullUrl</span>\n    si la incluye:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>// Without Query String...\n\\$url = \\$request-&gt;url();\n// With Query String...\n\\$url = \\$request-&gt;fullUrl();\n</code></pre>\n<h4>Obteniendo el método de la solicitud</h4>\n<p>El método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">method</span>\n    devolverá el verbo HTTP de la solicitud. Puedes usar el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">isMethod</span>\n    para verificar que el verbo HTTP coincida con una cadena dada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$method = \\$request-&gt;method();\nif (\\$request-&gt;isMethod('post')) {\n    //\n}\n</code></pre>\n<p></p>\n<h3>Solicitudes PSR-7</h3>\n<p>\n    El\n    estándar PSR-7\n    <outboundlink></outboundlink>\n    específica interfaces para mensajes HTTP, incluyendo solicitudes y respuestas. Si prefieres\n    obtener una instancia de una solicitud PSR-7 en lugar de una solicitud de Laravel, primero\n    necesitarás instalar algunos paquetes de terceros. Laravel usa el componente <em>Symfony HTTP\n    Message Bridge</em> para convertir solicitudes y respuestas típicas de Laravel en\n    implementaciones compatibles con PSR-7:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>composer require symfony/psr-http-message-bridge\ncomposer require zendframework/zend-diactoros\n</code></pre>\n<p>Una vez que has instalado estos paquetes, puedes obtener una solicitud PSR-7 al colocar la\n    referencia de la interface de solicitud en tu Closure de ruta o método de controlador:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Psr\\Http\\Message\\ServerRequestInterface;\nRoute::get('/', function (ServerRequestInterface \\$request) {\n    //\n});\n</code></pre>\n<p>TIP</p>\n<p>Si devuelves una instancia de respuesta PSR-7 desde una ruta o controlador, automáticamente será\n    convertida de vuelta a una instancia de respuesta de Laravel y será mostrada por el\n    framework.</p>\n<p></p>\n<h2>Recorte y normalización de entrada</h2>\n<p>De forma predeterminada, Laravel incluye los middleware <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">TrimStrings</span>\n    y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ConvertEmptyStringsToNull</span>\n    en la pila de middleware global de tu aplicación. Estos middleware son listados en la pila por\n    la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Http\\Kernel</span>.\n    Estos middleware automáticamente recortarán todos los campos de cadena entrantes en la\n    solicitud, así como convertirán cualquier campo de cadena vacío a <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>.\n    Esto permite que no tengas que preocuparte sobre estos asuntos de normalización en tus rutas y\n    controladores.</p>\n<p>Si prefieres deshabilitar este comportamiento, puedes remover los dos middleware de tu pila de\n    middleware de tu aplicación al eliminarlos de la propiedad <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$middleware</span>\n    de tu clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Http\\Kernel</span>.\n</p>\n<p></p>\n<h2>Obteniendo datos ingresados</h2>\n<h4>Obteniendo todos los datos ingresados</h4>\n<p>También puedes obtener todos los datos ingresados en forma de arreglo usando el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">all</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$input = \\$request-&gt;all();\n</code></pre>\n<h4>Obteniendo el valor de un campo</h4>\n<p>Usando unos pocos métodos básicos, puedes acceder a todos los datos ingresados por el usuario\n    desde la instancia <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Http\\Request</span>\n    sin preocuparte por cuál verbo HTTP fue usado por la solicitud. Sin importar el verbo HTTP, el\n    método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">input</span>\n    puede ser usado para obtener la entrada de usuario:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$name = \\$request-&gt;input('name');\n</code></pre>\n<p>Puedes pasar un valor predeterminado como segundo argumento del método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">input</span>.\n    Este valor será devuelto si el valor de entrada solicitado no está presente en la solicitud:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$name = \\$request-&gt;input('name', 'Sally');\n</code></pre>\n<p>Al momento de trabajar con formularios que contienen arreglos de campos, usa notación de \"punto\"\n    para acceder a estos arreglos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$name = \\$request-&gt;input('products.0.name');\n\\$names = \\$request-&gt;input('products.*.name');\n</code></pre>\n<p>Puedes llamar al método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">input</span> sin\n    ningún argumento para retornar todos los valores como arreglo asociativo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$input = \\$request-&gt;input();\n</code></pre>\n<h4>Obteniendo datos desde la cadena de consulta</h4>\n<p>Mientras el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">input</span>\n    obtiene valores de la porción de datos de la solicitud completa (incluyendo la cadena de\n    consulta), el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">query</span>\n    solamente obtendrá valores de la cadena de consulta:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$name = \\$request-&gt;query('name');\n</code></pre>\n<p>Si los datos de los valores de la cadena de consulta solicitada no están presentes, el segundo\n    argumento de este método será devuelto:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$name = \\$request-&gt;query('name', 'Helen');\n</code></pre>\n<p>Puedes ejecutar el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">query</span> sin\n    ningún argumento con el propósito de obtener todos los valores de la cadena de consulta como un\n    arreglo asociativo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$query = \\$request-&gt;query();\n</code></pre>\n<h4>Recuperando datos por medio de propiedades dinámicas</h4>\n<p>También puedes acceder a los datos ingresados por el usuario usando propiedades dinámicas en la\n    instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Http\\Request</span>.\n    Por ejemplo, si uno de los formularios de tu aplicación contiene un campo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">name</span>,\n    puedes acceder al valor del campo de la siguiente forma:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$name = \\$request-&gt;name;\n</code></pre>\n<p>Al momento de usar propiedades dinámicas, Laravel primero buscará por el valor del parámetro en\n    la porción de datos de la solicitud. Si no está presente, buscará el campo en los parámetros de\n    ruta.</p>\n<h4>Obteniendo valores JSON</h4>\n<p>Al momento de enviar solicitudes JSON a tu aplicación, puedes acceder a los datos JSON por medio\n    del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">input</span>\n    al tiempo que el encabezado <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Content-Type</span>\n    de la solicitud sea establecido apropiadamente a <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">application/json</span>.\n    Incluso puedes usar sintaxis \".\" para buscar adentro de los arreglos JSON:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$name = \\$request-&gt;input('user.name');\n</code></pre>\n<h4>Obteniendo una porción de los datos ingresados</h4>\n<p>Si necesitas obtener un subconjunto de los datos ingresados, puedes usar los métodos <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">only</span> y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">except</span>.\n    Ambos métodos aceptan un solo arreglo o una lista dinámica de argumentos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$input = \\$request-&gt;only(['username', 'password']);\n\\$input = \\$request-&gt;only('username', 'password');\n\\$input = \\$request-&gt;except(['credit_card']);\n\\$input = \\$request-&gt;except('credit_card');\n</code></pre>\n<p>TIP</p>\n<p>El método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">only</span>\n    devuelve todos los pares clave / valor que solicites; sin embargo, no devolverá pares clave /\n    valor que no estén presentes en la solicitud.</p>\n<h4>Determinando si un Valor ingresado está presente</h4>\n<p>Deberías usar el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">has</span> para\n    determinar si un valor está presente en la solicitud. El método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">has</span>\n    devuelve <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>\n    si el valor está presente en la solicitud:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>if (\\$request-&gt;has('name')) {\n    //\n}\n</code></pre>\n<p>Cuando es dado un arreglo, el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">has</span>\n    determinará si todos los valores especificados están presentes:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>if (\\$request-&gt;has(['name', 'email'])) {\n    //\n}\n</code></pre>\n<p>Si prefieres determinar si un valor está presente en la solicitud y no esté vacío, puedes usar el\n    método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">filled</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>if (\\$request-&gt;filled('name')) {\n    //\n}\n</code></pre>\n<p></p>\n<h3>Entrada antigua</h3>\n<p>Laravel permite que mantengas los datos de una solicitud durante la próxima solicitud. Esta\n    característica es útil particularmente para volver a llenar los formularios después de detectar\n    errores de validación. Sin embargo, si estás usando las características de validación incluidas\n    con Laravel, es poco probable que necesites usar manualmente estos métodos, ya que algunas de\n    las facilidades de validación integradas con Laravel las ejecutarán automáticamente.</p>\n<h4>Enviando datos a la sesión</h4>\n<p>El método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">flash</span> en\n    la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Http\\Request</span>\n    enviará los datos ingresados a la sesión para que así estén disponibles durante la próxima\n    solicitud realizada por el usuario:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$request-&gt;flash();\n</code></pre>\n<p>También puedes usar los métodos <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">flashOnly</span>\n    y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">flashExcept</span>\n    para enviar un subconjunto de datos de la solicitud a la sesión. Estos métodos son útiles para\n    mantener información sensible tales como contraseñas fuera de la sesión:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$request-&gt;flashOnly(['username', 'email']);\n\\$request-&gt;flashExcept('password');\n</code></pre>\n<h4>Enviando datos y redirigir</h4>\n<p>Ya que con frecuencia querrás enviar datos a la sesión y luego redirigir a la página anterior\n    puedes encadenar datos a una redirección usando el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withInput</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return redirect('form')-&gt;withInput();\nreturn redirect('form')-&gt;withInput(\n    \\$request-&gt;except('password')\n);\n</code></pre>\n<h4>Obteniendo datos antiguos</h4>\n<p>Para obtener los datos de la sesión anterior, usa el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">old</span> en la\n    instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Request</span>.\n    El método old extrarerá los datos de la solicitiud y sesión anterior:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$username = \\$request-&gt;old('username');\n</code></pre>\n<p>Laravel también proporciona un helper global <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">old</span>. Si\n    estás mostrando datos antiguos dentro de una plantilla Blade, es más conveniente usar el helper\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">old</span>. Si\n    no existen datos antiguos para el campo dado, será devuelto <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;input type=\"text\" name=\"username\" value=\"{{ old('username') }}\"&gt;\n</code></pre>\n<p></p>\n<h3>Cookies</h3>\n<h4>Obteniendo cookies de las solicitudes</h4>\n<p>Todos las cookies creados por el framework Laravel son encriptadas y firmadas con un código de\n    autenticación, significa que serán consideradas no válidas si han sido cambiados por el cliente.\n    Para obtener el valor de una cookie de la solicitud, usa el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cookie</span>\n    en una instancia de <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Http\\Request</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$value = \\$request-&gt;cookie('name');\n</code></pre>\n<p>Alternativamente, puedes usar la clase facade <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cookie</span>\n    para acceder a los valores de las cookies:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Cookie;\n\\$value = Cookie::get('name');\n</code></pre>\n<h4>Adjuntando cokies a las respuestas</h4>\n<p>Puedes adjuntar una cookie a una instancia saliente de <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Http\\Response</span>\n    usando el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cookie</span>.\n    Debes pasar el nombre, valor y el número de minutos en los cuales dicha cookie debería ser\n    válida:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return response('Hello World')-&gt;cookie(\n    'name', 'value', \\$minutes\n);\n</code></pre>\n<p>\n    El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cookie</span>\n    también acepta unos cuantos argumentos los cuales son usados con menos frecuencia. Generalmente,\n    estos argumentos tienen el mismo propósito y significan lo mismo que los argumentos que deberían\n    ser dados al método\n    setcookie\n    nativo de PHP:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return response('Hello World')-&gt;cookie(\n    'name', 'value', \\$minutes, \\$path, \\$domain, \\$secure, \\$httpOnly\n);\n</code></pre>\n<p>Alternativamente, puedes usar la clase facade <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cookie</span>\n    para \"encolar\" cookies para adjuntar a la respuesta saliente de tu aplicación. El método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue</span>\n    acepta una instancia <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cookie</span>\n    o los argumentos necesarios para crear una instancia <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cookie</span>.\n    Estas cookies serán adjuntadas a la respuesta saliente antes de que sea enviada al navegador:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Cookie::queue(Cookie::make('name', 'value', \\$minutes));\nCookie::queue('name', 'value', \\$minutes);\n</code></pre>\n<h4>Generando instancias cookie</h4>\n<p>Si prefieres generar una instancia <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Symfony\\Component\\HttpFoundation\\Cookie</span>\n    que pueda ser dada a una instancia de respuesta en un momento posterior, puedes usar el helper\n    global <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cookie</span>.\n    Este cookie no será enviado de regreso al cliente a menos que sea adjuntado a una instancia de\n    respuesta:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$cookie = cookie('name', 'value', \\$minutes);\nreturn response('Hello World')-&gt;cookie(\\$cookie);\n</code></pre>\n<p></p>\n<h2>Archivos</h2>\n<p></p>\n<h3>Obteniendo archivos cargados</h3>\n<p>Puedes acceder los archivos cargados de una instancia <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Http\\Request</span>\n    usando el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">file</span> o\n    usando propiedades dinámicas. El método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">file</span>\n    devuelve una instancia de la clase <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Http\\UploadedFile</span>,\n    la cual extiende la clase <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">SplFileInfo</span>\n    de PHP y proporciona una variedad de métodos para interactuar con el archivo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$file = \\$request-&gt;file('photo');\n\\$file = \\$request-&gt;photo;\n</code></pre>\n<p>Puedes determinar si un archivo está presente en la solicitud usando el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hasFile</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>if (\\$request-&gt;hasFile('photo')) {\n    //\n}\n</code></pre>\n<h4>Validando cargas exitosas</h4>\n<p>Además de verficar si el archivo está presente, puedes verificar que no ocurrieron problemas\n    cargando el archivo por medio del método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">isValid</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>if (\\$request-&gt;file('photo')-&gt;isValid()) {\n    //\n}\n</code></pre>\n<h4>Rutas y extensiones de archivo</h4>\n<p>La clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">UploadedFile</span>\n    también contiene métodos para acceder a la ruta completa del archivo y su extensión. El método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">extension</span>\n    intentará adivinar la extensión del archivo en base a su contenido. Esta extensión puede ser\n    diferente de la extensión que fue suministrada por el cliente:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$path = \\$request-&gt;photo-&gt;path();\n\\$extension = \\$request-&gt;photo-&gt;extension();\n</code></pre>\n<h4>Otros métodos de archivo</h4>\n<p>\n    Hay una variedad de otros métodos disponibles en instancias <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">UploadedFile</span>.\n    Revisa la\n    documentación de la API para la clase\n    para más información concerniente a estos métodos.\n</p>\n<p></p>\n<h3>Almacenando archivos cargados</h3>\n<p>Para almacenar un archivo cargado, típicamente usarás uno de tus sistemas de archivos\n    configurados. La clase <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">UploadedFile</span>\n    tiene un método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">store</span>\n    el cual moverá un archivo cargado a uno de tus discos, el cual puede ser una ubicación de tu\n    sistema de archivo local o incluso una ubicación de almacenamiento en la nube como Amazon S3.\n</p>\n<p>El método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">store</span>\n    acepta la ruta dónde el archivo debería ser almacenado relativa al directorio raíz configurado\n    del sistema de archivo. Esta ruta no debería contener un nombre de archivo, ya que un ID único\n    será generado automáticamente para servir como el nombre del archivo.</p>\n<p>El método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">store</span>\n    acepta un segundo argumento opcional para el nombre del disco que debería ser usado para\n    almacenar el archivo. El método devolverá la ruta relativa del archivo al directorio raíz del\n    disco:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$path = \\$request-&gt;photo-&gt;store('images');\n\\$path = \\$request-&gt;photo-&gt;store('images', 's3');\n</code></pre>\n<p>Si no quieres que un nombre de archivo sea generado automáticamente, puedes usar el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">storeAs</span>,\n    el cual acepta la ruta, el nombre de archivo y el nombre del disco como sus argumentos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$path = \\$request-&gt;photo-&gt;storeAs('images', 'filename.jpg');\n\\$path = \\$request-&gt;photo-&gt;storeAs('images', 'filename.jpg', 's3');\n</code></pre>\n<p></p>\n<h2>Configurando proxies de confianza</h2>\n<p>Al momento de administrar tus aplicaciones detrás de un balanceador de carga que finaliza los\n    certificados TLS / SSL, puedes notar que algunas veces tu aplicación no genera enlaces HTTPS.\n    Típicamente esto es debido a que el tráfico de tu aplicación está siendo dirigido desde tu\n    balanceador de carga por el puerto 80 y no sabe que debería generar enlaces seguros.</p>\n<p>Para solucionar esto, puedes usar el middleware <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Http\\Middleware\\TrustProxies</span>\n    que es incluido en tu aplicación de Laravel, el cual permite que rápidamente personalices los\n    balanceadores de carga o proxies que deberían ser de confianza en tu aplicación. Tus proxies de\n    confianza deberían ser listados como un arreglo en la propiedad <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$proxies</span>\n    de este middleware. Además de la configuración de los proxies de confianza, puedes configurar\n    los encabezados que están siendo enviados por tu proxy con información sobre la solicitud\n    original:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Middleware;\nuse Illuminate\\Http\\Request;\nuse Fideloper\\Proxy\\TrustProxies as Middleware;\nclass TrustProxies extends Middleware\n{\n    /**\n    * The trusted proxies for this application.\n    *\n    * @var array\n    */\n    protected \\$proxies = [\n        '192.168.1.1',\n        '192.168.1.2',\n    ];\n    /**\n    * The headers that should be used to detect proxies.\n    *\n    * @var string\n    */\n    protected \\$headers = Request::HEADER_X_FORWARDED_ALL;\n}\n</code></pre>\n<p>TIP</p>\n<p>\n    Si estás usando Balanceo de Carga Elástico AWS, tu valor <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$headers</span>\n    debe ser <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Request::HEADER_X_FORWARDED_AWS_ELB</span>.\n    Para más información de las constantes que pueden ser usadas en la propiedad <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$headers</span>,\n    revisa la documentación de Symfony sobre\n    proxies de confianza\n    .\n</p>\n<h4>Confiar en todos los proxies</h4>\n<p>Si estás usando Amazon AWS u otro proveedor de balanceador de carga de la \"nube\", no puedes saber\n    las direcciones IP de tus balanceadores reales. En este caso, puedes usar <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">**</span>\n    para confiar en todos los proxies:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* The trusted proxies for this application.\n*\n* @var array\n*/\nprotected \\$proxies = '**';\n</code></pre>\n</div>"
      },
      {
        "titulo": "Respuestas",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Respuestas HTTP</h1>\n<ul>\n    <li>\n        Creando respuestas\n        <ul>\n            <li>Adjuntando encabezados a las respuestas</li>\n            <li>Adjuntando cookies a las respuestas</li>\n            <li>Cookies &amp; Encriptación</li>\n        </ul>\n    </li>\n    <li>\n        Redirecciones\n        <ul>\n            <li>Redireccionando a rutas nombradas</li>\n            <li>Redireccionando a acciones de controlador</li>\n            <li>Redireccionando a dominios externos</li>\n            <li>Redireccionando con los datos de una sesión movida rápidamente</li>\n        </ul>\n    </li>\n    <li>\n        Otros tipos de respuestas\n        <ul>\n            <li>Respuestas de vista</li>\n            <li>Respuestas JSON</li>\n            <li>Descargas de archivo</li>\n            <li>Respuestas de archivo</li>\n        </ul>\n    </li>\n    <li>Macros de respuesta</li>\n</ul>\n<p></p>\n<h2>Creando respuestas</h2>\n<h4>Cadenas &amp; Arreglos</h4>\n<p>Todas las rutas y controladores deberían devolver una respuesta para ser enviada de regreso al\n    navegador del usuario. Laravel proporciona diferentes formas de devolver respuestas. La\n    respuesta más básica es devolver una cadena desde una ruta o controlador. El framework\n    convertirá la cadena en una respuesta HTTP completa:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('/', function () {\n    return 'Hello World';\n});\n</code></pre>\n<p>Además de devolver cadenas desde tus rutas y controladores, también puedes devolver arreglos. El\n    framework convertirá automáticamente el arreglo en una respuesta JSON:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('/', function () {\n    return [1, 2, 3];\n});\n</code></pre>\n<p>TIP</p>\n<p>\n    ¿Sabías que también puedes devolver\n    colecciones de Eloquent\n    desde tus rutas o controladores? Estas serán convertidas automáticamente a JSON. ¡Inténtalo!\n</p>\n<h4>Objetos de respuesta</h4>\n<p>Típicamente, no sólo estarás devolviendo cadenas básicas o arreglos desde tus acciones de ruta.\n    Además, estarás devolviendo instancias <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Http\\Response</span>\n    completas o vistas.</p>\n<p>Devolver una instancia <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Response</span>\n    completa te permite personalizar el código de estado y los encabezados HTTP de la respuesta. Una\n    instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Response</span>\n    hereda desde la clase <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Symfony\\Component\\HttpFoundation\\Response</span>,\n    la cual proporciona una variedad de métodos para construir respuestas HTTP:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('home', function () {\n    return response('Hello World', 200)\n                  -&gt;header('Content-Type', 'text/plain');\n});\n</code></pre>\n<p></p>\n<h4>Adjuntando encabezados a las respuestas</h4>\n<p>Ten en cuenta que la mayoría de los métodos de respuestas son encadenables, permitiendo la\n    construcción fluida de instancias de respuesta. Por ejemplo, puedes usar el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">header</span>\n    para agregar una serie de encabezados para la respuesta antes de enviarla de regreso al usuario:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return response(\\$content)\n            -&gt;header('Content-Type', \\$type)\n            -&gt;header('X-Header-One', 'Header Value')\n            -&gt;header('X-Header-Two', 'Header Value');\n</code></pre>\n<p>O, puedes usar el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withHeaders</span>\n    para especificar un arreglo de encabezados para que sean agregados a la respuesta:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return response(\\$content)\n            -&gt;withHeaders([\n                'Content-Type' =&gt; \\$type,\n                'X-Header-One' =&gt; 'Header Value',\n                'X-Header-Two' =&gt; 'Header Value',\n            ]);\n</code></pre>\n<p></p>\n<h4>Adjuntando cookies a las respuestas</h4>\n<p>El método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cookie</span> en\n    las instancias de respuesta permite que adjuntes fácilmente cookies a la respuesta. Por ejemplo,\n    puedes usar el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cookie</span>\n    para generar una cookie y adjuntarla fluidamente a la instancia de respuesta, de la siguiente\n    manera:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return response(\\$content)\n                -&gt;header('Content-Type', \\$type)\n                -&gt;cookie('name', 'value', \\$minutes);\n</code></pre>\n<p>\n    El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cookie</span>\n    también acepta unos cuantos argumentos los cuales son usados con menos frecuencia. Generalmente,\n    estos argumentos tienen el mismo propósito y significado que los argumentos que serán dados al\n    método nativo de PHP\n    setcookie\n    :\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>-&gt;cookie(\\$name, \\$value, \\$minutes, \\$path, \\$domain, \\$secure, \\$httpOnly)\n</code></pre>\n<p>Alternativamente, puedes usar la clase facade <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cookie</span>\n    para agregar cookies a la cola y adjuntarlas a la respuesta saliente de tu aplicación. El método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue</span>\n    acepta una instancia <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cookie</span>\n    o los argumentos que se necesitan para crear una instancia <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cookie</span>.\n    Estas cookies serán adjuntadas a la respuesta saliente antes de que sea enviada al navegador:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Cookie::queue(Cookie::make('name', 'value', \\$minutes));\nCookie::queue('name', 'value', \\$minutes);\n</code></pre>\n<p></p>\n<h4>Cookies &amp; Encriptación</h4>\n<p>De forma predeterminada, todos los cookies generados por Laravel son encriptados y firmados de\n    modo que no puedan ser modificados o leídos por el cliente. Si prefieres deshabilitar la\n    encriptación para un subconjunto de cookies generados por tu aplicación, puedes usar la\n    propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$except</span>\n    del middleware <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Http\\Middleware\\EncryptCookies</span>,\n    el cual es localizado en el directorio <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Http/Middleware</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* The names of the cookies that should not be encrypted.\n*\n* @var array\n*/\nprotected \\$except = [\n    'cookie_name',\n];\n</code></pre>\n<p></p>\n<h2>Redirecciones</h2>\n<p>Las respuestas redireccionadas son instancias de la clase <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Http\\RedirectResponse</span>\n    y contienen los encabezados apropiados que se necesitan para redireccionar al usuario a otra\n    URL. Hay varias formas de generar una instancia <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RedirectResponse</span>.\n    El método más simple es usar el helper global <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redirect</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('dashboard', function () {\n    return redirect('home/dashboard');\n});\n</code></pre>\n<p>Algunas veces podrás querer redireccionar al usuario a su página previa, tal como cuando un\n    formulario enviado no es válido. Puedes hacer eso usando la función helper global <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">back</span>.\n    Ya que esta característica utiliza la sesión, asegurate de que la ruta llamando a la función\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">back</span>\n    está usando el grupo de middleware <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">web</span> o\n    tiene todos los middleware de sesión aplicados.</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::post('user/profile', function () {\n    // Validate the request...\n    return back()-&gt;withInput();\n});\n</code></pre>\n<p></p>\n<h3>Redireccionando a rutas nombradas</h3>\n<p>Cuando ejecutas el helper <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redirect</span>\n    sin parámetros, una instancia de <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Routing\\Redirector</span>\n    es devuelta, permitiendo que ejecutes cualquier método en la instancia <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Redirector</span>.\n    Por ejemplo, para generar una <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RedirectResponse</span>\n    para una ruta nombrada, puedes usar el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">route</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return redirect()-&gt;route('login');\n</code></pre>\n<p>Si tu ruta tiene parámetros, puedes pasarlos como segundo argumento del método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">route</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>// For a route with the following URI: profile/{id}\nreturn redirect()-&gt;route('profile', ['id' =&gt; 1]);\n</code></pre>\n<h4>Rellenando parámetros a través de modelos de Eloquent</h4>\n<p>Si estás redireccionando a una ruta con un parámetro \"ID\" que está siendo rellenado desde un\n    modelo Eloquent, puedas pasar el modelo como tal. El ID será extraído automáticamente:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>// For a route with the following URI: profile/{id}\nreturn redirect()-&gt;route('profile', [\\$user]);\n</code></pre>\n<p>Si prefieres personalizar el valor que es colocado en el parámetro de la ruta, deberías\n    sobrescribir el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">getRouteKey</span>\n    en tu modelo Eloquent:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the value of the model's route key.\n*\n* @return mixed\n*/\npublic function getRouteKey()\n{\n    return \\$this-&gt;slug;\n}\n</code></pre>\n<p></p>\n<h3>Redireccionando a acciones de controlador</h3>\n<p>También puedes generar redirecciones a acciones de controlador. Para hacer eso, pasa el\n    controlador y nombre de acción al método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">action</span>.\n    Recuerda, no necesitas especificar el espacio de nombres completo del controlador ya que el\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RouteServiceProvider</span>\n    de Laravel establecerá el espacio de nombres del controlador base:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return redirect()-&gt;action('HomeController@index');\n</code></pre>\n<p>Si tu ruta de controlador requiere parámetros, puedes pasarlos como segundo argumento del método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">action</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return redirect()-&gt;action(\n    'UserController@profile', ['id' =&gt; 1]\n);\n</code></pre>\n<p></p>\n<h3>Redireccionando a dominios externos</h3>\n<p>Algunas veces puedes necesitar redireccionar a un dominio fuera de tu aplicación. Puedes hacer\n    eso ejecutando el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">away</span>,\n    el cual crea una instancia de <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RedirectResponse</span>\n    sin alguna codificación, validación o verificación de URL adicional:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return redirect()-&gt;away('https://www.google.com');\n</code></pre>\n<p></p>\n<h3>Redireccionando con datos de sesión</h3>\n<p>El redireccionamiento a una nueva URL y el envío de los datos de la sesión son hechos usualmente\n    al mismo tiempo. Típicamente, esto es hecho después de ejecutar una acción exitosamente cuando\n    mueves rápidamente un mensaje de éxito de la sesión. Por conveniencia, puedes crear una\n    instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RedirectResponse</span>\n    y mover rápidamente los datos de la sesión en un solo encadenamiento de método fluido:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::post('user/profile', function () {\n    // Update the user's profile...\n    return redirect('dashboard')-&gt;with('status', 'Profile updated!');\n});\n</code></pre>\n<p>Después de que el usuario es redireccionado, puedes mostrar el mensaje enviado desde la sesión.\n    Por ejemplo, usando la sintaxis de Blade:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>@if (session('status'))\n    &lt;div class=\"alert alert-success\"&gt;\n        {{ session('status') }}\n    &lt;/div&gt;\n@endif\n</code></pre>\n<p></p>\n<h2>Otros tipos de respuesta</h2>\n<p>El helper <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">response</span>\n    puede ser usado para generar otros tipos de instancias de respuesta. Cuando el helper <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">response</span>\n    es ejecutado sin argumentos, una implementación del contrato <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Contracts\\Routing\\ResponseFactory</span>\n    es devuelta. Este contrato proporciona varios métodos útiles para generar respuestas.</p>\n<p></p>\n<h3>Respuestas de vista</h3>\n<p>Si necesitas control sobre el estado y encabezados de la respuesta pero también necesitas\n    devolver una vista como el contenido de la respuesta, deberías usar el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">view</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return response()\n            -&gt;view('hello', \\$data, 200)\n            -&gt;header('Content-Type', \\$type);\n</code></pre>\n<p>Ciertamente, si no necesitas pasar un código de estado HTTP o encabezados personalizados,\n    deberías usar la función helper global <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">view</span>.\n</p>\n<p></p>\n<h3>Respuestas JSON</h3>\n<p>El método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">json</span>\n    establecerá automáticamente el encabezado <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Content-Type</span>\n    a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">application/json</span>,\n    al igual que convertirá el arreglo dado a JSON usando la función de PHP <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">json_enspan</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return response()-&gt;json([\n    'name' =&gt; 'Abigail',\n    'state' =&gt; 'CA'\n]);\n</code></pre>\n<p>Si prefieres crear una respuesta JSONP, puedes usar el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">json</span> en\n    combinación con el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withCallback</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return response()\n            -&gt;json(['name' =&gt; 'Abigail', 'state' =&gt; 'CA'])\n            -&gt;withCallback(\\$request-&gt;input('callback'));\n</code></pre>\n<p></p>\n<h3>Descargas de archivo</h3>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">download</span>\n    puede ser usado para generar una respuesta que fuerza al navegador del usuario a descargar el\n    archivo a una ruta dada. El método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">download</span>\n    acepta un nombre de archivo como segundo argumento del método, el cual determinará el nombre del\n    archivo que es visto por el usuario que esté descargando el archivo. Finalmente, puedes pasar un\n    arreglo de encabezados HTTP como tercer argumento del método:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return response()-&gt;download(\\$pathToFile);\nreturn response()-&gt;download(\\$pathToFile, \\$name, \\$headers);\nreturn response()-&gt;download(\\$pathToFile)-&gt;deleteFileAfterSend();\n</code></pre>\n<p>Nota</p>\n<p>Symfony HttpFoundation, la cual administra las descargas de archivo, requiere que el archivo que\n    esté siendo descargado tenga un nombre de archivo ASCII.</p>\n<h4>Descargas en streaming</h4>\n<p>Algunas veces puedes querer convertir la cadena de respuesta de una operación dada a una\n    respuesta descargable sin tener que escribir los contenidos de la operación al disco. Puedes\n    usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">streamDownload</span>\n    en este escenario. Este método acepta un callback, un nombre de archivo y un arreglo opcional de\n    encabezados como argumentos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return response()-&gt;streamDownload(function () {\n    echo GitHub::api('repo')\n                -&gt;contents()\n                -&gt;readme('laravel', 'laravel')['contents'];\n}, 'laravel-readme.md');\n</code></pre>\n<p></p>\n<h3>Respuestas de archivo</h3>\n<p>El método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">file</span> puede\n    ser usado para mostrar un archivo, tal como una imagen o PDF, directamente en el navegador del\n    usuario en lugar de iniciar una descarga. Este método acepta la ruta del archivo como su primer\n    argumento y un arreglo de encabezados como segundo argumento:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return response()-&gt;file(\\$pathToFile);\nreturn response()-&gt;file(\\$pathToFile, \\$headers);\n</code></pre>\n<p></p>\n<h2>Macros de respuesta</h2>\n<p>Si prefieres definir una respuesta personalizada que puedas volver a usar en múltiples rutas y\n    controladores, puedes usar el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">macro</span>\n    de la clase facade <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Response</span>.\n    Por ejemplo, desde un método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span>\n    del proveedor de servicio</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Providers;\nuse Illuminate\\Support\\ServiceProvider;\nuse Illuminate\\Support\\Facades\\Response;\nclass ResponseMacroServiceProvider extends ServiceProvider\n{\n    /**\n    * Register the application's response macros.\n    *\n    * @return void\n    */\n    public function boot()\n    {\n        Response::macro('caps', function (\\$value) {\n            return Response::make(strtoupper(\\$value));\n        });\n    }\n}\n</code></pre>\n<p>La función <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">macro</span>\n    acepta un nombre como su primer argumento y una Closure como segundo. La Closure de la macro\n    será ejecutada al momento de ejecutar el nombre de la macro desde una implementación <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ResponseFactory</span>\n    o el helper <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">response</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return response()-&gt;caps('foo');\n</code></pre>\n</div>"
      },
      {
        "titulo": "Vistas",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Vistas</h1>\n<ul>\n    <li>Creando vistas</li>\n    <li>\n        Pasando datos a las vistas\n        <ul>\n            <li>Compartiendo datos con todas las vistas</li>\n        </ul>\n    </li>\n    <li>View Composers</li>\n</ul>\n<p></p>\n<h2>Creando vistas</h2>\n<p>TIP</p>\n<p>\n    Para buscar más información sobre ¿Cómo escribir plantillas de Blade? Revisa la\n    documentación de Blade\n    completa para comenzar.\n</p>\n<p>Las vistas contienen el HTML servido por tu aplicación y separa la lógica de tu\n    controlador/aplicación de la lógica de presentación. Las vistas son almacenadas en el directorio\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views</span>.\n    Una vista sencilla podría lucir de esta forma:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;!-- View stored in resources/views/greeting.blade.php --&gt;\n&lt;html&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Hello, {{ \\$name }}&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Ya que esta vista es almacenada en <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views/greeting.blade.php</span>,\n    podemos devolverla usando el helper global <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">view</span>,\n    de la siguiente forma:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('/', function () {\n    return view('greeting', ['name' =&gt; 'James']);\n});\n</code></pre>\n<p>Como puedes ver, el primer argumento pasado al helper <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">view</span>\n    corresponde al nombre del archivo de la vista en el directorio <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views</span>.\n    El segundo argumento es un arreglo de datos que debería estar disponible para la vista. En este\n    caso, estamos pasando la variable <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">name</span>,\n    la cual es mostrada en la vista usando la sintaxis de Blade.</p>\n<p>Las vistas también pueden estar anidadas dentro de sub-directorios del directorio <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views</span>.\n    La notación de \"Punto\" puede ser usada para referenciar vistas anidadas. Por ejemplo, si tu\n    vista está almacenada en <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views/admin/profile.blade.php</span>,\n    puedes hacer referencia a esta de la siguiente forma:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return view('admin.profile', \\$data);\n</code></pre>\n<h4>Determinando si una vista existe</h4>\n<p>Si necesitas determinar si una vista existe, puedes usar la clase facade <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">View</span>. El\n    método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">exists</span>\n    devolverá <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>\n    si la vista existe:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\View;\nif (View::exists('emails.customer')) {\n    //\n}\n</code></pre>\n<h4>Creando la primera vista disponible</h4>\n<p>Usando el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">first</span>,\n    puedes crear la primera vista que existe en un arreglo de vistas dado. Esto es útil si tu\n    aplicación o paquete permite que las vistas sean personalizadas o sobrescritas:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return view()-&gt;first(['custom.admin', 'admin'], \\$data);\n</code></pre>\n<p>También puedes ejecutar este método por medio de la clase facade <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">View</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\View;\nreturn View::first(['custom.admin', 'admin'], \\$data);\n</code></pre>\n<p></p>\n<h2>Pasando datos a las vistas</h2>\n<p>Como viste en los ejemplos previos, puedes pasar un arreglo de datos a las vistas:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return view('greetings', ['name' =&gt; 'Victoria']);\n</code></pre>\n<p>Al momento de pasar información de esta manera, los datos deberían ser un arreglo con pares clave\n    / valor. Dentro de tu vista, entonces puedes acceder a cada valor usando su clave\n    correspondiente, tal como <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">&lt;?php echo \\$key; ?&gt;</span>.\n    Como una alternativa a pasar un arreglo completo de datos a la función helper <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">view</span>,\n    puedes usar el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">with</span>\n    para agregar partes individuales de datos a la vista:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return view('greeting')-&gt;with('name', 'Victoria');\n</code></pre>\n<p></p>\n<h4>Compartiendo datos con todas las vistas</h4>\n<p>Ocasionalmente, puedes necesitar compartir una pieza de datos con todas las vistas que son\n    renderizadas por tu aplicación. Puedes hacer eso usando el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">share</span>\n    de la clase facade <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">View</span>.\n    Típicamente, deberías colocar las ejecuciones a <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">share</span>\n    dentro del método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span>\n    de un proveedor de servicio. Eres libre de agregarlos al <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AppServiceProvider</span>\n    o generar un proveedor de servicio diferente para alojarlos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Providers;\nuse Illuminate\\Support\\Facades\\View;\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n    * Bootstrap any application services.\n    *\n    * @return void\n    */\n    public function boot()\n    {\n        View::share('key', 'value');\n    }\n    /**\n    * Register the service provider.\n    *\n    * @return void\n    */\n    public function register()\n    {\n        //\n    }\n}\n</code></pre>\n<p></p>\n<h2>View Composers</h2>\n<p>Los view composers son funciones de retorno o métodos de clase que son ejecutados cuando una\n    vista es renderizada. Si tienes datos que quieres que estén enlazados a una vista cada vez que\n    la vista es renderizada, un view composer puede ayudarte a organizar esa lógica dentro de una\n    sola ubicación.</p>\n<p>Para este ejemplo, vamos a registrar los View Composers dentro de un proveedor de servicio.\n    Usaremos la clase facade <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">View</span>\n    para acceder a la implementación de contrato <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Contracts\\View\\Factory</span>\n    subyacente. Recuerda, Laravel no incluye un directorio predeterminado para los View Composers.\n    Eres libre de organizarlos del modo que desees. Por ejemplo, podrías crear un directorio <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Http/View/Composers</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Providers;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\ServiceProvider;\nclass ComposerServiceProvider extends ServiceProvider\n{\n    /**\n    * Register bindings in the container.\n    *\n    * @return void\n    */\n    public function boot()\n    {\n        // Using class based composers...\n        View::composer(\n            'profile', 'App\\Http\\View\\Composers\\ProfileComposer'\n        );\n        // Using Closure based composers...\n        View::composer('dashboard', function (\\$view) {\n            //\n        });\n    }\n    /**\n    * Register the service provider.\n    *\n    * @return void\n    */\n    public function register()\n    {\n        //\n    }\n}\n</code></pre>\n<p>Nota</p>\n<p>Recuerda, si creas un nuevo proveedor de servicio para contener tus registros de View Composers,\n    necesitarás agregar el proveedor de servicio al arreglo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">providers</span>\n    en el archivo de configuración <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/app.php</span>.\n</p>\n<p>Ahora que hemos registrado el Composer, el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ProfileComposer@compose</span>\n    será ejecutado cada vez que la vista <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">profile</span>\n    esté siendo renderizada. Así que, vamos a definir la clase composer:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\View\\Composers;\nuse Illuminate\\View\\View;\nuse App\\Repositories\\UserRepository;\nclass ProfileComposer\n{\n    /**\n    * The user repository implementation.\n    *\n    * @var UserRepository\n    */\n    protected \\$users;\n    /**\n    * Create a new profile composer.\n    *\n    * @param  UserRepository  \\$users\n    * @return void\n    */\n    public function __construct(UserRepository \\$users)\n    {\n        // Dependencies automatically resolved by service container...\n        \\$this-&gt;users = \\$users;\n    }\n    /**\n    * Bind data to the view.\n    *\n    * @param  View  \\$view\n    * @return void\n    */\n    public function compose(View \\$view)\n    {\n        \\$view-&gt;with('count', \\$this-&gt;users-&gt;count());\n    }\n}\n</code></pre>\n<p>Justo antes de que la vista sea renderizada, el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">compose</span>\n    del Composer es ejecutado con la instancia <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\View\\View</span>.\n    Puedes usar el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">with</span>\n    para enlazar datos a la vista.</p>\n<p>TIP</p>\n<p>Todos los View Composers son resueltos por medio del contenedor de servicio, de modo que puedas\n    colocar la referencia a cualquiera de las dependencias que necesites dentro de un constructor\n    del Composer.</p>\n<h4>Adjuntando un composer a múltiples vistas</h4>\n<p>Puedes adjuntar un View Composer a múltiples vistas de una vez al pasar un arreglo de vistas como\n    primer argumento del método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">composer</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>View::composer(\n    ['profile', 'dashboard'],\n    'App\\Http\\View\\Composers\\MyViewComposer'\n);\n</code></pre>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">composer</span>\n    también acepta el caracter <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">*</span> como\n    un comodín, permitiendo que adjuntes un Composer a todas las vistas:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>View::composer('*', function (\\$view) {\n    //\n});\n</code></pre>\n<h4>View Creators</h4>\n<p><strong>View Creators</strong> (creadores de vistas) son muy similares a los View Composers; sin\n    embargo, son ejecutados inmediatamente después de que la vista sea instanciada en lugar de\n    esperar hasta que la vista sea renderizada. Para registrar un View Creator, usa el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">creator</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>View::creator('profile', 'App\\Http\\View\\Creators\\ProfileCreator');\n</code></pre>\n</div>"
      },
      {
        "titulo": "Generación de URL",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Generación de URLs</h1>\n<ul>\n    <li>Introducción</li>\n    <li>\n        Fundamentos\n        <ul>\n            <li>Generando URLs básicas</li>\n            <li>Accediendo la URL actual</li>\n        </ul>\n    </li>\n    <li>\n        URLs para rutas nombradas\n        <ul>\n            <li>URLs firmadas</li>\n        </ul>\n    </li>\n    <li>URLs para acciones de controlador</li>\n    <li>Valores predeterminados</li>\n</ul>\n<p></p>\n<h2>Introducción</h2>\n<p>Laravel proporciona varios helpers para asistirte en la generación de URLs para tu aplicación.\n    Éstos son útiles principalmente al momento de construir enlaces en tus plantillas y respuestas\n    de API, o al momento de generar respuestas redireccionadas a otra parte de tu aplicación.</p>\n<p></p>\n<h2>Fundamentos</h2>\n<p></p>\n<h3>Generando URLs básicas</h3>\n<p>El helper <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url</span> puede\n    ser usado para generar URLs arbitrarias en tu aplicación. La URL generada utilizará\n    automáticamente el esquema (HTTP o HTTPS) y el host de la solicitud actual:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$post = App\\Post::find(1);\necho url(\"/posts/{\\$post-&gt;id}\");\n// http://example.com/posts/1\n</code></pre>\n<p></p>\n<h3>Accediendo la URL actual</h3>\n<p>Si ninguna ruta es proporcionada al helper <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url</span>, una\n    instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Routing\\UrlGenerator</span>\n    es devuelta, permitiéndote que accedas información sobre la URL actual:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>// Obtener la URL actual sin la cadena de consulta...\necho url()-&gt;current();\n// Obtener la URL actual incluyendo la cadena de consulta...\necho url()-&gt;full();\n// Obtener la URL completa de la solicitud anterior...\necho url()-&gt;previous();\n</code></pre>\n<p>\n    Cada uno de estos métodos también puede ser accedido por medio del\n    facade\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">URL</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\URL;\necho URL::current();\n</code></pre>\n<p></p>\n<h2>URLs para rutas nombradas</h2>\n<p>El helper <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">route</span>\n    puede ser usado para generar URLs para rutas nombradas. Las rutas nombradas permiten generar\n    URLs sin estar acopladas a la URL real definida en la ruta. Por lo tanto, si la URL de la ruta\n    cambia, no es necesario realizar cambios en las llamadas a la función <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">route</span>.\n    Por ejemplo, imagina que tu aplicación contiene una ruta definida de la siguiente forma:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('/post/{post}', function () {\n    //\n})-&gt;name('post.show');\n</code></pre>\n<p>Para generar una URL a esta ruta, puedes usar el helper <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">route</span> así:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>echo route('post.show', ['post' =&gt; 1]);\n// http://example.com/post/1\n</code></pre>\n<p>\n    Con frecuencia estarás generando URLs usando la clave primaria de\n    modelos de Eloquent\n    . Por esta razón, puedes pasar modelos de Eloquent como valores de parámetros. El helper <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">route</span>\n    extraerá automáticamente la clave primaria del modelo:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>echo route('post.show', ['post' =&gt; \\$post]);\n</code></pre>\n<p>El helper <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">route</span>\n    también se puede usar para generar URL para rutas con múltiples parámetros:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('/post/{post}/comment/{comment}', function () {\n    //\n})-&gt;name('comment.show');\necho route('comment.show', ['post' =&gt; 1, 'comment' =&gt; 3]);\n// http://example.com/post/1/comment/3\n</code></pre>\n<p></p>\n<h3>URLs firmadas</h3>\n<p>Laravel te permite crear fácilmente URLs \"firmadas\" para rutas nombradas. Estas URLs tienen un\n    hash de \"firma\" añadido a la cadena de solicitud que le permite a Laravel verificar que la URL\n    no haya sido modificada desde que fue creada. Las URLs firmadas son especialmente útiles para\n    rutas que están disponibles públicamente pero necesitan una capa de protección contra la\n    manipulación de URLs.</p>\n<p>Por ejemplo, puedes usar URLs firmadas para implementar un enlace público de \"anular suscripción\"\n    que es enviado por correo electrónico a tus clientes. Para crear una URL firmada para una ruta\n    nombrada, usa el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">signedRoute</span>\n    del facade <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">URL</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\URL;\nreturn URL::signedRoute('unsubscribe', ['user' =&gt; 1]);\n</code></pre>\n<p>Si te gustaría generar una ruta firmada temporal que expira, puedes usar el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">temporarySignedRoute</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\URL;\nreturn URL::temporarySignedRoute(\n    'unsubscribe', now()-&gt;addMinutes(30), ['user' =&gt; 1]\n);\n</code></pre>\n<h4>Validando solicitudes a rutas firmadas</h4>\n<p>Para verificar que una solicitud entrate tiene una firma válida, debes llamar al método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hasValidSignature</span>\n    en el <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Request</span>\n    entrante:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Http\\Request;\nRoute::get('/unsubscribe/{user}', function (Request \\$request) {\n    if (! \\$request-&gt;hasValidSignature()) {\n        abort(401);\n    }\n    // ...\n})-&gt;name('unsubscribe');\n</code></pre>\n<p>Alternativamente, puedes asignar el middleware <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Routing\\Middleware\\ValidateSignature</span>\n    a la ruta. Si aún no está presente, debes asignar una clave a este middleware en el arreglo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">routeMiddleware</span>\n    de tu kernel HTTP:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* The application's route middleware.\n*\n* These middleware may be assigned to groups or used individually.\n*\n* @var array\n*/\nprotected \\$routeMiddleware = [\n    'signed' =&gt; \\Illuminate\\Routing\\Middleware\\ValidateSignature::class,\n];\n</code></pre>\n<p>Una vez que has registrado el middleware en tu kernel, puedes adjuntarlo a una ruta. Si la\n    solicitud entrante no tiene una firma válida, el middleware automáticamente retornará una\n    respuesta de error <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">403</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::post('/unsubscribe/{user}', function (Request \\$request) {\n    // ...\n})-&gt;name('unsubscribe')-&gt;middleware('signed');\n</code></pre>\n<p></p>\n<h2>URLs para acciones de controlador</h2>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">action</span>\n    genera una URL para la acción de controlador dada. No necesitarás pasar el espacio de nombre\n    completo del controlador. En lugar de eso, pasa el nombre de clase del controlador relativo al\n    espacio de nombre <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Http\\Controllers</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$url = action('HomeController@index');\n</code></pre>\n<p>También puedes hacer referencia a acciones con una sintaxis de arreglo \"callable\":</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use App\\Http\\Controllers\\HomeController;\n\\$url = action([HomeController::class, 'index']);\n</code></pre>\n<p>Si el método del controlador acepta parámetros de ruta, puedes pasarlos como segundo argumento de\n    la función:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$url = action('UserController@profile', ['id' =&gt; 1]);\n</code></pre>\n<p></p>\n<h2>Valores predeterminados</h2>\n<p>Para algunas aplicaciones, puedes querer especificar valores predeterminados para toda la\n    solicitud en los parámetros de ciertas URL. Por ejemplo, imagina que muchas de tus rutas definen\n    un parámetro <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">{locale}</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('/{locale}/posts', function () {\n    //\n})-&gt;name('post.index');\n</code></pre>\n<p>\n    Es complicado pasar siempre el parámetro <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">locale</span>\n    cada vez que ejecutas el helper <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">route</span>.\n    Así, puedes usar el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">URL::defaults</span>\n    para definir un valor predeterminado para este parámetro que siempre será aplicado durante la\n    solicitud actual. Puedes querer ejecutar este método desde un\n    middleware de ruta\n    de modo que tengas acceso a la solicitud actual:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Middleware;\nuse Closure;\nuse Illuminate\\Support\\Facades\\URL;\nclass SetDefaultLocaleForUrls\n{\n    public function handle(\\$request, Closure \\$next)\n    {\n        URL::defaults(['locale' =&gt; \\$request-&gt;user()-&gt;locale]);\n        return \\$next(\\$request);\n    }\n}\n</code></pre>\n<p>Una vez que el valor predeterminado para el parámetro <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">locale</span> ha\n    sido establecido, ya no estás obligado a pasar su valor al momento de generar URLs por medio del\n    helper <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">route</span>.\n</p>\n</div>"
      },
      {
        "titulo": "Sesión HTTP",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Sesión HTTP</h1>\n<ul>\n    <li>\n        Introducción\n        <ul>\n            <li>Configuración</li>\n            <li>Prerequisitos de manejador</li>\n        </ul>\n    </li>\n    <li>\n        Usando la sesión\n        <ul>\n            <li>Obteniendo datos</li>\n            <li>Almacenando datos</li>\n            <li>Datos instantáneos</li>\n            <li>Eliminando datos</li>\n            <li>Regenerando el ID de la sesión</li>\n        </ul>\n    </li>\n    <li>\n        Agregando manejadores de sesión personalizada\n        <ul>\n            <li>Implementando el manejador</li>\n            <li>Registrando el manejador</li>\n        </ul>\n    </li>\n</ul>\n<p></p>\n<h2>Introducción</h2>\n<p>\n    Ya que las aplicaciones manejadas por HTTP son sin estado, las sesiones proporcionan una forma\n    de almacenar información sobre el usuario a través de múltiples solicitudes. Laravel viene con\n    una variedad de backends de sesión que son accedidos a través de una expresiva API unificada. El\n    soporte para los backends populares tales como\n    Memcached\n    <outboundlink></outboundlink>\n    ,\n    Redis\n    <outboundlink></outboundlink>\n    y bases de datos es incluido de forma predeterminada.\n</p>\n<p></p>\n<h3>Configuración</h3>\n<p>El archivo de configuración de sesión es almacenado en <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/session.php</span>.\n    Asegurate de revisar las opciones disponibles para ti en este archivo. De forma predeterminada,\n    Laravel es configurado para usar el manejador de sesión <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">file</span>,\n    el cual trabajará bién para muchas aplicaciones. En aplicaciones de producción, puedes\n    considerar usar los manejadores <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">memcached</span>\n    o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redis</span>\n    para incluso alcanzar un desempeño de sesión más rápido.</p>\n<p>La opción de configuración <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">driver</span> de\n    la sesión define donde los datos de la sesión serán almacenados para cada solicitud. Laravel\n    viene con varios excelentes manejadores de forma predeterminada.</p>\n<ul>\n    <li><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">file</span>\n        - las sesiones son almacenadas en <span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">storage/framework/sessions</span>.\n    </li>\n    <li><span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cookie</span>\n        - las sesiones son almacenadas en cookies encriptados seguros.\n    </li>\n    <li><span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database</span>\n        - las sesiones son almacenadas en una base de datos relacional.\n    </li>\n    <li><span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">memcached</span>\n        /\n        <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redis</span>\n        - las sesiones son almacenadas en rápidos almacenes basados en cache.\n    </li>\n    <li><span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">array</span>\n        - las sesiones son almacenadas en un arreglo de PHP y no serán guardadas de forma\n        permanente.\n    </li>\n</ul>\n<p>TIP</p>\n<p>\n    El driver array es usado durante\n    las pruebas\n    y previene que los datos almacenados en la sesión sean guardados de forma permanente.\n</p>\n<p></p>\n<h3>Prerequisitos del driver</h3>\n<h4>Base de datos</h4>\n<p>Al momento de usar el driver de sesión <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database</span>,\n    necesitarás crear una tabla para contener los elementos de la sesión. A continuación se muestra\n    una declaración de <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Schema</span>\n    de ejemplo para la tabla:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Schema::create('sessions', function (\\$table) {\n    \\$table-&gt;string('id')-&gt;unique();\n    \\$table-&gt;unsignedInteger('user_id')-&gt;nullable();\n    \\$table-&gt;string('ip_address', 45)-&gt;nullable();\n    \\$table-&gt;text('user_agent')-&gt;nullable();\n    \\$table-&gt;text('payload');\n    \\$table-&gt;integer('last_activity');\n});\n</code></pre>\n<p>Puedes usar el comando Artisan <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">session:table</span>\n    para generar esta migración:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan session:table\nphp artisan migrate\n</code></pre>\n<h4>Redis</h4>\n<p>Antes de usar sesiones Redis con Laravel, necesitarás instalar el paquete <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">predis/predis</span>\n    (~1.0) por medio de Composer. Puedes configurar tus conexiones Redis en el archivo de\n    configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database</span>.\n    En el archivo de configuración de <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">session</span>,\n    la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">connection</span>\n    puede ser usada para especificar cuál conexión Redis es usada por la sesión.</p>\n<p></p>\n<h2>Usando la sesión</h2>\n<p></p>\n<h3>Obteniendo datos</h3>\n<p>Hay dos formás principales de trabajar con datos de sesión en Laravel: el helper global <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">session</span> y\n    por medio de una instancia <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Request</span>.\n    Primero, vamos a echar un vistazo al acceder a la sesión por medio de una instancia <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Request</span>,\n    la cual puede ser referenciada en un método de controlador. Recuerda, las dependencias de\n    métodos de controlador son inyectadas automáticamente por medio del contenedor de servicio de\n    Laravel:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nclass UserController extends Controller\n{\n    /**\n    * Show the profile for the given user.\n    *\n    * @param  Request  \\$request\n    * @param  int  \\$id\n    * @return Response\n    */\n    public function show(Request \\$request, \\$id)\n    {\n        \\$value = \\$request-&gt;session()-&gt;get('key');\n        //\n    }\n}\n</code></pre>\n<p>Cuando obtienes un elemento de la sesión, también puedes pasar un valor predeterminado como\n    segundo argumento del método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span>.\n    Este valor predeterminado será devuelto si la clave especificada no existe en la sesión. Si\n    pasas una <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span>\n    como el valor predeterminado del método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span> y\n    la clave solicitada no existe, la <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span>\n    será ejecutada y su resultado devuelto:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$value = \\$request-&gt;session()-&gt;get('key', 'default');\n\\$value = \\$request-&gt;session()-&gt;get('key', function () {\n    return 'default';\n});\n</code></pre>\n<h4>Helper global de sesión</h4>\n<p>También puedes usar la función global de PHP <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">session</span>\n    para obtener y almacenar datos en la sesión. Cuando el helper <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">session</span>\n    es ejecutado con un solo argumento de cadena, devolverá el valor de esa clave de sesión. Cuando\n    el helper es ejecutado con una arreglo de pares clave / valor, esos valores serán almacenados en\n    la sesión:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('home', function () {\n    // Retrieve a piece of data from the session...\n    \\$value = session('key');\n    // Specifying a default value...\n    \\$value = session('key', 'default');\n    // Store a piece of data in the session...\n    session(['key' =&gt; 'value']);\n});\n</code></pre>\n<p>TIP</p>\n<p>Hay una pequeña diferencia práctica entre usar la sesión por medio de una instancia de solicitud\n    HTTP contra usar el helper global <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">session</span>.\n    Ambos métodos pueden ser probados por medio del método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">assertSessionHas</span>,\n    el cual está disponible en todos tus casos de prueba.</p>\n<h4>Obteniendo todos los datos de sesión</h4>\n<p>Si prefieres obtener todos los datos en la sesión, puedes usar el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">all</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$data = \\$request-&gt;session()-&gt;all();\n</code></pre>\n<h4>Determinando si un elemento existe en la sesión</h4>\n<p>Para determinar si un elemento está presente en la sesión, puedes usar el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">has</span>. El\n    método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">has</span>\n    devuelve <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>\n    si el valor está presente y no es <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>if (\\$request-&gt;session()-&gt;has('users')) {\n    //\n}\n</code></pre>\n<p>Para determinar si un elemento está presente en la sesión, incluso si su valor es <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>,\n    puedes usar el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">exists</span>.\n    El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">exists</span>\n    devuelve <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>\n    si el valor está presente:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>if (\\$request-&gt;session()-&gt;exists('users')) {\n    //\n}\n</code></pre>\n<p></p>\n<h3>Almacenando datos</h3>\n<p>Para almacenar datos en la sesión, típicamente usarás el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">put</span> o el\n    helper <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">session</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>// Via a request instance...\n\\$request-&gt;session()-&gt;put('key', 'value');\n// Via the global helper...\nsession(['key' =&gt; 'value']);\n</code></pre>\n<h4>Agregar a valores del arreglo de sesión</h4>\n<p>El método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">push</span> puede\n    ser usado para agregar un nuevo valor a un valor de sesión que está en un arreglo. Por ejemplo,\n    si la clave <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">user.teams</span>\n    contiene un arreglo de nombres de equipo, puedes agregar un nuevo valor al arreglo de la\n    siguiente forma:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$request-&gt;session()-&gt;push('user.teams', 'developers');\n</code></pre>\n<h4>Obteniendo y eliminando un elemento</h4>\n<p>El método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pull</span>\n    obtendrá y eliminará un elemento de la sesión en una sola instrucción:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$value = \\$request-&gt;session()-&gt;pull('key', 'default');\n</code></pre>\n<p></p>\n<h3>Datos instantáneos</h3>\n<p>Algunas veces puedes querer almacenar varios elementos en la sesión para la próxima solicitud.\n    Puedes hacer eso usando el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">flash</span>.\n    Los datos almacenados en la sesión usando este método solamente estarán disponibles durante la\n    subsecuente solicitud HTTP, y luego serán eliminados. Los datos instantáneos son principalmente\n    útiles para mensajes de estado con vida corta:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$request-&gt;session()-&gt;flash('status', 'Task was successful!');\n</code></pre>\n<p>Si necesitas mantener tus datos instantáneos alrededor para varias solicitudes, puedes usar el\n    método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">reflash</span>,\n    el cuál mantendrá todos los datos instantáneos para una solicitud adicional. Si solamente\n    necesitas mantener datos instantáneos específicos, puedes usar el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">keep</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$request-&gt;session()-&gt;reflash();\n\\$request-&gt;session()-&gt;keep(['username', 'email']);\n</code></pre>\n<p></p>\n<h3>Eliminando datos</h3>\n<p>El método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">forget</span>\n    removerá una porción de datos de la sesión. Si prefieres remover todos los datos de la sesión,\n    puedes usar el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">flush</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>// Forget a single key...\n\\$request-&gt;session()-&gt;forget('key');\n// Forget multiple keys...\n\\$request-&gt;session()-&gt;forget(['key1', 'key2']);\n\\$request-&gt;session()-&gt;flush();\n</code></pre>\n<p></p>\n<h3>Regenerando el ID de la sesión</h3>\n<p>\n    Regenerar el ID de la sesión es hecho frecuentemente con el propósito de prevenir que usuarios\n    maliciosos exploten un ataque de\n    fijación de sesión\n    en tu aplicación.\n</p>\n<p>Laravel regenera automáticamente el ID de la sesión durante la autenticación si estás usando el\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">LoginController</span>\n    integrado; sin embargo, si necesitas regenerar manualmente el ID de la sesión, puedes usar el\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">regenerate</span>.\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$request-&gt;session()-&gt;regenerate();\n</code></pre>\n<p></p>\n<h2>Agregando manejadores de sesión personalizados</h2>\n<p></p>\n<h4>Implementando el manejador</h4>\n<p>Tu manejador de sesión personalizado debería implementar la interface <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">SessionHandlerInterface</span>.\n    Esta interface contiene justo unos cuantos métodos que necesitamos implementar. Una\n    implementación MongoDB truncada luce de forma similar a lo siguiente:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Extensions;\nclass MongoSessionHandler implements \\SessionHandlerInterface\n{\n    public function open(\\$savePath, \\$sessionName) {}\n    public function close() {}\n    public function read(\\$sessionId) {}\n    public function write(\\$sessionId, \\$data) {}\n    public function destroy(\\$sessionId) {}\n    public function gc(\\$lifetime) {}\n}\n</code></pre>\n<p>TIP</p>\n<p>Laravel no viene con un directorio para contener tus extensiones. Eres libre de colocarlos en\n    cualquier parte que quieras. En este ejemplo, hemos creado un directorio <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Extensions</span>\n    para alojar el manejador <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">MongoSessionHandler</span>.\n</p>\n<p>Ya que el propósito de estos métodos no es entendible rápidamente y sin dificultad, vamos a\n    cubrir rápidamente lo que cada uno de estos métodos hace:</p>\n<ul>\n    <li>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">open</span>\n        típicamente sería usado en sistemas de almacenamiento de sesión basada en archivo. Ya que\n        Laravel viene con un manejador de sesión <span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">file</span>,\n        casi nunca necesitarás poner cualquier cosa en este método. Puedes dejarlo como un stub\n        vacío. Es una característica de diseño de interface pobre (lo que discutiremos más tarde)\n        que PHP nos oblige a implementar este método.\n    </li>\n    <li>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">close</span>,\n        como el método <span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">open</span>,\n        también puede ser descartado. Para la mayoría de los drivers, no es necesario.\n    </li>\n    <li>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">read</span>\n        debería devolver la versión de cadena de la sesión de datos asociada con la <span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$sessionId</span>\n        dada. No hay necesidad de hacer alguna serialización u otra codificación al momento de\n        obtener o almacenar los datos de la sesión en tu manejador, ya que Laravel ejcutará la\n        serialización por ti.\n    </li>\n    <li>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">write</span>\n        debería escribir la cadena <span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$data</span>\n        asociada dada con la <span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$sessionId</span>\n        para algún sistema de almacenamiento persistente, tal como MongoDB, Dynamo, etc. Otra vez,\n        no deberías ejecutar alguna serialización - Laravel ya ha manejado esto por ti.\n    </li>\n    <li>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">destroy</span>\n        debería remover los datos asociados con la <span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$sessionId</span>\n        desde el almacenamiento persistente.\n    </li>\n    <li>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">gc</span>\n        debería destruir todos los datos de la sesión que son más viejos que el <span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$lifetime</span>\n        dado, el cual es una marca de tiempo UNIX. Para los sistemas que se auto-expiran como\n        Memcached y Redis, este método puede ser dejado vacío.\n    </li>\n</ul>\n<p></p>\n<h4>Registrando el manejador</h4>\n<p>Una vez que tu manejador ha sido implementado, estás listo para registrarlo en el framework. Para\n    agregar manejadores adicionales para el backend de sesión de Laravel, puedes usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">extend</span>\n    del método en la <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Session</span>\n    facade. Deberías ejecutar el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">extend</span>\n    desde el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span>\n    de un proveedor de servicio. Puedes hacer esto desde el existente <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AppServiceProvider</span>\n    o crear un nuevo proveedor de servicios completo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Providers;\nuse App\\Extensions\\MongoSessionHandler;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\ServiceProvider;\nclass SessionServiceProvider extends ServiceProvider\n{\n    /**\n    * Perform post-registration booting of services.\n    *\n    * @return void\n    */\n    public function boot()\n    {\n        Session::extend('mongo', function (\\$app) {\n            // Return implementation of SessionHandlerInterface...\n            return new MongoSessionHandler;\n        });\n    }\n    /**\n    * Register bindings in the container.\n    *\n    * @return void\n    */\n    public function register()\n    {\n        //\n    }\n}\n</code></pre>\n<p>Una vez que el manejador de la sesión ha sido registrado, puedes usar el manejador <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mongo</span> en\n    tu archivo de configuración <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/session.php</span>.\n</p>\n</div>"
      },
      {
        "titulo": "Validación",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Validación</h1>\n<ul>\n    <li>Introducción</li>\n    <li>\n        Inicio rápido de validación\n        <ul>\n            <li>Definiendo las rutas</li>\n            <li>Creando el controlador</li>\n            <li>Escribiendo la lógica de validación</li>\n            <li>Mostrando los errores de validación</li>\n            <li>Una observación sobre los campos opcionales</li>\n        </ul>\n    </li>\n    <li>\n        Validación de solicitudes de formulario\n        <ul>\n            <li>Creando solicitudes de formulario</li>\n            <li>Autorizando solicitudes de formulario</li>\n            <li>Personalizando los mensajes de error</li>\n            <li>Personalizando los atributos de validación</li>\n        </ul>\n    </li>\n    <li>\n        Creando validadores manualmente\n        <ul>\n            <li>Redirección automática</li>\n            <li>Paquetes de errores con nombres</li>\n            <li>Hook de validación posterior</li>\n        </ul>\n    </li>\n    <li>\n        Trabajando con los mensajes de error\n        <ul>\n            <li>Personalizar los mensajes de error</li>\n        </ul>\n    </li>\n    <li>Reglas de validación disponibles</li>\n    <li>Agregando reglas condicionalmente</li>\n    <li>Validando arreglos</li>\n    <li>\n        Personalizar las reglas de validación\n        <ul>\n            <li>Usando objetos de regla</li>\n            <li>Usando closures</li>\n            <li>Usando extensiones</li>\n            <li>Extensiones implicitas</li>\n        </ul>\n    </li>\n</ul>\n<p></p>\n<h2>Introducción</h2>\n<p>Laravel proporciona varios enfoques diferentes para validar los datos entrantes de tu aplicación.\n    De forma predeterminada, la clase base del controlador de Laravel usa una característica <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ValidatesRequests</span>\n    la cual proporciona un método conveniente para validar la solicitud HTTP entrante con una\n    variedad de poderosas reglas de validación.</p>\n<p></p>\n<h2>Inicio rápido de validación</h2>\n<p>Para aprender sobre las poderosas características de validación de Laravel, vamos a observar un\n    ejemplo completo validando un formulario y mostrando los mensajes de error devueltos al\n    usuario.</p>\n<p></p>\n<h3>Definiendo las rutas</h3>\n<p>Primero, vamos a asumir que tenemos las rutas siguientes definidas en nuestro archivo <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">routes/web.php</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('post/create', 'PostController@create');\nRoute::post('post', 'PostController@store');\n</code></pre>\n<p>La ruta <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">GET</span>\n    mostrará un formulario al usuario para crear un nuevo post de blog, mientras que la ruta <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">POST</span>\n    guardará el nuevo post de blog en la base de datos.</p>\n<p></p>\n<h3>Creando el controlador</h3>\n<p>Luego, vamos a observar un simple controlador que maneja estas rutas. Dejaremos el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">store</span>\n    vacío por ahora:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nclass PostController extends Controller\n{\n    /**\n    * Show the form to create a new blog post.\n    *\n    * @return Response\n    */\n    public function create()\n    {\n        return view('post.create');\n    }\n    /**\n    * Store a new blog post.\n    *\n    * @param  Request  \\$request\n    * @return Response\n    */\n    public function store(Request \\$request)\n    {\n        // Validate and store the blog post...\n    }\n}\n</code></pre>\n<p></p>\n<h3>Escribiendo la lógica de validación</h3>\n<p>Ahora estamos listos para completar nuestro método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">store</span> con\n    la lógica para validar el nuevo post de blog. Para hacer esto, usaremos el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">validate</span>\n    proporcionado por el objeto <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Http\\Request</span>.\n    Si las reglas de validación pasan, tu código continuará su ejecución normalmente; sin embargo,\n    si la validación falla, se arrojará una excepción y la respuesta de error apropiada será\n    devuelta automáticamente al usuario. En el caso de una solicitud HTTP tradicional, se generará\n    una respuesta de redirección, mientras una respuesta JSON será enviada para las solicitudes\n    AJAX.</p>\n<p>Para lograr una mejor comprensión del método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">validate</span>,\n    regresemos al método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">store</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Store a new blog post.\n*\n* @param  Request  \\$request\n* @return Response\n*/\npublic function store(Request \\$request)\n{\n    \\$validatedData = \\$request-&gt;validate([\n        'title' =&gt; 'required|unique:posts|max:255',\n        'body' =&gt; 'required',\n    ]);\n    // The blog post is valid...\n}\n</code></pre>\n<p>Como puedes ver, pasamos las reglas de validación deseadas dentro del método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">validate</span>.\n    Otra vez, si la validación falla, se generará la respuesta apropiada. Si la validación pasa,\n    nuestro controlador continuará la ejecución normalmente.</p>\n<h4>Deteniendo en la primera falla de validación</h4>\n<p>Algunas veces puede que desees detener la ejecución de las reglas de validación sobre un atributo\n    después de la primera falla de validación. Para hacer eso, asigna la regla <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">bail</span>\n    al atributo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$request-&gt;validate([\n    'title' =&gt; 'bail|required|unique:posts|max:255',\n    'body' =&gt; 'required',\n]);\n</code></pre>\n<p>En este ejemplo, si la regla <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unique</span> del\n    atributo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">title</span>\n    falla, la regla <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">max</span> no\n    será verificada. Las reglas serán validadas en el orden que sean asignadas.</p>\n<h4>Una obsevación sobre los atributos anidados</h4>\n<p>Si tu solicitud HTTP contiene parámetros \"anidados\", puedes especificarlos en tus reglas de\n    validación usando la sintaxis de \"punto\":</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$request-&gt;validate([\n    'title' =&gt; 'required|unique:posts|max:255',\n    'author.name' =&gt; 'required',\n    'author.description' =&gt; 'required',\n]);\n</code></pre>\n<p></p>\n<h3>Mostrando los errores de validación</h3>\n<p>\n    ¿Qué sucede si los parámetros de solicitud entrantes no pasan las reglas de validación dados?\n    Cómo mencionamos anteriormente, Laravel redirigirá al usuario de regreso a su ubicación previa.\n    En adición, todos los errores de validación serán automáticamente\n    movidos instantáneamente a la sesión\n    .\n</p>\n<p>De nuevo, observa que no tuvimos que enlazar explícitamente los mensajes de error con la vista en\n    nuestra ruta <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">GET</span>.\n    Esto es porque Laravel revisará los errores en la sesión de datos y los enlazará automáticamente\n    a la vista si están disponibles. La variable <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$errors</span>\n    será una instancia de <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Support\\MessageBag</span>.\n    Para mayor información sobre cómo trabajar con este objeto, revisa su documentación.</p>\n<p>TIP</p>\n<p>La variable <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$errors</span>\n    es enlazada a la vista por el middleware <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\View\\Middleware\\ShareErrorsFromSession</span>,\n    el cual es proporcionado por el grupo de middleware <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">web</span>.\n    <strong>Cuando este middleware se aplique una variable <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$errors</span>\n        siempre estará disponible en tus vistas</strong>, permitiendo que asumas convenientemente\n    que la variable <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$errors</span>\n    está definida siempre y puede ser usada con seguridad.</p>\n<p>Así, en nuestro ejemplo, el usuario será redirigido al método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span> de\n    nuestro controlador cuando la validación falle, permitiéndonos que muestre los mensajes de error\n    en la vista:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;!-- /resources/views/post/create.blade.php --&gt;\n&lt;h1&gt;Create Post&lt;/h1&gt;\n@if (\\$errors-&gt;any())\n    &lt;div class=\"alert alert-danger\"&gt;\n        &lt;ul&gt;\n            @foreach (\\$errors-&gt;all() as \\$error)\n                &lt;li&gt;{{ \\$error }}&lt;/li&gt;\n            @endforeach\n        &lt;/ul&gt;\n    &lt;/div&gt;\n@endif\n&lt;!-- Create Post Form --&gt;\n</code></pre>\n<h4>Directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@error</span>\n</h4>\n<p>También puedes usar la directiva <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@error</span> de\n    Blade para rápidamente comprobar si los mensajes de error de validación existen para un atributo\n    dado. Dentro de una directiva <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@error</span>,\n    puedes mostrar la variable <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$message</span>\n    para mostrar el mensaje de error:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;!-- /resources/views/post/create.blade.php --&gt;\n&lt;label for=\"title\"&gt;Post Title&lt;/label&gt;\n&lt;input id=\"title\" type=\"text\" class=\"@error('title') is-invalid @enderror\"&gt;\n@error('title')\n    &lt;div class=\"alert alert-danger\"&gt;{{ \\$message }}&lt;/div&gt;\n@enderror\n</code></pre>\n<p></p>\n<h3>Una observación sobre los campos opcionales</h3>\n<p>De forma predeterminada, Laravel incluye los middleware <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">TrimStrings</span>\n    y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ConvertEmptyStringsToNull</span>\n    en la pila global de middleware de tu aplicación. Estos middleware son listados en la pila por\n    la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Http\\Kernel</span>.\n    Debido a esto, con frecuencia necesitarás marcar tus campos \"opcionales\" de solicitud como <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">nullable</span>\n    si no quieres que el validador considere los valores <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>\n    como no válidos. Por ejemplo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$request-&gt;validate([\n    'title' =&gt; 'required|unique:posts|max:255',\n    'body' =&gt; 'required',\n    'publish_at' =&gt; 'nullable|date',\n]);\n</code></pre>\n<p>En este ejemplo, estamos especificando que el campo <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">publish_at</span>\n    puede que sea o <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span> o\n    una representación de fecha válida. Si el modificador <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">nullable</span>\n    no es agregado a la definición de la regla, el validador consideraría el <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>\n    como una fecha no válida.</p>\n<p></p>\n<h4>Solicitudes AJAX y validación</h4>\n<p>En este ejemplo, usamos un formulario tradicional para enviar datos a la aplicación. Sin embargo,\n    muchas aplicaciones usan solicitudes AJAX. Al momento de usar el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">validate</span>\n    durante una solicitud AJAX, Laravel no generará una respuesta de redirección. En su lugar,\n    Laravel genera una respuesta JSON conteniendo todos los errores de validación. Esta respuesta\n    JSON será enviada con un código de estado HTTP 422.</p>\n<p></p>\n<h2>Validación de solicitud de formulario</h2>\n<p></p>\n<h3>Creando solicitudes de formulario (form request)</h3>\n<p>Para escenarios de validación más complejos, puede que desees crear una \"solicitud de formulario\n    (form request)\". Las Form Request son clases de solicitud personalizadas que contienen la lógica\n    de validación. Para crear una clase de Form Request, usa el comando de CLI de Artisan <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:request</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan make:request StoreBlogPost\n</code></pre>\n<p>La clase generada será colocada en el directorio <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Http/Requests</span>.\n    Si este directorio no existe, será creado cuando ejecutes el comando <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:request</span>.\n    Agreguemos unas cuantas reglas de validación al método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">rules</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the validation rules that apply to the request.\n*\n* @return array\n*/\npublic function rules()\n{\n    return [\n        'title' =&gt; 'required|unique:posts|max:255',\n        'body' =&gt; 'required',\n    ];\n}\n</code></pre>\n<p>TIP</p>\n<p>Puedes declarar el tipo de cualquier dependencia que necesites dentro de la firma del método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">rules</span>.\n    Se resolverán automáticamente a través del contenedor de servicio de Laravel.</p>\n<p>Así que, ¿Cómo son evaluadas las reglas de validación? Todo lo que necesitas hacer es poner la\n    referencia de la solicitud en tu método de controlador. La Form Request entrante es validada\n    antes de que el método de controlador sea ejecutado, significa que no necesitas complicar tu\n    controlador con ninguna lógica de validación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Store the incoming blog post.\n*\n* @param  StoreBlogPost  \\$request\n* @return Response\n*/\npublic function store(StoreBlogPost \\$request)\n{\n    // The incoming request is valid...\n    // Retrieve the validated input data...\n    \\$validated = \\$request-&gt;validated();\n}\n</code></pre>\n<p>Si la validación falla, una respuesta de redirección será generada para enviar al usuario de\n    vuelta a su ubicación previa. Los errores también serán movidos instantáneamente a la sesión de\n    modo que estén disponibles para mostrarlos. Si la solicitud fuese una solicitud AJAX, una\n    respuesta HTTP con un código de estado 422 será devuelta al usuario incluyendo una\n    representación JSON de los errores de validación.</p>\n<h4>Agregando hooks posteriores a solicitudes de formularios</h4>\n<p>Si prefieres agregar un hook \"posterior\" a una Form Request, puedes usar el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withValidator</span>.\n    Este método recibe el validador completamente construido, permitiendo que ejecutes cualquiera de\n    sus métodos antes de que las reglas de validación sean evaluadas realmente:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Configure the validator instance.\n*\n* @param  \\Illuminate\\Validation\\Validator  \\$validator\n* @return void\n*/\npublic function withValidator(\\$validator)\n{\n    \\$validator-&gt;after(function (\\$validator) {\n        if (\\$this-&gt;somethingElseIsInvalid()) {\n            \\$validator-&gt;errors()-&gt;add('field', 'Something is wrong with this field!');\n        }\n    });\n}\n</code></pre>\n<p></p>\n<h3>Autorizando solicitudes de formularios</h3>\n<p>La clase Form Request también contiene un método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">authorize</span>.\n    Dentro de este método, puedes verificar si el usuario autenticado realmente tiene la autoridad\n    para actualizar un recurso dado. Por ejemplo, puedes determinar si a un usuario le pertenece el\n    comentario del blog que está intentando actualizar</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Determine if the user is authorized to make this request.\n*\n* @return bool\n*/\npublic function authorize()\n{\n    \\$comment = Comment::find(\\$this-&gt;route('comment'));\n    return \\$comment &amp;&amp; \\$this-&gt;user()-&gt;can('update', \\$comment);\n}\n</code></pre>\n<p>Dado que todas las form request extienden de la clase solicitud base (Request) de Laravel,\n    podemos usar el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">user</span>\n    para acceder al usuario actualmente autenticado. También observa la llamada al método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">route</span>\n    en el ejemplo anterior. Este método te otorga acceso a los parámetros de URI definidos en la\n    ruta que es ejecutada, tal como el parámetro <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">{comment}</span>\n    en el ejemplo de abajo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::post('comment/{comment}');\n</code></pre>\n<p>Si el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">authorize</span>\n    devuelve <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>,\n    una respuesta HTTP con un código de estado 403 será devuelta automáticamente y tu método de\n    controlador no se ejecutará.</p>\n<p>Si planeas tener la lógica de autorización en otra parte de tu aplicación, devuelve <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span> desde\n    el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">authorize</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Determine if the user is authorized to make this request.\n*\n* @return bool\n*/\npublic function authorize()\n{\n    return true;\n}\n</code></pre>\n<p>TIP</p>\n<p>Puedes declarar el tipo de cualquier dependencia que necesites dentro de la firma del método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">authorize</span>.\n    Se resolverán automáticamente a través de Laravel contenedor de servicio.</p>\n<p></p>\n<h3>Personalizando los mensajes de error</h3>\n<p>Puedes personalizar los mensajes de error usados por la solicitud de formulario al sobrescribir\n    el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">messages</span>.\n    Este método debería devolver un arreglo de atributos / pares de regla y sus correspondientes\n    mensajes de error:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the error messages for the defined validation rules.\n*\n* @return array\n*/\npublic function messages()\n{\n    return [\n        'title.required' =&gt; 'A title is required',\n        'body.required'  =&gt; 'A message is required',\n    ];\n}\n</code></pre>\n<p></p>\n<h3>Personalizando los atributos de validación</h3>\n<p>Si desea que la parte <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">:attribute</span>\n    de su mensaje de validación se reemplace con un nombre de atributo personalizado, puede\n    especificar los nombres personalizados sobrescribiendo el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">attributes</span>.\n    Este método debería devolver un arreglo de pares de atributo / nombre:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get custom attributes for validator errors.\n*\n* @return array\n*/\npublic function attributes()\n{\n    return [\n        'email' =&gt; 'email address',\n    ];\n}\n</code></pre>\n<p></p>\n<h2>Creando validadores manualmente</h2>\n<p>Si no quieres usar el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">messages</span>\n    en la solicitud, puedes crear una instancia de validador manualmente usando la clase facade\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Validator</span>.\n    El método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make</span>\n    en la clase facade genera una nueva instancia del validador:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Support\\Facades\\Validator;\nclass PostController extends Controller\n{\n    /**\n    * Store a new blog post.\n    *\n    * @param  Request  \\$request\n    * @return Response\n    */\n    public function store(Request \\$request)\n    {\n        \\$validator = Validator::make(\\$request-&gt;all(), [\n            'title' =&gt; 'required|unique:posts|max:255',\n            'body' =&gt; 'required',\n        ]);\n        if (\\$validator-&gt;fails()) {\n            return redirect('post/create')\n                        -&gt;withErrors(\\$validator)\n                        -&gt;withInput();\n        }\n        // Store the blog post...\n    }\n}\n</code></pre>\n<p>El primer argumento pasado al método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make</span> son\n    los datos bajo validación. El segundo argumento son las reglas de validación que deberían ser\n    aplicadas a los datos.</p>\n<p>Después de verificar si la validación de solicitud falló, puedes usar el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withErrors</span>\n    para mover instantáneamente los mensajes de error a la sesión. Al momento de usar este método,\n    la variable <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$errors</span>\n    será compartida automáticamente con tus vistas después de la redirección, permitiendo que los\n    muestres de vuelta al usuario. El método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withErrors</span>\n    acepta un validador, un <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">MessageBag</span>,\n    o un <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">array</span>\n    de PHP.</p>\n<p></p>\n<h3>Redirección automática</h3>\n<p>Si prefieres crear manualmente una instancia del validador pero aún tomar ventaja de la\n    redirección automática ofrecida por el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">validate</span>\n    de la solicitud, puedes ejecutar el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">validate</span>\n    en una instancia de validador existente. Si la validación falla, el usuario automáticamente será\n    redirigido o, en el caso de una solicitud AJAX, le será devuelta una respuesta JSON:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Validator::make(\\$request-&gt;all(), [\n    'title' =&gt; 'required|unique:posts|max:255',\n    'body' =&gt; 'required',\n])-&gt;validate();\n</code></pre>\n<p></p>\n<h3>Paquetes de errores con nombres</h3>\n<p>Si tienes múltiples formularios en una sola página, puede que desees nombrar el <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">MessageBag</span>\n    de errores, permitiendo que obtengas los mensajes de error para un formulario específico. Pasa\n    un nombre como segundo argumento a <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withErrors</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return redirect('register')\n            -&gt;withErrors(\\$validator, 'login');\n</code></pre>\n<p>Entonces puedes acceder la instancia de <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">MessageBag</span>\n    nombrada de la variable <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$errors</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>    {{ \\$errors-&gt;login-&gt;first('email') }}\n</code></pre>\n<p></p>\n<h3>Hook de validación posterior</h3>\n<p>El validador también permite que adjuntes funciones de retorno para que sean ejecutadas después\n    que se complete la validación. Esto permite que ejecutes fácilmente validación adicional e\n    incluso agregar más mensajes de error a la colección de mensajes. Para empezar, usa el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">after</span> en\n    una instancia de validador:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>    \\$validator = Validator::make(...);\n    \\$validator-&gt;after(function (\\$validator) {\n        if (\\$this-&gt;somethingElseIsInvalid()) {\n            \\$validator-&gt;errors()-&gt;add('field', 'Something is wrong with this field!');\n        }\n    });\n    if (\\$validator-&gt;fails()) {\n        //\n    }\n</code></pre>\n<p></p>\n<h2>Trabajando con los mensajes de error</h2>\n<p>Después de ejecutar el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">errors</span> en\n    una instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Validator</span>,\n    recibirás una instancia <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Support\\MessageBag</span>,\n    la cual tiene una variedad de métodos convenientes para trabajar con los mensajes de error. La\n    variable <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$errors</span>\n    que se hace disponible automáticamente para todas las vistas también es una instancia de la\n    clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">MessageBag</span>.\n</p>\n<h4>Obteniendo el primer mensaje de error para un campo</h4>\n<p>Para obtener el primer mensaje de error para un campo dado, usa el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">first</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$errors = \\$validator-&gt;errors();\necho \\$errors-&gt;first('email');\n</code></pre>\n<h4>Obteniendo todos los mensajes de error para un campo</h4>\n<p>Si necesitas obtener un arreglo de todos los mensajes para un campo dado, usa el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>foreach (\\$errors-&gt;get('email') as \\$message) {\n    //\n}\n</code></pre>\n<p>Si estás validando un campo de formulario de arreglo, puedes obtener todos los mensajes para cada\n    uno de los elementos de arreglo usando el caracter <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">*</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>foreach (\\$errors-&gt;get('attachments.*') as \\$message) {\n    //\n}\n</code></pre>\n<h4>Obteniendo todos los mensajes de error para todos los campos</h4>\n<p>Para obtener un arreglo de todos los mensajes para todos los campos, usa el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">all</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>foreach (\\$errors-&gt;all() as \\$message) {\n    //\n}\n</code></pre>\n<h4>Determinando si existen mensajes para un campo</h4>\n<p>El método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">has</span> puede\n    ser usado para determinar si existe algún mensaje de error para un campo dado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>if (\\$errors-&gt;has('email')) {\n    //\n}\n</code></pre>\n<p></p>\n<h3>Mensajes de error personalizados</h3>\n<p>Si es necesario, puedes usar mensajes de error personalizados en vez de los predeterminados. Hay\n    varias formas para especificar mensajes personalizados. Primero, puedes pasar los mensajes\n    personalizados como tercer argumento al método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Validator::make</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$messages = [\n    'required' =&gt; 'The :attribute field is required.',\n];\n\\$validator = Validator::make(\\$input, \\$rules, \\$messages);\n</code></pre>\n<p>En este ejemplo, el marcador <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">:attribute</span>\n    será reemplazado por el nombre real del campo bajo validación. También puedes utilizar otros\n    marcadores en mensajes de validación. Por ejemplo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$messages = [\n    'same'    =&gt; 'The :attribute and :other must match.',\n    'size'    =&gt; 'The :attribute must be exactly :size.',\n    'between' =&gt; 'The :attribute value :input is not between :min - :max.',\n    'in'      =&gt; 'The :attribute must be one of the following types: :values',\n];\n</code></pre>\n<h4>Especificando un mensaje personalizado para un atributo dado</h4>\n<p>Algunas veces puedes querer especificar un mensaje de error personalizado sólo para un campo\n    específico. Puedes hacer eso usando notación de \"punto\". Especifica el nombre del atributo al\n    principio, seguido por la regla:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$messages = [\n    'email.required' =&gt; 'We need to know your e-mail address!',\n];\n</code></pre>\n<p></p>\n<h4>Especificando mensajes personalizados en archivos por idiomas</h4>\n<p>En muchos casos, probablemente especificarás tus mensajes personalizados en un archivo de idioma\n    en lugar de pasarlos directamente al <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Validator</span>.\n    Para hacer eso, agrega tus mensajes al arreglo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">custom</span>\n    en el archivo de idioma <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/lang/xx/validation.php</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'custom' =&gt; [\n    'email' =&gt; [\n        'required' =&gt; 'We need to know your e-mail address!',\n    ],\n],\n</code></pre>\n<h4>Especificando los atributos personalizados en archivos de idiomas</h4>\n<p>Si prefieres que la porción <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">:attribute</span>\n    de tu mensaje de validación sea reemplazada con un nombre de atributo personalizado, puedes\n    especificar el nombre personalizado en el arreglo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">attributes</span>\n    de tu archivo de idioma <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/lang/xx/validation.php</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'attributes' =&gt; [\n    'email' =&gt; 'email address',\n],\n</code></pre>\n<h4>Especificando los valores personalizados en archivos de idiomas</h4>\n<p>A veces es posible que necesites que la parte <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">:value</span> de\n    tu mensaje de validación sea reemplazada por una representación personalizada del valor. Por\n    ejemplo, considera la siguiente regla que especifica que se requiere un número de tarjeta de\n    crédito si el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">payment_type</span>\n    tiene un valor de<span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cc</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$request-&gt;validate([\n    'credit_card_number' =&gt; 'required_if:payment_type,cc'\n]);\n</code></pre>\n<p>Si esta regla de validación falla, producirá el siguiente mensaje de error:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>The credit card number field is required when payment type is cc.\n</code></pre>\n<p>En lugar de mostrar <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cc</span> como el\n    valor del tipo de pago, puedes especificar una representación de valor personalizada en tu\n    archivo de idioma <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">validation</span>\n    definiendo un arreglo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">values</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'values' =&gt; [\n    'payment_type' =&gt; [\n        'cc' =&gt; 'credit card'\n    ],\n],\n</code></pre>\n<p>Ahora, si la regla de validación falla, producirá el siguiente mensaje:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>The credit card number field is required when payment type is credit card.\n</code></pre>\n<p></p>\n<h2>Reglas de validación disponibles</h2>\n<p>Debajo hay una lista con todas las reglas de validación disponibles y su función:</p>\n<p>Accepted Active URL After (Date) After Or Equal (Date) Alpha Alpha Dash Alpha Numeric Array Bail\n    Before (Date) Before Or Equal (Date) Between Boolean Confirmed Date Date Equals Date Format\n    Different Digits Digits Between Dimensions (Image Files) Distinct E-Mail Ends With Exists\n    (Database) File Filled Greater Than Greater Than Or Equal Image (File) In In Array Integer IP\n    Address JSON Less Than Less Than Or Equal Max MIME Types MIME Type By File Extension Min Not In\n    Not Regex Nullable Numeric Present Regular Expression Required Required If Required Unless\n    Required With Required With All Required Without Required Without All Same Size Starts With\n    String Timezone Unique (Database) URL UUID</p>\n<p></p>\n<h4>accepted</h4>\n<p>El campo bajo validación debe ser <em>yes</em>, <em>on</em>, <em>1</em>, o <em>true</em>. Esto es\n    útil para validar la aceptación de \"Términos de Servicio\", por ejemplo.</p>\n<p></p>\n<h4>active_url</h4>\n<p>El campo bajo validación debe tener un registro A o AAAA válido de acuerdo a la función de PHP\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dns_get_record</span>.\n</p>\n<p></p>\n<h4>after:<em>date</em></h4>\n<p>El campo bajo validación debe ser un valor después de una fecha dada. Las fechas serán pasadas a\n    la función de PHP <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">strtotime</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'start_date' =&gt; 'required|date|after:tomorrow'\n</code></pre>\n<p>En lugar de pasar una cadena de fecha para que sea evaluada por <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">strtotime</span>,\n    puedes especificar otro campo para comparar con la fecha:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'finish_date' =&gt; 'required|date|after:start_date'\n</code></pre>\n<p></p>\n<h4>after_or_equal:<em>date</em></h4>\n<p>El campo bajo validación debe ser un valor después o igual a la fecha dada. Para mayor\n    información, observa la regla after.</p>\n<p></p>\n<h4>alpha</h4>\n<p>El campo bajo validación debe estar compuesto completamente por caracteres alfabéticos.</p>\n<p></p>\n<h4>alpha_dash</h4>\n<p>El campo bajo validación puede tener caracteres alfanuméricos, al igual que guiones cortos y\n    guiones largos.</p>\n<p></p>\n<h4>alpha_num</h4>\n<p>El campo bajo validación debe estar compuesto completamente por caracteres alfanuméricos.</p>\n<p></p>\n<h4>array</h4>\n<p>El campo bajo validación debe ser un <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">array</span> de\n    PHP.</p>\n<p></p>\n<h4>bail</h4>\n<p>Detiene la ejecución de las reglas de validación después del primer error de validación.</p>\n<p></p>\n<h4>before:<em>date</em></h4>\n<p>El campo bajo validación debe ser un valor que preceda la fecha dada. Las fechas serán pasadas a\n    la función PHP <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">strtotime</span>.\n    Además, como la regla <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">after</span>\n    el nombre de otro campo bajo validación puede suministrarse como el valor de <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fecha</span>.\n</p>\n<p></p>\n<h4>before_or_equal:<em>date</em></h4>\n<p>Este campo bajo validación debe ser un valor que preceda o igual a la fecha dada. Las fechas\n    serán pasadas a la función de PHP <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">strtotime</span>.\n    Además, como la regla <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">after</span>\n    el nombre de otro campo bajo validación puede suministrarse como el valor de <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fecha</span>.\n</p>\n<p></p>\n<h4>between:<em>min</em>,<em>max</em></h4>\n<p>El campo bajo validación debe tener un tamaño entre el <em>min</em> y <em>max</em> dados. Las\n    cadenas, los números, los arreglos y los archivos se evalúan de la misma manera que la regla\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">size</span>.\n</p>\n<p></p>\n<h4>boolean</h4>\n<p>El campo bajo validación debe poder ser convertido como un booleano. Las entrada aceptadas son\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">1</span>, <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">0</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\"1\"</span>, y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\"0\"</span>.</p>\n<p></p>\n<h4>confirmed</h4>\n<p>El campo bajo validación debe tener un campo que coincida con <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">foo_confirmation</span>.\n    Por ejemplo, si el campo bajo validación es <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">password</span>,\n    un campo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">password_confirmation</span>\n    que coincida debe estar presente en la entrada.</p>\n<p></p>\n<h4>date</h4>\n<p>El campo bajo validación debe ser una fecha válida, no relativa, de acuerdo a la función de PHP\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">strtotime</span>.\n</p>\n<p></p>\n<h4>date_equals:<em>date</em></h4>\n<p>El campo bajo validación debe ser igual a la fecha dada. Las fechas serán pasadas en la función\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">strtotime</span>\n    de PHP.</p>\n<p></p>\n<h4>date_format:<em>format</em></h4>\n<p>El campo bajo validación debe coincidir con el <em>format</em> dado. Deberías usar <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">date</span>\n    <strong>o</strong> <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">date_format</span>\n    al momento de validar un campo, no ambos.</p>\n<p></p>\n<h4>different:<em>field</em></h4>\n<p>El campo bajo validación debe tener un valor distinto de <em>field</em>.</p>\n<p></p>\n<h4>digits:<em>value</em></h4>\n<p>El campo bajo validación debe ser <em>numeric</em> y debe tener una longitud exacta de\n    <em>value</em>.</p>\n<p></p>\n<h4>digits_between:<em>min</em>,<em>max</em></h4>\n<p>El campo bajo validación debe tener una longitud entre los valores de <em>min</em> y <em>max</em>\n    dados.</p>\n<p></p>\n<h4>dimensions</h4>\n<p>El archivo bajo validación debe ser una imagen que cumpla con las restricciones de dimensión como\n    las especificadas por los parámetros de la regla:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'avatar' =&gt; 'dimensions:min_width=100,min_height=200'\n</code></pre>\n<p>Las restricciones disponibles son: <em>min_width</em>, <em>max_width</em>, <em>min_height</em>,\n    <em>max_height</em>, <em>width</em>, <em>height</em>, <em>ratio</em>.</p>\n<p>Una restricción <em>ratio</em> debería ser representada como el ancho dividido por la altura.\n    Esto puede ser especificado o por una instrucción como <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">3/2</span> o\n    en decimal como <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">1.5</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'avatar' =&gt; 'dimensions:ratio=3/2'\n</code></pre>\n<p>Dado que esta regla requiere varios argumentos, puedes usar el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Rule::dimensions</span>\n    para construir con fluidez la regla:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Validation\\Rule;\nValidator::make(\\$data, [\n    'avatar' =&gt; [\n        'required',\n        Rule::dimensions()-&gt;maxWidth(1000)-&gt;maxHeight(500)-&gt;ratio(3 / 2),\n    ],\n]);\n</code></pre>\n<p></p>\n<h4>distinct</h4>\n<p>Al momento de trabajar con arreglos, el campo bajo validación no debe tener ningún valor\n    duplicado.</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'foo.*.id' =&gt; 'distinct'\n</code></pre>\n<p></p>\n<h4>email</h4>\n<p>El campo bajo validación debe estar formateado como una dirección de correo electrónico.</p>\n<p></p>\n<h4>ends_with:<em>foo</em>,<em>bar</em>,...</h4>\n<p>El campo bajo validación debe terminar con alguno de los valores dados.</p>\n<p></p>\n<h4>exists:<em>table</em>,<em>column</em></h4>\n<p>El campo bajo validación debe existir en una tabla de base de datos dada.</p>\n<h4>Uso Básico de la Regla Exists</h4>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'state' =&gt; 'exists:states'\n</code></pre>\n<p>Si la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">column</span>\n    no está especificada, se usará el nombre del campo.</p>\n<h4>Especificando un Nombre de Columna Personalizado</h4>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'state' =&gt; 'exists:states,abbreviation'\n</code></pre>\n<p>Ocasionalmente, puedes necesitar especificar una conexión de base de datos para que sea usada por\n    la consulta de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">exists</span>.\n    Puedes acompañar esto al anteponer al nombre de la conexión el nombre de la tabla usando\n    sintaxis de \"punto\":</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'email' =&gt; 'exists:connection.staff,email'\n</code></pre>\n<p>Si prefieres personalizar la consulta ejecutada por la regla de validación, puedes usar la clase\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Rule</span>\n    para definir con fluidez la regla. En este ejemplo, también especificaremos las reglas de\n    validación como un arreglo en vez de usar el carácter <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">|</span> para\n    delimitarlas.</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Validation\\Rule;\nValidator::make(\\$data, [\n    'email' =&gt; [\n        'required',\n        Rule::exists('staff')-&gt;where(function (\\$query) {\n            \\$query-&gt;where('account_id', 1);\n        }),\n    ],\n]);\n</code></pre>\n<p></p>\n<h4>file</h4>\n<p>El campo bajo validación debe ser un archivo que sea cargado exitosamente.</p>\n<p></p>\n<h4>filled</h4>\n<p>El campo bajo validación no debe estar vacío cuando esté presente.</p>\n<p></p>\n<h4>gt:<em>field</em></h4>\n<p>El campo bajo validación debe ser mayor que el <em>field</em> dado. Los dos campos deben ser del\n    mismo tipo. Las cadenas, los números, los arreglos y los archivos se evalúan utilizando las\n    mismas convenciones que la regla <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">size</span>.\n</p>\n<p></p>\n<h4>gte:<em>field</em></h4>\n<p>El campo bajo validación debe ser mayor o igual que el <em>field</em> dado. Los dos campos deben\n    ser del mismo tipo. Las cadenas, los números, los arreglos y los archivos se evalúan utilizando\n    las mismas convenciones que la regla <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">size</span>.\n</p>\n<p></p>\n<h4>image</h4>\n<p>El archivo bajo validación debe ser una imagen (jpeg, png, bmp, gif, svg o webp)</p>\n<p></p>\n<h4>in:<em>foo</em>,<em>bar</em>,...</h4>\n<p>El archivo bajo validación debe estar incluido en la lista dada de valores. Debido a que esta\n    regla requiere con frecuencia que hagas <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">implode</span>\n    a un arreglo, el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Rule::in</span>\n    puede ser usado para construir fluidamente la regla:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Validation\\Rule;\nValidator::make(\\$data, [\n    'zones' =&gt; [\n        'required',\n        Rule::in(['first-zone', 'second-zone']),\n    ],\n]);\n</code></pre>\n<p></p>\n<h4>in_array:<em>anotherfield</em>.*</h4>\n<p>El campo bajo validación debe existir en los valores de <em>anotherfield</em>.</p>\n<p></p>\n<h4>integer</h4>\n<p>El campo bajo validación debe ser un entero.</p>\n<p>Nota</p>\n<p>Esta regla de validación no verifica que el campo sea del tipo de variable \"entero\", sólo que el\n    campo sea una cadena o valor número que contenga un entero.</p>\n<p></p>\n<h4>ip</h4>\n<p>El campo bajo validación debe ser una dirección IP.</p>\n<h4>ipv4</h4>\n<p>El campo bajo validación debe ser una dirección IPv4.</p>\n<h4>ipv6</h4>\n<p>El campo bajo validación debe ser una dirección IPv6.</p>\n<p></p>\n<h4>json</h4>\n<p>El campo bajo validación debe ser una cadena JSON válida.</p>\n<p></p>\n<h4>lt:<em>field</em></h4>\n<p>El campo bajo validación debe ser menor que el <em>field</em> dado. Los dos campos deben ser del\n    mismo tipo. Las cadenas, los números, los arreglos y los archivos se evalúan utilizando las\n    mismas convenciones que la regla <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">size</span>.\n</p>\n<p></p>\n<h4>lte:<em>field</em></h4>\n<p>El campo bajo validación debe ser menor o igual que el <em>field</em> dado. Los dos campos deben\n    ser del mismo tipo. Las cadenas, los números, los arreglos y los archivos se evalúan utilizando\n    las mismas convenciones que la regla <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">size</span>.\n</p>\n<p></p>\n<h4>max:<em>value</em></h4>\n<p>El campo bajo validación debe ser menor que o igual a un <em>valor</em> máximo. Las cadenas, los\n    números, los arreglos y los archivos son evaluados de la misma forma como la regla <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">size</span>.\n</p>\n<p></p>\n<h4>mimetypes:<em>text/plain</em>,...</h4>\n<p>El archivo bajo validación debe coincidir con uno de los tipos MIME dados:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'video' =&gt; 'mimetypes:video/avi,video/mpeg,video/quicktime'\n</code></pre>\n<p>Para determinar el tipo MIME del archivo cargado, el contenido del archivo será leído y el\n    framework intentará suponer el tipo MIME, el cual puede ser distinto del tipo MIME proporcionado\n    por el cliente.</p>\n<p></p>\n<h4>mimes:<em>foo</em>,<em>bar</em>,...</h4>\n<p>El archivo bajo validación debe tener un tipo MIME correspondiente a uno con las extensiones\n    listadas.</p>\n<h4>Uso Básico de la Regla MIME</h4>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'photo' =&gt; 'mimes:jpeg,bmp,png'\n</code></pre>\n<p>Incluso aunque solamente necesites especificar las extensiones, en realidad esta regla valida\n    contra el tipo MIME del archivo mediante la lectura de los contenidos del archivo y adivinando\n    su tipo MIME.</p>\n<p>\n    Una lista completa de tipos MIME y sus correspondientes extensiones pueden ser encontrados en la\n    siguiente ubicación:\n    https://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\n</p>\n<p></p>\n<h4>min:<em>value</em></h4>\n<p>El campo bajo validación deben tener un <em>valor</em> mínimo. Las cadenas, los números, los\n    arreglos y los archivos son evaluados en la misma forma como la regla <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">size</span>.\n</p>\n<p></p>\n<h4>not_in:<em>foo</em>,<em>bar</em>,...</h4>\n<p>El campo bajo validación no debe estar incluido en la lista dada de valores. El método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Rule::notIn</span>\n    puede ser usado para construir fluidamente la regla:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Validation\\Rule;\nValidator::make(\\$data, [\n    'toppings' =&gt; [\n        'required',\n        Rule::notIn(['sprinkles', 'cherries']),\n    ],\n]);\n</code></pre>\n<p></p>\n<h4>not_regex:<em>pattern</em></h4>\n<p>El campo bajo validación no debe coincidir con la expresión regular dada.</p>\n<p>Internamente, esta regla usa la función PHP <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">preg_match</span>.\n    El patrón especificado debe obedecer el mismo formato requerido por <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">preg_match</span>\n    y, por lo tanto, también incluir delimitadores válidos. Por ejemplo: <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">'email' =&gt; 'not_regex:/^.+\\$/i'</span>.\n</p>\n<p><strong>Nota:</strong> Al usar los patrones <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">regex</span> /\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">not_regex</span>,\n    puede ser necesario especificar reglas en un arreglo en lugar de usar delimitadores de tubería,\n    especialmente si la expresión regular contiene un carácter barra <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">|</span>.</p>\n<p></p>\n<h4>nullable</h4>\n<p>El campo bajo validación puede ser <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>. Esto\n    es particularmente útil al momento de validar tipos primitivos tales como cadenas y enteros que\n    pueden contener valores <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>.\n</p>\n<p></p>\n<h4>numeric</h4>\n<p>El campo bajo validación debe ser numérico.</p>\n<p></p>\n<h4>present</h4>\n<p>El campo bajo validación debe estar presente en los datos de entrada pero puede estar vacío.</p>\n<p></p>\n<h4>regex:<em>pattern</em></h4>\n<p>El campo bajo validación debe coincidir con la expresión regular dada.</p>\n<p>Internamente, esta regla usa la función PHP <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">preg_match</span>.\n    El patrón especificado debe obedecer el mismo formato requerido por <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">preg_match</span>\n    y, por lo tanto, también incluir delimitadores válidos. Por ejemplo: <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">'email' =&gt; 'regex:/^.+@.+\\$/i'</span>.\n</p>\n<p><strong>Nota:</strong> Al usar los patrones <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">regex</span> /\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">not_regex</span>,\n    puede ser necesario especificar reglas en un arreglo en lugar de usar delimitadores de tubería,\n    especialmente si la expresión regular contiene un carácter barra <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">|</span>.</p>\n<p></p>\n<h4>required</h4>\n<p>El campo bajo validación debe estar presente entre los datos entrada y no vacío. Un campo es\n    considerado \"vacío\" si algunas de las siguientes condiciones es cierta:</p>\n<ul>\n    <li>El valor es <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>.\n    </li>\n    <li>El valor es una cadena vacía.</li>\n    <li>El valor es un arreglo vacío o un objeto <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Countable</span>\n        vacío.\n    </li>\n    <li>El valor es un archivo cargado sin ruta.</li>\n</ul>\n<p></p>\n<h4>required_if:<em>anotherfield</em>,<em>value</em>,...</h4>\n<p>El campo bajo validación debe estar presente y no vacío si el campo <em>anotherfield</em> es\n    igual a cualquier <em>valor</em>.</p>\n<p>Si deseas construir una condición más compleja para la regla <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">required_if</span>,\n    puedes usar el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Rule::requiredIf</span>.\n    Este método acepta un valor booleano o un Closure. Cuando se pasa un Closure, éste debe devolver\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span> o\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>\n    para indicar si el campo bajo validación es obligatorio:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Validation\\Rule;\nValidator::make(\\$request-&gt;all(), [\n    'role_id' =&gt; Rule::requiredIf(\\$request-&gt;user()-&gt;is_admin),\n]);\nValidator::make(\\$request-&gt;all(), [\n    'role_id' =&gt; Rule::requiredIf(function () use (\\$request) {\n        return \\$request-&gt;user()-&gt;is_admin;\n    }),\n]);\n</code></pre>\n<p></p>\n<h4>required_unless:<em>anotherfield</em>,<em>value</em>,...</h4>\n<p>El campo bajo validación debe estar presente y no vacío a menos que el campo\n    <em>anotherfield</em> sea igual a cualquier <em>valor</em>.</p>\n<p></p>\n<h4>required_with:<em>foo</em>,<em>bar</em>,...</h4>\n<p>El campo bajo validación debe estar presente y no vacío <em>solamente si</em> cualquiera de los\n    otros campos especificados están presentes.</p>\n<p></p>\n<h4>required_with_all:<em>foo</em>,<em>bar</em>,...</h4>\n<p>El campo bajo validación debe estar presente y no vacío <em>solamente si</em> todos los otros\n    campos especificados están presentes.</p>\n<p></p>\n<h4>required_without:<em>foo</em>,<em>bar</em>,...</h4>\n<p>El campo bajo validación debe estar presente y no vacío <em>solamente cuando</em> cualquiera de\n    los otros campos especificados no están presentes.</p>\n<p></p>\n<h4>required_without_all:<em>foo</em>,<em>bar</em>,...</h4>\n<p>El campo bajo validación debe estar presente y no vacío <em>solamente cuando</em> todos los demás\n    campos especificados no están presentes.</p>\n<p></p>\n<h4>same:<em>field</em></h4>\n<p>El campo <em>field</em> dado debe coincidir con el campo bajo validación.</p>\n<p></p>\n<h4>size:<em>value</em></h4>\n<p>El campo bajo validación debe tener un tamaño que coincida con el <em>valor</em> dado. Para datos\n    de cadena, el <em>valor</em> corresponde al número de caracteres. Para datos numéricos, el <em>valor</em>\n    corresponde a un valor entero dado. Para un arreglo, el valor <em>size</em> corresponde con el\n    número de elementos del arreglo. Para archivos, el valor de <em>size</em> corresponde al tamaño\n    del archivo en kilobytes.</p>\n<p></p>\n<h4>starts_with:<em>foo</em>,<em>bar</em>,...</h4>\n<p>El campo bajo validación debe comenzar con uno de los valores dados.</p>\n<p></p>\n<h4>string</h4>\n<p>El campo bajo validación debe ser una cadena. Si prefieres permitir que el campo también sea\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>,\n    deberías asignar la regla <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">nullable</span>\n    al campo.</p>\n<p></p>\n<h4>timezone</h4>\n<p>El campo bajo validación debe ser un identificador de zona horaria válida de acuerdo con la\n    función de PHP <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">timezone_identifiers_list</span>\n</p>\n<p></p>\n<h4>unique:<em>table</em>,<em>column</em>,<em>except</em>,<em>idColumn</em></h4>\n<p>El campo bajo validación debe ser único en una tabla de base de datos dada. Si la opción <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">column</span> no\n    es especificada, el nombre del campo será usado.</p>\n<p><strong>Especificando un nombre de columna personalizado:</strong></p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'email' =&gt; 'unique:users,email_address'\n</code></pre>\n<p><strong>Conexión de base de datos personalizada</strong></p>\n<p>Ocasionalmente, puedes necesitar establecer una conexión personalizada para las consultas de\n    bases de datos hechas por el validador. Como has visto anteriormente, al establecer <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unique:users</span>\n    como una regla de validación usará la conexión de base de datos predeterminada en la consulta de\n    base de datos. Para sobrescribir esto, especifica la conexión y el nombre de la tabla usando la\n    sintaxis de \"punto\":</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'email' =&gt; 'unique:connection.users,email_address'\n</code></pre>\n<p><strong>Forzando una regla unique para ignorar un ID dado:</strong></p>\n<p>Algunas veces, puedes desear ignorar un ID dado durante la verificación de unicidad. Por ejemplo,\n    considera una pantalla \"update profile\" que incluya el nombre del usuario, dirección de correo\n    electrónico, y ubicación. Posiblemente, querrás verificar que la dirección de correo electrónico\n    es única. Sin embargo, si el usuario solamente cambia el campo nombre y no el campo con el\n    correo electrónico, no quieres que un error de validación sea lanzado porque el usuario ya es el\n    propietario de la dirección de correo electrónico.</p>\n<p>Para instruir al validador para que ignore el ID del usuario, usaremos la clase <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Rule</span> para\n    definir fluidamente la regla. En este ejemplo, también especificaremos las reglas de validación\n    como un arreglo en lugar de usar el carácter <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">|</span> para\n    delimitar las reglas:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Validation\\Rule;\nValidator::make(\\$data, [\n    'email' =&gt; [\n        'required',\n        Rule::unique('users')-&gt;ignore(\\$user-&gt;id),\n    ],\n]);\n</code></pre>\n<p>Nota</p>\n<p>Nunca debes pasar ningún input de la solicitud controlado por cualquier usuario en el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ignore</span>.\n    En su lugar, sólo debes pasar un ID único generado por el sistema, como un ID autoincremental o\n    UUID de una instancia de modelo Eloquent. De lo contrario, tu aplicación será vulnerable a un\n    ataque de inyección SQL.</p>\n<p>En lugar de pasar el valor de la clave del modelo al método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ignore</span>,\n    puedes pasar la instancia completa del modelo. Laravel automáticamente extraerá la clave del\n    modelo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Rule::unique('users')-&gt;ignore(\\$user)\n</code></pre>\n<p>Si tu tabla usa un nombre de columna de clave primaria en vez de <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">id</span>, puedes\n    especificar el nombre de la columna al momento de llamar al método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ignore</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Rule::unique('users')-&gt;ignore(\\$user-&gt;id, 'user_id')\n</code></pre>\n<p>Por defecto, la regla <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">única</span>\n    verificará la unicidad de la columna que coincide con el nombre del atributo que se valida. Sin\n    embargo, puede pasar un nombre de columna diferente como segundo argumento al método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unique</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Rule::unique('users', 'email_address')-&gt;ignore(\\$user-&gt;id),\n</code></pre>\n<p><strong>Agregando cláusulas where adicionales:</strong></p>\n<p>También puedes especificar restricciones de consultas al personalizar la consulta usando el\n    método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where</span>.\n    Por ejemplo, agreguemos una restricción que verifique que el <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">account_id</span>\n    es <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">1</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'email' =&gt; Rule::unique('users')-&gt;where(function (\\$query) {\n    return \\$query-&gt;where('account_id', 1);\n})\n</code></pre>\n<p></p>\n<h4>url</h4>\n<p>El campo bajo validación debe ser una URL válida.</p>\n<p></p>\n<h4>uuid</h4>\n<p>El campo bajo validación debe ser un identificador único universal (UUID) RFC 4122 (versión 1, 3,\n    4 o 5) válido.</p>\n<p></p>\n<h2>Agregando reglas condicionalmente</h2>\n<h4>Validando sólo cuando un campo esté presente</h4>\n<p>En algunas situaciones, puedes desear ejecutar la verificación contra un campo\n    <strong>solamente</strong> si ese campo está presente en el arreglo de campos. Para conseguir\n    esto rápidamente, agrega la regla <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sometimes</span>\n    en tu lista:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$v = Validator::make(\\$data, [\n    'email' =&gt; 'sometimes|required|email',\n]);\n</code></pre>\n<p>En el ejemplo anterior, el campo <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">email</span>\n    solamente será validado si está presente en el arreglo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$data</span>.\n</p>\n<p>TIP</p>\n<p>Si estás intentando validar un campo que siempre deba estar presente pero puede estar vacío,\n    revisa esta nota sobre campos opcionales</p>\n<h4>Validación condicional compleja</h4>\n<p>Algunas veces puedes desear agregar reglas de validación basadas en lógica condicional más\n    compleja. Por ejemplo, puedes desear solicitar un campo dado solamente si otro campo tiene un\n    valor mayor que 100. O, puedes necesitar que dos campos tengan un valor dado solamente cuando\n    otro campo esté presente. Agregar estas reglas de validación no tiene que ser un dolor. Primero,\n    crea una instancia <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Validator</span>\n    con tus <em>reglas estáticas</em> que nunca cambian:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$v = Validator::make(\\$data, [\n    'email' =&gt; 'required|email',\n    'games' =&gt; 'required|numeric',\n]);\n</code></pre>\n<p>Asumamos que nuestra aplicación web es sobre coleccionistas de juegos. Si un coleccionista de\n    juego se registra con nuestra aplicación y posee más de 100 juegos, queremos que explique porqué\n    posee tantos juegos. Por ejemplo, quizá administre una tienda de reventa de juegos, o puede ser\n    que solo disfrute coleccionar. Para agregar este requerimiento condicionalmente, podemos usar el\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sometimes</span>\n    en la instancia <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Validator</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$v-&gt;sometimes('reason', 'required|max:500', function (\\$input) {\n    return \\$input-&gt;games &gt;= 100;\n});\n</code></pre>\n<p>El primer argumento pasado al método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sometimes</span>\n    es el nombre del campo que estamos validando condicionalmente. El segundo argumento son las\n    reglas que queremos agregar. Si la <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span>\n    pasada como tercer argumento devuelve <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>,\n    las reglas serán agregadas. Este método hace que sea muy fácil construir validaciones\n    condicionales complejas Incluso puedes agregar validaciones condicionales para varios campos de\n    una sola vez:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$v-&gt;sometimes(['reason', 'cost'], 'required', function (\\$input) {\n    return \\$input-&gt;games &gt;= 100;\n});\n</code></pre>\n<p>TIP</p>\n<p>El parámetro <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$input</span>\n    pasado a tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span>\n    será una instancia de <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Support\\Fluent</span>\n    y puede ser usado para acceder a tus campos y archivos.</p>\n<p></p>\n<h2>Validando arreglos</h2>\n<p>Validar arreglos basados en campos de entrada de formulario no tiene que ser un dolor. Puedes\n    usar \"notación punto\" para validar atributos dentro de un arreglo. Por ejemplo, si la solicitud\n    entrante contiene un campo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">photos[profile]</span>,\n    puedes validarlo como sigue:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$validator = Validator::make(\\$request-&gt;all(), [\n    'photos.profile' =&gt; 'required|image',\n]);\n</code></pre>\n<p>También puedes validar cada elemento de un arreglo. Por ejemplo, para validar que cada dirección\n    electrónica en un campo de entrada de arreglo sea único, puedes hacer lo siguiente:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$validator = Validator::make(\\$request-&gt;all(), [\n    'person.*.email' =&gt; 'email|unique:users',\n    'person.*.first_name' =&gt; 'required_with:person.*.last_name',\n]);\n</code></pre>\n<p>De igual forma, puedes usar el carácter <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">*</span> al\n    momento de especificar tus mensajes de validación en tus archivos de idiomas, haciendo que sea\n    muy fácil usar un único mensaje de validación para campos basados en arreglos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'custom' =&gt; [\n    'person.*.email' =&gt; [\n        'unique' =&gt; 'Each person must have a unique e-mail address',\n    ]\n],\n</code></pre>\n<p></p>\n<h2>Reglas de validación personalizadas</h2>\n<p></p>\n<h3>Usando objetos de reglas</h3>\n<p>Laravel proporciona una variedad de reglas de validación útiles; sin embargo, puedes desear\n    especificar algunas propias. Un método para registrar reglas de validación personalizadas es\n    usar objetos de regla. Para generar un nuevo objeto de regla, puedes usar el comando Artisan\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:rule</span>.\n    Usemos este comando para generar una regla que verifique que una cadena esté en mayúscula.\n    Laravel colocará la nueva regla en el directorio <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Rules</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan make:rule Uppercase\n</code></pre>\n<p>Una vez que la regla haya sido creada, estaremos listos para definir su comportamiento. Un objeto\n    de regla contiene dos métodos: <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">passes</span>\n    and <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">message</span>.\n    El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">passes</span>\n    recibe el nombre y valor de atributo, y debería devolver <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span> o\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>\n    dependiendo de si el valor de atributo es válido o no. El método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">message</span>\n    debería devolver el mensaje de error de validación que debería ser usado cuando la validación\n    falle:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Rules;\nuse Illuminate\\Contracts\\Validation\\Rule;\nclass Uppercase implements Rule\n{\n    /**\n    * Determine if the validation rule passes.\n    *\n    * @param  string  \\$attribute\n    * @param  mixed  \\$value\n    * @return bool\n    */\n    public function passes(\\$attribute, \\$value)\n    {\n        return strtoupper(\\$value) === \\$value;\n    }\n    /**\n    * Get the validation error message.\n    *\n    * @return string\n    */\n    public function message()\n    {\n        return 'The :attribute must be uppercase.';\n    }\n}\n</code></pre>\n<p>Por supuesto, puedes ejecutar el helper <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">trans</span> de\n    tu método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">message</span>\n    si prefieres devolver un mensaje de error de tus archivos de traducción:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the validation error message.\n*\n* @return string\n*/\npublic function message()\n{\n    return trans('validation.uppercase');\n}\n</code></pre>\n<p>Una vez que la regla haya sido definida, puedes adjuntarla a un validador al pasar una instancia\n    del objeto de regla con tus otras reglas de validación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use App\\Rules\\Uppercase;\n\\$request-&gt;validate([\n    'name' =&gt; ['required', 'string', new Uppercase],\n]);\n</code></pre>\n<p></p>\n<h3>Usando closures</h3>\n<p>Si solo necesitas la funcionalidad de una regla personalizada una vez a lo largo de tu\n    aplicación, puedes usar un Closure en lugar de un objeto de regla. El Closure recibe el nombre\n    del atributo, el valor del atributo y una retorno de llamada (callback) <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$fail</span>\n    que se debe llamar si falla la validación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$validator = Validator::make(\\$request-&gt;all(), [\n    'title' =&gt; [\n        'required',\n        'max:255',\n        function (\\$attribute, \\$value, \\$fail) {\n            if (\\$value === 'foo') {\n                \\$fail(\\$attribute.' is invalid.');\n            }\n        },\n    ],\n]);\n</code></pre>\n<p></p>\n<h3>Usando extensiones</h3>\n<p>Otro método para registrar reglas de validación personalizadas es usar el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">extend</span> en\n    la clase facade <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Validator</span>.\n    Usemos este método dentro de un proveedor de servicio para registrar una regla de validación\n    personalizada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Providers;\nuse Illuminate\\Support\\ServiceProvider;\nuse Illuminate\\Support\\Facades\\Validator;\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n    * Register any application services.\n    *\n    * @return void\n    */\n    public function register()\n    {\n        //\n    }\n    /**\n    * Bootstrap any application services.\n    *\n    * @return void\n    */\n    public function boot()\n    {\n        Validator::extend('foo', function (\\$attribute, \\$value, \\$parameters, \\$validator) {\n            return \\$value == 'foo';\n        });\n    }\n}\n</code></pre>\n<p>La Closure del validador personalizada recibe cuatro argumentos: el nombre del atributo <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$attribute</span>\n    que está siendo validado, el valor <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$value</span>\n    del atributo, un arreglo de <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$parameters</span>\n    pasado a la regla, y la instancia <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Validator</span>.\n</p>\n<p>También puedes pasar una clase y método al método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">extend</span> en\n    vez de una Closure:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Validator::extend('foo', 'FooValidator@validate');\n</code></pre>\n<h4>Definiendo el mensaje de error</h4>\n<p>También necesitarás definir un mensaje de error para tu regla personalizada. Puedes hacer eso o\n    usando un arreglo de mensajes personalizados en línea o agregando una entrada en el archivo de\n    idioma de validación. Este mensaje debería ser colocado en el primer nivel del arreglo, no\n    dentro del arreglo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">custom</span>,\n    el cual es solamente para mensajes de error específico de atributos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\"foo\" =&gt; \"Your input was invalid!\",\n\"accepted\" =&gt; \"The :attribute must be accepted.\",\n// The rest of the validation error messages...\n</code></pre>\n<p>Al momento de crear una regla de validación personalizada, algunas veces puedes necesitar definir\n    reemplazos de marcadores personalizados para los mensajes de error. Puedes hacer eso creando un\n    Validador personalizado cómo se describió anteriormente, entonces hacer una ejecución del método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">replacer</span>\n    en la clase facade <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Validator</span>.\n    Puedes hacer esto dentro del método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span>\n    de un proveedor de servicio:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Bootstrap any application services.\n*\n* @return void\n*/\npublic function boot()\n{\n    Validator::extend(...);\n    Validator::replacer('foo', function (\\$message, \\$attribute, \\$rule, \\$parameters) {\n        return str_replace(...);\n    });\n}\n</code></pre>\n<p></p>\n<h3>Extensiones implicitas</h3>\n<p>De forma predeterminada, cuando un atributo que está siendo validado no está presente o contiene\n    un valor vacío como es definido por la regla <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">required</span>,\n    las reglas de validación normal, incluyendo las extensiones personalizadas, no son ejecutadas.\n    Por ejemplo, la regla <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unique</span>\n    no será ejecutada contra un valor <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$rules = ['name' =&gt; 'unique:users,name'];\n\\$input = ['name' =&gt; ''];\nValidator::make(\\$input, \\$rules)-&gt;passes(); // true\n</code></pre>\n<p>Para que una regla se ejecute incluso cuando un atributo esté vacío, la regla debe implicar que\n    el atributo sea obligatorio. Para crear tal extensión \"implícita\", usa el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Validator::extendImplicit()</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Validator::extendImplicit('foo', function (\\$attribute, \\$value, \\$parameters, \\$validator) {\n    return \\$value == 'foo';\n});\n</code></pre>\n<p>Nota</p>\n<p>Una extensión \"implícita\" solamente <em>implica</em> que el atributo es obligatorio. Si esto\n    realmente invalida un atributo vacío o faltante depende de ti.</p>\n<h4>Reglas de objetos implicitas</h4>\n<p>Si te gustaría que una regla de objeto se ejecute cuando un atributo está vacío, debes\n    implementar la interfaz <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Contracts\\Validation\\ImplicitRule</span>.\n    Esta interfaz funciona como una \"interfaz marcador\" para el validador; por lo tanto, no contiene\n    ningún metodo que necesites implementar.</p>\n    </div>"
      },
      {
        "titulo": "Manejo de errores",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Manejo de Errores</h1>\n<ul>\n    <li>Introducción</li>\n    <li>Configuración</li>\n    <li>\n        Manejador de excepciones\n        <ul>\n            <li>Método report</li>\n            <li>Método render</li>\n            <li>Excepciones renderizables y reportables</li>\n        </ul>\n    </li>\n    <li>\n        Excepciones HTTP\n        <ul>\n            <li>Páginas de error HTTP personalizadas</li>\n        </ul>\n    </li>\n</ul>\n<p></p>\n<h2>Introducción</h2>\n<p>Cuando comienzas un nuevo proyecto de Laravel, el manejo de excepciones y errores ya está\n    configurado para ti. La clase <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Exceptions\\Handler</span>\n    es donde todas las excepciones disparadas por tu aplicación son registradas y después\n    renderizadas de vuelta al usuario. Revisaremos más profundamente dentro de esta clase a través\n    de esta documentación.</p>\n<p></p>\n<h2>Configuración</h2>\n<p>La opción <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">debug</span> en\n    tu archivo de configuración <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/app.php</span>\n    determina cuanta información sobre un error se muestra realmente al usuario. Por defecto, esta\n    opción es establecida para respetar el valor de la variable de entorno <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">APP_DEBUG</span>,\n    la cual es almacenada en tu archivo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span>.\n</p>\n<p>Para desarrollo local, deberías establecer la variable de entorno a <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>. En\n    tu entorno de producción, este valor debería estar siempre <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>.\n    Si el valor es establecido a <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>\n    en producción, te arriesgas a exponer valores de configuración sensitivos a los usuarios finales\n    de tu aplicación.</p>\n<p></p>\n<h2>Manejador de excepciones</h2>\n<p></p>\n<h3>Método report</h3>\n<p>\n    Todas las excepciones son manejadas por la clase <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Exceptions\\Handler</span>.\n    Esta clase contiene dos métodos: <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">report</span> y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">render</span>.\n    Examinaremos cada uno de estos métodos en detalle. El método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">report</span> se\n    usa para registrar excepciones o enviarlas a un servicio externo como\n    Bugsnag\n    <outboundlink></outboundlink>\n    o\n    Sentry\n    <outboundlink></outboundlink>\n    . De forma predeterminada, el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">report</span>\n    pasa la excepción a la clase base donde la excepción es registrada. Sin embargo, eres libre de\n    registrar excepciones en la forma que desees.\n</p>\n<p>Por ejemplo, si necesitas reportar distintos tipos de excepciones en diferentes formas, puedes\n    usar el operador de comparación <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">instanceof</span>\n    de PHP:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Report or log an exception.\n*\n* This is a great spot to send exceptions to Sentry, Bugsnag, etc.\n*\n* @param  \\Exception  \\$exception\n* @return void\n*/\npublic function report(Exception \\$exception)\n{\n    if (\\$exception instanceof CustomException) {\n        //\n    }\n    parent::report(\\$exception);\n}\n</code></pre>\n<p>TIP</p>\n<p>\n    En lugar de hacer uso de muchos <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">instanceof</span>\n    en tu método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">report</span>,\n    considera usar\n    excepciones reportables\n</p>\n<h4>Contexto de log global</h4>\n<p>De estar disponible, Laravel automáticamente agrega el ID del usuario actual al mensaje de log de\n    cada excepción como datos contextuales. Puedes definir tus propios datos contextuales\n    sobrescribiendo el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">context</span>\n    de la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Exceptions\\Handler</span>\n    de tu aplicación. Esta información será incluida en cada mensaje de log de excepción escrito por\n    tu aplicación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the default context variables for logging.\n*\n* @return array\n*/\nprotected function context()\n{\n    return array_merge(parent::context(), [\n        'foo' =&gt; 'bar',\n    ]);\n}\n</code></pre>\n<h4>Helper <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">report</span>\n</h4>\n<p>Algunas veces puede que necesites reportar una execpción pero continuar manejando la solicitud\n    actual. La función helper <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">report</span>\n    permite que reportes rápidamente una excepción usando el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">report</span>\n    de tu manejador de excepción sin renderizar una página de error:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>public function isValid(\\$value)\n{\n    try {\n        // Validate the value...\n    } catch (Exception \\$e) {\n        report(\\$e);\n        return false;\n    }\n}\n</code></pre>\n<h4>Ignorando excepciones por tipo</h4>\n<p>La propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$dontReport</span>\n    del manejador de excepción contiene un arreglo de tipos de excepción que no serán registrados.\n    Por ejemplo, excepciones que resulten de errores 404, al igual que otros varios tipos de\n    errores, no son escritos a tus archivos de log. Puedes agregar otros tipos de excepción a este\n    arreglo cuando lo necesites:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* A list of the exception types that should not be reported.\n*\n* @var array\n*/\nprotected \\$dontReport = [\n    \\Illuminate\\Auth\\AuthenticationException::class,\n    \\Illuminate\\Auth\\Access\\AuthorizationException::class,\n    \\Symfony\\Component\\HttpKernel\\Exception\\HttpException::class,\n    \\Illuminate\\Database\\Eloquent\\ModelNotFoundException::class,\n    \\Illuminate\\Validation\\ValidationException::class,\n];\n</code></pre>\n<p></p>\n<h3>Método render</h3>\n<p>El método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">render</span> es\n    responsable de convertir una excepción dada en una respuesta HTTP que debería ser devuelta al\n    navegador. De forma predeterminada, la excepción es pasada a la clase base la cual genera una\n    respuesta para ti. Sin embargo, eres libre de revisar el tipo de excepción o devolver tu propia\n    respuesta personalizada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Render an exception into an HTTP response.\n*\n* @param  \\Illuminate\\Http\\Request  \\$request\n* @param  \\Exception  \\$exception\n* @return \\Illuminate\\Http\\Response\n*/\npublic function render(\\$request, Exception \\$exception)\n{\n    if (\\$exception instanceof CustomException) {\n        return response()-&gt;view('errors.custom', [], 500);\n    }\n    return parent::render(\\$request, \\$exception);\n}\n</code></pre>\n<p></p>\n<h3>Excepciones renderizables y reportables</h3>\n<p>En lugar de hacer verificaciones por tipo de excepciones en los métodos <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">report</span> y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">render</span>\n    del manejador de excepción, puedes definir métodos <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">report</span>\n    y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">render</span>\n    directamente en tu excepción personalizada. Cuando estos métodos existen, serán ejecutados\n    automáticamente por el framework:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Exceptions;\nuse Exception;\nclass RenderException extends Exception\n{\n    /**\n    * Report the exception.\n    *\n    * @return void\n    */\n    public function report()\n    {\n        //\n    }\n    /**\n    * Render the exception into an HTTP response.\n    *\n    * @param  \\Illuminate\\Http\\Request\n    * @return \\Illuminate\\Http\\Response\n    */\n    public function render(\\$request)\n    {\n        return response(...);\n    }\n}\n</code></pre>\n<p>TIP</p>\n<p>Puedes declarar el tipo de cualquier dependencia requerida en el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">report</span> y\n    el contenedor de servicios las inyectará automáticamente en el método.</p>\n<p></p>\n<h2>Excepciones HTTP</h2>\n<p>Algunas excepciones describen códigos de error HTTP del servidor. Por ejemplo, esto puede ser un\n    error \"página no encontrada\" (404), un \"error no autorizado\" (401) o incluso un error 500\n    generado por el desarrollador. Con el propósito de generar tal respuesta desde cualquier lugar\n    en tu aplicación, puedes usar el helper <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">abort</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>abort(404);\n</code></pre>\n<p>El helper <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">abort</span>\n    provocará inmediatamente una excepción la cual será renderizada por el manejador de excepción.\n    Opcionalmente, puedes proporcionar el texto de la respuesta:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>abort(403, 'Unauthorized action.');\n</code></pre>\n<p></p>\n<h3>Páginas de error HTTP personalizadas</h3>\n<p>Laravel hace fácil mostrar páginas de error personalizadas para varios códigos de estado HTTP.\n    Por ejemplo, si deseas personalizar la página de error para los códigos de estado HTTP 404, crea\n    una vista <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views/errors/404.blade.php</span>.\n    Este archivo será servido en todos los errores 404 generados por tu aplicación. La vista dentro\n    de este directorio debería ser nombrada para coincidir con el código de estado HTTP que les\n    corresponde. La instancia <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">HttpException</span>\n    provocada por la función <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">abort</span>\n    será pasada a la vista como una variable <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$exception</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;h2&gt;{{ \\$exception-&gt;getMessage() }}&lt;/h2&gt;\n</code></pre>\n<p>Puedes publicar las plantillas de página de error de Laravel usando el comando de Artisan <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">vender:publish</span>.\n    Una vez que las plantillas han sido publicadas, puedes personalizarlas de la forma que quieras:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan vendor:publish --tag=laravel-errors\n</code></pre>\n</div>"
      },
      {
        "titulo": "Inicio de sesión",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Registro (Logging)</h1>\n<ul>\n    <li>Introducción</li>\n    <li>\n        Configuración\n        <ul>\n            <li>Construyendo stacks de registros</li>\n        </ul>\n    </li>\n    <li>\n        Escribiendo mensajes de registro\n        <ul>\n            <li>Escribiendo a canales específicos</li>\n        </ul>\n    </li>\n    <li>\n        Configuración avanzada del canal Monolog\n        <ul>\n            <li>Personalizando Monolog para canales</li>\n            <li>Creando canales de manejador para Monolog</li>\n            <li>Creando canales mediante factories</li>\n        </ul>\n    </li>\n</ul>\n<p></p>\n<h2>Introducción</h2>\n<p>Para ayudarte a aprender más acerca de lo que está sucediendo dentro de tu aplicación, Laravel\n    proporciona un robusto servicio de registro que te permite registrar mensajes en archivos, en el\n    registro de errores del sistema e incluso en Slack para notificar a todo tu equipo.</p>\n<p>\n    De forma interna, Laravel usa la biblioteca\n    Monolog\n    <outboundlink></outboundlink>\n    , que proporciona soporte para una variedad de poderosos manejadores de registros. Laravel hace\n    que sea pan comido configurar dichos manejadores, permitiéndote mezclar y juntarlos para\n    personalizar el manejo de registros en tu aplicación.\n</p>\n<p></p>\n<h2>Configuración</h2>\n<p>Toda la configuración para el sistema de registros de tu aplicación se encuentra en el archivo de\n    configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/logging.php</span>.\n    Este archivo te permite configurar los canales de registros de tu aplicación, así que asegurarte\n    de revisar cada uno de los canales disponibles y sus opciones. Revisaremos algunas opciones\n    comunes a continuación.</p>\n<p>Por defecto, Laravel usara el canal <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">stack</span> al\n    registrar mensajes. El canal <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">stack</span>\n    es usado para agregar múltiples canales de registros en un solo canal. Para más información\n    sobre construir stacks, revisa la documentación debajo.</p>\n<h4>Configurando el nombre del canal</h4>\n<p>Por defecto, Monolog es instanciado con un \"nombre de canal\" que concuerda con el entorno actual,\n    como <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">production</span>\n    o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">local</span>.\n    Para cambiar este valor, agrega una opción <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">name</span> a\n    la configuración de tu canal:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'stack' =&gt; [\n    'driver' =&gt; 'stack',\n    'name' =&gt; 'channel-name',\n    'channels' =&gt; ['single', 'slack'],\n],\n</code></pre>\n<h4>Drivers de canales disponibles</h4>\n<table>\n    <thead>\n    <tr>\n        <th>Nombre</th>\n        <th>Descripción</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td><span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">stack</span>\n        </td>\n        <td>Wrapper para facilitar la creación de canales \"multi-canales\"</td>\n    </tr>\n    <tr>\n        <td><span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">single</span>\n        </td>\n        <td>Canal de registro de un sólo archivo o ubicación (<span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">StreamHandler</span>)\n        </td>\n    </tr>\n    <tr>\n        <td><span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">daily</span>\n        </td>\n        <td>Driver de Monolog basado en <span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RotatingFileHandler</span>\n            que rota diariamente\n        </td>\n    </tr>\n    <tr>\n        <td><span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">slack</span>\n        </td>\n        <td>Driver de Monolog basado en <span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">SlackWebhookHandler</span>\n        </td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">papertrail</span>\n        </td>\n        <td>Driver de Monolog basado en <span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">SyslogUdpHandler</span>\n        </td>\n    </tr>\n    <tr>\n        <td><span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">syslog</span>\n        </td>\n        <td>Driver de Monolog basado en <span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">SyslogHandler</span>\n        </td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">errorlog</span>\n        </td>\n        <td>Driver de Monolog basado en <span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ErrorLogHandler</span>\n        </td>\n    </tr>\n    <tr>\n        <td><span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">monolog</span>\n        </td>\n        <td>Driver factory de Monolog que puede usar cualquier manejador de Monolog soportado</td>\n    </tr>\n    <tr>\n        <td><span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">custom</span>\n        </td>\n        <td>Driver que llama a un factory especificado para crear un canal</td>\n    </tr>\n    </tbody>\n</table>\n<p>TIP</p>\n<p>Comprueba la documentación en personalización avanzada de canales para aprender más sobre <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">monolog</span> y\n    drivers <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">personalizados</span>.\n</p>\n<h4>Configuración de los canales single y daily</h4>\n<p>Los canales <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">single</span>\n    y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">daily</span>\n    tienen tres opciones de configuración opcionales: <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">bubble</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">permission</span>\n    y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">locking</span>.\n</p>\n<table>\n    <thead>\n    <tr>\n        <th>Nombre</th>\n        <th>Descripción</th>\n        <th>Default</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td><span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">bubble</span>\n        </td>\n        <td>Indica si los mensajes deberían llegar a otros canales después de ser manejados</td>\n        <td><span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>\n        </td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">permission</span>\n        </td>\n        <td>Los permisos del archivo de registro</td>\n        <td><span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">644</span>\n        </td>\n    </tr>\n    <tr>\n        <td><span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">locking</span>\n        </td>\n        <td>Intenta bloquear el archivo de registro antes de escribirlo</td>\n        <td><span\n                style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>\n        </td>\n    </tr>\n    </tbody>\n</table>\n<h4>Configurando el canal de papertrail</h4>\n<p>\n    El canal <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">papertrail</span>\n    requiere de las opciones de configuración <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url</span> y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">port</span>.\n    Puedes obtener estos valores desde\n    Papertrail\n</p>\n<h4>Configurando el canal de Slack</h4>\n<p>\n    El canal <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">slack</span>\n    requiere una opción de configuración <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url</span>. Esta\n    URL debe coincidir con una URL de un\n    webhook entrante\n    que has configurado para tu equipo de Slack.\n</p>\n<p></p>\n<h3>Construyendo stacks de registros</h3>\n<p>Como mencionamos anteriormente, el driver <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">stack</span>\n    permite que combines múltiples canales en un sólo canal de registro. Para ilustrar cómo usar\n    stacks de registros, vamos a echar un vistazo a un ejemplo de configuración que podrías ver en\n    una aplicación en producción:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'channels' =&gt; [\n    'stack' =&gt; [\n        'driver' =&gt; 'stack',\n        'channels' =&gt; ['syslog', 'slack'],\n    ],\n    'syslog' =&gt; [\n        'driver' =&gt; 'syslog',\n        'level' =&gt; 'debug',\n    ],\n    'slack' =&gt; [\n        'driver' =&gt; 'slack',\n        'url' =&gt; env('LOG_SLACK_WEBHOOK_URL'),\n        'username' =&gt; 'Laravel Log',\n        'emoji' =&gt; ':boom:',\n        'level' =&gt; 'critical',\n    ],\n],\n</code></pre>\n<p>Vamos a examinar esta configuración. Primero, observa que nuestro canal <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">stack</span>\n    agrega dos canales más mediante su opción <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">channels</span>:\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">syslog</span> y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">slack</span>.\n    Entonces, al registrar mensajes, ambos canales tendrán la oportunidad de registrar el mensaje.\n</p>\n<h4>Niveles de registro</h4>\n<p>\n    Observa la opción de configuración <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">level</span>\n    presente en la configuración de los canales <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">syslog</span> y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">slack</span> en\n    el ejemplo superior. Esta opción determina el \"nivel\" mínimo que un mensaje debe tener para\n    poder ser registrado por el canal. Monolog, que hace funcionar los servicios de registros de\n    Laravel, ofrece todos los niveles de registro definidos en la\n    especificación RFC 5424\n    : <strong>emergency</strong>, <strong>alert</strong>, <strong>critical</strong>,\n    <strong>error</strong>, <strong>warning</strong>, <strong>notice</strong>, <strong>info</strong>\n    y <strong>debug</strong>.\n</p>\n<p>Así que, imagina que registramos un mensaje usando el método <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">debug</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Log::debug('An informational message.');\n</code></pre>\n<p>Dada nuestra configuración, el canal <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">syslog</span>\n    escribirá el mensaje al registro del sistema; sin embargo, dado que el mensaje de error no es\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">critical</span>\n    o superior, no será enviado a Slack. Sin embargo, si registramos un mensaje <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">emergency</span>,\n    será enviado tanto al registro del sistema como a Slack dado que el nivel <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">emergency</span>\n    está por encima de nuestro umbral mínimo para ambos canales:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Log::emergency('The system is down!');\n</code></pre>\n<p></p>\n<h2>Escribiendo mensajes de error</h2>\n<p>\n    Puedes escribir información a los registros usando el facade <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Log</span>. Como\n    mencionamos anteriormente, el registrador proporciona los ocho niveles de registro definidos en\n    la\n    especificación RFC 5424\n    : <strong>emergency</strong>, <strong>alert</strong>, <strong>critical</strong>,\n    <strong>error</strong>, <strong>warning</strong>, <strong>notice</strong>, <strong>info</strong>\n    y <strong>debug</strong>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Log::emergency(\\$message);\nLog::alert(\\$message);\nLog::critical(\\$message);\nLog::error(\\$message);\nLog::warning(\\$message);\nLog::notice(\\$message);\nLog::info(\\$message);\nLog::debug(\\$message);\n</code></pre>\n<p>Así que, podrías llamar a cualquiera de esos métodos para registrar un mensaje para el nivel\n    correspondiente. Por defecto, el mensaje será escrito al canal de registro por defecto tal y\n    como está configurado en tu archivo de configuración <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/logging.php</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse App\\User;\nuse Illuminate\\Support\\Facades\\Log;\nuse App\\Http\\Controllers\\Controller;\nclass UserController extends Controller\n{\n    /**\n    * Show the profile for the given user.\n    *\n    * @param  int  \\$id\n    * @return Response\n    */\n    public function showProfile(\\$id)\n    {\n        Log::info('Showing user profile for user: '.\\$id);\n        return view('user.profile', ['user' =&gt; User::findOrFail(\\$id)]);\n    }\n}\n</code></pre>\n<h4>Información contextual</h4>\n<p>Un arreglo de datos contextuales puede ser pasado a los métodos de registro. Estos datos\n    contextuales serán formateados y mostrados con el mensaje registrado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Log::info('User failed to login.', ['id' =&gt; \\$user-&gt;id]);\n</code></pre>\n<p></p>\n<h3>Escribiendo a canales específicos</h3>\n<p>Algunas veces podrías querer registrar un mensaje a un canal aparte del canal por defecto de tu\n    aplicación. Podrías usar el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">channel</span>\n    en el facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Log</span>\n    para retornar y registrar a cualquier canal definido en tu archivo de configuración:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Log::channel('slack')-&gt;info('Something happened!');\n</code></pre>\n<p>Si quisieras crear un stack de registro a la carta consistiendo de múltiples canales, puedes usar\n    el método <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">stack</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Log::stack(['single', 'slack'])-&gt;info('Something happened!');\n</code></pre>\n<p></p>\n<h2>Personalización avanzada de canales de Monolog</h2>\n<p></p>\n<h3>Personalizando Monolog para canales</h3>\n<p>Algunas veces puede que necesites un control total sobre la forma en la que Monolog es\n    configurado para un canal existente. Por ejemplo, podrías querer configurar una implementación\n    personalizada para <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">FormatterInterface</span>\n    de Monolog para los manejadores de un canal dado.</p>\n<p>Para comenzar, define un arreglo <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tap</span> en la\n    configuración del canal. El arreglo <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tap</span>\n    debe contener una lista de clases que deben tener una oportunidad de personalizar (o hacerle\n    \"tap\") a la instancia de Monolog luego de que es creada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'single' =&gt; [\n    'driver' =&gt; 'single',\n    'tap' =&gt; [App\\Logging\\CustomizeFormatter::class],\n    'path' =&gt; storage_path('logs/laravel.log'),\n    'level' =&gt; 'debug',\n],\n</code></pre>\n<p>Una vez que has configurado la opción <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tap</span> en tu\n    canal, estás listo para definir la clase que personalizará tu instancia de Monolog. Esta clase\n    sólo necesita un método: <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">__invoke</span>,\n    que recibe una instancia <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Log\\Logger</span>.\n    La instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Log\\Logger</span>\n    redirige todas las llamadas de métodos a la instancia base de Monolog:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Logging;\nclass CustomizeFormatter\n{\n    /**\n    * Customize the given logger instance.\n    *\n    * @param  \\Illuminate\\Log\\Logger  \\$logger\n    * @return void\n    */\n    public function __invoke(\\$logger)\n    {\n        foreach (\\$logger-&gt;getHandlers() as \\$handler) {\n            \\$handler-&gt;setFormatter(...);\n        }\n    }\n}\n</code></pre>\n<p>TIP</p>\n<p>Todas tus clases \"tap\" son resultas por el contenedor de servicios, así que cualquier dependencia\n    del constuctor que requieran será inyectada automáticamente.</p>\n<p></p>\n<h3>Creando canales para manejadores de Monolog</h3>\n<p>\n    Monolog tiene una variedad de\n    manejadores disponibles\n    . En algunos casos, el tipo de registro que quieres crear es simplemente un driver de Monolog\n    con una instancia de un handler en específico. Estos canales pueden ser creados usando el driver\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">monolog</span>.\n</p>\n<p>Al usar el driver <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">monolog</span>,\n    la opción de configuración <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">handler</span>\n    es usada para especificar que handler será instanciado. Opcionalmente, cualquier parámetros del\n    constructor que el handler necesite puede ser especificado usando la opción de configuración\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">with</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'logentries' =&gt; [\n    'driver'  =&gt; 'monolog',\n    'handler' =&gt; Monolog\\Handler\\SyslogUdpHandler::class,\n    'with' =&gt; [\n        'host' =&gt; 'my.logentries.internal.datahubhost.company.com',\n        'port' =&gt; '10000',\n    ],\n],\n</code></pre>\n<h4>Formateadores de Monolog</h4>\n<p>Al usar el driver <span\n        style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">monolog</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">LineFormatter</span>\n    de Monolog será usado como formateador por defecto. Sin embargo, puedes personalizar el tipo de\n    formateador pasado al manejador usando las opciones de configuración <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">formatter</span>\n    y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">formatter_with</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'browser' =&gt; [\n    'driver' =&gt; 'monolog',\n    'handler' =&gt; Monolog\\Handler\\BrowserConsoleHandler::class,\n    'formatter' =&gt; Monolog\\Formatter\\HtmlFormatter::class,\n    'formatter_with' =&gt; [\n        'dateFormat' =&gt; 'Y-m-d',\n    ],\n],\n</code></pre>\n<p>Si estás usando un manejador de Monolog que es capaz de proveer su propio formateador, puedes\n    establecer el valor de la opción de configuración <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">formatter</span>\n    a\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">default</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'newrelic' =&gt; [\n    'driver' =&gt; 'monolog',\n    'handler' =&gt; Monolog\\Handler\\NewRelicHandler::class,\n    'formatter' =&gt; 'default',\n],\n</code></pre>\n<p></p>\n<h3>Creando canales mediante factories</h3>\n<p>Si quieres definir un canal personalizado completo en el que tienes control total sobre la\n    instanciación y configuración de Monolog, puedes especificar un driver personalizado en tu\n    archivo de configuración <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/logging.php</span>.\n    Tu configuración debe incluir una opción <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">via</span>\n    que apunte a la clase factory que será invocada para crear la instancia de Monolog:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'channels' =&gt; [\n    'custom' =&gt; [\n        'driver' =&gt; 'custom',\n        'via' =&gt; App\\Logging\\CreateCustomLogger::class,\n    ],\n],\n</code></pre>\n<p>Una vez que has configurado el canal personalizado, estás listo para definir la clase que creará\n    tu instancia de Monolog. Esta clase sólo necesita un método: <span\n            style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">__invoke</span>,\n    el cual debe retornar una instancia de Monolog:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Logging;\nuse Monolog\\Logger;\nclass CreateCustomLogger\n{\n    /**\n    * Create a custom Monolog instance.\n    *\n    * @param  array  \\$config\n    * @return \\Monolog\\Logger\n    */\n    public function __invoke(array \\$config)\n    {\n        return new Logger(...);\n    }\n}\n</code></pre>\n</div>"
      }
    ]
  },
  {
    "titulo": "4.- FrontEnd",
    "subtitulo": "",
    "items": [
      {
        "titulo": "Plantillas Blade",
        "contenido": "<div style='font-size: 14.2px;'>\n        <h1>Plantillas Blade</h1>\n        <ul>\n            <li>Introducción</li>\n            <li>\n                Herencia de plantillas\n                <ul>\n                    <li>Definir un layout</li>\n                    <li>Extender un layout</li>\n                </ul>\n            </li>\n            <li>Componentes y slots</li>\n            <li>\n                Mostrando datos\n                <ul>\n                    <li>Frameworks de Blade y JavaScript</li>\n                </ul>\n            </li>\n            <li>\n                Estructuras de control\n                <ul>\n                    <li>Sentencias if</li>\n                    <li>Sentencias switch</li>\n                    <li>Bucles</li>\n                    <li>La variable loop</li>\n                    <li>Comentarios</li>\n                    <li>PHP</li>\n                </ul>\n            </li>\n            <li>\n                Formularios\n                <ul>\n                    <li>Campo CSRF</li>\n                    <li>Campo method</li>\n                    <li>Errores de validación</li>\n                </ul>\n            </li>\n            <li>\n                Incluyendo sub-vistas\n                <ul>\n                    <li>Renderizar vistas para colecciones</li>\n                </ul>\n            </li>\n            <li>Stacks</li>\n            <li>Inyeción de servicios</li>\n            <li>\n                Extendiendo Blade\n                <ul>\n                    <li>Sentencias if personalizadas</li>\n                </ul>\n            </li>\n        </ul>\n        \n        <h2>Introducción</h2>\n        <p>Blade es un motor de plantillas simple y a la vez poderoso proporcionado por Laravel. A diferencia de otros motores de plantillas populares de PHP, Blade no te impide utilizar código PHP plano en sus vistas. De hecho, todas las vistas de Blade son compiladas en código PHP plano y almacenadas en caché hasta que sean modificadas, lo que significa que Blade no añade sobrecarga a tu aplicación. Los archivos de las vistas de Blade tienen la extensión <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.blade.php</span> y son usualmente almacenados en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views</span>.</p>\n        \n            <p >TIP</p>\n            <p>\n                En\n                \n                    Styde.net\n                    \n                \n                contamos con una\n                \n                    completa lección sobre Blade\n                    \n                \n                totalmente gratuita.\n            </p>\n        \n    \n    \n    <h2>Herencia de plantillas</h2>\n    \n    <h3 ># Definir un layout</h3>\n    <p>Dos de los principales beneficios de usar Blade son <em>la herencia de plantillas</em> y <em>secciones</em>. Para empezar, veamos un ejemplo simple. Primero, vamos a examinar una página de layout \"master\". Ya que la mayoría de las aplicaciones web mantienen el mismo layout general a través de varias páginas, es conveniente definir este layout como una sola vista de Blade:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;!-- Almacenado en resources/views/layouts/app.blade.php --&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;App Name - @yield('title')&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        @section('sidebar')\n            This is the master sidebar.\n        @show\n        &lt;div class=\"container\"&gt;\n            @yield('content')\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n    \n    <p>Como puedes ver, este archivo contiene el marcado típico de HTML. Sin embargo, toma nota de las directivas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@section</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@yield</span>. La directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@section</span>, como su nombre lo indica, define una sección de contenido, mientras que la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@yield</span> es utilizada para mostrar el contenido en una sección determinada.</p>\n    <p>Ahora que hemos definido un layout para nuestra aplicación, vamos a definir una página hija que herede el layout.</p>\n    \n    <h3 ># Extender un layout</h3>\n    <p>Al definir una vista hija, utiliza la directiva de Blade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@extends</span> para indicar el layout que deberá \"heredarse\" en la vista hija. Las vistas que extiendan un layout de Blade pueden inyectar contenido en la sección del layout usando la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@section</span>. Recuerda, como vimos en el ejemplo anterior, los contenidos de estas secciones se mostrarán en el layout usando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@yield</span>:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;!-- Almacenado en resources/views/child.blade.php --&gt;\n@extends('layouts.app')\n@section('title', 'Page Title')\n@section('sidebar')\n    @@parent\n    &lt;p&gt;This is appended to the master sidebar.&lt;/p&gt;\n@endsection\n@section('content')\n    &lt;p&gt;This is my body content.&lt;/p&gt;\n@endsection\n</code></pre>\n    \n    <p>En este ejemplo, la sección <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sidebar</span> está utilizando la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@@parent</span> para adjuntar (en lugar de sobrescribir) contenido al sidebar del layout. La directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@@parent</span> será reemplazada por el contenido del layout cuando la vista sea renderizada.</p>\n    \n        <p >TIP</p>\n        <p>Contrario al ejemplo anterior, esta sección <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sidebar</span> termina con <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@endsection</span> en lugar de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@show</span>. La directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@endsection</span> sólo definirá una sección mientras que <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@show</span> definirá y <strong>automáticamente creará un yield</strong> de la sección.</p>\n    \n    <p>La directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@yield</span> también acepta un valor por defecto como segundo parametro. Este valor será renderizado si la sección siendo generada es undefined:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@yield('content', View::make('view.name'))\n</code></pre>\n    \n    <p>Las vistas de Blade se pueden retornar desde las rutas usando el helper global <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">view</span>:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('blade', function () {\n    return view('child');\n});\n</code></pre>\n    \n    \n        <p >TIP</p>\n        <p>\n            En\n            \n                Styde.net\n                \n                    \n                    \n                \n            \n            contamos con una\n            \n                lección sobre layouts con Blade\n                \n                    \n                    \n                \n            \n            totalmente gratuita.\n        </p>\n    \n    \n    <h2>Componentes y slots</h2>\n    <p>Los componentes y slots proporcionan beneficios similares a secciones y layouts; sin embargo, algunos encontrarán el modelo mental de componentes y slots más fácil de comprender. Primero, imginemos un componente \"alert\" reutilizable que queremos que se reutilice en toda nuestra aplicación:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;!-- /resources/views/alert.blade.php --&gt;\n&lt;div class=\"alert alert-danger\"&gt;\n    {{ \\$slot }}\n&lt;/div&gt;\n</code></pre>\n    \n    \n        <p>La variable <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">{{ \\$slot }}</span> tendrá el contenido que deseamos inyectar en el componente. Ahora, para construir el componente, podemos usar la directiva de Blade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@component</span>:</p>\n    \n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@component('alert')\n    &lt;strong&gt;Whoops!&lt;/strong&gt; Something went wrong!\n@endcomponent\n</code></pre>\n    \n    <p>Para instruir a Laravel para que cargue la primera vista que existe desde un arreglo de posibles vistas para el componente, puedes usar la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">componentFirst</span>:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@componentFirst(['custom.alert', 'alert'])\n    &lt;strong&gt;Whoops!&lt;/strong&gt; Something went wrong!\n@endcomponent\n</code></pre>\n    \n    <p>A veces es útil definir múltiples slots para un componente. Vamos a modificar nuestro componente alerta para permitir la inyección de un \"título\". Los slots nombrados podrán despegarse al hacer \"echo\" a la variable que coincida con sus nombres:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;!-- /resources/views/alert.blade.php --&gt;\n&lt;div class=\"alert alert-danger\"&gt;\n    &lt;div class=\"alert-title\"&gt;{{ \\$title }}&lt;/div&gt;\n    {{ \\$slot }}\n&lt;/div&gt;\n</code></pre>\n    \n    <p>Ahora, podemos inyectar contenido en el slot nombrado usando la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@slot</span>. Cualquier contenido que no esté en la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@slot</span> será pasado al componente en la variable <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$slot</span>:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@component('alert')\n    @slot('title')\n        Forbidden\n    @endslot\n    You are not allowed to access this resource!\n@endcomponent\n</code></pre>\n    \n    <h4 ># Pasando información adicional a los componentes</h4>\n    <p>En ocasiones puedes necesitar pasar información adicional al componente. Por esta razón, puedes pasar un arreglo de información como segundo argumento a la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@component</span>. Toda la información se hará disponible para la plantilla del componente como variables:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@component('alert', ['foo' =&gt; 'bar'])\n    ...\n@endcomponent\n</code></pre>\n    \n    <h4 ># Agregando alias a componentes</h4>\n    <p>Si tus componentes de Blade están almacenados en un subdirectorio, puedes querer agregarles un alias para tener un acceso más fácil. Por ejemplo, imagina un componente de Blade que está almacenado en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views/components/alert.blade.php</span>. Puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">component</span> para agregar un alias al componente de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">components.alert</span> a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">alert</span>. Típicamente, esto debe ser realizado en el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span> de tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AppServiceProvider</span>:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Blade;\nBlade::component('components.alert', 'alert');\n</code></pre>\n    \n    <p>Una vez que el alias ha sido agregado al componente, puedes renderizarlo usando una directiva:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@alert(['type' =&gt; 'danger'])\n    You are not allowed to access this resource!\n@endalert\n</code></pre>\n    \n    <p>Puedes omitir los parametros del componente si este no tiene slots adicionales:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@alert\n    You are not allowed to access this resource!\n@endalert\n</code></pre>\n    \n    \n    <h2>Mostrando datos</h2>\n    <p>Puedes mostrar datos pasados a tu vista de Blade al envolver la variable entre llaves. Por ejemplo, dada la siguiente ruta:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('greeting', function () {\n    return view('welcome', ['name' =&gt; 'Samantha']);\n});\n</code></pre>\n    \n    <p>Puedes mostrar el contenido de la variable <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">name</span> de la siguiente manera:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>Hello, {{ \\$name }}.\n</code></pre>\n    \n    <p>No estás limitado a mostrar sólo el contenido de las variables pasadas a la vista. También puedes hacer echo al resultado de cualquier función de PHP. De hecho, puedes poner cualquier código PHP que desees dentro de la declaración echo de Blade:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>The current UNIX timestamp is {{ time() }}.\n</code></pre>\n    \n    \n        \n            <p >TIP</p>\n            <p>Las declaraciones de Blade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">{{ }}</span> son enviadas automáticamente mediante la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">htmlspecialchars</span> de PHP para prevenir ataques XSS.</p>\n        \n    \n    <h4 ># Mostrar datos no escapados</h4>\n    \n        <p>De manera predeterminada, las declaraciónes <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">{{ }}</span> de Blade son enviadas mediante la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">htmlspecialchars</span> de PHP para prevenir ataques XSS. Si no deseas que tu información sea escapada, puedes utilizar la siguiente sintáxis:</p>\n    \n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>Hello, {!! \\$name !!}.\n</code></pre>\n    \n    \n        <p >Nota</p>\n        <p>Se muy cuidadoso cuando muestres contenido que sea suministrado por los usuarios de tu aplicación. Usa siempre las sentencias escapadas, ya que éstas previenen ataques XSS cuando se muestran datos suministrados por los usuarios.</p>\n    \n    <h4 ># Renderizar JSON</h4>\n    <p>En ocasiones puedes pasar un arreglo a tu vista con la intención de renderizarla como JSON para inicializar una variable JavaScript. Por ejemplo:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;script&gt;\n    var app = &lt;?php echo json_enspan(\\$array); ?&gt;;\n&lt;/script&gt;\n</code></pre>\n    \n    <p>Sin embargo, en lugar de llamar manualmente a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">json_enspan</span>, puedes usar la directiva de Blade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@json</span>. La directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@json</span> acepta los mismos argumentos que la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">json_enspan</span> de PHP:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;script&gt;\n    var app = @json(\\$array);\n    var app = @json(\\$array, JSON_PRETTY_PRINT);\n&lt;/script&gt;\n</code></pre>\n    \n    \n        <p >Nota</p>\n        <p>Sólo debes usar la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@json</span> para renderizar variables existentes como JSON. Las plantillas Blade están basadas en expresiones regulares e intentar pasar una expresión compleja a la directiva podría causar fallos inesperados.</p>\n    \n    <p>La directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@json</span> es también útil para trabajar con componentes de Vue o atributos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">data-*</span>:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;example-component :some-prop='@json(\\$array)'&gt;&lt;/example-component&gt;\n</code></pre>\n    \n    \n        <p >Nota</p>\n        <p>El uso de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@json</span> en atributos de elementos requiere que esté rodeado por comillas simples.</p>\n    \n    <h4 ># Codificación de entidades HTML</h4>\n    <p>Por defecto, Blade (y el helper <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">e</span> de Laravel) codificarán doblemente las entidades HTML. Si te gustaría deshabilitar la codificación doble, llama al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Blade::withoutDoubleEncoding</span> desde el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span> de tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AppServiceProvider</span>:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Providers;\nuse Illuminate\\Support\\Facades\\Blade;\nuse Illuminate\\Support\\ServiceProvider;\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n    * Bootstrap any application services.\n    *\n    * @return void\n    */\n    public function boot()\n    {\n        Blade::withoutDoubleEncoding();\n    }\n}\n</code></pre>\n    \n    \n    <h3 ># Frameworks de Blade Y JavaScript</h3>\n    <p>Dado que muchos frameworks de JavaScript también usan llaves para indicar que una expresión dada debe mostrarse en el navegador, puedes utilizar el símbolo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@</span> para informar al motor de renderizado de Blade que una expresión debe permanecer intacta. Por ejemplo:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;h1&gt;Laravel&lt;/h1&gt;\nHello, @{{ name }}.\n</code></pre>\n    \n    <p>En este ejemplo, el símbolo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@</span> será removido por Blade; sin embargo, la expresión <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"></span> permanecerá intacta por el motor de Blade, lo que permitirá que pueda ser procesada por tu framework de JavaScript.</p>\n    <h4 ># La directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@verbatim</span></h4>\n    <p>Si estás mostrando variables de JavaScript en una gran parte de tu plantilla, puedes ajustar el HTML en la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@verbatim</span> para que no tengas que poner un prefijo en cada instrucción echo de Blade con un símbolo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@</span>:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@verbatim\n    &lt;div class=\"container\"&gt;\n        Hello, {{ name }}.\n    &lt;/div&gt;\n@endverbatim\n</code></pre>\n    \n    \n    <h2>Estructuras de control</h2>\n    <p>Además de la herencia de plantillas y la visualización de datos, Blade también proporciona accesos directos y convenientes para las estructuras de control comunes de PHP, tales como sentencias condicionales y bucles. Estos accesos directos proporcionan una manera muy limpia y concisa de trabajar con estructuras de control de PHP, al tiempo que permanecen familiares para sus contrapartes de PHP.</p>\n    \n    <h3 ># Sentencias if</h3>\n    <p>Puede construir sentencias <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">if</span> usando las directivas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@if</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@elseif</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@else</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@endif</span>. Estas directivas funcionan idénticamente a sus contrapartes PHP:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@if (count(\\$records) === 1)\n    I have one record!\n@elseif (count(\\$records) &gt; 1)\n    I have multiple records!\n@else\n    I don't have any records!\n@endif\n</code></pre>\n    \n    <p>Por conveniencia, Blade también proporciona una directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@unless</span>:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@unless (Auth::check())\n    You are not signed in.\n@endunless\n</code></pre>\n    \n    <p>Además de las directivas condicionales previamente mencionadas, las directivas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@isset</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@empty</span> pueden ser usadas como accesos directos convenientes para sus respectivas funciones PHP:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@isset(\\$records)\n    // \\$records is defined and is not null...\n@endisset\n@empty(\\$records)\n    // \\$records is \"empty\"...\n@endempty\n</code></pre>\n    \n    <h4 ># Directivas de autenticación</h4>\n    <p>Las directivas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@auth</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@guest</span> pueden ser utilizadas para determinar rápidamente si el usuario actual está autenticado o si es un invitado:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@auth\n    // The user is authenticated...\n@endauth\n@guest\n    // The user is not authenticated...\n@endguest\n</code></pre>\n    \n    <p>Si es necesario, puede especificar el guard de autenticación que debe verificarse al usar las directivas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@auth</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@guest</span>:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@auth('admin')\n    // The user is authenticated...\n@endauth\n@guest('admin')\n    // The user is not authenticated...\n@endguest\n</code></pre>\n    \n    <h4 ># Directivas de sección</h4>\n    <p>Puede verificar si una sección tiene contenido usando la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@hasSection</span>:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@hasSection('navigation')\n    &lt;div class=\"pull-right\"&gt;\n        @yield('navigation')\n    &lt;/div&gt;\n    &lt;div class=\"clearfix\"&gt;&lt;/div&gt;\n@endif\n</code></pre>\n    \n    \n    <h3 ># Sentencias switch</h3>\n    <p>Las sentencias switch pueden ser construidas usando las directivas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@switch</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@case</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@break</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@default</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@endswitch</span>:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@switch(\\$i)\n    @case(1)\n        First case...\n        @break\n    @case(2)\n        Second case...\n        @break\n    @default\n        Default case...\n@endswitch\n</code></pre>\n    \n    \n    <h3 ># Bucles</h3>\n    <p>Además de las sentencias condicionales, Blade proporciona directivas simples para trabajar con estructuras en bucle de PHP. De nuevo, cada una de estas directivas funciona idénticamente a sus contrapartes PHP:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@for (\\$i = 0; \\$i &lt; 10; \\$i++)\n    The current value is {{ \\$i }}\n@endfor\n@foreach (\\$users as \\$user)\n    &lt;p&gt;This is user {{ \\$user-&gt;id }}&lt;/p&gt;\n@endforeach\n@forelse (\\$users as \\$user)\n    &lt;li&gt;{{ \\$user-&gt;name }}&lt;/li&gt;\n@empty\n    &lt;p&gt;No users&lt;/p&gt;\n@endforelse\n@while (true)\n    &lt;p&gt;I'm looping forever.&lt;/p&gt;\n@endwhile\n</code></pre>\n    \n    \n        <p >TIP</p>\n        <p>Cuando estés dentro del bucle, puedes usar la variable loop para obtener información valiosa acerca del bucle, como puede ser saber si estás en la primera o última iteración a través del bucle.</p>\n    \n    <p>Al usar bucles puede finalizarlo u omitir la iteración actual:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@foreach (\\$users as \\$user)\n    @if (\\$user-&gt;type == 1)\n        @continue\n    @endif\n    &lt;li&gt;{{ \\$user-&gt;name }}&lt;/li&gt;\n    @if (\\$user-&gt;number == 5)\n        @break\n    @endif\n@endforeach\n</code></pre>\n    \n    <p>También puede incluir la condición con la declaración en una línea:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@foreach (\\$users as \\$user)\n    @continue(\\$user-&gt;type == 1)\n    &lt;li&gt;{{ \\$user-&gt;name }}&lt;/li&gt;\n    @break(\\$user-&gt;number == 5)\n@endforeach\n</code></pre>\n    \n    \n    <h3 ># La variable loop</h3>\n    <p>Al realizar un ciclo, una variable <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$loop</span> estará disponible dentro del ciclo. Esta variable proporciona acceso a un poco de información útil, como el índice del ciclo actual y si es la primera o la última iteración del ciclo:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@foreach (\\$users as \\$user)\n    @if (\\$loop-&gt;first)\n        This is the first iteration.\n    @endif\n    @if (\\$loop-&gt;last)\n        This is the last iteration.\n    @endif\n    &lt;p&gt;This is user {{ \\$user-&gt;id }}&lt;/p&gt;\n@endforeach\n</code></pre>\n    \n    <p>Si estás en un bucle anidado, puedes acceder a la variable <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$loop</span> del bucle padre a través de la propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">parent</span>:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@foreach (\\$users as \\$user)\n    @foreach (\\$user-&gt;posts as \\$post)\n        @if (\\$loop-&gt;parent-&gt;first)\n            This is first iteration of the parent loop.\n        @endif\n    @endforeach\n@endforeach\n</code></pre>\n    \n    <p>La variable <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$loop</span> también contiene una variedad de otras propiedades útiles:</p>\n    <table>\n        <thead>\n        <tr>\n            <th>Propiedad</th>\n            <th>Descripción</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$loop-&gt;index</span></td>\n            <td>El índice de la iteración del ciclo actual (comienza en 0).</td>\n        </tr>\n        <tr>\n            <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$loop-&gt;iteration</span></td>\n            <td>Iteración del ciclo actual (comienza en 1).</td>\n        </tr>\n        <tr>\n            <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$loop-&gt;remaining</span></td>\n            <td>Iteraciones restantes en el ciclo.</td>\n        </tr>\n        <tr>\n            <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$loop-&gt;count</span></td>\n            <td>La cantidad total de elementos en el arreglo que se itera.</td>\n        </tr>\n        <tr>\n            <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$loop-&gt;first</span></td>\n            <td>Si esta es la primera iteración a través del ciclo.</td>\n        </tr>\n        <tr>\n            <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$loop-&gt;last</span></td>\n            <td>Si esta es la última iteración a través del ciclo.</td>\n        </tr>\n        <tr>\n            <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$loop-&gt;even</span></td>\n            <td>Si esta es una iteración par a través del ciclo.</td>\n        </tr>\n        <tr>\n            <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$loop-&gt;odd</span></td>\n            <td>Si esta es una iteración impar a través del ciclo.</td>\n        </tr>\n        <tr>\n            <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$loop-&gt;depth</span></td>\n            <td>El nivel de anidamiento del bucle actual.</td>\n        </tr>\n        <tr>\n            <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$loop-&gt;parent</span></td>\n            <td>Cuando está en un bucle anidado, la variable de bucle del padre.</td>\n        </tr>\n        </tbody>\n    </table>\n    \n    <h3 ># Comentarios</h3>\n    <p>Blade también le permite definir comentarios en sus vistas. Sin embargo, a diferencia de los comentarios HTML, los comentarios de Blade no son incluidos en el HTML retornado por la aplicación:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>{{-- This comment will not be present in the rendered HTML --}}\n</code></pre>\n    \n    \n    <h3 ># PHP</h3>\n    <p>En algunas situaciones, es útil insertar código PHP en sus vistas. Puedes usar la directiva de Blade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@php</span> para ejecutar un bloque de PHP plano en tu plantilla:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@php\n    //\n@endphp\n</code></pre>\n    \n    \n        <p >TIP</p>\n        <p>A pesar que Blade proporciona esta función, usarla con frecuencia puede ser una señal de que tienes demasiada lógica incrustada dentro de tu plantilla.</p>\n    \n    \n    <h2>Formularios</h2>\n    \n    <h3 ># Campo CSRF</h3>\n    <p>\n        Cada vez que defines un formulario HTML en tu aplicación, debes incluir un campo de token CSRF oculto en el formulario para que\n        \n            el middleware de protección CSRF\n            \n                \n                \n            \n        \n        pueda validar la solicitud. Puedes usar la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@csrf</span> de Blade para generar el campo de token:\n    </p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;form method=\"POST\" action=\"/profile\"&gt;\n    @csrf\n        ...\n&lt;/form&gt;\n</code></pre>\n    \n    \n    <h3 ># Campo method</h3>\n    <p>Dado que los formularios HTML no pueden hacer solicitudes <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">PUT</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">PATCH</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DELETE</span> necesitarás agregar un campo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">_method</span> oculto para suplantar estos verbos HTTP. La directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@method</span> de Blade puede crear este campo por ti:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;form action=\"/foo/bar\" method=\"POST\"&gt;\n    @method('PUT')\n        ...\n&lt;/form&gt;\n</code></pre>\n    \n    \n    <h3 ># Errores de validación</h3>\n    <p>La directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@error</span> puede ser usada para comprobar rápidamente si existen mensajes de error de validación para un atributo dado. Para una directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@error</span>, puedes imprimir la variable <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$message</span> para mostrar el mensaje de error:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;!-- /resources/views/post/create.blade.php --&gt;\n&lt;label for=\"title\"&gt;Post Title&lt;/label&gt;\n&lt;input id=\"title\" type=\"text\" class=\"@error('title') is-invalid @enderror\"&gt;\n@error('title')\n    &lt;div class=\"alert alert-danger\"&gt;{{ \\$message }}&lt;/div&gt;\n@enderror\n</code></pre>\n    \n    <p>Puedes pasar el nombre de un error especifico como segundo parametro de la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@error</span> para retornar los mensajes de error en páginas que contienen múltiples formularios:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;!-- /resources/views/auth.blade.php --&gt;\n&lt;label for=\"email\"&gt;Email address&lt;/label&gt;\n&lt;input id=\"email\" type=\"email\" class=\"@error('email', 'login') is-invalid @enderror\"&gt;\n@error('email', 'login')\n    &lt;div class=\"alert alert-danger\"&gt;{{ \\$message }}&lt;/div&gt;\n@enderror\n</code></pre>\n    \n    \n    <h2>Incluyendo sub-vistas</h2>\n    <p>La directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@include</span> de Blade te permite incluir una vista de Blade desde otra vista. Todas las variables que estén disponibles en la vista padre estarán disponibles para la vista incluida:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;div&gt;\n    @include('shared.errors')\n    &lt;form&gt;\n        &lt;!-- Form Contents --&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n</code></pre>\n    \n    <p>Aunque la vista incluida heredará todos los datos disponibles en la vista principal, también puedes pasar un arreglo de datos adicionales a la vista incluida:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@include('view.name', ['some' =&gt; 'data'])\n</code></pre>\n    \n    <p>Si utiliza <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@include</span> en una vista que no existe, Laravel lanzará un error. Si desea incluir una vista que puede o no estar presente, deberá utilizar la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@includeIf</span>:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@includeIf('view.name', ['some' =&gt; 'data'])\n</code></pre>\n    \n    <p>Si desea incluir una vista dependiendo de una condición booleana dada, puedes utilizar la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@includeWhen</span>:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@includeWhen(\\$boolean, 'view.name', ['some' =&gt; 'data'])\n</code></pre>\n    \n    <p>Para incluir la primera vista que exista para un arreglo dado de vistas, puedes usar la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@includeFirst</span>:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@includeFirst(['custom.admin', 'admin'], ['some' =&gt; 'data'])\n</code></pre>\n    \n    \n        <p >Nota</p>\n        <p>Debes evitar usar las constantes <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">__DIR__</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">__FILE__</span> en tus vistas de Blade, ya que se referirán a la ubicación de la vista compilada en caché.</p>\n    \n    <h4 ># Alias de includes</h4>\n    <p>Si tus includes de Blade están almacenados en un subdirectorio, puedes desear crear un alias de ellos para un acceso más fácil. Por ejemplo, imagina un include de Blade que está almacenado en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views/includes/input.blade.php</span> con el siguiente contenido:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;input type=\"{{ \\$type ?? 'text' }}\"&gt;\n</code></pre>\n    \n    <p>Puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">include</span> para crear un alias al include de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">includes.input</span> a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">input</span>. Normalmente, esto debería hacerse en el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span> de tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AppServiceProvider</span>:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Blade;\nBlade::include('includes.input', 'input');\n</code></pre>\n    \n    <p>Una vez que el include tiene un alias asignado, puedes renderizalo usando el nombre del alias como una directiva de Blade:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@input(['type' =&gt; 'email'])\n</code></pre>\n    \n    \n    <h3 ># Renderizar vistas para colecciones</h3>\n    <p>Puedes combinar bucles e incluirlos en una sola línea con la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@each</span> de Blade:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@each('view.name', \\$jobs, 'job')\n</code></pre>\n    \n    <p>El primer argumento es la vista parcial a renderizar por cada elemento en el arreglo o colección. El segundo argumento es el arreglo o colección que desea iterar, mientras que el tercer argumento es el nombre de la variable que será asignada a la iteración actual dentro de la vista. Así que, por ejemplo, si está iterando en un arreglo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">jobs</span>, típicamente querrá tener acceso a cada trabajo como una variable <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">job</span> en su vista parcial. La llave de la iteración actual estará disponible como la variable <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">key</span> en su vista parcial.</p>\n    <p>También puede pasar un cuarto argumento a la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@each</span>. Este argumento determina la vista que se va a renderizar si el arreglo dado está vacío.</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@each('view.name', \\$jobs, 'job', 'view.empty')\n</code></pre>\n    \n    \n        <p >Nota</p>\n        <p>Las vistas renderizadas via <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@each</span> no heredan las variables de la vista padre. Si la vista hija requiere de estas variables, deberá usar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@foreach</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@include</span> en su lugar.</p>\n    \n    \n    <h2>Pilas</h2>\n    <p>Blade te permite agregar a pilas nombradas que pueden ser renderizados en otra parte de otra vista o layout. Esto es particularmente útil para especificar cualquier librería JavaScript requerida por las vistas hijas:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@push('scripts')\n    &lt;script src=\"/example.js\"&gt;&lt;/script&gt;\n@endpush\n</code></pre>\n    \n    <p>Puede agregar una pila tantas veces como lo necesite. Para renderizar el contenido completo de la pila, pasa el nombre de la pila a la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@stack</span>:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;head&gt;\n    &lt;!-- Head Contents --&gt;\n    @stack('scripts')\n&lt;/head&gt;\n</code></pre>\n    \n    <p>Si te gustaría agregar contenido al inicio de una pila, debes usar la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@prepend</span>:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@push('scripts')\n    This will be second...\n@endpush\n// Luego...\n@prepend('scripts')\n    This will be first...\n@endprepend\n</code></pre>\n    \n    \n    <h2>Inyeción de servicios</h2>\n    <p>La directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@inject</span> puede ser utilizada para recuperar un servicio del contenedor de servicios de Laravel. El primer argumento pasado a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@inject</span> es el nombre de la variable en la que se colocará el servicio, mientras que el segundo argumento es el nombre de la clase o interfaz del servicio que desea resolver:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@inject('metrics', 'App\\Services\\MetricsService')\n&lt;div&gt;\n    Monthly Revenue: {{ \\$metrics-&gt;monthlyRevenue() }}.\n&lt;/div&gt;\n</code></pre>\n    \n    \n    <h2>Extendiendo Blade</h2>\n    <p>Blade le permite definir sus propias directivas personalizadas utilizando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">directive</span>. Cuando el compilador Blade encuentra la directiva personalizada, llamará al callback con la expresión que contiene la directiva.</p>\n    <p>El siguiente ejemplo crea una directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@datetime(\\$var)</span> que le da formato a la variable <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$var</span>, la cual es una instancia de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DateTime</span>:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Providers;\nuse Illuminate\\Support\\Facades\\Blade;\nuse Illuminate\\Support\\ServiceProvider;\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n    * Register bindings in the container.\n    *\n    * @return void\n    */\n    public function register()\n    {\n        Blade::directive('datetime', function (\\$expression) {\n            return \"&lt;?php echo (\\$expression)-&gt;format('m/d/Y H:i'); ?&gt;\";\n        });\n        //\n    }\n    /**\n    * Bootstrap any application services.\n    *\n    * @return void\n    */\n    public function boot()\n    {\n        //\n        Blade::directive('datetime', function (\\$expression) {\n            return \"&lt;?php echo (\\$expression)-&gt;format('m/d/Y H:i'); ?&gt;\";\n        });\n    }\n}\n</code></pre>\n    \n    <p>Como podrás ver, vamos a encadenar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">format</span> en cualquier expresión que se pase a la directiva. Entonces, en este ejemplo, el PHP final generado por esta directiva será:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php echo (\\$var)-&gt;format('m/d/Y H:i'); ?&gt;\n</code></pre>\n    \n    \n        <p >Nota</p>\n        <p>Después de actualizar la lógica de la directiva de Blade, vas a necesitar eliminar todas las vistas de Blade guardades en caché. Las vistas de Blade en caché pueden ser eliminadas con el comando de Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">view:clear</span>.</p>\n    \n    \n    <h3 ># Sentencias if personalizadas</h3>\n    <p>Programar una directiva personalizada algunas veces es más complejo de lo necesario al definir sentencias condicionales simples personalizadas. Por esa razón, Blade proporciona un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Blade:if</span> que le permitirá rápidamente definir directivas condicionales utilizando Closures. Por ejemplo, vamos a definir una condicional personalizada que verifica el entorno actual de la aplicación. Podemos hacer esto en el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span> de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AppServiceProvider</span>:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Blade;\n/**\n* Perform post-registration booting of services.\n*\n* @return void\n*/\npublic function boot()\n{\n    Blade::if('env', function (\\$environment) {\n        return app()-&gt;environment(\\$environment);\n    });\n}\n</code></pre>\n    \n    <p>Una vez que el condicional personalizado haya sido definido, podremos usarlo fácilmente en nuestros templates:</p>\n    \n    <pre style='background-color: #CFD8DC; color: #37474F;'><code>@env('local')\n    // The application is in the local environment...\n@elseenv('testing')\n    // The application is in the testing environment...\n@else\n    // The application is not in the local or testing environment...\n@endenv\n</code></pre>\n</div>"
      },
      {
        "titulo": "Configuracion Regional",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Configuración Regional</h1>\n<ul>\n    <li>\n        Introducción\n        <ul>\n            <li>Configurando la configuración regional</li>\n        </ul>\n    </li>\n    <li>\n        Definiendo cadenas de traducciones\n        <ul>\n            <li>Usando claves cortas</li>\n            <li>Usando cadenas de traducciones como claves</li>\n        </ul>\n    </li>\n    <li>\n        Retornando cadenas de traducciones\n        <ul>\n            <li>Reemplazando parametros en cadenas de traducciones</li>\n            <li>Pluralización</li>\n        </ul>\n    </li>\n    <li>Sobrescribiendo archivos del paquete de idioma</li>\n</ul>\n<h2>Introducción</h2>\n<p>Las características de configuración regional de Laravel proporcionan una forma conveniente de\n    retornar cadenas en varios idiomas, permitiéndote soportar fácilmente múltiples idiomas en tu\n    aplicación. Las cadenas de idiomas son almacenadas en archivos dentro del directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/lang</span>.\n    Dentro de este directorio debería haber un subdirectorio para cada idioma soportado por la\n    aplicación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/resources\n    /lang\n        /en\n            messages.php\n        /es\n            messages.php\n</code></pre>\n<p>Todos los archivos de idioma retornan un arreglo de cadenas con sus claves. Por ejemplo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nreturn [\n    'welcome' =&gt; 'Welcome to our application'\n];\n</code></pre>\n<h3># Configurando la configuración regional</h3>\n<p>El idioma por defecto para tu aplicación se almacena en el archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/app.php</span>.\n    Puedes modificar este valor en base a las necesidades de tu aplicación. También puedes cambiar\n    el idioma activo en tiempo de ejecución usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">setLocale</span> en el facade\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('welcome/{locale}', function (\\$locale) {\n    App::setLocale(\\$locale);\n    //\n});\n</code></pre>\n<p>Puedes configurar un \"idioma alternativo\", que será usado cuando el idioma activo no contiene una\n    determinada cadena de traducción. Al igual que el idioma por defecto, el idioma alternativo\n    también es configurado en el archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/app.php</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'fallback_locale' =&gt; 'en',\n</code></pre>\n<h4># Determinando la configuración regional actual</h4>\n<p>Puedes usar los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">getLocale</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">isLocale</span> en el facade\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App</span> para determinar la configuración regional actual o comprobar si la\n    configuración tiene un valor dado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$locale = App::getLocale();\nif (App::isLocale('en')) {\n    //\n}\n</code></pre>\n<h2>Definiendo cadenades de traducciones</h2>\n<h3># Usando claves cortas</h3>\n<p>Típicamente, las cadenas de traducciones son almacenadas en archivos dentro del directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/lang</span>.\n    Dentro de este directorio debería haber un directorio para cada idioma soportado por la\n    aplicación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/resources\n    /lang\n        /en\n            messages.php\n        /es\n            messages.php\n</code></pre>\n<p>Todos los archivos de idioma retornan un arreglo de cadenas con sus claves. Por ejemplo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\n// resources/lang/en/messages.php\nreturn [\n    'welcome' =&gt; 'Welcome to our application'\n];\n</code></pre>\n<h3># Usando cadenas de traducciones como claves</h3>\n<p>Para aplicaciones con grandes necesidades de traducción, definir cada cadena con una \"clave\n    corta\" puede volverse confuso rápidamente al hacer referencia a estas en tus vistas. Por este\n    motivo, Laravel también proporciona soporte para definir cadenas de traducciones usando la\n    traducción \"por defecto\" de la cadena como clave.</p>\n<p>Archivos de traducción que usan cadenas de traducción como claves son almacenados como archivos\n    JSON en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/lang</span>. Por ejemplo, si tu aplicación tiene una\n    traducción en español, debes crear un archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/lang/es.json</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>{\n    \"I love programming.\": \"Me encanta programar.\"\n}\n</code></pre>\n<h2>Retornando cadenas de traducciones</h2>\n<p>Puedes retornar líneas desde archivos de idioma usando la función helper <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">__</span>. La\n    función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">__</span> acepta el archivo y la clave de la cadena de traducción como primer\n    argumento. Por ejemplo, vamos a retornar la cadena de traducción de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">welcome</span> desde\n    el archivo de idioma <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/lang/messages.php</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>echo __('messages.welcome');\necho __('I love programming.');\n</code></pre>\n<p>\n    Si estás usando el\n    motor de plantillas Blade\n    , puedes usar la sintaxis <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">{{ }}</span> para imprimir la cadena de traducción o usar la\n    directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@lang</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>{{ __('messages.welcome') }}\n@lang('messages.welcome')\n</code></pre>\n<p>Si la cadena de traducción especificada no existe, la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">__</span> retornará la clave\n    de la cadena de traducción. Así que, usando el ejemplo superior, la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">__</span>\n    retornaría <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">messages.welcome</span> si la cadena de traducción no existe.</p>\n<p>Nota</p>\n<p>La directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@lang</span> no escapa ningún resultado. Eres <strong>totalmente\n    responsable</strong> de escapar la salida al usar esta directiva.</p>\n<h3># Reemplazando parametros en cadenas de traducciones</h3>\n<p>Si lo deseas, puedes definir placeholders en tus cadenas de traducción. Todos los placeholders\n    son precedidos por <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">:</span>. Por ejemplo, puedes definir un mensaje de bienvenida con un\n    nombre como placeholder:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'welcome' =&gt; 'Welcome, :name',\n</code></pre>\n<p>Para reemplazar los placeholders al retornar una cadena de traducción, pasa un arreglo de\n    reemplazos como segundo argumento de la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">__</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>echo __('messages.welcome', ['name' =&gt; 'dayle']);\n</code></pre>\n<p>Si tu placeholder contiene sólo letras mayúsculas o sólo tiene su primera letra en mayúscula, el\n    valor traducido será escrito en mayúsculas de forma correcta:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'welcome' =&gt; 'Welcome, :NAME', // Welcome, DAYLE\n'goodbye' =&gt; 'Goodbye, :Name', // Goodbye, Dayle\n</code></pre>\n<h3># Pluralización</h3>\n<p>La pluralización es un problema complejo, ya que diferentes idiomas tienen una variedad de reglas\n    complejas de pluralización. Usando el símbolo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">|</span>, puedes distinguir entre las formas\n    singulares y plurales de una cadena:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'apples' =&gt; 'There is one apple|There are many apples',\n</code></pre>\n<p>Puedes incluso crear reglas de pluralización más complejas que especifican cadenas de traducción\n    para múltiples rangos de números:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'apples' =&gt; '{0} There are none|[1,19] There are some|[20,*] There are many',\n</code></pre>\n<p>Luego de definir una cadena de traducción que tiene opciones de pluralización, puedes usar la\n    función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">trans_choice</span> para retornar la línea de un \"conteo\" dado. En este ejemplo,\n    dado que el conteo es mayor que uno, la forma plural de la cadena de traducción es retornada:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>echo trans_choice('messages.apples', 10);\n</code></pre>\n<p>También puedes definir atributos de placeholder en cadenas de pluralización. Estos placeholders\n    pueden ser reemplazados pasando un arreglo como tercer argumento a la función\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">trans_choice</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'minutes_ago' =&gt; '{1} :value minute ago|[2,*] :value minutes ago',\necho trans_choice('time.minutes_ago', 5, ['value' =&gt; 5]);\n</code></pre>\n<p>Si te gustaría mostrar el valor entero que fue pasado a la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">trans_choice</span>,\n    puedes también usar el placeholder <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">:count</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'apples' =&gt; '{0} There are none|{1} There is one|[2,*] There are :count',\n</code></pre>\n<h2>Sobrescribiendo archivos del paquete de idioma</h2>\n<p>Algunos paquetes pueden venir con sus propios archivos de idioma. En lugar de cambiar los\n    archivos principales del paquete para modificar esas líneas, puedes sobrescribirlas colocando\n    archivos en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/lang/vendor/{package}/{locale}</span>.</p>\n<p>Así que, por ejemplo, si necesitas sobrescribir las cadenas de traducción en inglés en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">messages.php</span>\n    para un paquete llamado <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">skyrim/hearthfire</span>, debes colocar un archivo de idioma en:\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/lang/vendor/hearthfire/en/messages.php</span>. Dentro de este archivo, debes\n    sólo definir las cadenas de traducción que deseas sobrescribir. Cualquier cadena de traducción\n    que no sobrescribas será cargada desde los archivos de idioma originales del paquete.</p>\n    </div>"
      },
      {
        "titulo": "JavaScript y Estructuración de CSS",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>JavaScript y Estructuración de CSS</h1>\n<ul>\n    <li>Introducción</li>\n    <li>Escribiendo CSS</li>\n    <li>\n        Escribiendo JavaScript\n        <ul>\n            <li>Escribiendo componentes de Vue</li>\n            <li>Usando React</li>\n        </ul>\n    </li>\n</ul>\n<h2>Introducción</h2>\n<p>\n    Mientras Laravel no dicta la pauta sobre que pre-procesadores de JavaScript o CSS usar, si\n    proporciona un punto de inicio básico usando\n    Bootstrap\n    y\n    Vue\n    que será de utilidad para muchas aplicaciones. De forma predeterminada, Laravel usa\n    NPM\n    para instalar ambos paquetes de frontend.\n</p>\n<h4># CSS</h4>\n<p>\n    Laravel Mix\n    proporciona una clara y expresiva API sobre compilación de Sass o Less, las cuales son\n    extensiones de CSS plano que agregan variables, mixins y otras poderosas características que\n    hacen el trabajo con CSS mucho más divertido. En este documento, discutiremos brevemente la\n    compilación CSS en general; sin embargo, deberías consultar la\n    documentación de Laravel Mix\n    completa para mayor información sobre compilación de Sass o Less.\n</p>\n<h4># JavaScript</h4>\n<p>\n    Laravel no requiere que uses un framework o biblioteca de JavaScript específica para construir\n    tus aplicaciones. De hecho, no tienes que usar JavaScript en lo absoluto. Sin embargo, Laravel\n    sí incluye algunas de las estructuras básicas para hacer más fácil los primeros pasos para\n    escribir JavaScript moderno usando el framework\n    Vue\n    . Vue proporciona una API expresiva para construir aplicaciones de JavaScript robustas usando\n    componentes. Como con CSS, podemos usar Laravel Mix para compilar fácilmente componentes de\n    JavaScript en un único archivo de JavaScript para los eventos del navegador.\n</p>\n<h4># Removiendo la estructura del frontend</h4>\n<p>Si prefieres remover la estructura del frontend de tu aplicación, puedes usar el comando Artisan\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">preset</span>. Este comando, cuando se combina con la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">none</span>, eliminará\n    la maquetación de Bootstrap y Vue de tu aplicación, dejando solamente un archivo Sass en blanco\n    y unas cuántas bibliotecas de utilidades de JavaScript comunes.</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan preset none\n</code></pre>\n<h2>Escribiendo CSS</h2>\n<p>El archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">package.json</span> de Laravel incluye el paquete <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">bootstrap</span> que te\n    ayuda a empezar a hacer un prototipo del frontend de tu aplicación usando Bootstrap. Sin\n    embargo, siéntete libre de agregar o eliminar los paquetes del archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">package.json</span>\n    como sea necesario para tu aplicación. No es obligatorio que uses el framework Bootstrap para\n    construir tu aplicación de Laravel - se proporciona un buen punto de inicio para aquellos que\n    elijan usarlo.</p>\n<p>\n    Antes de compilar tu CSS, instala las dependencias de frontend de tu proyecto usando el\n    gestor de paquetes para Node (NPM)\n    :\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>npm install\n</code></pre>\n<p>\n    Una vez que las dependencias hayan sido instaladas usando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">npm install</span>, puedes\n    compilar tus archivos Sass a CSS plano usando\n    Laravel Mix\n    . El comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">npm run dev</span> procesará las instrucciones en tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">webpack.mix.js</span>.\n    Típicamente, tu CSS compilado estará ubicado en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public/css</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>npm run dev\n</code></pre>\n<p>\n    El archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">webpack.mix.js</span> incluido de forma predeterminada con Laravel compilará el\n    archivo Sass <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/sass/app.scss</span>. Este archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app.scss</span> importa un\n    archivo de variables Sass y carga Bootstrap, el cual proporciona un buen punto de comienzo para\n    la mayoría de las aplicaciones. Siéntete libre de personalizar el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app.scss</span>\n    en la forma que desees o incluso usar un pre-procesador completamente diferente\n    configurando Laravel Mix\n    .\n</p>\n<h2>Escribiendo JavaScript</h2>\n<p>\n    Todas las dependencias de JavaScript requeridas por tu aplicación pueden ser encontradas en el\n    archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">package.json</span> en el directorio principal del proyecto. Este archivo es\n    similar a un archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">composer.json</span> excepto que éste específica las dependencias de\n    JavaScript en lugar de las dependencias de PHP. Puedes instalar estas dependencias usando el\n    gestor de paquetes de Node (NPM)\n    :\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>npm install\n</code></pre>\n<p>TIP</p>\n<p>De forma predeterminada, el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">package.json</span> de Laravel incluye unos cuantos\n    paquetes tales como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">vue</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">axios</span> para ayudarte a empezar a construir tu\n    aplicación de JavaScript. Siéntete libre de agregar o eliminar del archivo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">package.json</span> según sea necesario para tu aplicación.</p>\n<p>Una vez que los paquetes sean instalados, puedes usar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">npm run dev</span> para\n    compilar tus recursos. Webpack es un empaquetador de módulos para aplicaciones modernas en\n    JavaScript. Cuando ejecutes el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">npm run dev</span>, Webpack ejecutará las\n    instrucciones en tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">webpack.mix.js</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>npm run dev\n</code></pre>\n<p>De forma predeterminada, el archivo de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">webpack.mix.js</span> de Laravel compila tu archivo\n    Sass y él de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/js/app.js</span>. Dentro de el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app.js</span> puedes\n    registrar tus componentes de Vue o, si prefieres un framework distinto, configurar tu propia\n    aplicación de JavaScript. Tu JavaScript compilado será colocado típicamente en el directorio\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public/js</span>.</p>\n<p>TIP</p>\n<p>El archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app.js</span> cargará el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/js/bootstrap.js</span> el cual\n    estructura y configura Vue, Axios, jQuery, y todas las demás dependencias de javaScript. Si\n    tienes dependencias adicionales de JavaScript que configurar, puedes hacerlo en este archivo.\n</p>\n<h3># Escribiendo componentes de Vue</h3>\n<p>\n    De forma predeterminada, las aplicaciones nuevas de Laravel contienen un componente de Vue\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ExampleComponent.vue</span> ubicado en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/js/components</span>.\n    El archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ExampleComponent.vue</span> es un ejemplo de un\n    componente Vue de archivo único\n    el cual define su plantilla HTML y JavaScript en el mismo archivo. Los componentes de archivo\n    único proporcionan un enfoque muy conveniente para construir aplicaciones manejadas por\n    JavaScript. El componente de ejemplo es registrado en tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app.js</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Vue.component(\n    'example-component',\n    require('./components/ExampleComponent.vue')\n);\n</code></pre>\n<p>Para usar el componente en tu aplicación, puedes colocarlo en una de tus plantillas HTML. Por\n    ejemplo, después de ejecutar el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:auth</span> para maquetar las\n    pantallas de registro y autenticación de tu aplicación, podrías colocar el componente en la\n    plantilla de Blade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">home.blade.php</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>@extends('layouts.app')\n@section('content')\n    &lt;example-component&gt;&lt;/example-component&gt;\n@endsection\n</code></pre>\n<p>TIP</p>\n<p>Recuerda, deberías ejecutar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">npm run dev</span> cada vez que cambies un\n    componente de Vue. O, puedes ejecutar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">npm run watch</span> para monitorear y\n    recompilar automáticamente tus componentes cada vez que sean modificados.</p>\n<p>\n    Si estás interesado en aprender más sobre escribir componentes de Vue, deberías leer la\n    Documentación de Vue\n    , la cual proporciona un minucioso resumen fácil de leer del framework Vue.\n</p>\n<p>TIP</p>\n<p>\n    En\n    Styde.net\n    contamos con un\n    completo curso sobre Vue.js\n    que cubre todo los aspectos del framework.\n</p>\n<h3># Usando React</h3>\n<p>Si prefieres usar React para construir tu aplicación de JavaScript, Laravel hace que sea una\n    tarea fácil la de intercambiar la estructuración de Vue con la de React. En una aplicación nueva\n    de Laravel, puedes usar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">preset</span> con la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">react</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan preset react\n</code></pre>\n<p>Este único comando removerá la estructuración de Vue y la reemplazará con la de React, incluyendo\n    un componente de ejemplo.</p>\n    </div>"
      },
      {
        "titulo": "Compilación de Assets",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Compilación De Assets (Laravel Mix)</h1>\n<ul>\n    <li>Introducción</li>\n    <li>Instalación y configuración</li>\n    <li>Ejecutando Mix</li>\n    <li>\n        Trabajando con hojas de estilos\n        <ul>\n            <li>Less</li>\n            <li>Sass</li>\n            <li>Stylus</li>\n            <li>PostCSS</li>\n            <li>CSS plano</li>\n            <li>Procesamiento de URLs</li>\n            <li>Mapeo de fuente</li>\n        </ul>\n    </li>\n    <li>\n        Trabajando con JavaScript\n        <ul>\n            <li>Extracción de paquetes de terceros</li>\n            <li>React</li>\n            <li>Vanilla JS</li>\n            <li>Configuración de webpack personalizada</li>\n        </ul>\n    </li>\n    <li>Copiando archivos y yirectorios</li>\n    <li>Versionando / Destrucción de caché</li>\n    <li>Recarga de Browsersync</li>\n    <li>Variables de entorno</li>\n    <li>Notificaciones</li>\n</ul>\n<p></p>\n<h2>Introducción</h2>\n<p>\n    Laravel Mix\n    proporciona una API fluida para definir pasos de compilación de Webpack para tu aplicación de\n    Laravel usando múltiples preprocesadores de CSS y JavaScript. A través de encadenamiento de\n    cadenas simples, puedes definir fluidamente tus pipelines de assets. Por ejemplo:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.js('resources/js/app.js', 'public/js')\n    .sass('resources/sass/app.scss', 'public/css');\n</code></pre>\n<p>Si alguna vez has estado confundido o agobiado al comenzar con Webpack y la compilación de\n    assets, amarás Laravel Mix. Sin embargo, no estás obligado a usarlo durante el desarollo de tu\n    aplicación. Eres libre de usar cualquier pipeline de assets que desees o incluso ninguno.</p>\n<p></p>\n<h2>Instalación y configuración</h2>\n<h4># Instalando Node</h4>\n<p>Antes de ejecutar Mix, debes asegurar de que Node.js y NPM están instalados en tu máquina.</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>node -v\nnpm -v\n</code></pre>\n<p>\n    Por defecto, Laravel Homestead incluye todo lo que necesitas; sin embargo, si no estás usando\n    Vagrant, entonces puedes fácilmente instalar la última versión de Node y NPM usando instaladores\n    sencillos desde\n    su página de descargas\n    .\n</p>\n<h4># Laravel Mix</h4>\n<p>El único paso restante es instalar Laravel Mix. Dentro de una instalación nueva de Laravel,\n    encontrarás un archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">package.json</span> en la raíz de tu estructura de directorios. El\n    archivo por defecto <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">package.json</span> incluye todo lo que necesitas para comenzar.\n    Piensa en éste como tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">composer.json</span>, excepto que define dependencias de\n    Node en lugar de PHP. Puedes instalar las dependencias a las cuales haces referencia ejecutando:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>npm install\n</code></pre>\n<p></p>\n<h2>Ejecutando Mix</h2>\n<p>\n    Mix es una capa de configuración basado en\n    Webpack\n    , así que para ejecutar tus tareas de Mix sólo necesitas ejecutar uno de los scripts de NPM\n    incluídos en el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">package.json</span> por defecto de Laravel:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>// Run all Mix tasks...\nnpm run dev\n// Run all Mix tasks and minify output...\nnpm run production\n</code></pre>\n<h4># Observando cambios en los assets</h4>\n<p>El comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">npm run watch</span> continuará ejecutándose en tu terminal y observando todos\n    los archivos relevantes por cambios. Webpack entonces automáticamente recompilará tus assets\n    cuando detecte un cambio:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>npm run watch\n</code></pre>\n<p>Puedes encontrar que en algunos entornos Webpack no está actualizando los cambios en tus\n    archivos. Si éste es el caso en tu sistema, considera usar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">watch-poll</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>npm run watch-poll\n</code></pre>\n<p></p>\n<h2>Trabajando con hojas de estilos</h2>\n<p>El archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">webpack.mix.js</span> es el punto de entrada para toda la compilación de assets.\n    Piensa en éste como un wrapper de configuración liviano alrededor de Webpack. Las tareas de Mix\n    pueden ser encadenadas para definir exactamente cómo tus assets deben ser compilados.</p>\n<p></p>\n<h3># Less</h3>\n<p>\n    El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">less</span> puede ser usado para compilar\n    Less\n    a CSS. Vamos a compilar nuestro archivo primario <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app.less</span> a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public/css/app.css</span>.\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.less('resources/less/app.less', 'public/css');\n</code></pre>\n<p>Múltiples llamadas al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">less</span> pueden ser usadas para compilar múltiples\n    archivos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.less('resources/less/app.less', 'public/css')\n    .less('resources/less/admin.less', 'public/css');\n</code></pre>\n<p>Si deseas personalizar el nombre del archivo CSS compilado, puedes pasar una ruta de archivo\n    completa como segundo argumento al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">less</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.less('resources/less/app.less', 'public/stylesheets/styles.css');\n</code></pre>\n<p>\n    Si necesitas sobrescribir\n    opciones subyacentes de Less\n    , puedes pasar un objeto como tercer argumento a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mix.less()</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.less('resources/less/app.less', 'public/css', {\n    strictMath: true\n});\n</code></pre>\n<p></p>\n<h3># Sass</h3>\n<p>\n    El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sass</span> te permite compilar\n    Sass\n    a CSS. Puedes usar el método de la siguiente manera:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.sass('resources/sass/app.scss', 'public/css');\n</code></pre>\n<p>De nuevo, como el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">less</span>, puedes compilar múltiples archivos de CSS a sus\n    archivos de CSS respectivos e incluso personalizar el directorio de salida del CSS resultante:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.sass('resources/sass/app.sass', 'public/css')\n    .sass('resources/sass/admin.sass', 'public/css/admin');\n</code></pre>\n<p>\n    Opciones de Node-Sass\n    pueden ser proporcionadas como tercer argumento:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.sass('resources/sass/app.sass', 'public/css', {\n    precision: 5\n});\n</code></pre>\n<p></p>\n<h3># Stylus</h3>\n<p>\n    Similar a Less y Sass, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">stylus</span> te permite compilar\n    Stylus\n    a CSS:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.stylus('resources/stylus/app.styl', 'public/css');\n</code></pre>\n<p>\n    También puedes instalar plugins de Stylus adicionales, como\n    Rupture\n    . Primero, instala el plugin en cuestión mediante NPM (<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">npm install rupture</span>) y luego\n    requiérelo en tu llamada a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mix.stylus()</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.stylus('resources/stylus/app.styl', 'public/css', {\n    use: [\n        require('rupture')()\n    ]\n});\n</code></pre>\n<p></p>\n<h3># PostCSS</h3>\n<p>\n    PostCSS\n    , una herramienta poderosa para transformar tu CSS, es incluido con Laravel Mix. Por defecto,\n    Mix toma ventaja del popular plugin\n    Autoprefixer\n    para automáticamente aplicar todos los prefijos necesarios de CSS3. Sin embargo, eres libre de\n    agregar plugins adicionales que sean apropiados para tu aplicación. Primero, instala el plugin\n    deseado a través de NPM y luego haz referencia a éste en tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">webpack.mix.js</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.sass('resources/sass/app.scss', 'public/css')\n    .options({\n        postCss: [\n            require('postcss-css-variables')()\n        ]\n    });\n</code></pre>\n<p></p>\n<h3># CSS plano</h3>\n<p>Si simplemente te gustaría concatenar algunas hojas de CSs plano a un sólo archivo, puedes usar\n    el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">styles</span>.</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.styles([\n    'public/css/vendor/normalize.css',\n    'public/css/vendor/videojs.css'\n], 'public/css/all.css');\n</code></pre>\n<p></p>\n<h3># Procesamiento de URLs</h3>\n<p>Debido a que Laravel Mix está construído en base a Webpack, es importante entender algunos\n    conceptos de Webpack. Para compilación de CSS, Webpack reescribirá y optimizará cualquier\n    llamada a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url()</span> dentro de tus hojas de estilos. Aunque esto inicialmente puede\n    sonar extraño, es una pieza increiblemente poderosa de funcionalidad. Imagina que queremos\n    compilar Sass que incluye una URL relativa a una imagen:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>.example {\n    background: url('../images/example.png');\n}\n</code></pre>\n<p>::: note\n    Las rutas absolutas para cualquier <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url()</span> serán excluidas de la reescritura de URLs.\n    Por ejemplo, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url('/images/thing.png')</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url('http://example.com/images/thing.png')</span>\n    no serán modificados.\n</p>\n<p>Por defecto, Laravel Mix y Webpack encontrarán <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">example.png</span>, lo copiaran a tu\n    directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public/images</span> y luego reescribirán el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url()</span> dentro de tu\n    hoja de estilos generada. Como tal, tu archivo CSS compilado será:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>.example {\n    background: url(/images/example.png?d41d8cd98f00b204e9800998ecf8427e);\n}\n</code></pre>\n<p>Tan útil como esta característica puede ser, es posible que tu estructura de directorios\n    existente ya está configurada en una forma que quieres. Si este es el caso, puedes deshabilitar\n    la reescritura de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url()</span> de la siguiente forma:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.sass('resources/app/app.scss', 'public/css')\n    .options({\n        processCssUrls: false\n    });\n</code></pre>\n<p>Con esta adición a tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">webpack.mix.js</span>, Mix ya no igualará cualquier <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url()</span>\n    o asset copiado a tu directorio público. En otras palabras, el CSS compilado se verá igual a\n    como originalmente lo escribiste:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>.example {\n    background: url(\"../images/thing.png\");\n}\n</code></pre>\n<p></p>\n<h3># Mapeo de fuente</h3>\n<p>Aunque deshabilitado por defecto, el mapeo de fuentes puede ser activado llamando al método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mix.sourceMaps()</span> en tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">webpack.mix.js</span>. Aunque viene con un\n    costo de compilación/rendimiento, esto proporcionará información adicional de depuración a las\n    herramientas de desarrollo de tu navegador al usar assets compilados.</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.js('resources/js/app.js', 'public/js')\n    .sourceMaps();\n</code></pre>\n<p></p>\n<h2>Trabajando con JavaScript</h2>\n<p>Mix proporciona múltiples características para ayudarte a trabajar con archivos de JavaScript,\n    como compilar ECMAScript 2015, agrupación de módulos, minificación y concatenar archivos de\n    JavaScript planos. Aún mejor, todos esto funciona fácilmente, sin requirir ningún tipo de\n    configuración personalizada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.js('resources/js/app.js', 'public/js');\n</code></pre>\n<p>Con esta única línea de código, puedes ahora tomar ventaja de:</p>\n<ul>\n    <li>Sintaxis de ES2015.</li>\n    <li>Modulos</li>\n    <li>Compilación de archivos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.vue</span>.</li>\n    <li>Minifación para entornos de producción.</li>\n</ul>\n<p></p>\n<h3># Extracción de paquetes de terceros</h3>\n<p>Un potencial aspecto negativo de agrupar todo el JavaScript específico de la aplicación con tus\n    paquetes de terceros es que hace que el almacenamiento en caché a largo plazo sea más difícil.\n    Por ejemplo, una sóla actualización al código de tu aplicación forazará el navegador a recargar\n    todas tus paquetes de terceros incluso si no han cambiado.</p>\n<p>Si pretendes hacer actualizaciones frecuentes del JavaScript de tu aplicación, deberías\n    considerar extraer todos tus paquetes de terceros a su propio archivo. De esta forma, un cambio\n    en el código de tu aplicación no afectará el almacenamiento en caché de tu archivo grande <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">vendor.js</span>.\n    El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">extract</span> de Mix hace que esto sea muy fácil:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.js('resources/js/app.js', 'public/js')\n    .extract(['vue'])\n</code></pre>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">extract</span> acepta un arreglo de todas los paquetes o módulos que deseas\n    extraer a un archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">vendor.js</span>. Usando el código de arriba como ejemplo, Mix\n    generará los siguientes archivos:</p>\n<ul>\n    <li><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public/js/manifest.js</span>: <em>The Webpack manifest runtime</em></li>\n    <li><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public/js/vendor.js</span>: <em>Your vendor libraries</em></li>\n    <li><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public/js/app.js</span>: <em>Your application span</em></li>\n</ul>\n<p>Para evitar errores de JavaScript, asegurate de cargar estos archivos en el orden adecuado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;script src=\"/js/manifest.js\"&gt;&lt;/script&gt;\n&lt;script src=\"/js/vendor.js\"&gt;&lt;/script&gt;\n&lt;script src=\"/js/app.js\"&gt;&lt;/script&gt;\n</code></pre>\n<p></p>\n<h3># React</h3>\n<p>Mix puede automáticamente instalar los plugins de Babel necesarios para el soporte de React. Para\n    comenzar, reemplaza tu llamado a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mix.js()</span> por <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mix.react()</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.react('resources/js/app.jsx', 'public/js');\n</code></pre>\n<p>En segundo plano, Mix descargará e incluirá el plugin de Babel <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">babel-preset-react</span>\n    apropiado.</p>\n<p></p>\n<h3># Vanilla JS</h3>\n<p>Similar a combinar hojas de estilos con <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mix.styles()</span>, puedes también combinar y\n    minificar cualquier número de archivos JavaScript con el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">scripts()</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.scripts([\n    'public/js/admin.js',\n    'public/js/dashboard.js'\n], 'public/js/all.js');\n</code></pre>\n<p>Esta opción es particularmente útil para proyectos antiguos donde no necesitas compilación de\n    Webpack para tu JavaScript.</p>\n<p>TIP</p>\n<p>Una ligera variación de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mix.scripts()</span> es <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mix.babel()</span>. Su firma de\n    método es identica a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">scripts</span>; sin embargo, el archivo concatenado recibirá\n    compilación de Babel, que traduce cualquier código ES2015 a JavaScript plano que todos los\n    navegadores entenderán.</p>\n<p></p>\n<h3># Configuración personalizada de webpack</h3>\n<p>Detrás de cámaras, Laravel Mix hace referencia a un archivo preconfigurado <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">webpack.config.js</span>\n    para ayudarte a comenzar tan rápido como sea posible. Ocasionalmente, puedes necesitar modificar\n    este archivo de forma manual. Podrías tener un loader o plugin especial al que necesitas hacer\n    referencia o quizás prefieres usar Stylus en lugar de Sass. En esos casos, tienes dos opciones:\n</p>\n<h4># Fusionar configuración personalizada</h4>\n<p>\n    Mix proporciona un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">webpackConfig</span> útil que te permite fusionar cualquier\n    configuración pequeña de Webpack. Esta es una opción particularmente atractiva, ya que no\n    requiere que copies y mantengas tu propia copia del archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">webpack.config.js</span>. El\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">webpackConfig</span> acepta un objeto, que debe contener cualquier\n    configuración especifíca de Webpack\n    que deseas aplicar.\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.webpackConfig({\n    resolve: {\n        modules: [\n            path.resolve(__dirname, 'vendor/laravel/spark/resources/js')\n        ]\n    }\n});\n</code></pre>\n<h4># Archivos de configuración personalizados</h4>\n<p>Si te gustaría personalizar completamente tu configuración de Webpack, copia el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">node_modules/laravel-mix/setup/webpack.config.js</span>\n    al directorio principal de tu proyecto. Luego, apunta todas las referencias a\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--config</span> en tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">package.json</span> al nuevo archivo de configuración\n    copiado. Si deseas elegir esta forma de personalización, cualquier actualización futura al\n    archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">webpack.config.js</span> debe ser manualmente agregada a tu archivo personalizado.\n</p>\n<p></p>\n<h2>Copiando Archivos &amp; Directorios</h2>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">copy</span> puede ser usado para copiar archivos y directorios a nuevas\n    ubicaciones. Esto puede ser útil cuando un asset en particular dentro de tu directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">node_modules</span>\n    necesita ser reubicado a tu directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public</span>.</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.copy('node_modules/foo/bar.css', 'public/css/bar.css');\n</code></pre>\n<p>Al copiar un directorio, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">copy</span> aplanará la estructura del directorio. Para\n    mantener la estructura original del directorio, debes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">copyDirectory</span>\n    en su lugar:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.copyDirectory('resources/img', 'public/img');\n</code></pre>\n<p></p>\n<h2>Versionando / Destrucción de caché</h2>\n<p>Muchos desarrolladores prefijan sus assets compilados con una marca de tiempo o token único para\n    forzar a los navegadores a cargar los assets nuevos en lugar de servir copias antiguas del\n    código. Mix puede hacer esto por ti usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">version</span>.</p>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">version</span> automáticamente agregar un hash único a los nombres de archivos de\n    todos los archivos compilados, permitiendo una destrucción de caché más conveniente:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.js('resources/js/app.js', 'public/js')\n    .version();\n</code></pre>\n<p>Luego de generar el archivo versionado, no sabrás el nombre exacto del archivo. Así que, debes\n    usar la función global de Laravel <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mix</span> dentro de tus vistas para cargar los assets\n    apropiados. La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mix</span> determinará automáticamente el nombre actual del\n    archivo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;link rel=\"stylesheet\" href=\"{{ mix('/css/app.css') }}\"&gt;\n</code></pre>\n<p>Dado que los archivos versionados son usualmente necesarios durante el desarrollo, puedes\n    instruir al proceso de versionamiento para que sólo se ejecute durante\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">npm run production</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.js('resources/js/app.js', 'public/js');\nif (mix.inProduction()) {\n    mix.version();\n}\n</code></pre>\n<p></p>\n<h2>Recarga con Browsersync</h2>\n<p>\n    BrowserSync\n    puede monitorear automáticamente los cambios en tus archivos e inyectar tus cambios al navegador\n    sin requerir un refrescamiento manual. Puedes activar el soporte llamando al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mix.browserSync()</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.browserSync('my-domain.test');\n// Or...\n// https://browsersync.io/docs/options\nmix.browserSync({\n    proxy: 'my-domain.test'\n});\n</code></pre>\n<p>Puedes pasar una cadena (proxy) u objeto (configuraciones de BrowserSync) a este método. Luego,\n    inicia el servidor de desarrollo de Webpack usando el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">npm run watch</span>. Ahora,\n    cuando modifiques un script o archivo de PHP, observa mientras el navegador instantaneamente\n    recarga la página para reflejar tus cambios.</p>\n<p></p>\n<h2>Variables de entorno</h2>\n<p>Puedes inyectar variables de entorno a Mix prefijando una clave en tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span>\n    con <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">MIX_</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>MIX_SENTRY_DSN_PUBLIC=http://example.com\n</code></pre>\n<p>Luego de que la variable ha sido definida en tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span>, puedes acceder\n    mediante el objeto <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">process.env</span>. Si el valor cambia mientras estás ejecutando una\n    tarea <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">watch</span>, necesitarás reiniciar la tarea:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>process.env.MIX_SENTRY_DSN_PUBLIC\n</code></pre>\n<p></p>\n<h2>Notificaciones</h2>\n<p>Cuando esté disponible, Mix automáticamente mostrará notificaciones del sistema operativo para\n    cada paquete. Esto te dará feedback instantáneo, sobre si la compilación ha sido exitosa o no.\n    Sin embargo, pueden haber casos en los que preferirás deshabilitar estas notificaciones. Uno de\n    esos casos puede ser ejecutar Mix en tu servidor de producción. Las notificaciones pueden ser\n    deshabilitadas mediante el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">disableNotifications</span>.</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>mix.disableNotifications();\n</code></pre>\n</div>"
      }
    ]
  },
  {
    "titulo": "5.- Seguridad",
    "subtitulo": "",
    "items": [
      {
        "titulo": "Autenticación",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Autenticación</h1>\n<ul>\n    <li>\n        Introducción\n        <ul>\n            <li>Consideraciones de la base de datos</li>\n        </ul>\n    </li>\n    <li>\n        Inicio rápido de dutenticación\n        <ul>\n            <li>Enrutamiento</li>\n            <li>Vistas</li>\n            <li>Autenticando</li>\n            <li>Retornando el usuario autenticado</li>\n            <li>Proteger Rutas</li>\n            <li>Regulación De Inicio De Sesión</li>\n        </ul>\n    </li>\n    <li>\n        Autenticar usuarios manualmente\n        <ul>\n            <li>Recordar usuarios</li>\n            <li>Otros métodos de autenticación</li>\n        </ul>\n    </li>\n    <li>\n        Autenticación HTTP básica\n        <ul>\n            <li>Autenticación HTTP básica sin estado</li>\n        </ul>\n    </li>\n    <li>\n        Cerrar sesión\n        <ul>\n            <li>Invalidar sesiones en otros dispositivos</li>\n        </ul>\n    </li>\n    <li>\n        Autenticar con redes sociales\n    </li>\n    <li>\n        Agregar guards personalizados\n        <ul>\n            <li>Guards de closures de peticiones</li>\n        </ul>\n    </li>\n    <li>\n        Agregar proveedores de usuarios personalizados\n        <ul>\n            <li>La interfaz UserProvider</li>\n            <li>La interfaz Authenticatable</li>\n        </ul>\n    </li>\n    <li>Eventos</li>\n</ul>\n<h2>Introducción</h2>\n<p>TIP</p>\n<p><strong>¿Quieres comenzar rápido?</strong> Instala el paquete de Composer <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">laravel/ui</span>\n    y ejecuta <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">php artisan ui vue --auth</span> en una nueva aplicación de Laravel. Luego,\n    dirígete en tu navegador a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">http://tu-app.test/register</span> o cualquier otra URL\n    asignada a tu aplicación. ¡Estos dos comandos se encargarán de generar todo el sistema de\n    autenticación!</p>\n<p>Laravel hace la implementación de la autenticación algo muy sencillo. De hecho, casi todo se\n    configura para ti por defecto. El archivo de configuración de la autenticación está localizado\n    en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/auth.php</span>, el cual contiene varias opciones bien documentadas para ajustar\n    el comportamiento de los servicios de autenticación.</p>\n<p>En esencia, las características de la autenticación de Laravel están compuestas de \"guards\"\n    (guardias) y \"providers\" (proveedores). Los Guards definen cómo los usuarios son autenticados\n    para cada petición. Por ejemplo, Laravel contiene un guard <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">session</span> el cual mantiene\n    el estado utilizando el almacenamiento de sesión y las cookies.</p>\n<p>Los proveedores definen cómo se retornan los usuarios de tu almacenamiento persistente. Laravel\n    cuenta con soporte para recuperar los usuarios utilizando Eloquent y el constructor de consultas\n    de la base de datos. Sin embargo, eres libre de definir los proveedores adicionales que requiera\n    tu aplicación.</p>\n<p>¡No te preocupes si esto suena confuso por el momento! Muchas aplicaciones nunca necesitarán\n    modificar la configuración predeterminada de la autenticación.</p>\n<h3># Consideraciones de la base de datos</h3>\n<p>De manera predeterminada, Laravel incluye un Modelo de Eloquent <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\User</span> en tu\n    directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app</span>. Este modelo puede ser utilizado por el controlador de autenticación\n    predeterminado de Eloquent. Si tu aplicación no utiliza Eloquent, deberás utilizar el\n    controlador de autenticación <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database</span> el cual utiliza el constructor de consultas\n    (query builder) de Laravel.</p>\n<p>Al crear el esquema de la base de datos para el modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\User</span>, asegúrate de que la\n    columna password sea de al menos 60 caracteres de longitud. Mantener una longitud de columna de\n    cadena predeterminada a 255 caracteres sería una buena opción.</p>\n<p>Además, debes verificar que tu tabla <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">users</span> (o equivalente) contenga un campo nulo de\n    tipo cadena llamado <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">remember_token</span> de 100 caracteres. Esta columna se usará para\n    almacenar un token para los usuarios que seleccionen la opción \"remember me\" (recuérdame) cuando\n    inicien sesión en tu aplicación.</p>\n<h2>Inicio rápido de autenticación</h2>\n<p>Laravel viene con varios controladores de autenticación preconstruidos, los cuales están\n    localizados en el nombre de espacio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Http\\Controllers\\Auth</span>. <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RegisterController</span>\n    maneja el registro de usuarios nuevos, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">LoginController</span> maneja la autenticación,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ForgotPasswordController</span> maneja el envío de correos electrónicos para restablecer\n    la contraseña y el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ResetPasswordController</span> contiene la lógica para reiniciar\n    contraseñas. Cada uno de estos controladores utiliza un trait para incluir los métodos\n    necesarios. En la mayoría de los casos no tendrás que modificar estos controladores en lo\n    absoluto.</p>\n<h3># Enrutamiento</h3>\n<p>El paquete de Laravel <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">laravel/ui</span> proporciona una manera rápida de generar todas las\n    rutas y vistas que necesitas para la autenticación con unos simples comando:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>composer require laravel/ui\nphp artisan ui vue --auth\n</code></pre>\n<p>Este comando debe ser utilizado en aplicaciones nuevas e instalará vistas de diseño, registro e\n    inicio de sesión, así como todas las rutas necesarias para la autenticación. También será\n    generado un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">HomeController</span> que se encargará de manejar las peticiones posteriores\n    al login, como mostrar el dashboard de la aplicación.</p>\n<p>TIP</p>\n<p>Si tu aplicación no necesita registro, puedes desactivarlo eliminando el recién creado <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RegisterController</span>\n    y modificando tu declaración de ruta: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Auth::routes(['register' =&gt; false]);</span>.</p>\n<h3># Vistas</h3>\n<p>Como se mencionó en la sección anterior, el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">php artisan ui vue --auth</span> del\n    paquete <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">laravel/ui</span> creará todas las vistas que se necesiten para la autenticación y\n    las colocará en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views/auth</span>.</p>\n<p>El comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ui</span> también creará el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views/layouts</span>, el\n    cual contendrá la plantilla base para tu aplicación. Todas estas vistas usan el framework de CSS\n    Bootstrap, pero eres libre de modificarlo en base a tus preferencias.</p>\n<h3># Autenticación</h3>\n<p>Ahora que ya tienes tus rutas y vistas configuradas para los controladores de autenticación\n    incluidos con el framework, ¡estás listo para registrar y autenticar usuarios nuevos para tu\n    aplicación! Puedes acceder a tu aplicación en el navegador ya que los controladores de\n    autenticación contienen la lógica (a través de traits) para autenticar usuarios existentes y\n    almacenar usuarios nuevos en la base de datos.</p>\n<h4># Personalizar rutas</h4>\n<p>Cuando un usuario se ha autenticado exitosamente, será redirigido a la URI <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">/home</span>.\n    Puedes personalizar la ubicación de redireccionamiento post-autenticación definiendo una\n    propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redirectTo</span> en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">LoginController</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RegisterController</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ResetPasswordController</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">VerificationController</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>protected \\$redirectTo = '/';\n</code></pre>\n<p>Luego, debes modificar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">handle</span> del middleware\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RedirectIfAuthenticated</span> para usar tu nueva URI al redirigir al usuario.</p>\n<p>Si la ruta de redireccionamiento necesita generar lógica personalizada puedes definir un método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redirectTo</span> en lugar de una propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redirectTo</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>protected function redirectTo()\n{\n    return '/path';\n}\n</code></pre>\n<p>TIP</p>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redirectTo</span> toma precedencia sobre la propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redirectTo</span>.\n</p>\n<h4># Personalizar usuario</h4>\n<p>Por defecto, Laravel utiliza el campo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">email</span> para la autenticación. Si deseas\n    modificar esto, puedes definir un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">username</span> en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">LoginController</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>public function username()\n{\n    return 'username';\n}\n</code></pre>\n<h4># Personalizar guard</h4>\n<p>También puedes personalizar el \"guard\" que es utilizado para autenticar y registrar usuarios.\n    Para empezar, define un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">guard</span> en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">LoginController</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RegisterController</span>\n    y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ResetPasswordController</span>. Este método debe devolver una instancia de guard:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Auth;\nprotected function guard()\n{\n    return Auth::guard('guard-name');\n}\n</code></pre>\n<h4># Validación / Personalizar almacenamiento</h4>\n<p>Para modificar los campos del formulario que son requeridos cuando se registren usuarios nuevos\n    en tu aplicación, o para personalizar cómo los nuevos usuarios son almacenados en tu base de\n    datos, puedes modificar la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RegisterController</span>. Esta clase es responsable de\n    validar y crear usuarios nuevos en tu aplicación.</p>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">validator</span> de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RegisterController</span> contiene las reglas de\n    validación para los usuarios nuevos de tu aplicación. Eres libre de modificar este método según\n    te convenga.</p>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span> de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RegisterController</span> es responsable de crear\n    registros nuevos de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\User</span> en tu base de datos usando el ORM Eloquent. Eres libre\n    de modificar este método de acuerdo a las necesidades de tu base de datos.</p>\n<h3># Retornando el usuario autenticado</h3>\n<p>Puedes acceder al usuario autenticado por medio del facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Auth</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Auth;\n// Get the currently authenticated user...\n\\$user = Auth::user();\n// Get the currently authenticated user's ID...\n\\$id = Auth::id();\n</code></pre>\n<p>Alternativamente, una vez que el usuario haya sido autenticado, puedes aceder al usuario\n    autenticado mediante una instancia de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Http\\Request</span>. Recuerda que las\n    clases a las cuales se le declaren el tipo serán inyectadas automáticamente en los métodos de tu\n    controlador:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Http\\Request;\nclass ProfileController extends Controller\n{\n    /**\n        * Update the user's profile.\n        *\n        * @param  Request  \\$request\n        * @return Response\n        */\n    public function update(Request \\$request)\n    {\n        // \\$request-&gt;user() returns an instance of the authenticated user...\n    }\n}\n</code></pre>\n<h4># Determinar si el usuario actual está autenticado</h4>\n<p>Para determinar si el usuario actual está loggeado en tu aplicación, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">check</span>\n    del facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Auth</span>, el cual devolverá <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span> si el usuario está\n    autenticado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Auth;\nif (Auth::check()) {\n    // The user is logged in...\n}\n</code></pre>\n<p>TIP</p>\n<p>Aún cuando es posible determinar si un usuario está autenticado utilizando el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">check</span>, típicamente deberás usar un middleware para verificar que el usuario está\n    autenticado antes de permitir al usuario acceder a ciertas rutas / controladores. Para aprender\n    más acerca de esto, echa un vistazo a la documentación para proteger rutas.</p>\n<h3># Proteger rutas</h3>\n<p>Puedes utilizar middleware de rutas para permitir acceder a ciertas rutas a los usuarios\n    autenticados. Laravel incluye un middleware <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">auth</span>, el cual está definido en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Auth\\Middleware\\Authenticate</span>.\n    Ya que este middleware está registrado en tu kernel HTTP, todo lo que necesitas hacer es\n    adjuntar el middleware a la definición de la ruta:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('profile', function () {\n    // Only authenticated users may enter...\n})-&gt;middleware('auth');\n</code></pre>\n<p>Si estás utilizando controladores, puedes hacer una llamada al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">middleware</span>\n    desde el constructor de tu controlador en lugar de adjuntarlo a la definición de la ruta:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>public function __construct()\n{\n    \\$this-&gt;middleware('auth');\n}\n</code></pre>\n<h4># Redireccionar usuarios no autenticados</h4>\n<p>Cuando el middleware <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">auth</span> detecta un usuario no autorizado, redirigirá al usuario a\n    la ruta nombrada <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">login</span>. Puedes modificar este comportamiento actualizando la\n    función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redirectTo</span> en tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Http/Middleware/Authenticate.php</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the path the user should be redirected to.\n*\n* @param  \\Illuminate\\Http\\Request  \\$request\n* @return string\n*/\nprotected function redirectTo(\\$request)\n{\n    return route('login');\n}\n</code></pre>\n<h4># Especificar un guard</h4>\n<p>Cuando adjuntes el middleware <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">auth</span> a una ruta, también puedes especificar cuál guard\n    deberá ser utilizado para autenticar al usuario. El guard especificado deberá corresponder a una\n    de las llaves en el arreglo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">guards</span> del archivo de configuración\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">auth.php</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>public function __construct()\n{\n    \\$this-&gt;middleware('auth:api');\n}\n</code></pre>\n<h3># Regulación De Inicio De Sesión</h3>\n<p>Si estás utilizando la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">LoginController</span> incorporada en Laravel, el trait <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Foundation\\Auth\\ThrottlesLogins</span>\n    se encontrará incluído en tu controlador. De manera predeterminada, el usuario no será capaz de\n    iniciar sesión durante un minuto si falla al proveer las credenciales correctas después de\n    varios intentos. El regulador (o throttle) es único para el nombre de usuario / dirección de\n    correo electrónico del usuario y su dirección IP.</p>\n<h2>Autenticar usuarios manualmente</h2>\n<p>Nota que no estás obligado a utilizar los controladores de autenticación incluidos en Laravel. Si\n    deseas eliminar estos controladores, tendrás que encargarte de administrar la autenticación de\n    usuarios utilizando las clases de autenticación de Laravel directamente. No te preocupes, ¡es\n    algo sencillo!.</p>\n<p>Vamos a acceder a los servicios de autenticación de Laravel por medio del facade, así que hay que\n    asegurarnos de importar el facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Auth</span> al inicio de la clase. Después, veamos el\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">attempt</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nclass LoginController extends Controller\n{\n    /**\n    * Handle an authentication attempt.\n    *\n    * @param  \\Illuminate\\Http\\Request \\$request\n    *\n    * @return Response\n    */\n    public function authenticate(Request \\$request)\n    {\n        \\$credentials = \\$request-&gt;only('email', 'password');\n        if (Auth::attempt(\\$credentials)) {\n            // Authentication passed...\n            return redirect()-&gt;intended('dashboard');\n        }\n    }\n}\n</code></pre>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">attempt</span> acepta un arreglo de pares llave / valor como primer argumento.\n    Los valores en el arreglo serán utilizados para encontrar el usuario en la tabla de tu base de\n    datos. Así que, en el ejemplo anterior, el usuario se obtiene por el valor de la columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">email</span>.\n    Si se encuentra el usuario, la contraseña encriptada obtenida de la base de datos será comparada\n    con el valor <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">password</span> pasado al método en el arreglo. No debes encriptar la\n    contraseña especificada para el valor <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">password</span>, ya que el framework automáticamente\n    va a encriptarlo antes de compararlo con la contraseña almacenada en la base de datos. Si dos\n    contraseñas encriptadas coinciden, se iniciará una sesión autenticada para el usuario.</p>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">attempt</span> va a devolver <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span> si la autenticación fue exitosa.\n    De otra forma, devolverá <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>.</p>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">intended</span> del redireccionador va a redirigir al usuario a la URL que\n    intentaba acceder antes de ser interceptado por el middleware de autenticación. Una URI de\n    fallback puede ser proporcionada al método en caso de que el destino solicitado no esté\n    disponible.</p>\n<h4># Especificar condiciones adicionales</h4>\n<p>Si lo deseas, puedes agregar condiciones extras a la consulta de autenticación además del correo\n    electrónico del usuario y su contraseña. Por ejemplo, podemos verificar que un usuario esté\n    marcado como \"active\":</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>if (Auth::attempt(['email' =&gt; \\$email, 'password' =&gt; \\$password, 'active' =&gt; 1])) {\n    // The user is active, not suspended, and exists.\n}\n</code></pre>\n<p>Nota</p>\n<p>En estos ejemplos, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">email</span> no es una opción requerida, solamente es utilizado como\n    ejemplo. Debes utilizar cualquier columna que corresponda a \"username\" en tu base de datos.</p>\n<h4># Acceso a instancias específicas de guard</h4>\n<p>Puedes especificar qué instancia de guard deseas usar utilizando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">guard</span> en\n    el facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Auth</span>. Esto te permitirá administrar la autentincación para partes\n    separadas de tu aplicación utilizando modelos autenticables o tablas de usuarios independientes.\n</p>\n<p>El nombre del guard pasado al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">guard</span> deberá corresponder a uno de los guards\n    configurados en tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">auth.php</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>if (Auth::guard('admin')-&gt;attempt(\\$credentials)) {\n    //\n}\n</code></pre>\n<h4># Cerrar sesión</h4>\n<p>Para desconectar usuarios de tu aplicación, debes utilizar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">logout</span> del\n    facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Auth</span>. Esto va a borrar la información de autenticación en la sesión del\n    usuario:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Auth::logout();\n</code></pre>\n<h3># Recordar usuarios</h3>\n<p>Si desea proporcionar la funcionalidad de \"recordarme\" en tu aplicación, puedes pasar un valor\n    booleano como segundo argumento al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">attempt</span>, que mantendrá al usuario\n    autenticado indefinidamente, o hasta que cierre su sesión manualmente. Tu tabla\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">users</span> deberá incluir una columna de tipo string llamada <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">remember_token</span>,\n    que será utilizada para almacenar el token de \"recordarme\".</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>if (Auth::attempt(['email' =&gt; \\$email, 'password' =&gt; \\$password], \\$remember)) {\n    // The user is being remembered...\n}\n</code></pre>\n<p>TIP</p>\n<p>Si estás utilizando el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">LoginController</span> integrado en tu instalación de Laravel, la\n    lógica apropiada para \"recordar\" usuarios ya se encontrará implementada por los traits\n    utilizados por el controlador.</p>\n<p>Si estás \"recordando\" usuarios, puedes utilizar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">viaRemember</span> para\n    determinar si el usuario se ha autenticado utilizando la cookie \"recordarme\":</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>if (Auth::viaRemember()) {\n    //\n}\n</code></pre>\n<h3># Otros métodos de autenticación</h3>\n<h4># Autenticar una instancia de usuario</h4>\n<p>Si necesitas registrar una instancia de usuario existente en tu aplicación, puedes llamar al\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">login</span> con la instancia de usuario. El objeto proporcionado deberá ser una\n    implementación de la interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Contracts\\Auth\\Authenticatable</span>. El modelo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\User</span> incluido en Laravel ya implementa esta interfaz:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Auth::login(\\$user);\n// Login and \"remember\" the given user...\nAuth::login(\\$user, true);\n</code></pre>\n<p>Puedes especificar la instancia de guard que desees utilizar:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Auth::guard('admin')-&gt;login(\\$user);\n</code></pre>\n<h4># Autenticar un usuario por ID</h4>\n<p>Para autenticar un usuario en tu aplicación por su ID, debes usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">loginUsingId</span>. Este método acepta la clave primaria del usuario que deseas\n    autenticar:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Auth::loginUsingId(1);\n// Login and \"remember\" the given user...\nAuth::loginUsingId(1, true);\n</code></pre>\n<h4># Autenticar un usuario una vez</h4>\n<p>Puedes utilizar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">once</span> para autenticar un usuario en tu aplicación para una\n    única solicitud. No se utilizarán sesiones o cookies, lo que significa que este método puede ser\n    bastante útil al construir una API sin estado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>if (Auth::once(\\$credentials)) {\n    //\n}\n</code></pre>\n<h2>Autenticación HTTP básica</h2>\n<p>\n    La\n    autenticación HTTP básica\n    proporciona una manera rápida de autenticar usuarios en tu aplicación sin configurar una página\n    de \"login\" dedicada. Para iniciar, adjunta el middleware <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">auth.basic</span> a tu ruta. El\n    middleware <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">auth.basic</span> está incluido en el framework de Laravel, por lo que no hay\n    necesidad de definirlo:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('profile', function () {\n    // Only authenticated users may enter...\n})-&gt;middleware('auth.basic');\n</code></pre>\n<p>Una vez que el middleware haya sido adjuntado a la ruta, se preguntará automáticamente por las\n    credenciales al acceder a la ruta desde tu navegador. Por defecto, el middleware <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">auth.basic</span>\n    va a usar la columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">email</span> en el registro del usuario como \"nombre de usuario\".</p>\n<h4># Una nota sobre FastCGI</h4>\n<p>Si estás usando PHP FastCGI, la Autentincación Básica HTTP podría no funcionar correctamente por\n    defecto. Las siguientes líneas deberán ser agregadas a tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.htaccess</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>RewriteCond %{HTTP:Authorization} ^(.+)\\$\nRewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]\n</code></pre>\n<h3># Autenticación HTTP básica sin estado</h3>\n<p>También puedes utilizar la Autenticación HTTP Básica sin establecer una cookie de identificación\n    en la sesión, esto es particularmente útil para la autenticacíon API. Para hacer esto define un\n    middleware que llame al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">onceBasic</span>. Si el método no devuelve ninguna\n    respuesta, la petición puede pasarse a la aplicación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Middleware;\nuse Illuminate\\Support\\Facades\\Auth;\nclass AuthenticateOnceWithBasicAuth\n{\n    /**\n    * Handle an incoming request.\n    *\n    * @param  \\Illuminate\\Http\\Request  \\$request\n    * @param  \\Closure  \\$next\n    * @return mixed\n    */\n    public function handle(\\$request, \\$next)\n    {\n        return Auth::onceBasic() ?: \\$next(\\$request);\n    }\n}\n</code></pre>\n<p>A continuación registra el middleware de ruta y adjúntalo a la ruta:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('api/user', function () {\n    // Only authenticated users may enter...\n})-&gt;middleware('auth.basic.once');\n</code></pre>\n<h2>Logging Out</h2>\n<p>Para cerrar manualmente la sesión de un usuario en tu aplicación, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">logout</span>\n    en el facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Auth</span>. Esto limpiará la información de autenticación en la sesión del\n    usuario:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Auth;\nAuth::logout();\n</code></pre>\n<h3># Invalidando sesiones en otros dispositivos</h3>\n<p>Laravel también proporciona un mecanismo para invalidar y \"sacar\" las sesiones de un usuario que\n    están activas en otros dispositivos sin invalidar la sesión en el dispositivo actual. Antes de\n    comenzar, debes asegurarte de que el middleware <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Session\\Middleware\\AuthenticateSession</span>\n    está presente y no está comentado en tu clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Http/Kernel.php</span> del grupo de\n    middleware <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">web</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'web' =&gt; [\n    // ...\n    \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n    // ...\n]\n</code></pre>\n<p>Luego, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">logoutOtherDevices</span> en el facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Auth</span>. Este\n    método requiere que el usuario proporcione su contraseña actual, que tu aplicación debe aceptar\n    mediante un campo de formulario:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Auth;\nAuth::logoutOtherDevices(\\$password);\n</code></pre>\n<p>Nota</p>\n<p>Cuando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">logoutOtherDevices</span> es invocado, las otras sesiones del usuario\n    serán invalidadas completamente, lo que quiere decir que serán \"sacadas\" de todos los guards en\n    los que previamente estaban autenticadas.</p>\n<h2>Agregar guards personalizados</h2>\n<p>Puedes definir tu propio guard de autenticación utilizando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">extend</span> en el\n    facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Auth</span>. Debes colocar la llamada a este método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">extend</span> en el\n    proveedor de servicios. Ya que Laravel cuenta con un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AuthServiceProvider</span>, puedes\n    colocar el código en ese proveedor:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Providers;\nuse App\\Services\\Auth\\JwtGuard;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\nclass AuthServiceProvider extends ServiceProvider\n{\n    /**\n    * Register any application authentication / authorization services.\n    *\n    * @return void\n    */\n    public function boot()\n    {\n        \\$this-&gt;registerPolicies();\n        Auth::extend('jwt', function (\\$app, \\$name, array \\$config) {\n            // Return an instance of Illuminate\\Contracts\\Auth\\Guard...\n            return new JwtGuard(Auth::createUserProvider(\\$config['provider']));\n        });\n    }\n}\n</code></pre>\n<p>Como puedes ver en el ejemplo anterior, el callback pasado al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">extend</span> deberá\n    retornar una implementación de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Contracts\\Auth\\Guard</span>. Esta interfaz\n    contiene algunos métodos que tendrás que implementar para definir un guard personalizado. Una\n    vez que tu guard personalizado haya sido definido, podrás utilizar este guard en la\n    configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">guards</span> de tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">auth.php</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'guards' =&gt; [\n    'api' =&gt; [\n        'driver' =&gt; 'jwt',\n        'provider' =&gt; 'users',\n    ],\n],\n</code></pre>\n<h3># Guards de closures de peticiones</h3>\n<p>La forma más sencilla de implementar un sistema de autenticación basado en peticiones HTTP es\n    usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Auth:viaRequest</span>. Este método te permite definir rápidamente tu\n    proceso de autenticación usando sólo un Closure.</p>\n<p>Para comenzar, llama al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Auth::viaRequest</span> dentro del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span>\n    de tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AuthServiceProvider</span>. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">viaRequest</span> acepta el nombre de un\n    driver de autenticación como su primer argumento. Este nombre puede ser cualquier cadena que\n    describa tu guard personalizado. El segundo argumento pasado al método debe ser un Closure que\n    reciba la petición HTTP entrante y retorne una instancia de usuario o, si la autenticación\n    falla, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use App\\User;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\n/**\n* Register any application authentication / authorization services.\n*\n* @return void\n*/\npublic function boot()\n{\n    \\$this-&gt;registerPolicies();\n    Auth::viaRequest('custom-token', function (\\$request) {\n        return User::where('token', \\$request-&gt;token)-&gt;first();\n    });\n}\n</code></pre>\n<p>Una vez que tu driver de autenticación personalizado ha sido definido, úsalo como un driver\n    dentro de la configuración de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">guards</span> de tu archivo de configuración\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">auth.php</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'guards' =&gt; [\n    'api' =&gt; [\n        'driver' =&gt; 'custom-token',\n    ],\n],\n</code></pre>\n<h2>Agregar proveedores de usuario personalizados</h2>\n<p>Si no estás utilizando una base de datos relacional tradicional para almacenar a tus usuarios,\n    deberás extender Laravel con tu propio proveedor de autenticación. Usaremos el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">provider</span>\n    en el facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Auth</span> para definir un proveedor de usuarios personalizado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Providers;\nuse Illuminate\\Support\\Facades\\Auth;\nuse App\\Extensions\\RiakUserProvider;\nuse Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\nclass AuthServiceProvider extends ServiceProvider\n{\n    /**\n    * Register any application authentication / authorization services.\n    *\n    * @return void\n    */\n    public function boot()\n    {\n        \\$this-&gt;registerPolicies();\n        Auth::provider('riak', function (\\$app, array \\$config) {\n            // Return an instance of Illuminate\\Contracts\\Auth\\UserProvider...\n            return new RiakUserProvider(\\$app-&gt;make('riak.connection'));\n        });\n    }\n}\n</code></pre>\n<p>Después de haber registrado el proveedor utilizando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">provider</span>, puedes\n    cambiar al nuevo proveedor de usuarios en tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">auth.php</span>.\n    Primero, define un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">provider</span> que utilice tu nuevo controlador:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'providers' =&gt; [\n    'users' =&gt; [\n        'driver' =&gt; 'riak',\n    ],\n],\n</code></pre>\n<p>Finalmente, puedes utilizar este proveedor en tu configuración de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">guards</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'guards' =&gt; [\n    'web' =&gt; [\n        'driver' =&gt; 'session',\n        'provider' =&gt; 'users',\n    ],\n],\n</code></pre>\n<h3># La interfaz UserProvider</h3>\n<p>Las implementaciones <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Contracts\\Auth\\UserProvider</span> son responsables\n    solamente de obtener una implementación de\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Contracts\\Auth\\Authenticatable</span> desde un sistema de almacenamiento\n    persistente, como MySQL, Riak, etc. Estas dos interfaces permiten a los mecanismos de\n    autenticación de Laravel continuar funcionando independientemente de cómo esté almacenada la\n    información del usuario o qué tipo de clase es utilizado para representarlo.</p>\n<p>Echemos un vistaso a la interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Contracts\\Auth\\UserProvider</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace Illuminate\\Contracts\\Auth;\ninterface UserProvider {\n    public function retrieveById(\\$identifier);\n    public function retrieveByToken(\\$identifier, \\$token);\n    public function updateRememberToken(Authenticatable \\$user, \\$token);\n    public function retrieveByCredentials(array \\$credentials);\n    public function validateCredentials(Authenticatable \\$user, array \\$credentials);\n}\n</code></pre>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">retrieveById</span> generalmente recibe una clave que representa al usuario,\n    como un ID auto-incrementable de una base de datos MySQL. La implementación <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Authenticatable</span>\n    que coincida con el ID deberá ser recuperado y retornado por el método.</p>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">retireveByToken</span> recupera un usuario por su <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$identifier</span>\n    único y su <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$token</span> \"recordar datos\", almacenados en el campo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">remember_token</span>. Como en el método anterior, la implementación\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Authenticatable</span> deberá ser retornado.</p>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updateRememberToken</span> actualiza el campo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$user</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">remember_token</span>\n    con el nuevo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$token</span>. Un nuevo token es asignado en un inicio de sesión con\n    \"recordar datos\" o cuando el usuario cierre su sesión.</p>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">retrieveByCredentials</span> recupera el arreglo de credenciales pasadas al\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Auth::attempt</span> cuando intenta loguearse a la aplicación. El método \"consulta\"\n    el almacenamiento persistente en busca de las credenciales que coincidan con las del usuario.\n    Típicamente, este método va a ejecutar una consulta con una condición \"where\" en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$credentials['username']</span>.\n    El método deberá retornar una implementación de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Authenticatable</span>. <strong>Este\n        método no debe intentar realizar ninguna validación o autenticación por contraseña.</strong>\n</p>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">validateCredentials</span> deberá comparar el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$user</span> proporcionado\n    con sus <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$credentials</span> para autenticar el usuario. Por ejemplo, este método puede\n    utilizar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Hash::check</span> para comparar los valores de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$user-&gt;getAuthPassword()</span>\n    al valor de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$credentials['password']</span>. Este método deberá retornar\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span> indicando si la contraseña es válida o no.</p>\n<h3># La interfaz Authenticatable</h3>\n<p>Ahora que hemos explorado cada uno de los métodos en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">UserProvider</span>, vamos a echar un\n    vistazo a la interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Authenticatable</span>. Recuerda, el proveedor deberá retornar\n    implementaciones de esta interfaz desde los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">retrieveById</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">retrieveByToken</span>\n    y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">retrieveByCredentials</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace Illuminate\\Contracts\\Auth;\ninterface Authenticatable {\n    public function getAuthIdentifierName();\n    public function getAuthIdentifier();\n    public function getAuthPassword();\n    public function getRememberToken();\n    public function setRememberToken(\\$value);\n    public function getRememberTokenName();\n}\n</code></pre>\n<p>Esta interfaz es simple. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">getAuthIdentifierName</span> debe retornar el nombre del\n    campo \"clave primaria\" del usuario y el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">getAuthIdentifier</span> deberá retornar la\n    \"clave primaria\" del usuario. En un backend MySQL, nuevamente, esto deberá ser la clave\n    auto-incrementable. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">getAuthPassword</span> deberá retornar la contraseña\n    encriptada del usuario. Esta interfaz permite que el sistema de autenticación funcione con\n    cualquier clase de usuario, independientemente de qué capa de abstracción o qué ORM se está\n    utilizando. Por defecto, Laravel incluye una clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span> en el directorio\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app</span> que implementa esta interfaz, por lo que puedes consultar esta clase para\n    obtener un ejemplo de implementación.</p>\n<h2>Eventos</h2>\n<p>Laravel genera una variedad de eventos durante el proceso de autenticación. Puedes adjuntar\n    listeners a estos eventos en tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">EventServiceProvider</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* The event listener mappings for the application.\n*\n* @var array\n*/\nprotected \\$listen = [\n    'Illuminate\\Auth\\Events\\Registered' =&gt; [\n        'App\\Listeners\\LogRegisteredUser',\n    ],\n    'Illuminate\\Auth\\Events\\Attempting' =&gt; [\n        'App\\Listeners\\LogAuthenticationAttempt',\n    ],\n    'Illuminate\\Auth\\Events\\Authenticated' =&gt; [\n        'App\\Listeners\\LogAuthenticated',\n    ],\n    'Illuminate\\Auth\\Events\\Login' =&gt; [\n        'App\\Listeners\\LogSuccessfulLogin',\n    ],\n    'Illuminate\\Auth\\Events\\Failed' =&gt; [\n        'App\\Listeners\\LogFailedLogin',\n    ],\n    'Illuminate\\Auth\\Events\\Logout' =&gt; [\n        'App\\Listeners\\LogSuccessfulLogout',\n    ],\n    'Illuminate\\Auth\\Events\\Lockout' =&gt; [\n        'App\\Listeners\\LogLockout',\n    ],\n    'Illuminate\\Auth\\Events\\PasswordReset' =&gt; [\n        'App\\Listeners\\LogPasswordReset',\n    ],\n];\n</code></pre>\n</div>"
      },
      {
        "titulo": "Autenticación de API",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Autenticación de API</h1>\n<ul>\n    <li>Introducción</li>\n    <li>\n        Configuración\n        <ul>\n            <li>Migraciones de la base de datos</li>\n        </ul>\n    </li>\n    <li>\n        Generando tokens\n        <ul>\n            <li>Hashing tokens</li>\n        </ul>\n    </li>\n    <li>Protegiendo rutas</li>\n    <li>Pasando tokens en peticiones</li>\n</ul>\n<h2>Introducción</h2>\n<p>Por defecto, Laravel viene con una sencilla solución para autenticación de API mediante tokens\n    aleatorios asignados a cada usuario de tu aplicación. En tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/auth.php</span>,\n    un guard <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">api</span> ya está definido y utiliza un driver <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">token</span>. Este driver\n    es responsable de inspeccionar el token de la API en la petición entrante y verificar que\n    coincida con el token asignado al usuario en la base de datos.</p>\n<blockquote>\n    <p>\n        <strong>Nota:</strong> Aunque Laravel viene con un sencillo guard de autenticación basado en\n        token, te recomendamos considerar usar\n        Laravel Passport\n        para aplicaciones robustas en producción que ofrecen autenticación de API.\n    </p>\n</blockquote>\n<h2>Configuración</h2>\n<h3># Preparando la base de datos</h3>\n<p>\n    Antes de usar el driver <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">token</span>, necesitarás\n    crear una migración\n    que agrega una columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">api_token</span> a tu tabla <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">users</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Schema::table('users', function (\\$table) {\n    \\$table-&gt;string('api_token', 80)-&gt;after('password')\n                        -&gt;unique()\n                        -&gt;nullable()\n                        -&gt;default(null);\n});\n</code></pre>\n<p>Una vez que la migración ha sido creada, ejecuta el comando de Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">migrate</span>.</p>\n<p>TIP</p>\n<p>Si eliges usar un nombre de columna diferente, asegurate de actualizar la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">storage_key</span>\n    de la configuración de tu API en el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/auth.php</span>.</p>\n<h2>Generando tokens</h2>\n<p>Una vez que la columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">api_token</span> ha sido agregada a tu tabla <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">users</span>,\n    estás listo para asignar tokens de API aleatorios a cada usuario que se registra en tu\n    aplicación. Debes asignar dichos tokens cuando un modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span> es creado para el\n    usuario durante el registro. Al usar el scaffolding de autenticación proporcionado por el\n    paquete de composer <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">laravel/ui</span>, esto puede ser hecho en el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span> de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RegisterController</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Facades\\Hash;\n/**\n* Create a new user instance after a valid registration.\n*\n* @param  array  \\$data\n* @return \\App\\User\n*/\nprotected function create(array \\$data)\n{\n    return User::create([\n        'name' =&gt; \\$data['name'],\n        'email' =&gt; \\$data['email'],\n        'password' =&gt; Hash::make(\\$data['password']),\n        'api_token' =&gt; Str::random(60),\n    ]);\n}\n</code></pre>\n<h3># Hashing tokens</h3>\n<p>En los ejemplos de arriba, los tokens de API son almacenados en tu base de datos como texto\n    plano. Si te gustaría agregar un hash a tus tokens de API usando hashing SHA-256, puedes\n    establecer la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hash</span> de la configuración del guard de tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">api</span> a\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>. El guard <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">api</span> está definido en tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/auth.php</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'api' =&gt; [\n    'driver' =&gt; 'token',\n    'provider' =&gt; 'users',\n    'hash' =&gt; true,\n],\n</code></pre>\n<h4># Generando tokens con hash</h4>\n<p>Al usar tokens de API con hash, no debes generar tus tokens de API durante el registro del\n    usuario. En su lugar, necesitarás implementar tu propia página de administración de tokens de\n    API dentro de tu aplicación. Esta página debe permitir a los usuarios inicializar y refrescar\n    sus token de API. Cuando un usuario realiza una petición para inicializar o refrescar su token,\n    debes almacenar una copia con hash del token en la base de datos y retornar una copia de texto\n    plano del token a la vista / frontend del cliente para ser mostrado una sola vez.</p>\n<p>Por ejemplo, un método de controlador que inicializa / refresca el token para un usuario dado y\n    retorna el texto plano del token como una respuesta JSON pudiera verse de la siguiente\n    manera:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Http\\Request;\nclass ApiTokenController extends Controller\n{\n    /**\n    * Update the authenticated user's API token.\n    *\n    * @param  \\Illuminate\\Http\\Request  \\$request\n    * @return array\n    */\n    public function update(Request \\$request)\n    {\n        \\$token = Str::random(60);\n        \\$request-&gt;user()-&gt;forceFill([\n            'api_token' =&gt; hash('sha256', \\$token),\n        ])-&gt;save();\n        return ['token' =&gt; \\$token];\n    }\n}\n</code></pre>\n<p>TIP</p>\n<p>Dado que los tokens de la API en el ejemplo supierior tienen suficiente entropía, es impractico\n    crear \"tablas arcoiris\" que buscar el valor original del token con hash. Por lo tanto, métodos\n    de hashing lentos como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">bcrypt</span> son innecesarios.</p>\n<h2>Protegiendo rutas</h2>\n<p>Laravel incluye un guard de autenticación que validará automáticamente tokens de API en\n    peticiones entrantes. Sólo necesitas especificar el middleware <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">auth:api</span> en\n    cualquier ruta que requiera un token de acceso válido:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Http\\Request;\nRoute::middleware('auth:api')-&gt;get('/user', function(Request \\$request) {\n    return \\$request-&gt;user();\n});\n</code></pre>\n<h2>Pasando tokens En peticiones</h2>\n<p>Hay muchas formas de pasar el token de la API a tu aplicación. Discutiremos cada una de esas\n    formas mientras usamos el paquete HTTP Guzzle para demostrar su uso. Puedes elegir cualquiera de\n    estas formas dependiendo de las necesidades de tu aplicación.</p>\n<h4># Query string</h4>\n<p>Los usuarios de tu API pueden especificar su token como un valor de cadena de consulta <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">api_token</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$response = \\$client-&gt;request('GET', '/api/user?api_token='.\\$token);\n</code></pre>\n<h4># Request payload</h4>\n<p>Los usuarios de tu API pueden incluir su token de API en los parametros del formulario de la\n    petición como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">api_token</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$response = \\$client-&gt;request('POST', '/api/user', [\n    'headers' =&gt; [\n        'Accept' =&gt; 'application/json',\n    ],\n    'form_params' =&gt; [\n        'api_token' =&gt; \\$token,\n    ],\n]);\n</code></pre>\n<h4># Bearer token</h4>\n<p>Los usuarios de tu API pueden proporcionar su token de API como un token <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Bearer</span> en\n    el encabezado <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Authorization</span> de la petición:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$response = \\$client-&gt;request('POST', '/api/user', [\n    'headers' =&gt; [\n        'Authorization' =&gt; 'Bearer '.\\$token,\n        'Accept' =&gt; 'application/json',\n    ],\n]);\n</code></pre>\n</div>"
      },
      {
        "titulo": "Autorización",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Autorización</h1>\n<ul>\n    <li>Introducción</li>\n    <li>\n        Gates\n        <ul>\n            <li>Escribiendo gates</li>\n            <li>Autorizando acciones</li>\n            <li>Interceptando comprobaciones de gates</li>\n        </ul>\n    </li>\n    <li>\n        Creando políticas\n        <ul>\n            <li>Generando políticas</li>\n            <li>Registrando políticas</li>\n        </ul>\n    </li>\n    <li>\n        Escribiendo políticas\n        <ul>\n            <li>Métodos de política</li>\n            <li>Métodos sin modelos</li>\n            <li>Usuarios invitados</li>\n            <li>Filtros de política</li>\n        </ul>\n    </li>\n    <li>\n        Autorizando acciones usando políticas\n        <ul>\n            <li>Vía el modelo de usuario</li>\n            <li>Vía middleware</li>\n            <li>Vía helpers del controlador</li>\n            <li>Vía plantillas de blade</li>\n        </ul>\n    </li>\n</ul>\n<h2>Introducción</h2>\n<p>\n    Además de proveer servicios de\n    autenticación\n    por defecto, Laravel además provee una forma simple de autorizar acciones del usuario contra un\n    recurso dado. Como con la autenticación, el enfoque de Laravel para la autorización es simple, y\n    hay dos maneras principales de autorizar acciones: <strong>gates</strong> y\n    <strong>policies</strong> (puertas y políticas).\n</p>\n<p>Piensa en los gates y políticas como rutas y controladores. Los Gates proveen una manera simple,\n    basada en funciones anónimas, para definir las reglas de autorización; mientras que las\n    políticas, como los controladores, agrupan la lógica para un modelo o recurso en específico.\n    Vamos a explorar los gates primero y luego las políticas.</p>\n<p>No necesitas elegir entre el uso exclusivo de gates o de políticas cuando construyas una\n    aplicación. Lo más probable es que la mayoría de las aplicaciones contengan una mezcla de gates\n    y de políticas ¡Y eso está completamente bien! Los gates son más aplicables a acciones que no\n    estén relacionadas a ningún modelo o recurso, como por ejemplo ver un tablero en el panel de\n    administración. Por otro lado, las políticas deberan ser usadas cuando desees autorizar una\n    acción para un modelo o recurso en particular.</p>\n<h2>Gates</h2>\n<h3># Escribiendo gates</h3>\n<p>Los gates son funciones anónimas (Closures) que determinan si un usuario está autorizado para\n    ejecutar una acción dada y típicamente son definidos en la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Providers\\AuthServiceProvider</span>\n    usando el facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Gate</span>. Los gates siempre reciben la instancia del usuario conectado\n    como el primer argumento y pueden, opcionalmente, recibir argumentos adicionales que sean\n    relevantes, como por ejemplo un modelo de Eloquent:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Register any authentication / authorization services.\n*\n* @return void\n*/\npublic function boot()\n{\n    \\$this-&gt;registerPolicies();\n    Gate::define('edit-settings', function (\\$user) {\n        return \\$user-&gt;isAdmin;\n    });\n    Gate::define('update-post', function (\\$user, \\$post) {\n        return \\$user-&gt;id == \\$post-&gt;user_id;\n    });\n}\n</code></pre>\n<p>Los gates además pueden ser definidos escribiendo la clase y método a llamar como una cadena de\n    texto <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Class@method</span>, como cuando definimos controladores en las rutas:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Register any authentication / authorization services.\n*\n* @return void\n*/\npublic function boot()\n{\n    \\$this-&gt;registerPolicies();\n    Gate::define('update-post', 'App\\Policies\\PostPolicy@update');\n}\n</code></pre>\n<h4># Gates de recursos</h4>\n<p>También puedes definir las habilidades de múltiples gates a la vez usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resource</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Gate::resource('posts', 'App\\Policies\\PostPolicy');\n</code></pre>\n<p>Esto es idéntico a definir los siguientes Gates uno por uno:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Gate::define('posts.view', 'App\\Policies\\PostPolicy@view');\nGate::define('posts.create', 'App\\Policies\\PostPolicy@create');\nGate::define('posts.update', 'App\\Policies\\PostPolicy@update');\nGate::define('posts.delete', 'App\\Policies\\PostPolicy@delete');\n</code></pre>\n<p>Por defecto, las habilidades <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">view</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">update</span>, y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">delete</span> serán definidas. Además puedes sobrescribir las habilidades por defecto\n    pasando un arreglo como tercer argumento al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resource</span>. Las llaves del arreglo\n    definen los nombres de las habilidades mientras que los valores definen los nombres de los\n    métodos. Por ejemplo, el siguiente código creará dos nuevas definiciones de Gate - <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">posts.image</span>\n    y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">posts.photo</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Gate::resource('posts', 'PostPolicy', [\n    'image' =&gt; 'updateImage',\n    'photo' =&gt; 'updatePhoto',\n]);\n</code></pre>\n<h3># Autorizando acciones</h3>\n<p>Para autorizar una acción usando gates, deberías usar los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">allows</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">denies</span>.\n    Nota que no necesitas pasar el usuario autenticado cuando llames a estos métodos. Laravel se\n    ocupará de esto por ti de forma automática:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>if (Gate::allows('edit-settings')) {\n    // The current user can edit settings\n}\nif (Gate::allows('update-post', \\$post)) {\n    // The current user can update the post...\n}\nif (Gate::denies('update-post', \\$post)) {\n    // The current user can't update the post...\n}\n</code></pre>\n<p>Si quisieras determinar si un usuario en particular está autorizado para ejecutar una acción,\n    puedes llamar al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">forUser</span> del facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Gate</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>if (Gate::forUser(\\$user)-&gt;allows('update-post', \\$post)) {\n    // The user can update the post...\n}\nif (Gate::forUser(\\$user)-&gt;denies('update-post', \\$post)) {\n    // The user can't update the post...\n}\n</code></pre>\n<p>Puedes autorizar múltiples acciones a la vez con los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">any</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">none</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>if (Gate::any(['update-post', 'delete-post'], \\$post)) {\n    // The user can update or delete the post\n}\nif (Gate::none(['update-post', 'delete-post'], \\$post)) {\n    // The user cannot update or delete the post\n}\n</code></pre>\n<h4># Interceptando comprobaciones de gates</h4>\n<p>Algunas veces, puedes querer otorgar todas las habilidades a un usuario en especifico. Puedes\n    usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">before</span> para definir un callback que es ejecutado antes de todas las\n    demás comprobaciones de autorización:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Gate::before(function (\\$user, \\$ability) {\n    if (\\$user-&gt;isSuperAdmin()) {\n        return true;\n    }\n});\n</code></pre>\n<p>Si el callback <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">before</span> retorna un resultado que no es null dicho resultado será\n    considerado el resultado de la comprobación.</p>\n<p>Puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">after</span> para definir un callback que será ejecutado luego de\n    todas las demás comprobaciones de autorización:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Gate::after(function (\\$user, \\$ability, \\$result, \\$arguments) {\n    if (\\$user-&gt;isSuperAdmin()) {\n        return true;\n    }\n});\n</code></pre>\n<p>Similar a la comprobación <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">before</span>, si el callback <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">after</span> retorna un\n    resultado que no sea null dicho resultado será considerado el resultado de la comprobación.</p>\n<h2>Creando políticas</h2>\n<h3># Generando políticas</h3>\n<p>Los políticas son clases que organizan la lógica de autorización para un modelo o recurso en\n    particular. Por ejemplo, si tu aplicación es un blog, puedes tener un modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span>\n    con su correspondiente <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">PostPolicy</span> para autorizar acciones de usuario como crear o\n    actualizar posts.</p>\n<p>\n    Puedes generar una política usando el\n    comando de Artisan\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:policy</span>. La política generada será ubicada en el directorio\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Policies</span>. Si el directorio no existe en tu aplicación, Laravel lo creará por\n    ti:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan make:policy PostPolicy\n</code></pre>\n<p>El comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:policy</span> genera una clase de política vacía. Si quieres generar una\n    clase con los métodos de política para un \"CRUD\" básico ya incluidos en la clase, puedes\n    especificar la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--model</span> al ejecutar el comando:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan make:policy PostPolicy --model=Post\n</code></pre>\n<p>TIP</p>\n<p>\n    Todas las políticas son resueltas a través del\n    contenedor de servicios de Laravel\n    , lo que te permite especificar las dependencias necesarias en el constructor de la política y\n    estas serán automaticamente inyectadas.\n</p>\n<h3># Registrando políticas</h3>\n<p>Una vez que la política exista, ésta necesita ser registrada. La clase\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AuthServiceProvider</span> incluída con las aplicaciones de Laravel contiene una propiedad\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">policies</span> que mapea tus modelos de Eloquent a sus políticas correspondientes.\n    Registrar una política le indicará a Laravel qué política utilizar para autorizar acciones\n    contra un modelo dado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Providers;\nuse App\\Post;\nuse App\\Policies\\PostPolicy;\nuse Illuminate\\Support\\Facades\\Gate;\nuse Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\nclass AuthServiceProvider extends ServiceProvider\n{\n    /**\n    * The policy mappings for the application.\n    *\n    * @var array\n    */\n    protected \\$policies = [\n        Post::class =&gt; PostPolicy::class,\n    ];\n    /**\n    * Register any application authentication / authorization services.\n    *\n    * @return void\n    */\n    public function boot()\n    {\n        \\$this-&gt;registerPolicies();\n        //\n    }\n}\n</code></pre>\n<h4># Política de auto-descubrimiento</h4>\n<p>En lugar de registrar manualmente politicas de modelos, Laravel puede auto-descubrir politicas\n    siempre y cuando el modelo y la politica sigan la convención de nombre estándar de Laravel.\n    Especificamente, las politicas deben estar en un directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Policies</span> dentro del\n    directorio que contiene los modelos. Así que, por ejemplo, los modelos pueden ser ubicados en el\n    directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app</span> mientras que las politicas pueden tener un sufijo. Así que, un\n    modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span> corresponderá a una clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">UserPolicy</span>.</p>\n<p>Si te gustaría proporcionar tu propia lógica para descubrir politicas, puedes registar un\n    callback personalizado usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Gate::guessPolicyNamesUsing</span>. Típicamente,\n    este método debe ser llamado desde el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span> del\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AuthServiceProvider</span> de tu aplicación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Gate;\nGate::guessPolicyNamesUsing(function (\\$modelClass) {\n    // return policy class name...\n});\n</code></pre>\n<p>Nota</p>\n<p>Cualquier politica que está explicitamente mapeada en tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AuthServiceProvider</span> tendrá\n    precendencia sobre cualquier posible politica auto-descubierta.</p>\n<h2>Escribiendo políticas</h2>\n<h3># Métodos de política</h3>\n<p>Una vez que la política haya sido registrada, puedes agregar métodos para cada acción a\n    autorizar. Por ejemplo, vamos a definir un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">update</span> en nuestro <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">PostPolicy</span>\n    para detirminar si un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span> dado puede actualizar una instancia de un\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span>.</p>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">update</span> recibirá una instancia de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span> y de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span>\n    como sus argumentos y debería retornar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span> indicando si el\n    usuario está autorizado para actualizar el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span> o no. En el siguiente ejemplo,\n    vamos a verificar si el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">id</span> del usuario concuerda con el atributo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">user_id</span> del post:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Policies;\nuse App\\User;\nuse App\\Post;\nclass PostPolicy\n{\n    /**\n    * Determine if the given post can be updated by the user.\n    *\n    * @param  \\App\\User  \\$user\n    * @param  \\App\\Post  \\$post\n    * @return bool\n    */\n    public function update(User \\$user, Post \\$post)\n    {\n        return \\$user-&gt;id === \\$post-&gt;user_id;\n    }\n}\n</code></pre>\n<p>Puedes continuar definiendo métodos adicionales en la política como sea necesario para las\n    diferentes acciones que este autorice. Por ejemplo, puedes definir métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">view</span> o\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">delete</span> para autorizar varias acciones de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span>, pero recuerda que eres\n    libre de darle los nombres que quieras a los métodos de la política.</p>\n<p>TIP</p>\n<p>Si usas la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--model</span> cuando generes tu política con el comando de Artisan, éste\n    contendrá métodos para las acciones <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">view</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">update</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">delete</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">restore</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">forceDelete</span>.</p>\n<h3># Métodos sin modelos</h3>\n<p>Algunos métodos de políticas solo reciben el usuario autenticado y no una instancia del modelo\n    que autorizan. Esta situación es común cuando autorizamos acciones <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span>. Por\n    ejemplo, si estás creando un blog, puedes querer revisar si un usuario está autorizado para\n    crear nuevos posts o no.</p>\n<p>Cuando definas métodos de política que no recibirán una instancia de otro modelo, así como el\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span>, debes definir el método con el usuario como único parámetro:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Determine if the given user can create posts.\n*\n* @param  \\App\\User  \\$user\n* @return bool\n*/\npublic function create(User \\$user)\n{\n    //\n}\n</code></pre>\n<h3># Usuarios invitados</h3>\n<p>Por defecto, todos los gates y políticas automáticamente retornan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span> si la\n    petición HTTP entrante no fue iniciada por un usuario autenticado. Sin embargo, puedes permitir\n    que estas comprobaciones de autorización sean pasadas a tus gates y políticas con una\n    declaración de tipo \"opcional\" o suministrando un valor por defecto <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span> para la\n    definición del argumento de usuario:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Policies;\nuse App\\User;\nuse App\\Post;\nclass PostPolicy\n{\n    /**\n    * Determine if the given post can be updated by the user.\n    *\n    * @param  \\App\\User  \\$user\n    * @param  \\App\\Post  \\$post\n    * @return bool\n    */\n    public function update(?User \\$user, Post \\$post)\n    {\n        return \\$user-&gt;id === \\$post-&gt;user_id;\n    }\n}\n</code></pre>\n<h3># Filtros de política</h3>\n<p>Es posible que quieras autorizar todas las acciones para algunos usuarios en un política dada.\n    Para lograr esto, define un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">before</span> en la política. El método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">before</span> será ejecutado antes de los otros métodos en la política, dándote la\n    oportunidad de autorizar la acción antes que el método destinado de la política sea llamado.\n    Esta característica es comunmente usada para otorgar autorización a los administradores de la\n    aplicación para que ejecuten cualquier acción:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>public function before(\\$user, \\$ability)\n{\n    if (\\$user-&gt;isSuperAdmin()) {\n        return true;\n    }\n}\n</code></pre>\n<p>Si quisieras denegar todas las autorizaciones para un usuario deberías retornar\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span> en el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">before</span>. Si retornas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>, la decisión\n    de autorización recaerá sobre el método de la política.</p>\n<p>Nota</p>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">before</span> de una clase política no será llamado si la clase no contiene un\n    método con un nombre que concuerde con el nombre de la habilidad siendo revisada.</p>\n<h2>Autorizando acciones usando políticas</h2>\n<h3># Vía el modelo user</h3>\n<p>El modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span> que se incluye por defecto en tu aplicación de Laravel trae dos\n    métodos para autorizar acciones: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">can</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cant</span> (puede y no puede). El\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">can</span> acepta el nombre de la acción que deseas autorizar y el modelo\n    relevante. Por ejemplo, vamos a determinar si un usuario está autorizado para actualizar un\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span> dado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>if (\\$user-&gt;can('update', \\$post)) {\n    //\n}\n</code></pre>\n<p>Si una política está registrado para el modelo dado, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">can</span> automáticamente\n    llamará a la política apropiada y retornará un resultado boleano. Si no se ha registrado una\n    política para el modelo dado, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">can</span> intentará llamar al Gate basado en\n    Closures que coincida con la acción dada.</p>\n<h4># Acciones que no requieren modelos</h4>\n<p>Recuerda, algunas acciones como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span> pueden no requerir de la instancia de un\n    modelo. En estas situaciones, puedes pasar el nombre de una clase al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">can</span>. El\n    nombre de la clase ser usado para determinar cuál política usar cuando se autorice la acción:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use App\\Post;\nif (\\$user-&gt;can('create', Post::class)) {\n    // Executes the \"create\" method on the relevant policy...\n}\n</code></pre>\n<h3># Vía middleware</h3>\n<p>Laravel incluye un middleware que puede autorizar acciones antes de que la petición entrante\n    alcance tus rutas o controladores. Por defecto, el middleware <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Auth\\Middleware\\Authorize</span>\n    es asignado a la llave <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">can</span> de tu clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Http\\Kernel</span>. Vamos a\n    explorar un ejemplo usando el middleware <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">can</span> para autorizar que un usuario pueda\n    actualizar un post de un blog:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use App\\Post;\nRoute::put('/post/{post}', function (Post \\$post) {\n    // The current user may update the post...\n})-&gt;middleware('can:update,post');\n</code></pre>\n<p>En este ejemplo, estamos pasando al middleware <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">can</span> dos argumentos, el primero es el\n    nombre de la acción que deseamos autorizar y el segundo es el parámetro de la ruta que deseamos\n    pasar al método de la política. En este caso, como estamos usando implicit model binding, un\n    modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span> será pasado al método de la política. Si el usuario no está autorizado\n    a ejecutar la acción dada, el middleware generará una respuesta HTTP con el código de estatus\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">403</span>.</p>\n<h4># Acciones que no requieren modelos</h4>\n<p>Como mencionamos antes, algunas acciones como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span> pueden no requerir de una\n    instancia de un modelo. En estas situaciones, puedes pasar el nombre de la clase al middleware.\n    El nombre de la clase será usado para determinar cuál política usar para autorizar la acción:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::post('/post', function () {\n    // The current user may create posts...\n})-&gt;middleware('can:create,App\\Post');\n</code></pre>\n<h3># Vía helpers de controladores</h3>\n<p>Además de proveer métodos útiles en el modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span>, Laravel también provee un método\n    muy útil llamado <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">authorize</span> en cualquier controlador que extienda la clase base\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Http\\Controllers\\Controller</span>. Como el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">can</span>, este método\n    acepta el nombre de la acción que quieras autorizar y el modelo relevante. Si la acción no es\n    autorizada, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">authorize</span> arrojará una excepción de tipo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Auth\\Access\\AuthorizationException</span>,\n    la cual será convertida por el manejador de excepciones por defecto de Laravel en una respuesta\n    HTTP con un código <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">403</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse App\\Post;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nclass PostController extends Controller\n{\n    /**\n    * Update the given blog post.\n    *\n    * @param  Request  \\$request\n    * @param  Post  \\$post\n    * @return Response\n    * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n    */\n    public function update(Request \\$request, Post \\$post)\n    {\n        \\$this-&gt;authorize('update', \\$post);\n        // The current user can update the blog post...\n    }\n}\n</code></pre>\n<h4># Acciones que no requieren modelos</h4>\n<p>Como hemos discutido previamente, algunas acciones como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span> pueden no requerir\n    una instancia de un modelo. En estas situaciones, deberías pasar el nombre de la clase al método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">authorize</span>. El nombre de la clase determinará la política a usar para autorizar la\n    acción:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Create a new blog post.\n*\n* @param  Request  \\$request\n* @return Response\n* @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n*/\npublic function create(Request \\$request)\n{\n    \\$this-&gt;authorize('create', Post::class);\n    // The current user can create blog posts...\n}\n</code></pre>\n<h4># Autorizando controladores de recursos</h4>\n<p>Si estás utilizando controladores de recursos, puedes hacer uso del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">authorizeResource</span>\n    en el constructor del controlador. Este método agregará las deficiones de middleware\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">can</span> apropiadas a los métodos del controlador de recursos.</p>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">authorizeResource</span> acepta el nombre de clase del modelo como primer\n    argumento y el nombre del parametro de ruta / petición que contendrá el ID del modelo como\n    segundo argumento:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse App\\Post;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nclass PostController extends Controller\n{\n    public function __construct()\n    {\n        \\$this-&gt;authorizeResource(Post::class, 'post');\n    }\n}\n</code></pre>\n<p>Los siguientes métodos de controlador serán mapeados con su método de política respectivo:</p>\n<table>\n    <thead>\n    <tr>\n        <th>Método de controlador</th>\n        <th>Método de política</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>show</td>\n        <td>view</td>\n    </tr>\n    <tr>\n        <td>create</td>\n        <td>create</td>\n    </tr>\n    <tr>\n        <td>store</td>\n        <td>create</td>\n    </tr>\n    <tr>\n        <td>edit</td>\n        <td>update</td>\n    </tr>\n    <tr>\n        <td>update</td>\n        <td>update</td>\n    </tr>\n    <tr>\n        <td>destroy</td>\n        <td>delete</td>\n    </tr>\n    </tbody>\n</table>\n<p>TIP</p>\n<p>Puedes usar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:policy</span> con la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--model</span> para generar\n    rápidamente una clase de política para un modelo dado: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">php artisan make:policy PostPolicy --model=Post</span>.\n</p>\n<h3># Vía plantillas de blade</h3>\n<p>Cuando escribas plantillas de Blade, puedes querer mostrar una porción de la página solo si el\n    usuario está autorizado para ejecutar una acción determinada. Por ejemplo, puedes querer mostrar\n    un formulario para actualizar un post solo si el usuario puede actualizar el post. En\n    situaciones así, puedes usar las directivas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@can</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@cannot</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>@can('update', \\$post)\n    &lt;!-- The Current User Can Update The Post --&gt;\n@elsecan('create', App\\Post::class)\n    &lt;!-- The Current User Can Create New Post --&gt;\n@endcan\n@cannot('update', \\$post)\n    &lt;!-- The Current User Can't Update The Post --&gt;\n@elsecannot('create', App\\Post::class)\n    &lt;!-- The Current User Can't Create New Post --&gt;\n@endcannot\n</code></pre>\n<p>Estas directivas son accesos directos convenientes para no tener que escribir sentencias <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@if</span>\n    y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@unless</span>. Las sentencias <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@can</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@cannot</span> de arriba son\n    equivalentes a las siguientes sentencias, respectivamente:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>@if (Auth::user()-&gt;can('update', \\$post))\n    &lt;!-- The Current User Can Update The Post --&gt;\n@endif\n@unless (Auth::user()-&gt;can('update', \\$post))\n    &lt;!-- The Current User Can't Update The Post --&gt;\n@endunless\n</code></pre>\n<p>También puedes determinar si un usuario tiene habilidad de autorización desde una lista de\n    habilidades dadas. Para lograr esto, usa la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@canary</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>@canany(['update', 'view', 'delete'], \\$post)\n    // The current user can update, view, or delete the post\n@elsecanany(['create'], \\App\\Post::class)\n    // The current user can create a post\n@endcanany\n</code></pre>\n<h4># Acciones que no requieren modelos</h4>\n<p>Así como otros métodos de autorización, puedes pasar el nombre de una clase a las directivas\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@can</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@cannot</span> si la acción no requiere una instancia de un modelo:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>@can('create', App\\Post::class)\n    &lt;!-- The Current User Can Create Posts --&gt;\n@endcan\n@cannot('create', App\\Post::class)\n    &lt;!-- The Current User Can't Create Posts --&gt;\n@endcannot\n</code></pre>\n</div>"
      },
      {
        "titulo": "verificacion de email",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Verificación de Correo Electrónico</h1>\n<ul>\n    <li>Introducción</li>\n    <li>Consideraciones de la base De datos</li>\n    <li>\n        Rutas\n        <ul>\n            <li>Protegiendo rutas</li>\n        </ul>\n    </li>\n    <li>Vistas</li>\n    <li>Luego de verificar correos electrónicos</li>\n    <li>Eventos</li>\n</ul>\n<h2>Introducción</h2>\n<p>Muchas aplicaciones web requieren que los usuarios verifiquen sus correos electrónicos usando la\n    aplicación. En lugar de forzarte a volver a implementar esto en cada aplicación, Laravel\n    proporciona métodos convenientes para enviar y verificar solicitudes de verificación de correos\n    electrónicos.</p>\n<h3># Preparación del modelo</h3>\n<p>Para comenzar, verifica que tu modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\User</span> implementa la interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Contracts\\Auth\\MustVerifyEmail</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Contracts\\Auth\\MustVerifyEmail;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nclass User extends Authenticatable implements MustVerifyEmail\n{\n    use Notifiable;\n    // ...\n}\n</code></pre>\n<h2>Consideraciones de la base de datos</h2>\n<h4># Columna de verificación de correo electrónico</h4>\n<p>Luego, tu tabla <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">user</span> debe contener una columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">email_verified_at</span> para\n    almacenar la fecha y la hora en la que la dirección de correo electrónico fue verificada. Por\n    defecto, la migración de la tabla <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">user</span> incluida con el framework Laravel ya incluye\n    esta columna. Así que, lo único que necesitas es ejecutar la migración de la base de datos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan migrate\n</code></pre>\n<h2>Rutas</h2>\n<p>Laravel incluye la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Auth\\VerificationController</span> que contiene la lógica\n    necesaria para enviar enlaces de verificación y verificar correos electrónicos. Para registrar\n    las rutas necesarias para este controlador, pasa la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">verify</span> al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Auth::routes</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Auth::routes(['verify' =&gt; true]);\n</code></pre>\n<h3># Protegiendo rutas</h3>\n<p>\n    El middleware de rutas\n    puede ser usado para permitir que sólo usuarios autorizados puedan acceder a una ruta dada.\n    Laravel viene con un middleware <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">verified</span>, que está definido en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified</span>.\n    Dado que este middleware ya está registrado en el kernel HTTP de tu aplicación, lo único que\n    necesitas hacer es adjuntar el middleware a una definición de ruta:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('profile', function () {\n    // Only verified users may enter...\n})-&gt;middleware('verified');\n</code></pre>\n<h2>Vistas</h2>\n<p>Laravel generará todas las vistas de verificación de correo electrónico necesarias cuando el\n    comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:auth</span> sea ejecutado. Esta vista es colocada en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views/auth/verify.blade.php</span>.\n    Eres libre de personalizar esta vista según sea necesario para tu aplicación.</p>\n<h2>Luego de verificar correos electrónicos</h2>\n<p>Luego de que una dirección de correo electrónico es verificada, el usuario será redirigido\n    automáticamente a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">/home</span>. Puedes personalizar la ubicación de redirección\n    post-verificación definiendo un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redirectTo</span> o propiedad en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">VerificationController</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>protected \\$redirectTo = '/dashboard';\n</code></pre>\n<h2>Eventos</h2>\n<p>\n    Laravel despacha\n    eventos\n    durante el proceso de verificación de correo electrónico. Puedes agregar listeners a estos\n    eventos en tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">EventServiceProvider</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* The event listener mappings for the application.\n*\n* @var array\n*/\nprotected \\$listen = [\n    'Illuminate\\Auth\\Events\\Verified' =&gt; [\n        'App\\Listeners\\LogVerifiedUser',\n    ],\n];\n</code></pre>\n</div>"
      },
      {
        "titulo": "Cifrado",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Cifrado</h1>\n<ul>\n    <li>Introducción</li>\n    <li>Configuración</li>\n    <li>Usando el cifrador</li>\n</ul>\n<h2>Introducción</h2>\n<p>El cifrado de Laravel utiliza OpenSSL para proporcionar el cifrado AES-256 y AES-128. Se\n    recomienda encarecidamente usar las funciones de cifrado incorporadas de Laravel y no intente\n    desplegar tus algoritmos de cifrado \"de cosecha propia\". Todos los valores cifrados de Laravel\n    son firmados utilizando un código de autenticación de mensaje (MAC) para que su valor subyacente\n    no pueda modificarse una vez cifrado.</p>\n<h2>Configuración</h2>\n<p>Antes de usar el cifrado de Laravel, debes establecer la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">key</span> en tu archivo de\n    configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/app.php</span>. Deberías usar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">php artisan key: generate</span>\n    para generar esta clave, ya que este comando de Artisan usará el generador de bytes aleatorios\n    seguros de PHP para construir tu clave. Si este valor no se establece correctamente, todos los\n    valores cifrados por Laravel serán inseguros.</p>\n<h2>Usando el cifrador</h2>\n<h4># Cifrar un valor</h4>\n<p>Puedes cifrar un valor usando el helper o función de ayuda <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">encrypt</span>. Todos los\n    valores cifrados se cifran utilizando OpenSSL y el cifrado <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AES-256-CBC</span>. Además,\n    todos los valores cifrados están firmados con un código de autenticación de mensaje (MAC) para\n    detectar cualquier modificación en la cadena cifrada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse App\\User;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nclass UserController extends Controller\n{\n    /**\n    * Store a secret message for the user.\n    *\n    * @param  Request  \\$request\n    * @param  int  \\$id\n    * @return Response\n    */\n    public function storeSecret(Request \\$request, \\$id)\n    {\n        \\$user = User::findOrFail(\\$id);\n        \\$user-&gt;fill([\n            'secret' =&gt; encrypt(\\$request-&gt;secret)\n        ])-&gt;save();\n    }\n}\n</code></pre>\n<h4># Cifrado sin serialización</h4>\n<p>Los valores cifrados se pasan a través de una serialización durante el proceso de cifrado, lo que\n    permite el cifrado de objetos y matrices. De este modo, los clientes que no son PHP y reciben\n    valores cifrados tendrán que des-serializar los datos. Si deseas cifrar y descifrar valores sin\n    serialización, puede usar los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">encryptString</span> y<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">decryptString</span> de\n    la facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Crypt</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Crypt;\n\\$encrypted = Crypt::encryptString('Hello world.');\n\\$decrypted = Crypt::decryptString(\\$encrypted);\n</code></pre>\n<h4># Descifrando un valor</h4>\n<p>Puedes descifrar los valores usando el helper o función de ayuda <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">decrypt</span>. Si el\n    valor no se puede descifrar correctamente, como cuando el MAC no es válido, se lanzará una\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Contracts\\Encryption\\DecryptException</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Contracts\\Encryption\\DecryptException;\ntry {\n    \\$decrypted = decrypt(\\$encryptedValue);\n} catch (DecryptException \\$e) {\n    //\n}\n</code></pre>\n</div>"
      },
      {
        "titulo": "Hashing",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Hashing</h1>\n<ul>\n    <li>Introducción</li>\n    <li>Configuración</li>\n    <li>Uso básico</li>\n</ul>\n<h2>Introducción</h2>\n<p>\n    El\n    facade\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Hash</span> de Laravel proporciona hashing seguro de Bcrypt y Argon2 para almacenar\n    contraseñas de usuarios. Si estás usando las clases integradas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">LoginController</span> y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RegisterController</span> que están incluidas con tu aplicación de Laravel usarán Bcrypt\n    para registro y autenticación de forma predeterminada.\n</p>\n<p>TIP</p>\n<p>Bcrypt es una buena opción para el hashing de contraseñas dado que su \"factor de trabajo\" es\n    ajustable, lo que quiere decir que el tiempo que toma generar un hash puede ser aumentado a\n    medida que la capacidad de hardware incrementa.</p>\n<h2>Configuración</h2>\n<p>\n    El driver de hashing por defecto para tu aplicación está configurado en el archivo de\n    configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/hashing.php</span>. Actualmente hay tres drivers soportados:\n    Bcrypt\n    y\n    Argon2\n    (variantes Argon2i y Argon2id).\n</p>\n<p>Nota</p>\n<p>El driver Argon2i requiere PHP 7.2.0 o superior y el driver Argon2id requiere PHP 7.3.0 o\n    superior.</p>\n<h2>Uso básico</h2>\n<p>Puedes hacer hash a una contraseña llamando al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make</span> en el facade\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Hash</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Http\\Controllers\\Controller;\nclass UpdatePasswordController extends Controller\n{\n    /**\n    * Update the password for the user.\n    *\n    * @param  Request  \\$request\n    * @return Response\n    */\n    public function update(Request \\$request)\n    {\n        // Validate the new password length...\n        \\$request-&gt;user()-&gt;fill([\n            'password' =&gt; Hash::make(\\$request-&gt;newPassword)\n        ])-&gt;save();\n    }\n}\n</code></pre>\n<h4># Ajustando el factor de trabajo de Bcrypt</h4>\n<p>Si estás usando el algoritmo Bcrypt, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make</span> te permite administrar el factor\n    de trabajo del algoritmo usando la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">rounds</span>; sin embargo, el valor por defecto\n    es aceptable para la mayoría de las aplicaciones:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$hashed = Hash::make('password', [\n    'rounds' =&gt; 12\n]);\n</code></pre>\n<h4># Ajustando el factor de trabajo de Argon2</h4>\n<p>Si estás usando el algoritmo de Argon2, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make</span> te permite administrar la\n    carga de trabajo del algoritmo usando las opciones <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">memory</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">time</span> y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">threads</span>; sin embargo, los valores por defecto son aceptables para la mayoría de las\n    aplicaciones:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$hashed = Hash::make('password', [\n    'memory' =&gt; 1024,\n    'time' =&gt; 2,\n    'threads' =&gt; 2,\n]);\n</code></pre>\n<p>TIP</p>\n<p>\n    Para mayor información de estas opciones, revisa la\n    documentación oficial de PHP\n    .\n</p>\n<h4># Verificando una contraseña contra un hash</h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">check</span> te permite verificar que una cadena de texto plano dada corresponde\n    a un hash dado. Sin embargo, si estás usando el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">LoginController</span> incluido con\n    Laravel, probablemente no necesitarás usar esto directamente, ya que este controlador\n    automáticamente llama a este método:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>if (Hash::check('plain-text', \\$hashedPassword)) {\n    // Las contraseñas coinciden...\n}\n</code></pre>\n<h4># Comprobando si una contraseña necesita un nuevo hash</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">needsRehash</span> te permite determinar si el factor de trabajo usado por el\n    hasher ha cambiado desde que el hash fue agregado a la contraseña:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>if (Hash::needsRehash(\\$hashed)) {\n    \\$hashed = Hash::make('plain-text');\n}\n</code></pre>\n</div>"
      },
      {
        "titulo": "Restablecimiento de contraseña",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Restablecimiento de contraseñas</h1>\n<ul>\n    <li>Introducción</li>\n    <li>Consideraciones de la base de datos</li>\n    <li>Enrutamiento</li>\n    <li>Vistas</li>\n    <li>Después de restablecer contraseñas</li>\n    <li>Personalización</li>\n</ul>\n<h2>Introducción</h2>\n<p>TIP TIP</p>\n<p><strong>¿Quieres comenzar rápido?</strong> Simplemente ejecuta <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">php artisan make:auth</span>\n    en una aplicación de Laravel nueva y navega hasta <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">http://your-app.test/register</span> o\n    cualquier otra URL asignada a tu aplicación. Este simple comando se encargará de maquetar todo\n    tu sistema de autenticación, ¡incluyendo el restablecimiento de contraseñas!.</p>\n<p>La mayoría de las aplicaciones web proporciona una forma para que los usuarios restablecen sus\n    contraseñas olvidadas. En lugar de forzarte a reimplementar esto en cada aplicación, Laravel\n    proporciona métodos convenientes para enviar recordatorios de contraseñas y realizar\n    restablecimientos de contraseñas.</p>\n<p>TIP TIP</p>\n<p>Antes de usar las características de restablecimiento de contraseñas de Laravel, tu usuario debe\n    usar el trait <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Notifications\\Notifiable</span>.</p>\n<h2>Consideraciones de la base de datos</h2>\n<p>Para comenzar, verifica que tu modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\User</span> implementa la interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Contracts\\Auth\\CanResetPassword</span>.\n    El modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\User</span> incluído con el framework ya implementa esta interfaz y usa el\n    trait <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Auth\\Passwords\\CanResetPassword</span> para incluir los métodos\n    necesarios para implementar la interfaz.</p>\n<h4># Generando la migración para la tabla de tokens de restablecimiento</h4>\n<p>Luego, una tabla debe ser creada para almacenar los tokens de restablecimiento de contraseña. La\n    migración para está tabla está incluida con Laravel por defecto y se encuentra en el directorio\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database/migrations</span>. Así que, todo lo que necesitas hacer es ejecutar tus\n    migraciones de la base de datos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan migrate\n</code></pre>\n<h2>Enrutamiento</h2>\n<p>Laravel incluye las clases <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Auth\\ForgotPasswordController</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Auth\\ResetPasswordController</span>\n    que contienen la lógica necesaria para enviar enlaces de restablecimiento de contraseña y\n    restablece contraseñas de usuarios mediante correo electrónico. Todas las rutas necesarias para\n    realizar restablecimiento de contraseñas pueden ser generadas usando el comando de Artisan\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:auth</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan make:auth\n</code></pre>\n<h2>Vistas</h2>\n<p>De nuevo, Laravel generará todas las vistas necesarias para el restablecimiento de contraseña\n    cuando el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:auth</span> es ejecutado. Estas vistas están ubicadas en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views/auth/passwords</span>.\n    Eres libre de personalizarlas según sea necesario para tu aplicación.</p>\n<h2>Luego de resetear contraseñas</h2>\n<p>Una vez que has definido las rutas y vistas para restablecer las contraseñas de tus usuarios,\n    puedes acceder a la ruta en tu navegador en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">/password/reset</span>. El <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ForgotPasswordController</span>\n    incluido con el framework ya incluye la lógica para enviar los correos con el enlace de\n    restablecimiento, mientras que <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ResetPasswordController</span> incluye la lógica para\n    restablecer las contraseñas de los usuarios.</p>\n<p>Luego de que una contraseña es restablecida, la sesión del usuario será automáticamente iniciada\n    y será redirigido a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">/home</span>. Puedes personalizar la ubicación de redirección\n    definiendo una propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redirectTo</span> en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ResetPasswordController</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>protected \\$redirectTo = '/dashboard';\n</code></pre>\n<p>Nota</p>\n<p>Por defecto, los tokens para restablecer contraseñas expiran luego de una hora. Puedes cambiar\n    esto mediante la opción de restablecimiento de contraseñas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">expire</span> en tu archivo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/auth.php</span>.</p>\n<h2>Personalización</h2>\n<h4># Personalización de los guards de autenticación</h4>\n<p>En tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">auth.php</span>, puedes configurar múltiples \"guards\", que\n    podrán ser usados para definir el comportamiento de autenticación para múltiples tablas de\n    usuarios. Puedes personalizar el controlador <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ResetPasswordController</span> incluido para\n    usar el guard de tu preferencia sobrescribiendo el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">guard</span> en el controlador.\n    Este método debe retornar una instancia guard:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Auth;\n/**\n* Get the guard to be used during password reset.\n*\n* @return \\Illuminate\\Contracts\\Auth\\StatefulGuard\n*/\nprotected function guard()\n{\n    return Auth::guard('guard-name');\n}\n</code></pre>\n<h4># Personalización del broker de contraseña</h4>\n<p>En tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">auth.php</span>, puedes configurar múltiples \"brokers\" de\n    contraseñas, que pueden ser usados para restablecer contraseñas en múltiples tablas de usuarios.\n    Puedes personalizar los controladores <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ForgotPasswordController</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ResetPasswordController</span>\n    incluidos para usar el broker de tu elección sobrescribiendo el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">broker</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Password;\n/**\n* Get the broker to be used during password reset.\n*\n* @return PasswordBroker\n*/\nprotected function broker()\n{\n    return Password::broker('name');\n}\n</code></pre>\n<h4># Personalización del correo de reseteo</h4>\n<p>Puedes fácilmente modificar la clase de la notificacion usada para enviar el enlace de\n    restablecimiento de contraseña al usuario. Para comenzar, sobrescribe el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sendPasswordResetNotification</span>\n    en tu modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span>. Dentro de este método, puedes enviar la notificación usando\n    cualquier clase que selecciones. El <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$token</span> de restablecimiento de contaseña es el\n    primer argumento recibido por el método:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Send the password reset notification.\n*\n* @param  string  \\$token\n* @return void\n*/\npublic function sendPasswordResetNotification(\\$token)\n{\n    \\$this-&gt;notify(new ResetPasswordNotification(\\$token));\n}\n</code></pre>\n</div>"
      }
    ]
  },
  {
    "titulo": "6.- Profundizando",
    "subtitulo": "",
    "items": [
      {
        "titulo": "Consola Artisan",
        "contenido": "<section>\n  <h1>Consola artesanal</h1>\n  <ul>\n    <li>Introducción\n      <ul>\n        <li>Tinker (REPL)</li>\n      </ul></li>\n    <li>Comandos de escritura\n      <ul>\n        <li>Generando comandos</li>\n        <li>Estructura de mando</li>\n        <li>Comandos de cierre</li>\n      </ul></li>\n    <li>Definición de expectativas de entrada\n      <ul>\n        <li>Argumentos</li>\n        <li>Opciones</li>\n        <li>Matrices de entrada</li>\n        <li>Descripciones de entrada</li>\n      </ul></li>\n    <li>E / S de comando\n      <ul>\n        <li>Recuperando entrada</li>\n        <li>Solicitar información</li>\n        <li>Salida de escritura</li>\n      </ul></li>\n    <li>Registro de comandos</li>\n    <li>Ejecución de comandos mediante programación\n      <ul>\n        <li>Llamada a comandos desde otros comandos</li>\n      </ul></li>\n    <li>Personalización de stub</li>\n  </ul>\n  <p></p>\n  <h2>Introducción</h2>\n  <p>Artisan es la interfaz de línea de comandos incluida con Laravel. Proporciona una serie de comandos útiles que pueden ayudarlo mientras crea su aplicación. Para ver una lista de todos los comandos Artisan disponibles, puede usar el <code>list</code>comando:</p>\n  <pre><code>php artisan list</code></pre>\n  <p>Cada comando también incluye una pantalla de \"ayuda\" que muestra y describe los argumentos y opciones disponibles del comando. Para ver una pantalla de ayuda, preceda el nombre del comando con <code>help</code>:</p>\n  <pre><code>php artisan help migrate</code></pre>\n  <p></p>\n  <h3>Tinker (REPL)</h3>\n  <p>Laravel Tinker es un poderoso REPL para el marco de Laravel, impulsado por el paquete PsySH .</p>\n  <h4>Instalación</h4>\n  <p>Todas las aplicaciones de Laravel incluyen Tinker por defecto. Sin embargo, puede instalarlo manualmente si es necesario usando Composer:</p>\n  <pre><code>composer require laravel/tinker</code></pre>\n  <h4>Uso</h4>\n  <p>Tinker le permite interactuar con toda su aplicación Laravel en la línea de comando, incluido el ORM de Eloquent, trabajos, eventos y más. Para ingresar al entorno de Tinker, ejecute el <code>tinker</code>comando Artisan:</p>\n  <pre><code>php artisan tinker</code></pre>\n  <p>Puede publicar el archivo de configuración de Tinker usando el comando:<code>vendor:publish</code></p>\n  <pre><code>php artisan vendor:publish --provider=\"Laravel\\Tinker\\TinkerServiceProvider\"</code></pre>\n  <blockquote>\n    <div><div></div><p>La <code>dispatch</code>función auxiliar y el <code>dispatch</code>método de la <code>Dispatchable</code>clase dependen de la recolección de basura para colocar el trabajo en la cola. Por lo tanto, cuando use tinker, debe usar o para enviar trabajos.<code>Bus::dispatch</code><code>Queue::push</code></p></div>\n  </blockquote>\n  <h4>Lista blanca de comandos</h4>\n  <p>Tinker utiliza una lista blanca para determinar qué comandos de Artisan pueden ejecutarse dentro de su shell. Por defecto, es posible que encuentre los , , , , , , y comandos. Si desea incluir más comandos en la lista blanca, puede agregarlos a la matriz en su archivo de configuración:<code>clear-compiled</code><code>down</code><code>env</code><code>inspire</code><code>migrate</code><code>optimize</code><code>up</code><code>commands</code><code>tinker.php</code></p>\n  <pre><code>'commands' =&gt; [\n    // App\\Console\\Commands\\ExampleCommand::class,\n],</code></pre>\n  <h4>Clases que no deben tener alias</h4>\n  <p>Por lo general, Tinker asigna automáticamente un alias a las clases según las requiera en Tinker. Sin embargo, es posible que desee nunca asignar un alias a algunas clases. Puede lograr esto enumerando las clases en la <code>dont_alias</code>matriz de su archivo de configuración:<code>tinker.php</code></p>\n  <pre><code>'dont_alias' =&gt; [\n    App\\Models\\User::class,\n],</code></pre>\n  <p></p>\n  <h2>Comandos de escritura</h2>\n  <p>Además de los comandos proporcionados con Artisan, también puede crear sus propios comandos personalizados. Los comandos se almacenan normalmente en el directorio; sin embargo, puede elegir su propia ubicación de almacenamiento siempre que Composer pueda cargar sus comandos.<code>app/Console/Commands</code></p>\n  <p></p>\n  <h3>Generando comandos</h3>\n  <p>Para crear un nuevo comando, use el comando Artisan. Este comando creará una nueva clase de comando en el directorio. No se preocupe si este directorio no existe en su aplicación, ya que se creará la primera vez que ejecute el comando Artisan. El comando generado incluirá el conjunto predeterminado de propiedades y métodos que están presentes en todos los comandos:<code>make:command</code><code>app/Console/Commands</code><code>make:command</code></p>\n  <pre><code>php artisan make:command SendEmails</code></pre>\n  <p></p>\n  <h3>Estructura de mando</h3>\n  <p>Después de generar su comando, debe completar las propiedades <code>signature</code>y <code>description</code>de la clase, que se utilizarán al mostrar su comando en la <code>list</code>pantalla. El <code>handle</code>método se llamará cuando se ejecute su comando. Puede colocar su lógica de comando en este método.</p>\n  <blockquote>\n    <div><div></div><p>Para una mayor reutilización del código, es una buena práctica mantener los comandos de la consola ligeros y dejar que se remitan a los servicios de la aplicación para realizar sus tareas. En el siguiente ejemplo, observe que inyectamos una clase de servicio para hacer el \"trabajo pesado\" de enviar los correos electrónicos.</p></div>\n  </blockquote>\n  <p>Echemos un vistazo a un comando de ejemplo. Tenga en cuenta que podemos inyectar cualquier dependencia que necesitemos en el <code>handle</code>método del comando . El contenedor de servicios de Laravel inyectará automáticamente todas las dependencias que están insinuadas en la firma de este método:</p>\n  <pre><code>&lt;?php\n\nnamespace App\\Console\\Commands;\n\nuse App\\Models\\User;\nuse App\\Support\\DripEmailer;\nuse Illuminate\\Console\\Command;\n\nclass SendEmails extends Command\n{\n    /**\n     * The name and signature of the console command.\n     *\n     * @var string\n     */\n    protected $signature = 'email:send {user}';\n\n    /**\n     * The console command description.\n     *\n     * @var string\n     */\n    protected $description = 'Send drip e-mails to a user';\n\n    /**\n     * Create a new command instance.\n     *\n     * @return void\n     */\n    public function __construct()\n    {\n        parent::__construct();\n    }\n\n    /**\n     * Execute the console command.\n     *\n     * @param  \\App\\Support\\DripEmailer  $drip\n     * @return mixed\n     */\n    public function handle(DripEmailer $drip)\n    {\n        $drip-&gt;send(User::find($this-&gt;argument('user')));\n    }\n}</code></pre>\n  <p></p>\n  <h3>Comandos de cierre</h3>\n  <p>Los comandos basados \u200B\u200Ben cierres proporcionan una alternativa a la definición de comandos de consola como clases. De la misma manera que los cierres de ruta son una alternativa a los controladores, piense en los cierres de comando como una alternativa a las clases de comando. Dentro del <code>commands</code>método de su archivo, Laravel carga el archivo:<code>app/Console/Kernel.php</code><code>routes/console.php</code></p>\n  <pre><code>/**\n * Register the Closure based commands for the application.\n *\n * @return void\n */\nprotected function commands()\n{\n    require base_path('routes/console.php');\n}</code></pre>\n  <p>Aunque este archivo no define rutas HTTP, define puntos de entrada (rutas) basados \u200B\u200Ben consola en su aplicación. Dentro de este archivo, puede definir todas sus rutas basadas en Closure utilizando el método. El método acepta dos argumentos: la firma del comando y un cierre que recibe los argumentos y opciones de los comandos:<code>Artisan::command</code><code>command</code></p>\n  <pre><code>Artisan::command('build {project}', function ($project) {\n    $this-&gt;info(\"Building {$project}!\");\n});</code></pre>\n  <p>El cierre está vinculado a la instancia de comando subyacente, por lo que tiene acceso completo a todos los métodos auxiliares a los que normalmente podría acceder en una clase de comando completa.</p>\n  <h4>Dependencias de sugerencias de tipo</h4>\n  <p>Además de recibir los argumentos y las opciones de su comando, los cierres de comandos también pueden indicar dependencias adicionales que le gustaría que se resolvieran fuera del contenedor de servicios :</p>\n  <pre><code>use App\\Models\\User;\nuse App\\Support\\DripEmailer;\n\nArtisan::command('email:send {user}', function (DripEmailer $drip, $user) {\n    $drip-&gt;send(User::find($user));\n});</code></pre>\n  <h4>Descripciones de los comandos de cierre</h4>\n  <p>Al definir un comando basado en Closure, puede usar el <code>describe</code>método para agregar una descripción al comando. Esta descripción se mostrará cuando ejecute los comandos o :<code>php artisan list</code><code>php artisan help</code></p>\n  <pre><code>Artisan::command('build {project}', function ($project) {\n    $this-&gt;info(\"Building {$project}!\");\n})-&gt;describe('Build the project');</code></pre>\n  <p></p>\n  <h2>Definición de expectativas de entrada</h2>\n  <p>Al escribir comandos de consola, es común recopilar información del usuario a través de argumentos u opciones. Laravel hace que sea muy conveniente definir la entrada que espera del usuario usando la <code>signature</code>propiedad en sus comandos. La <code>signature</code>propiedad le permite definir el nombre, los argumentos y las opciones del comando en una sintaxis única, expresiva y similar a una ruta.</p>\n  <p></p>\n  <h3>Argumentos</h3>\n  <p>Todos los argumentos y opciones proporcionados por el usuario están entre llaves. En el siguiente ejemplo, el comando define un argumento <strong>requerido</strong><code>user</code> ::</p>\n  <pre><code>/**\n * The name and signature of the console command.\n *\n * @var string\n */\nprotected $signature = 'email:send {user}';</code></pre>\n  <p>También puede hacer que los argumentos sean opcionales y definir valores predeterminados para los argumentos:</p>\n  <pre><code>// Optional argument...\nemail:send {user?}\n\n// Optional argument with default value...\nemail:send {user=foo}</code></pre>\n  <p></p>\n  <h3>Opciones</h3>\n  <p>Las opciones, como los argumentos, son otra forma de entrada del usuario. Las opciones tienen como prefijo dos guiones ( <code>--</code>) cuando se especifican en la línea de comandos. Hay dos tipos de opciones: las que reciben un valor y las que no. Las opciones que no reciben un valor sirven como un \"cambio\" booleano. Echemos un vistazo a un ejemplo de este tipo de opción:</p>\n  <pre><code>/**\n * The name and signature of the console command.\n *\n * @var string\n */\nprotected $signature = 'email:send {user} {--queue}';</code></pre>\n  <p>En este ejemplo, el <code>--queue</code>conmutador se puede especificar al llamar al comando Artisan. Si <code>--queue</code>se pasa el cambio, el valor de la opción será <code>true</code>. De lo contrario, el valor será <code>false</code>:</p>\n  <pre><code>php artisan email:send 1 --queue</code></pre>\n  <p></p>\n  <h4>Opciones con valores</h4>\n  <p>A continuación, echemos un vistazo a una opción que espera un valor. Si el usuario debe especificar un valor para una opción, agregue un sufijo al nombre de la opción con un <code>=</code>signo:</p>\n  <pre><code>/**\n * The name and signature of the console command.\n *\n * @var string\n */\nprotected $signature = 'email:send {user} {--queue=}';</code></pre>\n  <p>En este ejemplo, el usuario puede pasar un valor para la opción así:</p>\n  <pre><code>php artisan email:send 1 --queue=default</code></pre>\n  <p>Puede asignar valores predeterminados a las opciones especificando el valor predeterminado después del nombre de la opción. Si el usuario no pasa ningún valor de opción, se utilizará el valor predeterminado:</p>\n  <pre><code>email:send {user} {--queue=default}</code></pre>\n  <p></p>\n  <h4>Atajos de opciones</h4>\n  <p>Para asignar un atajo al definir una opción, puede especificarlo antes del nombre de la opción y usar un | delimitador para separar el acceso directo del nombre completo de la opción:</p>\n  <pre><code>email:send {user} {--Q|queue}</code></pre>\n  <p></p>\n  <h3>Matrices de entrada</h3>\n  <p>Si desea definir argumentos u opciones para esperar entradas de matriz, puede usar el <code>*</code>carácter. Primero, echemos un vistazo a un ejemplo que especifica un argumento de matriz:</p>\n  <pre><code>email:send {user*}</code></pre>\n  <p>Al llamar a este método, los <code>user</code>argumentos pueden pasarse en orden a la línea de comando. Por ejemplo, el siguiente comando establecerá el valor de <code>user</code>en :<code>['foo', 'bar']</code></p>\n  <pre><code>php artisan email:send foo bar</code></pre>\n  <p>Al definir una opción que espera una entrada de matriz, cada valor de opción pasado al comando debe tener el prefijo del nombre de la opción:</p>\n  <pre><code>email:send {user} {--id=*}\n\nphp artisan email:send --id=1 --id=2</code></pre>\n  <p></p>\n  <h3>Descripciones de entrada</h3>\n  <p>Puede asignar descripciones a los argumentos y opciones de entrada separando el parámetro de la descripción con dos puntos. Si necesita un poco más de espacio para definir su comando, no dude en distribuir la definición en varias líneas:</p>\n  <pre><code>/**\n * The name and signature of the console command.\n *\n * @var string\n */\nprotected $signature = 'email:send\n                        {user : The ID of the user}\n                        {--queue= : Whether the job should be queued}';</code></pre>\n  <p></p>\n  <h2>E / S de comando</h2>\n  <p></p>\n  <h3>Recuperando entrada</h3>\n  <p>Mientras su comando se está ejecutando, obviamente necesitará acceder a los valores de los argumentos y opciones aceptados por su comando. Para hacerlo, puede utilizar los métodos <code>argument</code>y <code>option</code>:</p>\n  <pre><code>/**\n * Execute the console command.\n *\n * @return mixed\n */\npublic function handle()\n{\n    $userId = $this-&gt;argument('user');\n\n    //\n}</code></pre>\n  <p>Si necesita recuperar todos los argumentos como un <code>array</code>, llame al <code>arguments</code>método:</p>\n  <pre><code>$arguments = $this-&gt;arguments();</code></pre>\n  <p>Las opciones se pueden recuperar con la misma facilidad que los argumentos utilizando el <code>option</code>método. Para recuperar todas las opciones como una matriz, llame al <code>options</code>método:</p>\n  <pre><code>// Retrieve a specific option...\n$queueName = $this-&gt;option('queue');\n\n// Retrieve all options...\n$options = $this-&gt;options();</code></pre>\n  <p>Si el argumento u opción no existe, <code>null</code>se devolverá.</p>\n  <p></p>\n  <h3>Solicitar información</h3>\n  <p>Además de mostrar la salida, también puede pedirle al usuario que proporcione información durante la ejecución de su comando. El <code>ask</code>método solicitará al usuario la pregunta dada, aceptará su entrada y luego devolverá la entrada del usuario a su comando:</p>\n  <pre><code>/**\n * Execute the console command.\n *\n * @return mixed\n */\npublic function handle()\n{\n    $name = $this-&gt;ask('What is your name?');\n}</code></pre>\n  <p>El <code>secret</code>método es similar a <code>ask</code>, pero la entrada del usuario no será visible para ellos mientras escribe en la consola. Este método es útil cuando se solicita información confidencial, como una contraseña:</p>\n  <pre><code>$password = $this-&gt;secret('What is the password?');</code></pre>\n  <h4>Pidiendo confirmación</h4>\n  <p>Si necesita pedirle al usuario una simple confirmación, puede utilizar el <code>confirm</code>método. De forma predeterminada, este método volverá <code>false</code>. Sin embargo, si el usuario ingresa <code>y</code>o <code>yes</code>responde a la solicitud, el método regresará <code>true</code>.</p>\n  <pre><code>if ($this-&gt;confirm('Do you wish to continue?')) {\n    //\n}</code></pre>\n  <h4>Autocompletar</h4>\n  <p>El <code>anticipate</code>método se puede utilizar para proporcionar autocompletar para posibles opciones. El usuario aún puede elegir cualquier respuesta, independientemente de las sugerencias de autocompletar:</p>\n  <pre><code>$name = $this-&gt;anticipate('What is your name?', ['Taylor', 'Dayle']);</code></pre>\n  <p>Alternativamente, puede pasar un Closure como segundo argumento del <code>anticipate</code>método. El cierre se llamará cada vez que el usuario escriba un carácter de entrada. El cierre debe aceptar un parámetro de cadena que contenga la entrada del usuario hasta ahora y devolver una matriz de opciones para autocompletar:</p>\n  <pre><code>$name = $this-&gt;anticipate('What is your name?', function ($input) {\n    // Return auto-completion options...\n});</code></pre>\n  <h4>Preguntas de selección múltiple</h4>\n  <p>Si necesita darle al usuario un conjunto predefinido de opciones, puede usar el <code>choice</code>método. Puede configurar el índice de matriz del valor predeterminado que se devolverá si no se elige ninguna opción:</p>\n  <pre><code>$name = $this-&gt;choice('What is your name?', ['Taylor', 'Dayle'], $defaultIndex);</code></pre>\n  <p>Además, el <code>choice</code>método acepta argumentos cuarto y quinto opcionales para determinar el número máximo de intentos para seleccionar una respuesta válida y si se permiten selecciones múltiples:</p>\n  <pre><code>$name = $this-&gt;choice(\n    'What is your name?',\n    ['Taylor', 'Dayle'],\n    $defaultIndex,\n    $maxAttempts = null,\n    $allowMultipleSelections = false\n);</code></pre>\n  <p></p>\n  <h3>Salida de escritura</h3>\n  <p>Para enviar la salida a la consola, utilice los <code>line</code>, <code>info</code>, <code>comment</code>, <code>question</code>y <code>error</code>métodos. Cada uno de estos métodos utilizará colores ANSI apropiados para su propósito. Por ejemplo, mostremos información general al usuario. Normalmente, el <code>info</code>método se mostrará en la consola como texto verde:</p>\n  <pre><code>/**\n * Execute the console command.\n *\n * @return mixed\n */\npublic function handle()\n{\n    $this-&gt;info('Display this on the screen');\n}</code></pre>\n  <p>Para mostrar un mensaje de error, use el <code>error</code>método. El texto del mensaje de error generalmente se muestra en rojo:</p>\n  <pre><code>$this-&gt;error('Something went wrong!');</code></pre>\n  <p>Si desea mostrar una salida de consola simple y sin color, use el <code>line</code>método:</p>\n  <pre><code>$this-&gt;line('Display this on the screen');</code></pre>\n  <h4>Diseños de mesa</h4>\n  <p>El <code>table</code>método facilita el formateo correcto de varias filas / columnas de datos. Simplemente pase los encabezados y filas al método. El ancho y la altura se calcularán dinámicamente en función de los datos proporcionados:</p>\n  <pre><code>$headers = ['Name', 'Email'];\n\n$users = App\\Models\\User::all(['name', 'email'])-&gt;toArray();\n\n$this-&gt;table($headers, $users);</code></pre>\n  <h4>Barras de progreso</h4>\n  <p>Para tareas de ejecución prolongada, puede resultar útil mostrar un indicador de progreso. Usando el objeto de salida, podemos iniciar, avanzar y detener la barra de progreso. Primero, defina el número total de pasos que recorrerá el proceso. Luego, avance la barra de progreso después de procesar cada elemento:</p>\n  <pre><code>$users = App\\Models\\User::all();\n\n$bar = $this-&gt;output-&gt;createProgressBar(count($users));\n\n$bar-&gt;start();\n\nforeach ($users as $user) {\n    $this-&gt;performTask($user);\n\n    $bar-&gt;advance();\n}\n\n$bar-&gt;finish();</code></pre>\n  <p>Para opciones más avanzadas, consulte la documentación del componente de la barra de progreso de Symfony .</p>\n  <p></p>\n  <h2>Registro de comandos</h2>\n  <p>Debido a la <code>load</code>llamada al método en el <code>commands</code>método del kernel de su consola , todos los comandos dentro del directorio se registrarán automáticamente con Artisan. De hecho, puede realizar llamadas adicionales al método para escanear otros directorios en busca de comandos Artisan:<code>app/Console/Commands</code><code>load</code></p>\n  <pre><code>/**\n * Register the commands for the application.\n *\n * @return void\n */\nprotected function commands()\n{\n    $this-&gt;load(__DIR__.'/Commands');\n    $this-&gt;load(__DIR__.'/MoreCommands');\n\n    // ...\n}</code></pre>\n  <p>También puede registrar comandos manualmente agregando su nombre de clase a la <code>$commands</code>propiedad de su archivo. Cuando Artisan arranca, todos los comandos enumerados en esta propiedad serán resueltos por el contenedor de servicios y registrados con Artisan:<code>app/Console/Kernel.php</code></p>\n  <pre><code>protected $commands = [\n    Commands\\SendEmails::class\n];</code></pre>\n  <p></p>\n  <h2>Ejecución de comandos mediante programación</h2>\n  <p>A veces, es posible que desee ejecutar un comando Artisan fuera de la CLI. Por ejemplo, es posible que desee disparar un comando Artisan desde una ruta o controlador. Puede usar el <code>call</code>método en la <code>Artisan</code>fachada para lograr esto. El <code>call</code>método acepta el nombre o la clase del comando como primer argumento y una matriz de parámetros del comando como segundo argumento. Se devolverá el código de salida:</p>\n  <pre><code>Route::get('/foo', function () {\n    $exitCode = Artisan::call('email:send', [\n        'user' =&gt; 1, '--queue' =&gt; 'default'\n    ]);\n\n    //\n});</code></pre>\n  <p>Alternativamente, puede pasar el comando Artisan completo al <code>call</code>método como una cadena:</p>\n  <pre><code>Artisan::call('email:send 1 --queue=default');</code></pre>\n  <p>Usando el <code>queue</code>método en la <code>Artisan</code>fachada, incluso puede poner en cola comandos Artisan para que sean procesados \u200B\u200Ben segundo plano por sus trabajadores de cola . Antes de usar este método, asegúrese de haber configurado su cola y está ejecutando un detector de cola:</p>\n  <pre><code>Route::get('/foo', function () {\n    Artisan::queue('email:send', [\n        'user' =&gt; 1, '--queue' =&gt; 'default'\n    ]);\n\n    //\n});</code></pre>\n  <p>También puede especificar la conexión o cola a la que se debe enviar el comando Artisan:</p>\n  <pre><code>Artisan::queue('email:send', [\n    'user' =&gt; 1, '--queue' =&gt; 'default'\n])-&gt;onConnection('redis')-&gt;onQueue('commands');</code></pre>\n  <h4>Pasar valores de matriz</h4>\n  <p>Si su comando define una opción que acepta una matriz, puede pasar una matriz de valores a esa opción:</p>\n  <pre><code>Route::get('/foo', function () {\n    $exitCode = Artisan::call('email:send', [\n        'user' =&gt; 1, '--id' =&gt; [5, 13]\n    ]);\n});</code></pre>\n  <h4>Pasar valores booleanos</h4>\n  <p>Si necesita especificar el valor de una opción que no acepta valores de cadena, como la <code>--force</code>marca en el comando, debe pasar o :<code>migrate:refresh</code><code>true</code><code>false</code></p>\n  <pre><code>$exitCode = Artisan::call('migrate:refresh', [\n    '--force' =&gt; true,\n]);</code></pre>\n  <p></p>\n  <h3>Llamada a comandos desde otros comandos</h3>\n  <p>A veces es posible que desee llamar a otros comandos desde un comando Artisan existente. Puede hacerlo utilizando el <code>call</code>método. Este <code>call</code>método acepta el nombre del comando y una matriz de parámetros del comando:</p>\n  <pre><code>/**\n * Execute the console command.\n *\n * @return mixed\n */\npublic function handle()\n{\n    $this-&gt;call('email:send', [\n        'user' =&gt; 1, '--queue' =&gt; 'default'\n    ]);\n\n    //\n}</code></pre>\n  <p>Si desea llamar a otro comando de consola y suprimir toda su salida, puede usar el <code>callSilent</code>método. El <code>callSilent</code>método tiene la misma firma que el <code>call</code>método:</p>\n  <pre><code>$this-&gt;callSilent('email:send', [\n    'user' =&gt; 1, '--queue' =&gt; 'default'\n]);</code></pre>\n  <p></p>\n  <h2>Personalización de stub</h2>\n  <p>Los <code>make</code>comandos de la consola Artisan se utilizan para crear una variedad de clases, como controladores, trabajos, migraciones y pruebas. Estas clases se generan utilizando archivos \"stub\" que se rellenan con valores basados \u200B\u200Ben su entrada. Sin embargo, es posible que a veces desee realizar pequeños cambios en los archivos generados por Artisan. Para lograr esto, puede usar el comando para publicar los stubs más comunes para personalizarlos:<code>stub:publish</code></p>\n  <pre><code>php artisan stub:publish</code></pre>\n  <p>Los stubs publicados se ubicarán dentro de un <code>stubs</code>directorio en la raíz de su aplicación. Cualquier cambio que realice en estos stubs se reflejará cuando genere sus clases correspondientes utilizando los <code>make</code>comandos de Artisan .</p>\n</section>"
      },
      {
        "titulo": "Radio difusión",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Broadcasting</h1>\n<ul>\n    <li>\n        Introducción\n        <ul>\n            <li>Configuración</li>\n            <li>Prerrequisitos del driver</li>\n        </ul>\n    </li>\n    <li>\n        Descripción general\n        <ul>\n            <li>Usando una aplicación de ejemplo</li>\n        </ul>\n    </li>\n    <li>\n        Definiendo eventos de transmisión\n        <ul>\n            <li>Nombre de la transmisión</li>\n            <li>Datos de la transmisión</li>\n            <li>Cola de la transmisión</li>\n            <li>Condiciones de la transmisión</li>\n        </ul>\n    </li>\n    <li>\n        Autorizando canales\n        <ul>\n            <li>Definiendo rutas de autorización</li>\n            <li>Definiendo callbacks de autorización</li>\n            <li>Definiendo clases de canales</li>\n        </ul>\n    </li>\n    <li>\n        Transmitiendo eventos\n        <ul>\n            <li>Sólo a otros</li>\n        </ul>\n    </li>\n    <li>\n        Recibiendo transmisiones\n        <ul>\n            <li>Instalando Laravel Echo</li>\n            <li>Escuchando eventos</li>\n            <li>Dejando un canal</li>\n            <li>Nombres de espacio</li>\n        </ul>\n    </li>\n    <li>\n        Canales de presencia\n        <ul>\n            <li>Autorizando canales de presencia</li>\n            <li>Uniéndose a canales de presencia</li>\n            <li>Transmitiendo a canales de presencia</li>\n        </ul>\n    </li>\n    <li>Eventos del cliente</li>\n    <li>Notificaciones</li>\n</ul>\n<h2>Introducción</h2>\n<p>En muchas aplicaciones web modernas, los WebSockets son usados para implementar interfaces de\n    usuarios actualizadas en tiempo real. Cuando algún dato es actualizado en el servidor, un\n    mensaje es típicamente enviado a través de una conexión WebSocket para ser manejado por el\n    cliente. Esto proporciona una alternativa más robusta y eficiente para monitorear continuamente\n    tu aplicación en busca de cambios.</p>\n<p>\n    Para asistirte en la construcción de ese tipo de aplicaciones, Laravel hace fácil \"emitir\" tus\n    eventos\n    a través de una conexión WebSocket. Emitir tus eventos te permite compartir los mismos nombres\n    de eventos entre tu código del lado del servidor y tu aplicación JavaScript del lado de cliente.\n</p>\n<p>TIP</p>\n<p>\n    Antes de sumergirnos en la emisión de eventos, asegurate de haber leído toda la documentación de\n    Laravel sobre\n    eventos y listeners\n    .\n</p>\n<h3># Configuración</h3>\n<p>\n    Toda la configuración de transmisión de eventos de tu aplicación está almacenada en el archivo\n    de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/broadcasting.php</span>. Laravel soporta múltiples drivers de\n    transmisión:\n    canales de Pusher\n    , Redis y un driver <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">log</span> para desarrollo local y depuración. Adicionalmente, un\n    driver <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span> es incluido, que te permite deshabilitar totalmente las emisiones. Un\n    ejemplo de configuración para cada uno de los drivers está incluido en el archivo de\n    configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/broadcasting.php</span>.\n</p>\n<h4># Proveedor de servicios Broadcast</h4>\n<p>Antes de transmitir cualquier evento, necesitarás primero registrar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Providers\\BroadcastServiceProvider</span>.\n    En aplicaciones de Laravel nuevas, sólo necesitas descomentar este proveedor en el arreglo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">providers</span> de tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/app.php</span>. Este\n    proveedor te permitirá registrar las rutas de autorización del broadcast y los callbacks.</p>\n<h4># Token CSRF</h4>\n<p>Laravel Echo necesitará acceso al token CSRF de la sesión actual. Debes verificar que el elemento\n    HTML <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">head</span> de tu aplicación define una etiqueta <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">meta</span> que contiene el\n    token CSRF:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;meta name=\"csrf-token\" content=\"{{ csrf_token() }}\"&gt;\n</code></pre>\n<h3># Prerrequisitos del driver</h3>\n<h4># Canales de Pusher</h4>\n<p>\n    Si estás transmitiendo tus eventos mediante\n    canales de Pusher\n    , debes instalar el SDK de PHP para canales de Pusher mediante el administrador de paquetes\n    Composer:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>composer require pusher/pusher-php-server \"~4.0\"\n</code></pre>\n<p>Luego, debes configurar tus credenciales del canal en el archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/broadcasting.php</span>.\n    Un ejemplo de configuración de canal está incluido en este archivo, permitiéndote especificar\n    rápidamente la clave del canal, contraseña y ID de la aplicación. La configuración de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pusher</span>\n    del archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/broadcasting.php</span> también te permite especificar\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">options</span> adicionales que son soportadas por canales, como el cluster:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'options' =&gt; [\n    'cluster' =&gt; 'eu',\n    'useTLS' =&gt; true\n],\n</code></pre>\n<p>Al usar canales y Laravel Echo, debes especificar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pusher</span> como tu transmisor deseado\n    al instanciar la instancia de Echo en tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/js/bootstrap.js</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>import Echo from \"laravel-echo\";\nwindow.Pusher = require('pusher-js');\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: 'your-pusher-channels-key'\n});\n</code></pre>\n<h4># Redis</h4>\n<p>Si estás usando el transmisor de Redis, debes instalar la librería Predis:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>composer require predis/predis\n</code></pre>\n<p>El transmisor de Redis transmitirá mensajes usando las característica pub / sub de Redis; sin\n    embargo, necesitarás unir esto con un servidor de WebSocket que puede recibir mensajes desde\n    Redis y emitirlos a tus canales de WebSocket.</p>\n<p>Cuando el transmisor de Redis publica un evento, éste será publicado en los nombres de canales\n    especificados en el evento y la carga será una cadena codificada de JSON que contiene el nombre\n    del evento, una carga <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">data</span> y el usuario que genero el ID de socket del evento (si\n    aplica).</p>\n<h4># Socket.IO</h4>\n<p>Si vas a unir el transmisor de Redis con un servidor Socket.IO, necesitarás incluir la librería\n    de Socket.IO en tu aplicación. Puedes instalarla mediante el gestor de paquetes NPM:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>npm install --save socket.io-client\n</code></pre>\n<p>Luego, necesitarás instanciar Echo con el conector <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">socket.io</span> y un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">host</span>.\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>import Echo from \"laravel-echo\"\nwindow.io = require('socket.io-client');\nwindow.Echo = new Echo({\n    broadcaster: 'socket.io',\n    host: window.location.hostname + ':6001'\n});\n</code></pre>\n<p>\n    Finalmente, necesitarás ejecutar un servidor de Socket.IO compatible. Laravel no incluye la\n    implementación de un servidor Socket.IO; sin embargo, un servidor de Socket.IO de la comunidad\n    es actualmente mantenido en el repositorio de GitHub\n    tlaverdure/laravel-echo-server\n    .\n</p>\n<h4># Prerrequisitos de la cola</h4>\n<p>Antes de transmitir eventos, también necesitarás configurar y ejecutar un listener de colas. Toda\n    la transmisión de eventos es realizada mediante trabajos en cola para que el tiempo de respuesta\n    de tu aplicación no se vea necesariamente afectado.</p>\n<h2>Descripción general</h2>\n<p>\n    La transmisión de eventos de Laravel te permite transmitir tus eventos del lado del servidor de\n    Laravel a tu aplicación JavaScript del lado del cliente usando un enfoque basado en drivers a\n    los WebSockets. Actualmente, Laravel viene con drivers de\n    canales de Pusher\n    y Redis. Los eventos pueden ser fácilmente consumidos en el lado del cliente usando el paquete\n    de JavaScript Laravel Echo.\n</p>\n<p>Los eventos son transmitidos mediante \"canales\", que pueden ser definidos como públicos o\n    privados. Cualquier visitante en tu aplicación puede suscribirse a una canal público sin\n    necesidad de autenticación o autorización; sin embargo, para poder suscribirse a canales\n    privados, un usuario debe estar autenticado y autorizado para escuchar en dicho canal.</p>\n<h3># Usando una aplicación de ejemplo</h3>\n<p>\n    Antes de sumergirnos en cada componente de la transmisión de eventos, vamos a ver un resumen\n    usando una tienda virtual como ejemplo. No discutiremos los detalles sobre configurar\n    canales de Pusher\n    o Laravel Echo dado que éstos será discutido a detalle en otras secciones de esta documentación.\n</p>\n<p>En nuestra aplicación, vamos a asumir que tenemos una página que permite a los usuarios ver el\n    estado de envío de sus ordenes. Vamos también a asumir que un evento\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ShippingStatusUpdated</span> es ejecutado cuando un estado de envío es procesado por la\n    aplicación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>event(new ShippingStatusUpdated(\\$update));\n</code></pre>\n<h4># Interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ShouldBroadcast</span></h4>\n<p>Cuando un usuario está viendo una de sus ordenes, no que queremos que tengan que refrescar la\n    página para ver las actualizaciones del estado. En su lugar, queremos transmitir las\n    actualizaciones a la aplicación a medida que son creadas. Así que, necesitamos marcar el evento\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ShippingStatusUpdated</span> con la interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ShouldBroadcast</span>. Esto instruirá\n    a Laravel para que transmita el evento cuando es ejecutado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Events;\nuse Illuminate\\Broadcasting\\Channel;\nuse Illuminate\\Queue\\SerializesModels;\nuse Illuminate\\Broadcasting\\PrivateChannel;\nuse Illuminate\\Broadcasting\\PresenceChannel;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\nclass ShippingStatusUpdated implements ShouldBroadcast\n{\n    /**\n    * Information about the shipping status update.\n    *\n    * @var string\n    */\n    public \\$update;\n}\n</code></pre>\n<p>La interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ShouldBroadcast</span> requiere que nuestro evento defina un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">broadcastOn</span>.\n    Este método es responsable de retornar los canales en los que el evento debería transmitir. Un\n    stub vacío para este metodo está definido en las clases de eventos generadas, así que sólo\n    necesitamos rellenar sus detalles. Sólo queremos que el creador de la orden sea capaz de ver las\n    actualizaciones de estado, así que transmitiremos el evento en un canal privado que está\n    enlazado a la orden:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the channels the event should broadcast on.\n*\n* @return \\Illuminate\\Broadcasting\\PrivateChannel\n*/\npublic function broadcastOn()\n{\n    return new PrivateChannel('order.'.\\$this-&gt;update-&gt;order_id);\n}\n</code></pre>\n<h4># Autorizando canales</h4>\n<p>Recuerda, los usuarios deben ser autorizados para escuchar en canales privados. Podemos definir\n    las reglas de autorización de nuestro canal en el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">routes/channels.php</span>. En\n    este ejemplo, necesitamos verificar que cualquier usuario intentando escuchar en el canal\n    privado <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">order.1</span> es realmente el creador de la orden:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Broadcast::channel('order.{orderId}', function (\\$user, \\$orderId) {\n    return \\$user-&gt;id === Order::findOrNew(\\$orderId)-&gt;user_id;\n});\n</code></pre>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">channel</span> acepta dos argumentos: el nombre del canal y un callback que\n    retorna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span> indicando si el usuario está autorizado para\n    escuchar en el canal.</p>\n<p>Todos los callbacks de autorización recibien al usuario actualmente autenticado como primer\n    argumento y cualquier paremetro adicional como siguientes argumentos. En este ejemplo, estamos\n    usando el placeholder <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">{orderId}</span> para indicar que la porción \"ID\" del nombre del\n    canal es un wildcard.</p>\n<h4># Escuchar transmisiones de eventos</h4>\n<p>Luego, todo lo que queda es escuchar el evento en nuestra aplicación de JavaScript. Podemos hacer\n    esto usando Laravel Echo. Primero, usaremos el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">private</span> para suscribirnos a\n    un canal privado. Luego, podemos usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">listen</span> para escuchar el evento\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ShippingStatusUpdated</span>. Por defecto, todas las propiedades públicas del evento serán\n    incluidas en el evento de transmisión:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Echo.private(`order.\\${orderId}`)\n    .listen('ShippingStatusUpdated', (e) =&gt; {\n        console.log(e.update);\n    });\n</code></pre>\n<h2>Definiendo la transmisión de eventos</h2>\n<p>Para informar a Laravel que un evento dado debería ser transmitido, implementa la interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast</span>\n    en la clase del evento. Esta interfaz ya está importada en todas las clases de eventos generadas\n    por el framework para que así puedas agregarla fácilmente a tus eventos.</p>\n<p>La interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ShouldBroadcast</span> requiere que implementes un sólo método: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">broadcastOn</span>.\n    El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">broadcastOn</span> debería retornar un canal o un arreglo de canales en los que\n    el evento debería transmitirse. Los canales deben ser instancias de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Channel</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">PrivateChannel</span>\n    o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">PresenceChannel</span>. Las instancias de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Channel</span> representan canales\n    públicos a los que cualquier usuario puede suscribirse mientras que <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">PrivateChannels</span>\n    y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">PresenceChannels</span> representan canales privados que requieren autorización:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Events;\nuse App\\User;\nuse Illuminate\\Broadcasting\\Channel;\nuse Illuminate\\Queue\\SerializesModels;\nuse Illuminate\\Broadcasting\\PrivateChannel;\nuse Illuminate\\Broadcasting\\PresenceChannel;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\nclass ServerCreated implements ShouldBroadcast\n{\n    use SerializesModels;\n    public \\$user;\n    /**\n    * Create a new event instance.\n    *\n    * @return void\n    */\n    public function __construct(User \\$user)\n    {\n        \\$this-&gt;user = \\$user;\n    }\n    /**\n    * Get the channels the event should broadcast on.\n    *\n    * @return Channel|array\n    */\n    public function broadcastOn()\n    {\n        return new PrivateChannel('user.'.\\$this-&gt;user-&gt;id);\n    }\n}\n</code></pre>\n<p>Luego, sólo necesitas ejecutar el evento como normalmente lo harías. Una vez que el evento ha\n    sido ejecutado, un trabajo en cola transmitirá automáticamente el evento a través de tu driver\n    de transmisión especificado.</p>\n<h3># Nombre de la transmisión</h3>\n<p>Por defecto, Laravel transmitirá el evento usando el nombre de clase del evento. Sin embargo,\n    puedes personalizar el nombre de la transmisión definiendo un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">broadcastAs</span> en\n    el evento:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* The event's broadcast name.\n*\n* @return string\n*/\npublic function broadcastAs()\n{\n    return 'server.created';\n}\n</code></pre>\n<p>Si personalizas el nombre de la transmisión usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">broadcastAs</span>, debes\n    asegurarte de registrar tu listener prefijándolo con un caracter <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.</span>. Esto instruíra\n    a Echo a no agregar el nombre de espacio de la aplicación al evento:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>.listen('.server.created', function (e) {\n    ....\n});\n</code></pre>\n<h3># Datos de la transmisión</h3>\n<p>Cuando un evento es transmitido, todas sus propiedades <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public</span> son automáticamente\n    serializadas y transmitidas como carga del evento, permitiéndote acceder a cualquiera de sus\n    datos públicos desde tu aplicación de JavaScript. Así que, por ejemplo, si tu evento tiene una\n    sola propiedad pública <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$user</span> que contiene un modelo de Eloquent, la carga de\n    transmisión del evento sería:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>{\n    \"user\": {\n        \"id\": 1,\n        \"name\": \"Patrick Stewart\"\n        ...\n    }\n}\n</code></pre>\n<p>Sin embargo, si deseas tener mayor control sobre la carga transmitida, puedes agregar un método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">broadcastWith</span> a tu evento. Este método debería retornar el arreglo de datos que\n    deseas transmitir como la carga del evento:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the data to broadcast.\n*\n* @return array\n*/\npublic function broadcastWith()\n{\n    return ['id' =&gt; \\$this-&gt;user-&gt;id];\n}\n</code></pre>\n<h3># Cola de transmisión</h3>\n<p>Por defecto, cada evento transmitido es colocado en la cola por defecto para la conexión de cola\n    por defecto especificada en tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue.php</span>. Puedes\n    personalizar la cola usada por el transmisor definiendo una propiedad\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">broadcastQueue</span> en la clase de tu evento. Esta propiedad debería especificar el\n    nombre de la cola que deseas usar al transmitir:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* The name of the queue on which to place the event.\n*\n* @var string\n*/\npublic \\$broadcastQueue = 'your-queue-name';\n</code></pre>\n<p>Si quieres transmitir tu evento usando la cola <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sync</span> en lugar del driver de cola por\n    defecto, puedes implementar la interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ShouldBroadcastNow</span> en lugar de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ShouldBroadcast</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcastNow;\nclass ShippingStatusUpdated implements ShouldBroadcastNow\n{\n    //\n}\n</code></pre>\n<h3># Condiciones de la transmisión</h3>\n<p>Algunas veces quieres transmitir tu evento sólo si una condición dada es verdadera. Puedes\n    definir estas condiciones agregando un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">broadcastWhen</span> a la clase de tu\n    evento:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Determine if this event should broadcast.\n*\n* @return bool\n*/\npublic function broadcastWhen()\n{\n    return \\$this-&gt;value &gt; 100;\n}\n</code></pre>\n<h2>Autorizando canales</h2>\n<p>Los canales privados requieren que autorizes que el usuario actualmente autenticado puede\n    escuchar en el canal privado. Esto es logrado haciendo una solicitud HTTP a tu aplicación de\n    Laravel con el nombre del canal y permitiendo a tu aplicación de terminar si el usuario puede\n    escuchar en dicho canal. Al usar Laravel Echo, la solicitud HTTP para autorizar suscripciones a\n    canales privados será realizada automáticamente; sin embargo, si necesitas definir las rutas\n    necesarias para responder a estas solicitudes.</p>\n<h3># Definiendo rutas de autorización</h3>\n<p>Afortunadamente, Laravel hace que sea fácil definir las rutas para responder a las solicitudes de\n    autorización de canales. En el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">BroadcastServiceProvider</span> incluido con tu aplicación\n    de Laravel, verás una llamada al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Broadcast::routes</span>. Este método registrará\n    la ruta <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">/broadcasting/auth</span> para manejar las solicitudes de autorización:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Broadcast::routes();\n</code></pre>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Broadcast::routes</span> automáticamente coloca sus rutas dentro del grupo de\n    middleware <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">web</span>; sin embargo, puedes pasar un arreglo de atributos de ruta al método\n    si te gustaría personalizar los atributos asignados:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Broadcast::routes(\\$attributes);\n</code></pre>\n<h4># Personalizando endpoints de autorización</h4>\n<p>Por defecto, Echo usará el endpoint <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">/broadcasting/auth</span> para autorizar acceso a\n    canales. Sin embargo, puedes especificar tus propios endpoints de autorización pasando la opción\n    de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">authEndpoint</span> a tu instancia de Echo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>window.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: 'your-pusher-channels-key',\n    authEndpoint: '/custom/endpoint/auth'\n});\n</code></pre>\n<h3># Definiendo callbacks de autorización</h3>\n<p>Luego, necesitamos definir la lógica que realizará la autorización del canal. Esto es hecho en el\n    archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">routes/channels.php</span> que es incluido con tu aplicación. En este archivo,\n    puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Broadcast::channel</span> para registrar callbacks de autorización\n    de canales:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Broadcast::channel('order.{orderId}', function (\\$user, \\$orderId) {\n    return \\$user-&gt;id === Order::findOrNew(\\$orderId)-&gt;user_id;\n});\n</code></pre>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">channel</span> acepta dos argumentos: el nombre del canal y un callback que\n    retorna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span> indicando si el usuario está autorizado para\n    escuchar el canal.</p>\n<p>Todos los callbacks de autorización reciben al usuario actualmente autenticado como primer\n    argumento y cualquier parametro wildcard como sus argumentos siguientes. En este ejemplo,\n    estamos usando el placeholder <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">{orderId}</span> para indicar la porción \"ID\" del nombre del\n    canal es un wildcard.</p>\n<h4># Enlace de modelos del callback de autorización</h4>\n<p>Igual que las rutas HTTP, las rutas de los canales pueden tomar ventaja de modelo de enlace de\n    rutas de forma implícita y explícita. Por ejemplo, en lugar de recibir la cadena o ID númerico\n    de la orden, puedes solicitar una instancia del modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Order</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use App\\Order;\nBroadcast::channel('order.{order}', function (\\$user, Order \\$order) {\n    return \\$user-&gt;id === \\$order-&gt;user_id;\n});\n</code></pre>\n<h4># Autenticación del callback de autorización</h4>\n<p>Los canales privados y de presencia autentican al usuario actual a través de la protección de\n    autenticación por defecto de la aplicacion. Si el usuario no está autenticado, la autorizacion\n    del canal es automáticamente negada y el callback de autorización nunca se ejecuta. Sin embargo,\n    puedes asignar múltiples protecciones personalizadas que deben autenticar la solicitud entrante\n    si es necesario:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Broadcast::channel('channel', function() {\n    // ...\n}, ['guards' =&gt; ['web', 'admin']]);\n</code></pre>\n<h3># Definiendo clases de canales</h3>\n<p>Si tu aplicación está consumiendo muchos canales diferentes, tu archivo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">routes/channels.php</span> podría volverse voluminoso. Así que, en lugar de usar Closures\n    para autorizar canales, puedes usar clases de canales. Para generar una clase de canal, usa el\n    comando de artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:channel</span>. Este comando colocará una nueva clase de canal en\n    el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App/Broadcasting</span>.</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan make:channel OrderChannel\n</code></pre>\n<p>Luego, registra tu canal en tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">routes/channels.php</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use App\\Broadcasting\\OrderChannel;\nBroadcast::channel('order.{order}', OrderChannel::class);\n</code></pre>\n<p>Finalmente, puedes colocar la lógica de autorización para tu canal en el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">join</span>\n    de la clase del canal. Este método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">join</span> contendrá la misma lógica que típicamente\n    habrías colocado en el Closure de tu canal de autorización. Puedes también tomar ventaja del\n    modelo de enlace de canales:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Broadcasting;\nuse App\\User;\nuse App\\Order;\nclass OrderChannel\n{\n    /**\n    * Create a new channel instance.\n    *\n    * @return void\n    */\n    public function __construct()\n    {\n        //\n    }\n    /**\n    * Authenticate the user's access to the channel.\n    *\n    * @param  \\App\\User  \\$user\n    * @param  \\App\\Order  \\$order\n    * @return array|bool\n    */\n    public function join(User \\$user, Order \\$order)\n    {\n        return \\$user-&gt;id === \\$order-&gt;user_id;\n    }\n}\n</code></pre>\n<p>TIP</p>\n<p>Como muchas otras clases en Laravel, las clases de canales automáticamente serán resueltas por el\n    contenedor de servicios. Así que, puedes declarar el tipo de cualquier dependencia requerida por\n    tu canal en su constructor.</p>\n<h2>Transmitiendo eventos</h2>\n<p>Una vez que has definido un evento y lo has marcado con la interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ShouldBroadcast</span>,\n    sólo necesitas ejecutar el evento usando la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">event</span>. El despachador de\n    eventos notará que el evento está marcado con la interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ShouldBroadcast</span> y agrega\n    el evento a la cola para transmisión:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>event(new ShippingStatusUpdated(\\$update));\n</code></pre>\n<h3># Sólo a otros</h3>\n<p>Al construir una aplicación que usa la transmisión de eventos, puedes sustituir la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">event</span>\n    por la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">broadcast</span>. Como la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">event</span>, la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">broadcast</span>\n    despacha el evento a tus listeners del lado del servidor:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>broadcast(new ShippingStatusUpdated(\\$update));\n</code></pre>\n<p>Sin embargo, la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">broadcast</span> también expone el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toOthers</span> que\n    te permite excluir al usuario actual de los recipientes de la transmisión:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>broadcast(new ShippingStatusUpdated(\\$update))-&gt;toOthers();\n</code></pre>\n<p>Para entender mejor cuando es posible que quieras usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toOthers</span>, vamos a\n    imaginar una aplicación de lista de tareas donde un usuario puede crear una nueva tarea\n    ingresando un nombre de tarea. Para crear una tarea, tu aplicación puede hacer una solicitud a\n    un punto de salida <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">/task</span> que transmite la creación de la tarea y retorna una\n    representación JSON de la nueva tarea. Cuando tu aplicación de JavaScript recibe la respuesta\n    del punto de salida, podría directamente insertar la nueva tarea en su lista de tareas de la\n    siguiente forma:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>axios.post('/task', task)\n    .then((response) =&gt; {\n        this.tasks.push(response.data);\n    });\n</code></pre>\n<p>Sin embargo, recuerda que también transmitimos la creación de la tarea. Si tu aplicación de\n    JavaScript está escuchando este evento para agregar tareas a la lista de tareas, tendrás tareas\n    duplicadas en tu lista: una del punto de salida y una de la transmisión. Puedes resolver esto\n    usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toOthers</span> para instruir al transmisor para que no transmita el\n    evento al usuario actual.</p>\n<p>Nota</p>\n<p>Tu evento debe usar el trait <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Broadcasting\\InteractsWithSockets</span> para poder\n    llamar al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toOthers</span>.</p>\n<h4># Configuración</h4>\n<p>\n    Cuando incializas una instancia de Laravel Echo, un ID de socket es asignado a la conexión. Si\n    estás usando\n    Vue\n    y\n    Axios\n    , el ID del socket será agregado automáticamente a cada solicitud saliente como un header <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">X-Socket-ID</span>.\n    Entonces, cuando llamas al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toOthers</span>, Laravel extraerá el ID del socket desde\n    el encabezado e instruirá al transmisor a no transmitir a ninguna conexión con dicho ID de\n    socket.\n</p>\n<p>Si no estás usando Vue y Axios, necesitarás configurar manualmente tu aplicación de JavaScript\n    para enviar el encabezado <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">X-Socket-ID</span>. Puedes retornar el ID del socket usando el\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Echo.socketId</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>var socketId = Echo.socketId();\n</code></pre>\n<h2>Recibiendo transmisiones</h2>\n<h3># Instalando laravel echo</h3>\n<p>Laravel Echo es una librería de JavaScript que hace que sea fácil suscribirse a canales y\n    escuchar transmisiones de eventos en Laravel. Puedes instalar Echo mediante el administrador de\n    paquetes NPM. En este ejemplo, también instalaremos el paquete <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pusher-js</span> dado que\n    usaremos el transmisor de canales de Pusher:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>npm install --save laravel-echo pusher-js\n</code></pre>\n<p>Una vez que Echo es instalado, estás listo para crear una instancia nueva de Echo en el\n    JavaScript de tu aplicación. Un buen lugar para hacer esto es en la parte inferior del archivo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/js/bootstrap.js</span> que es incluido con el framework Laravel:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>import Echo from \"laravel-echo\"\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: 'your-pusher-channels-key'\n});\n</code></pre>\n<p>Al crear una instancia de Echo que usa el conector <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pusher</span>, puedes especificar un\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cluster</span> así como si la conexión debería ser realizada mediante TLS (por defecto,\n    cuando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">forceTLS</span> es <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>, una conexión no-TLS será realizada si la\n    página fue cargada mediante HTTP, o como fallback si la conexión TLS falla):</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>window.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: 'your-pusher-channels-key',\n    cluster: 'eu',\n    forceTLS: true\n});\n</code></pre>\n<h4># Usando una instancia de cliente existente</h4>\n<p>Si ya tienes una instancia de cliente de canales de Pusher o Socket.io que te gustaría que Echo\n    usara, puedes pasarla a Echo mediante la opción de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">client</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>const client = require('pusher-js');\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: 'your-pusher-channels-key',\n    client: client\n});\n</code></pre>\n<h3># Escuchando eventos</h3>\n<p>Una vez que has instalado e instanciado Echo, estás listo para comenzar a escuchar transmisiones\n    de eventos. Primero, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">channel</span> para retornar una instancia de un canal,\n    luego llama al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">listen</span> para escuchar a un evento especificado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Echo.channel('orders')\n    .listen('OrderShipped', (e) =&gt; {\n        console.log(e.order.name);\n    });\n</code></pre>\n<p>Si te gustaría escuchar eventos en un canal privado, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">private</span> en su\n    lugar. Puedes continuar encadenando llamadas al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">listen</span> para escuchar\n    múltiples eventos en un sólo canal:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Echo.private('orders')\n    .listen(...)\n    .listen(...)\n    .listen(...);\n</code></pre>\n<h3># Abandonando un canal</h3>\n<p>Para abandonar un canal, puedes llamar al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">leaveChannel</span> en tu instancia de\n    Echo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Echo.leaveChannel('orders');\n</code></pre>\n<p>Si te gustaría abandonar un canal y también sus canales privados y presenciales asociados, puedes\n    usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">leave</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Echo.leave('orders');\n</code></pre>\n<h3># Nombres de espacio</h3>\n<p>Puedes haber notado en los ejemplos superiores que no especificamos un nombre de espacio completo\n    para las clases del evento. Esto es debido a que Echo automáticamente asumirá que los eventos\n    están ubicados en el nombre de espacio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Events</span>. Sin embargo, puedes configurar\n    el nombre de espacio principal cuando instancias Echo pasando una opción de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">namespace</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>window.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: 'your-pusher-channels-key',\n    namespace: 'App.Other.Namespace'\n});\n</code></pre>\n<p>Alternativamente, puedes prefijar las clases del evento con un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.</span> al suscribrte a\n    estos usando Echo. Esto te permitirá siempre especificar el nombre de clase completamente\n    calificado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Echo.channel('orders')\n    .listen('.Namespace\\\\Event\\\\Class', (e) =&gt; {\n        //\n    });\n</code></pre>\n<h2>Canales de presencia</h2>\n<p>Los Canales de Presencia son construidos sobre la seguridad de los canales privados mientras que\n    exponen la característica adicional de saber quien está susbscrito al canal. Esto hace que sea\n    fácil construir características de aplicación poderosas y colaborativas como notificar a\n    usuarios cuando otro usuario está viendo la misma página.</p>\n<h3># Autorizando canales de presencia</h3>\n<p>Todos los canales de Presencia son también canales privados; por lo tanto, los usuarios deben\n    estar autorizados para accederlos. Sin embargo, al definir callbacks de autorización para\n    canales de presencia, no retornarás <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span> si el usuario está autorizado para unirse\n    al canal. En su lugar, debes retornar un arreglo de datos sobre el usuario.</p>\n<p>Los datos retornados por el callback de autorización estarán disponibles para los listeners de\n    eventos de canales de presencia en tu aplicación de JavaScript. Si el usuario no está autorizado\n    para unirse al canal de presencia, debes retornar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Broadcast::channel('chat.{roomId}', function (\\$user, \\$roomId) {\n    if (\\$user-&gt;canJoinRoom(\\$roomId)) {\n        return ['id' =&gt; \\$user-&gt;id, 'name' =&gt; \\$user-&gt;name];\n    }\n});\n</code></pre>\n<h3># Uniendose a canales de presencia</h3>\n<p>Para unirse a un canal de presencia, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">join</span> de Echo. El método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">join</span> retornará una implementación de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">PresenceChannel</span> que, junto con la\n    exposición del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">listen</span>, te permite suscribirte a los eventos\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">here</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">joining</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">leaving</span>.</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Echo.join(`chat.\\${roomId}`)\n    .here((users) =&gt; {\n        //\n    })\n    .joining((user) =&gt; {\n        console.log(user.name);\n    })\n    .leaving((user) =&gt; {\n        console.log(user.name);\n    });\n</code></pre>\n<p>El callback <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">here</span> será ejecutado inmediatamente una vez que el canal se haya unido\n    con éxito y recibirá un arreglo que contiene la información del usuario para todos los demás\n    usuarios actualmente subscritos al canal. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">joining</span> será ejecutado cuando\n    un nuevo usuario se une a un canal, mientras que el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">leaving</span> será ejecutado\n    cuando un usuario abandona el canal.</p>\n<h3># Transmitiendo a canales de presencia</h3>\n<p>Los canales de Presencia pueden recibir eventos igual que los canales públicos y privados. Usando\n    el ejemplo de una sala de chat, podemos querer transmitir eventos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">NewMessage</span> al\n    canal de presencia de la sala. Para hacer eso, retornaremos una instancia de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">PresenceChannel</span>\n    desde el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">broadcastOn</span> del evento:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the channels the event should broadcast on.\n*\n* @return Channel|array\n*/\npublic function broadcastOn()\n{\n    return new PresenceChannel('room.'.\\$this-&gt;message-&gt;room_id);\n}\n</code></pre>\n<p>Como los eventos públicos o privados, los canales de presencia pueden ser transmitidos usando la\n    función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">broadcast</span>. Como con otros eventos, puedes usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toOthers</span> para excluir al usuario actual de recibir las transmisiones:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>broadcast(new NewMessage(\\$message));\nbroadcast(new NewMessage(\\$message))-&gt;toOthers();\n</code></pre>\n<p>Puedes escuchar el evento join mediante el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">listen</span> de Echo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Echo.join(`chat.\\${roomId}`)\n    .here(...)\n    .joining(...)\n    .leaving(...)\n    .listen('NewMessage', (e) =&gt; {\n        //\n    });\n</code></pre>\n<h2>Eventos del cliente</h2>\n<p>TIP</p>\n<p>\n    Al usar\n    canales de Pusher\n    , debes habilitar la opción \"Client Events\" en la sección \"App Settings\" del\n    dashboard de tu aplicación\n    para enviar eventos del cliente.\n</p>\n<p>Algunas veces puedes querer transmitir un evento a otros clientes conectados sin tocar tu\n    aplicación en lo absoluto. Esto puede ser particularmente útil para cosas como \"escribir\"\n    notificaciones, donde quieres advertir a los usuarios de tu aplicación que otro usuario está\n    escribiendo un mensaje en una pantalla dada.</p>\n<p>Para transmitir eventos del cliente, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whisper</span> de Echo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Echo.private('chat')\n    .whisper('typing', {\n        name: this.user.name\n    });\n</code></pre>\n<p>Para escuchar eventos del cliente, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">listenForWhisper</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Echo.private('chat')\n    .listenForWhisper('typing', (e) =&gt; {\n        console.log(e.name);\n    });\n</code></pre>\n<h2>Notificaciones</h2>\n<p>Al juntar transmisión de eventos con notificaciones, tu aplicación de JavaScript puede recibir\n    nuevas notificaciones mientras ocurren sin necesidad de refrescar la página. Primero, asegurate\n    de leer la documentación sobre el uso del canal de transmisión de notificaciones.</p>\n<p>Una vez que has configurado una notificación para usar el canal de transmisión, puedes escuchar a\n    los eventos de la transmisión usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">notification</span> de Echo. Recuerda, el\n    nombre del canal debe ser igual al nombre de la clase de la entidad recibiendo la\n    notificaciones:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Echo.private(`App.User.\\${userId}`)\n    .notification((notification) =&gt; {\n        console.log(notification.type);\n    });\n</code></pre>\n<p>En este ejemplo, todas las notificaciones enviadas a instancias de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\User</span> mediante\n    el canal <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">broadcast</span> serán recibidas por el callback. Un callback de autorización de\n    canal para el canal <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App.User.{id}</span> es incluido en el\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">BroadcastServiceProvider</span> que viene con el framework Laravel por defecto.</p>\n</div>"
      },
      {
        "titulo": "Cache",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Caché</h1>\n<ul>\n    <li>\n        Configuración\n        <ul>\n            <li>Prerrequisitos del controlador</li>\n        </ul>\n    </li>\n    <li>\n        Uso de caché\n        <ul>\n            <li>Obtener una instancia de caché</li>\n            <li>Recuperar elementos de caché</li>\n            <li>Almacenar elementos de caché</li>\n            <li>Eliminar elementos de caché</li>\n            <li>Cierres atómicos</li>\n            <li>El helper cache</li>\n        </ul>\n    </li>\n    <li>\n        Etiquetas de caché\n        <ul>\n            <li>Almacenar elementos de caché etiquetados</li>\n            <li>Acceder a elementos de caché etiquetados</li>\n            <li>Eliminar elementos de caché etiquetados</li>\n        </ul>\n    </li>\n    <li>\n        Agregar controladores de caché personalizados\n        <ul>\n            <li>Escribir el driver</li>\n            <li>Registrar el driver</li>\n        </ul>\n    </li>\n    <li>Eventos</li>\n</ul>\n<h2>Configuración</h2>\n<p>\n    Laravel proporciona una API expresiva y unificada para varios backends de almacenamiento de\n    caché. La configuración de caché está ubicada en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/cache.php</span>. En este archivo\n    puedes indicar el controlador de caché que desees utilizar por defecto en toda tu aplicación.\n    Por defecto, Laravel es compatible con los almacenamientos en caché más populares, tales como\n    Memcached\n    y\n    Redis\n    .\n</p>\n<p>El archivo de configuración de caché contiene otras opciones adicionales, las cuales están\n    documentadas dentro del mismo archivo, por lo que deberás asegurarte de revisar estas opciones.\n    Por defecto, Laravel está configurado para utilizar el controlador de caché <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">local</span>,\n    que almacena los objetos de caché serializados en el sistema de archivos. Para aplicaciones más\n    grandes, es recomendable que utilices un controlador más robusto como Memcached o Redis. Incluso\n    puedes configurar múltiples configuraciones de caché para el mismo controlador.</p>\n<h3># Prerrequisitos del controlador</h3>\n<h4># Base de datos</h4>\n<p>Cuando utilices el controlador de caché <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database</span>, necesitarás configurar una tabla\n    que contenga los elementos de caché. Puedes encontrar un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Schema</span> de ejemplo en la\n    tabla inferior:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Schema::create('cache', function (\\$table) {\n    \\$table-&gt;string('key')-&gt;unique();\n    \\$table-&gt;text('value');\n    \\$table-&gt;integer('expiration');\n});\n</code></pre>\n<p>TIP</p>\n<p>También puedes utilizar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">php artisan cache:table</span> para generar una\n    migración con el esquema apropiado.</p>\n<h4># Memcached</h4>\n<p>\n    Utilizar el controlador Memcached requiere que tengas instalado el\n    paquete de Memcached PECL\n    . Puedes listar todos tus servidores de Memcached en el archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/cache.php</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'memcached' =&gt; [\n    [\n        'host' =&gt; '127.0.0.1',\n        'port' =&gt; 11211,\n        'weight' =&gt; 100\n    ],\n],\n</code></pre>\n<p>También puedes establecer la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">host</span> a la ruta de un socket de UNIX. Si haces\n    esto, la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">port</span> se debe establecer a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">0</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'memcached' =&gt; [\n    [\n        'host' =&gt; '/var/run/memcached/memcached.sock',\n        'port' =&gt; 0,\n        'weight' =&gt; 100\n    ],\n],\n</code></pre>\n<h4># Redis</h4>\n<p>Antes de comenzar a utilizar el caché con Redis en Laravel, deberás instalar ya sea la extensión\n    de PHP PhpRedis mediante PECL o instalar el paquete <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">predis/predis</span> (~1.0) mediante\n    Composer.</p>\n<p>Para más información sobre cómo configurar Redis, consulta la página de la documentación de\n    Laravel.</p>\n<h2>Uso de daché</h2>\n<h3># Obtener una instancia de caché</h3>\n<p>Las interfaces <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Contracts\\Cache\\Factory</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Contracts\\Cache\\Repository</span>\n    proporcionan acceso a los servicios de caché de Laravel. La interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Factory</span>\n    proporciona acceso a todos los controladores de caché definidos para tu aplicación. La interfaz\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Repository</span> típicamente es una implementación del controlador de caché\n    predeterminado para tu aplicación según lo especificado en tu archivo de configuración de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cache</span>.\n</p>\n<p>Sin embargo, también puedes usar el facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cache</span>, que es lo que usaremos a lo largo\n    de esta documentación. El facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cache</span> proporciona acceso conveniente y directo a\n    las implementaciones subyacientes de las interfaces de Laravel.</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Support\\Facades\\Cache;\nclass UserController extends Controller\n{\n    /**\n    * Show a list of all users of the application.\n    *\n    * @return Response\n    */\n    public function index()\n    {\n        \\$value = Cache::get('key');\n        //\n    }\n}\n</code></pre>\n<h4># Acceder a múltiples almacenamientos de caché</h4>\n<p>Usando el facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cache</span>, puedes acceder a varios almacenamientos de caché a través\n    del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">store</span>. La llave que se pasa al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">store</span> debe\n    corresponder a uno de los almacenamientos listados en el arreglo de configuración\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">stores</span> en tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cache</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$value = Cache::store('file')-&gt;get('foo');\nCache::store('redis')-&gt;put('bar', 'baz', 600); // 10 Minutes\n</code></pre>\n<h3># Recuperar elementos de caché</h3>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span> en el facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cache</span> es utilizado para recuperar elementos\n    desde la caché. Si el elemento no existe en caché, se va a regresar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>. Si lo\n    deseas, puedes pasar un segundo argumento al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span> indicando el valor\n    predeterminado que deseas retornar en caso de que el elemento no exista:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$value = Cache::get('key');\n\\$value = Cache::get('key', 'default');\n</code></pre>\n<p>Incluso puedes pasar una <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span> como valor predeterminado. El resultado del <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span>\n    será devuelto si el elemento especificado no existe en caché. Pasar un Closure te permite\n    diferir la recuperación de valores predeterminados de una base de datos a otro servicio externo:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$value = Cache::get('key', function () {\n    return DB::table(...)-&gt;get();\n});\n</code></pre>\n<h4># Comprobar la existencia de un elemento</h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">has</span> se puede utilizar para determinar la existencia de un elemento en\n    caché. Este método devolverá <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span> si el valor es <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>if (Cache::has('key')) {\n    //\n}\n</code></pre>\n<h4># Incrementando / Decrementando valores</h4>\n<p>Los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">increment</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">decrement</span> se pueden usar para ajustar el valor\n    de los elementos enteros en caché. Ambos métodos aceptan un segundo parámetro opcional que\n    indica la cantidad por la cual incrementar o disminuir el valor del elemento:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Cache::increment('key');\nCache::increment('key', \\$amount);\nCache::decrement('key');\nCache::decrement('key', \\$amount);\n</code></pre>\n<h4># Recuperar y almacenar</h4>\n<p>En ocasiones, es posible que desees recuperar un elemento de la memoria caché, pero también\n    almacenar un valor predeterminado si el elemento no existe. Por ejemplo, puede que desees\n    recuperar todos los usuarios de la memoria caché o, si no existen, recuperarlos desde la base de\n    datos y agregarlos a la caché. Puedes hacer esto utilizando el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cache::remember</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$value = Cache::remember('users', \\$seconds, function () {\n    return DB::table('users')-&gt;get();\n});\n</code></pre>\n<p>Si el elemento no existe en la memoria caché, se ejecutará el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span> pasado al\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">remember</span> y su resultado se colocará en caché.</p>\n<p>Puedes utilizar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">rememberForever</span> para recuperar un elemento del caché o\n    almacenarlo para siempre:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$value = Cache::rememberForever('users', function () {\n    return DB::table('users')-&gt;get();\n});\n</code></pre>\n<h4># Recuperar y eliminar</h4>\n<p>Si necesitas recuperar un elemento del caché y después eliminarlo, puedes utilizar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pull</span>. Al igual que el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span>, se devolverá <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span> si el\n    elemento no existe en la memoria caché:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$value = Cache::pull('key');\n</code></pre>\n<h3># Almacenar elementos en caché</h3>\n<p>Puedes utilizar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">put</span> en el facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cache</span> para almacenar\n    elementos en caché:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Cache::put('key', 'value', \\$seconds);\n</code></pre>\n<p>Si el tiempo de almacenamiento no es pasado al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">put</span>, el elemento será\n    almacenado indefinidamente:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Cache::put('key', 'value');\n</code></pre>\n<p>En lugar de pasar el número de segundos como un entero, también puedes pasar una instancia de\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DateTime</span> que represente el tiempo de expiración del elemento almacenado en caché:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Cache::put('key', 'value', now()-&gt;addMinutes(10));\n</code></pre>\n<h4># Almacenar si no está presente</h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">add</span> solo agregará el elemento a caché si éste no existe todavia en la\n    memoria caché. El metodo va a regresar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span> si el elemento realmente se agregó a la\n    caché. De otra manera, el método va a regresar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Cache::add('key', 'value', \\$seconds);\n</code></pre>\n<h4># Almacenar elementos para siempre</h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">forever</span> puede ser utilizado para almacenar un elemento en la memoria caché\n    de manera permanente. Como estos elementos no caducan, se deben eliminar de la memoria caché\n    manualmente utilizando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">forget</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Cache::forever('key', 'value');\n</code></pre>\n<p>TIP</p>\n<p>Si utilizas el controlador de Memcached, los elementos almacenados \"permanentemente\" podrán ser\n    eliminados una vez que la caché alcance su tamaño límite.</p>\n<h3># Eliminar elementos de la caché</h3>\n<p>Puedes eliminar elementos de caché utilizando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">forget</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Cache::forget('key');\n</code></pre>\n<p>También puedes eliminar elementos de caché especificando un TTL cero o negativo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Cache::put('key', 'value', 0);\nCache::put('key', 'value', -5);\n</code></pre>\n<p>Puedes borrar todo el caché utilizando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">flush</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Cache::flush();\n</code></pre>\n<p>Nota</p>\n<p>La limpieza de caché no respeta el prefijo del caché y borrará todas las entradas del caché.\n    Considera esto cuidadosamente cuando borres un caché que sea compartido por otras\n    aplicaciones.</p>\n<h3># Bloqueos atómicos</h3>\n<p>Nota</p>\n<p>Para usar esta característica, tu aplicación debe estar haciendo uso de los drivers de caché\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">memcached</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dynamodb</span>, o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redis</span> como el driver de caché por\n    defecto de tu aplicación. Adicionalmente, todos los servidores deben estar comunicándose con el\n    mismo servidor de caché central.</p>\n<p>\n    Los bloqueos atómicos permiten la manipulación de bloqueos distribuidos sin que tengas que\n    preocuparte sobre las condiciones de la carrera. Por ejemplo,\n    Laravel Forge\n    usa bloqueos atómicos para asegurarse de que sólo una tarea remota está siendo ejecutada en un\n    servidor a la vez. Puedes crear y administrar bloqueos usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cache::lock</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Cache;\n\\$lock = Cache::lock('foo', 10);\nif (\\$lock-&gt;get()) {\n    // Lock acquired for 10 seconds...\n    \\$lock-&gt;release();\n}\n</code></pre>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span> también acepta una Closure. Luego de que la Closure sea ejecutada,\n    Laravel automáticamente liberará el cierre:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Cache::lock('foo')-&gt;get(function () {\n    // Lock acquired indefinitely and automatically released...\n});\n</code></pre>\n<p>Si el bloqueo no está disponible en el momento en que lo solicitas, puedes instruir a Laravel\n    para que espere un número determinado de segundos. Si el bloqueo no puede ser adquirido dentro\n    del tiempo límite especificado, una excepción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Contracts\\Cache\\LockTimeoutException</span>\n    será mostrada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Contracts\\Cache\\LockTimeoutException;\n\\$lock = Cache::lock('foo', 10);\ntry {\n    \\$lock-&gt;block(5);\n    // Lock acquired after waiting maximum of 5 seconds...\n} catch (LockTimeoutException \\$e) {\n    // Unable to acquire lock...\n} finally {\n    optional(\\$lock)-&gt;release();\n}\nCache::lock('foo', 10)-&gt;block(5, function () {\n    // Lock acquired after waiting maximum of 5 seconds...\n});\n</code></pre>\n<h4># Administrando bloqueos a través de procesos</h4>\n<p>Algunas veces, necesitarás adquirir un bloqueo en un proceso para liberarlo en otro proceso\n    distinto más adelante. Por ejemplo, podemos solicitar un bloqueo durante la ejecución de un\n    proceso que hace una solicitud web pero queremos liberarlo después que se ejecute un trabajo que\n    es despachado donde se hizo la solicitud a una cola de trabajos. En un escenario como éste,\n    necesitaríamos tomar la identificación del propietario del bloqueo (owner token) en el ámbito\n    donde se produce el mismo y pasarlo al trabajo que va a la cola de trabajos de modo que pueda\n    volver a instanciar el bloqueo usando ese identificador.</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>// Within Controller...\n\\$podcast = Podcast::find(\\$id);\n\\$lock = Cache::lock('foo', 120);\nif (\\$result = \\$lock-&gt;get()) {\n    ProcessPodcast::dispatch(\\$podcast, \\$lock-&gt;owner());\n}\n// Within ProcessPodcast Job...\nCache::restoreLock('foo', \\$this-&gt;owner)-&gt;release();\n</code></pre>\n<p>Si prefieres liberar un bloqueo sin necesidad de indicar su propietario, puedes usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">forceRelease</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Cache::lock('foo')-&gt;forceRelease();\n</code></pre>\n<h3># El helper cache</h3>\n<p>Además de usar el facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cache</span> o la interfaz de caché, también puedes usar la\n    función global <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cache</span> para recuperar y almacenar información a través del caché.\n    Cuando se llama a la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cache</span> con un solo argumento, devolverá el valor de la\n    clave dada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$value = cache('key');\n</code></pre>\n<p>Si proporcionas un arreglo de pares clave / valor y su tiempo de expiración a la función,\n    almacenará los valores en caché durante la duración especificada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>cache(['key' =&gt; 'value'], \\$seconds);\ncache(['key' =&gt; 'value'], now()-&gt;addMinutes(10));\n</code></pre>\n<p>Cuando la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cache</span> es llamada sin ningún argumento, ésta retorna una instancia\n    de la implementación <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Contracts\\Cache\\Factory</span>, permitiéndote llamar a\n    otros métodos de almacenamiento en caché:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>cache()-&gt;remember('users', \\$seconds, function () {\n    return DB::table('users')-&gt;get();\n});\n</code></pre>\n<p>TIP</p>\n<p>Al realizar pruebas utilizando la función global <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cache</span>, deberás usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cache::shouldReceive</span> como si estuvieras probando un facade.</p>\n<h2>Cache tags</h2>\n<p>Nota</p>\n<p>Las etiquetas de caché no son compatibles cuando usas los controladores de caché\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">file</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database</span>. Además, cuando se utilicen múltiples etiquetas con\n    cachés que son almacenados \"permanentemente\", el rendimiento será mejor si utilizas un\n    controlador como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">memcached</span>, el cual automaticamente purga los registros obsoletos.\n</p>\n<h3># Almacenar Elementos De Caché Etiquetados</h3>\n<p>Las etiquetas de caché te permiten etiquetar elementos relacionados en caché y después limpiar\n    todos los valores almacenados en caché asignados a una etiqueta dada. Puedes acceder a un caché\n    etiquetado al pasar un arreglo ordenado de nombres de etiquetas. Por ejemplo, vamos a acceder a\n    un caché etiquetado y al valor <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">put</span> en el caché:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Cache::tags(['people', 'artists'])-&gt;put('John', \\$john, \\$seconds);\nCache::tags(['people', 'authors'])-&gt;put('Anne', \\$anne, \\$seconds);\n</code></pre>\n<h3># Acceder a elementos de caché etiquetados</h3>\n<p>Para recuperar un elemento de caché etiquetado, pasa la misma lista ordenada de etiquetas al\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tags</span> y después haz un llamado al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span> con la clave que\n    deseas recuperar:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$john = Cache::tags(['people', 'artists'])-&gt;get('John');\n\\$anne = Cache::tags(['people', 'authors'])-&gt;get('Anne');\n</code></pre>\n<h3># Eliminar elementos de caché etiquetados</h3>\n<p>Puedes borrar todos los elementos a los que se les asigna una etiqueta o lista de etiquetas. Por\n    ejemplo, la siguiente sentencia eliminaría todos los cachés etiquetados tanto con\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">people</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">authors</span> o ambos. Por lo tanto, tanto <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Anne</span> como\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">John</span> serán eliminados de caché:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Cache::tags(['people', 'authors'])-&gt;flush();\n</code></pre>\n<p>Por el contrario, la siguiente sentencia eliminará solamente los cachés con la etiqueta <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">authors</span>,\n    por lo tanto se eliminará <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Anne</span>, pero <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">John</span> no:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Cache::tags('authors')-&gt;flush();\n</code></pre>\n<h2>Agregar controladores de caché personalizados</h2>\n<h3># Escribir el controlador</h3>\n<p>Para crear el controlador de caché, primero se debe implementar la interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Contracts\\Cache\\Store</span>.\n    Por lo tanto, una implementación de caché de MongoDB se vería de la siguiente manera:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Extensions;\nuse Illuminate\\Contracts\\Cache\\Store;\nclass MongoStore implements Store\n{\n    public function get(\\$key) {}\n    public function many(array \\$keys) {}\n    public function put(\\$key, \\$value, \\$seconds) {}\n    public function putMany(array \\$values, \\$seconds) {}\n    public function increment(\\$key, \\$value = 1) {}\n    public function decrement(\\$key, \\$value = 1) {}\n    public function forever(\\$key, \\$value) {}\n    public function forget(\\$key) {}\n    public function flush() {}\n    public function getPrefix() {}\n}\n</code></pre>\n<p>Solo necesitas implementar cada uno de estos métodos utilizando una conexión de MongoDB. Para\n    tener un ejemplo de cómo implementar cada uno de estos métodos, puedes echar un vistazo a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Cache\\MemcachedStore</span>\n    en el código fuente del framework. Una vez que completes la implementación, puedes finalizar con\n    el registro de tu controlador personalizado.</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Cache::extend('mongo', function (\\$app) {\n    return Cache::repository(new MongoStore);\n});\n</code></pre>\n<p>TIP</p>\n<p>Si te preguntas dónde puedes colocar el código de tu driver de caché personalizado, puedes crear\n    un espacio de nombre <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Extensions</span> en tu directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app</span>. Sin embargo, ten\n    en cuenta que Laravel no tiene una estructura de aplicación rígida y por tanto eres libre de\n    organizar tu aplicación de acuerdo a tus preferencias.</p>\n<h3># Registrando el driver</h3>\n<p>Para registrar el controlador de caché personalizado con Laravel, debes utilizar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">extend</span>\n    en el facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cache</span>. La llamada a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cache::extend</span> puede hacerse en el\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span> del <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Providers\\AppServiceProvider</span> predeterminado que\n    contiene cada aplicación nueva de Laravel, o puedes crear tu propio proveedor de servicios para\n    alojar la extensión - solo recuerda registrar el proveedor en el arreglo de proveedores en\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/app.php</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Providers;\nuse App\\Extensions\\MongoStore;\nuse Illuminate\\Support\\Facades\\Cache;\nuse Illuminate\\Support\\ServiceProvider;\nclass CacheServiceProvider extends ServiceProvider\n{\n    /**\n    * Perform post-registration booting of services.\n    *\n    * @return void\n    */\n    public function boot()\n    {\n        Cache::extend('mongo', function (\\$app) {\n            return Cache::repository(new MongoStore);\n        });\n    }\n    /**\n    * Register bindings in the container.\n    *\n    * @return void\n    */\n    public function register()\n    {\n        //\n    }\n}\n</code></pre>\n<p>El primer argumento pasado al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">extend</span> es el nombre del controlador. Esto\n    corresponde a la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">driver</span> en el archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/cache.php</span>.\n    El segundo argumento es un Closure que debe regresar una instancia de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Cache\\Repository</span>.\n    El Closure debe pasar una instancia de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$app</span>, que es una instancia del contenedor\n    de servicios.</p>\n<p>Una vez que hayas registrado tu extensión, actualiza la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">driver</span> en tu archivo\n    de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/cache.php</span> con el nombre de tu extensión.</p>\n<h2>Eventos</h2>\n<p>Para ejecutar código en cada operación de caché, puedes escuchar los eventos activados por el\n    caché. Normalmente, debes colocar estos listener de eventos dentro de tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">EventServiceProvider</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* The event listener mappings for the application.\n*\n* @var array\n*/\nprotected \\$listen = [\n    'Illuminate\\Cache\\Events\\CacheHit' =&gt; [\n        'App\\Listeners\\LogCacheHit',\n    ],\n    'Illuminate\\Cache\\Events\\CacheMissed' =&gt; [\n        'App\\Listeners\\LogCacheMissed',\n    ],\n    'Illuminate\\Cache\\Events\\KeyForgotten' =&gt; [\n        'App\\Listeners\\LogKeyForgotten',\n    ],\n    'Illuminate\\Cache\\Events\\KeyWritten' =&gt; [\n        'App\\Listeners\\LogKeyWritten',\n    ],\n];\n</code></pre>\n</div>"
      },
      {
        "titulo": "Colecciones",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Colecciones</h1>\n<ul>\n    <li>\n        Introducción\n        <ul>\n            <li>Creando colecciones</li>\n            <li>Extendiendo colecciones</li>\n        </ul>\n    </li>\n    <li>Métodos disponibles</li>\n    <li>Mensajes de orden superior</li>\n</ul>\n<h2>Introducción</h2>\n<p>La clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Support\\Collection</span> provee una interfaz fluida y conveniente para\n    trabajar con arreglos de datos. Por ejemplo, mira el siguiente código. Usaremos la función\n    helper <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">collect</span> para crear una nueva instancia de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Collection</span> pasando un\n    arreglo como parámetro, se ejecuta la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">strtoupper</span> en cada elemento y luego\n    elimina todos los elementos vacíos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['taylor', 'abigail', null])-&gt;map(function (\\$name) {\n    return strtoupper(\\$name);\n})\n-&gt;reject(function (\\$name) {\n    return empty(\\$name);\n});\n</code></pre>\n<p>Como puedes ver, la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Collection</span> te permite encadenar sus métodos para realizar\n    un mapeo fluido y reducir el arreglo subyacente. En general, las colecciones son inmutables, es\n    decir, cada método de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Collection</span> retorna una nueva instancia de\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Collection</span>.</p>\n<h3># Creando colecciones</h3>\n<p>Como se ha mencionado más arriba, el helper <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">collect</span> retorna una nueva instancia de\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Support\\Collection</span> para el arreglo dado. Entonces, crear una colección\n    es tan simple como:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3]);\n</code></pre>\n<p>TIP</p>\n<p>\n    Las respuestas de\n    Eloquent\n    siempre retornan una instancia de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Collection</span>.\n</p>\n<h3># Extendiendo colecciones</h3>\n<p>Las colecciones son \"macroable\", es decir, te permite agregar métodos adicionales a la clase\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Collection</span> en tiempo de ejecución. Por ejemplo, el siguiente código agrega un\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toUpper</span> a la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Collection</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\nCollection::macro('toUpper', function () {\n    return \\$this-&gt;map(function (\\$value) {\n        return Str::upper(\\$value);\n    });\n});\n\\$collection = collect(['first', 'second']);\n\\$upper = \\$collection-&gt;toUpper();\n// ['FIRST', 'SECOND']\n</code></pre>\n<p>Por lo general, los macros para una colección se declaran en un proveedor de servicios.</p>\n<h2>Métodos disponibles</h2>\n<p>Por el resto de esta documentación, discutiremos cada método disponible en la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Collection</span>.\n    Recuerda, todos estos métodos pueden estar encadenados a la manipulación fluida del arreglo\n    subyacente. Además, casi todos los métodos devuelven una nueva instancia de\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Collection</span>, lo que te permite conservar la copia original de la colección cuando\n    sea necesario:</p>\n<p>all average avg chunk collapse combine concat contains containsStrict count countBy crossJoin dd\n    diff diffAssoc diffKeys dump duplicates duplicatesStrict each eachSpread every except filter\n    first firstWhere flatMap flatten flip forget forPage get groupBy has implode intersect\n    intersectByKeys isEmpty isNotEmpty join keyBy keys last macro make map mapInto mapSpread\n    mapToGroups mapWithKeys max median merge mergeRecursive min mode nth only pad partition pipe\n    pluck pop prepend pull push put random reduce reject replace replaceRecursive reverse search\n    shift shuffle slice some sort sortBy sortByDesc sortKeys sortKeysDesc splice split sum take tap\n    times toArray toJson transform union unique uniqueStrict unless unlessEmpty unlessNotEmpty\n    unwrap values when whenEmpty whenNotEmpty where whereStrict whereBetween whereIn whereInStrict\n    whereInstanceOf whereNotBetween whereNotIn whereNotInStrict wrap zip</p>\n<h2>Lista de métodos</h2>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">all()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">all</span> devuelve el arreglo subyacente representado por la colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>collect([1, 2, 3])-&gt;all();\n// [1, 2, 3]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">average()</span></h4>\n<p>Alias del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">avg</span>.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">avg()</span></h4>\n<p>\n    El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">avg</span> retorna el\n    promedio\n    de una llave dada:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$average = collect([['foo' =&gt; 10], ['foo' =&gt; 10], ['foo' =&gt; 20], ['foo' =&gt; 40]])-&gt;avg('foo');\n// 20\n\\$average = collect([1, 1, 2, 4])-&gt;avg();\n// 2\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">chunk()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">chunk</span> divide la colección en múltiples colecciones más pequeñas de un\n    tamaño dado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3, 4, 5, 6, 7]);\n\\$chunks = \\$collection-&gt;chunk(4);\n\\$chunks-&gt;toArray();\n// [[1, 2, 3, 4], [5, 6, 7]]\n</code></pre>\n<p>\n    Este método es especialmente útil en las vistas cuando se trabaja con un sistema de grillas como\n    el de\n    Bootstrap\n    . Imagina que tienes una colección de modelos Eloquent y quieres mostrar en una grilla lo\n    siguiente:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>@foreach (\\$products-&gt;chunk(3) as \\$chunk)\n    &lt;div class=\"row\"&gt;\n        @foreach (\\$chunk as \\$product)\n            &lt;div class=\"col-xs-4\"&gt;{{ \\$product-&gt;name }}&lt;/div&gt;\n        @endforeach\n    &lt;/div&gt;\n@endforeach\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">collapse()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">collapse</span> contrae una colección de arreglos en una sola colección plana:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([[1, 2, 3], [4, 5, 6], [7, 8, 9]]);\n\\$collapsed = \\$collection-&gt;collapse();\n\\$collapsed-&gt;all();\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">combine()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">combine</span> combina las llaves de la colección con los valores de otro arreglo\n    o colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['name', 'age']);\n\\$combined = \\$collection-&gt;combine(['George', 29]);\n\\$combined-&gt;all();\n// ['name' =&gt; 'George', 'age' =&gt; 29]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">concat()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">concat</span> concatena un arreglo dado o valores de una colección al final de la\n    colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['John Doe']);\n\\$concatenated = \\$collection-&gt;concat(['Jane Doe'])-&gt;concat(['name' =&gt; 'Johnny Doe']);\n\\$concatenated-&gt;all();\n// ['John Doe', 'Jane Doe', 'Johnny Doe']\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">contains()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">contains</span> determina si la colección contiene un elemento dado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['name' =&gt; 'Desk', 'price' =&gt; 100]);\n\\$collection-&gt;contains('Desk');\n// true\n\\$collection-&gt;contains('New York');\n// false\n</code></pre>\n<p>También puedes pasar la llave y el valor al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">contains</span>, que determinará si\n    existe en la colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    ['product' =&gt; 'Desk', 'price' =&gt; 200],\n    ['product' =&gt; 'Chair', 'price' =&gt; 100],\n]);\n\\$collection-&gt;contains('product', 'Bookcase');\n// false\n</code></pre>\n<p>Finalmente, también puedes pasar una función de retorno al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">contains</span> para\n    realizar tu propia comprobación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3, 4, 5]);\n\\$collection-&gt;contains(function (\\$value, \\$key) {\n    return \\$value &gt; 5;\n});\n// false\n</code></pre>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">contains</span> utiliza comparaciones \"flexibles\" (loose) al verificar valores de\n    elementos, lo que significa que una cadena con un valor entero se considerará igual a un entero\n    del mismo valor. Usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">containsStrict</span> si deseas una comparación \"estricta\".\n</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">containsStrict()</span></h4>\n<p>Este método funciona igual que el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">contains</span>; sin embargo, todos los valores se\n    comparan utilizando comparaciones \"estrictas\".</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">count()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">count</span> devuelve la cantidad total de elementos en la colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3, 4]);\n\\$collection-&gt;count();\n// 4\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">countBy()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">count By</span> cuenta las ocurrencias de valores en la colección. Por defecto,\n    el método cuenta las ocurrencias de cada elemento:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 2, 2, 3]);\n\\$counted = \\$collection-&gt;countBy();\n\\$counted-&gt;all();\n// [1 =&gt; 1, 2 =&gt; 3, 3 =&gt; 1]\n</code></pre>\n<p>Sin embargo, puedes pasar una función de retorno (callback) al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">countBy</span> para\n    contar todos los elementos por un valor personalizado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['alice@gmail.com', 'bob@yahoo.com', 'carlos@gmail.com']);\n\\$counted = \\$collection-&gt;countBy(function (\\$email) {\n    return substr(strrchr(\\$email, \"@\"), 1);\n});\n\\$counted-&gt;all();\n// ['gmail.com' =&gt; 2, 'yahoo.com' =&gt; 1]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">crossJoin()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">crossJoin</span> realiza un join cruzado entre los valores de la colección y los\n    arreglos o colecciones dadas, devolviendo un producto cartesiano con todas las permutaciones\n    posibles:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2]);\n\\$matrix = \\$collection-&gt;crossJoin(['a', 'b']);\n\\$matrix-&gt;all();\n/*\n    [\n        [1, 'a'],\n        [1, 'b'],\n        [2, 'a'],\n        [2, 'b'],\n    ]\n*/\n\\$collection = collect([1, 2]);\n\\$matrix = \\$collection-&gt;crossJoin(['a', 'b'], ['I', 'II']);\n\\$matrix-&gt;all();\n/*\n    [\n        [1, 'a', 'I'],\n        [1, 'a', 'II'],\n        [1, 'b', 'I'],\n        [1, 'b', 'II'],\n        [2, 'a', 'I'],\n        [2, 'a', 'II'],\n        [2, 'b', 'I'],\n        [2, 'b', 'II'],\n    ]\n*/\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dd()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dd</span> muestra los elementos de la colección y finaliza la ejecución del\n    script:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['John Doe', 'Jane Doe']);\n\\$collection-&gt;dd();\n/*\n    Collection {\n        #items: array:2 [\n            0 =&gt; \"John Doe\"\n            1 =&gt; \"Jane Doe\"\n        ]\n    }\n*/\n</code></pre>\n<p>Si no quieres dejar de ejecutar el script, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dump</span>.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">diff()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">diff</span> compara la colección con otra colección o una <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">arreglo</span>\n    simple de PHP basado en sus valores. Este método devolverá los valores en la colección original\n    que no están presentes en la colección dada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3, 4, 5]);\n\\$diff = \\$collection-&gt;diff([2, 4, 6, 8]);\n\\$diff-&gt;all();\n// [1, 3, 5]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">diffAssoc()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">diffAssoc</span> compara la colección con otra colección o un\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">arreglo</span> simple de PHP basado en sus claves y valores. Este método devolverá los\n    pares clave / valor en la colección original que no están presentes en la colección dada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    'color' =&gt; 'orange',\n    'type' =&gt; 'fruit',\n    'remain' =&gt; 6\n]);\n\\$diff = \\$collection-&gt;diffAssoc([\n    'color' =&gt; 'yellow',\n    'type' =&gt; 'fruit',\n    'remain' =&gt; 3,\n    'used' =&gt; 6\n]);\n\\$diff-&gt;all();\n// ['color' =&gt; 'orange', 'remain' =&gt; 6]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">diffKeys()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">diffKeys</span> compara la colección con otra colección o un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">arreglo</span>\n    de PHP simple en base a sus claves. Este método devolverá los pares clave / valor en la\n    colección original que no están presentes en la colección dada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    'one' =&gt; 10,\n    'two' =&gt; 20,\n    'three' =&gt; 30,\n    'four' =&gt; 40,\n    'five' =&gt; 50,\n]);\n\\$diff = \\$collection-&gt;diffKeys([\n    'two' =&gt; 2,\n    'four' =&gt; 4,\n    'six' =&gt; 6,\n    'eight' =&gt; 8,\n]);\n\\$diff-&gt;all();\n// ['one' =&gt; 10, 'three' =&gt; 30, 'five' =&gt; 50]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dump()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dump</span> volca los elementos de la colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['John Doe', 'Jane Doe']);\n\\$collection-&gt;dump();\n/*\n    Collection {\n        #items: array:2 [\n            0 =&gt; \"John Doe\"\n            1 =&gt; \"Jane Doe\"\n        ]\n    }\n*/\n</code></pre>\n<p>Si deseas detener la ejecución del script después de volcar la colección, use el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dd</span>.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">duplicates()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">duplicates</span> obtiene y retorna valores duplicados de la colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>    \\$collection = collect(['a', 'b', 'a', 'c', 'b']);\n    \\$collection-&gt;duplicates();\n    // [2 =&gt; 'a', 4 =&gt; 'b']\n</code></pre>\n<p>If the collection contains arrays or objects, you can pass the key of the attributes that you\n    wish to check for duplicate values:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$employees = collect([\n    ['email' =&gt; 'abigail@example.com', 'position' =&gt; 'Developer'],\n    ['email' =&gt; 'james@example.com', 'position' =&gt; 'Designer'],\n    ['email' =&gt; 'victoria@example.com', 'position' =&gt; 'Developer'],\n])\n\\$employees-&gt;duplicates('position');\n// [2 =&gt; 'Developer']\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">duplicatesStrict()</span></h4>\n<p>Este método tiene la misma firma que el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">duplicates</span>, sin embargo, todos los\n    valores son comparandos usando comparaciones \"estrictas\".</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">each()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">each</span> itera sobre los elementos de la colección y pasa cada elemento a una\n    función de retorno (callback):</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection-&gt;each(function (\\$item, \\$key) {\n    //\n});\n</code></pre>\n<p>Si deseas detener la iteración a través de los elementos, puedes devolver <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span> en\n    la función de retorno (callback):</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection-&gt;each(function (\\$item, \\$key) {\n    if (/* some condition */) {\n        return false;\n    }\n});\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">eachSpread()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">eachSpread</span> itera sobre los elementos de la colección, pasando cada valor\n    de elemento anidado a la función de retorno (callback):</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([['John Doe', 35], ['Jane Doe', 33]]);\n\\$collection-&gt;eachSpread(function (\\$name, \\$age) {\n    //\n});\n</code></pre>\n<p>Puedes detener la iteración a través de los elementos al devolver <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span> en la\n    función de retorno (callback):</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection-&gt;eachSpread(function (\\$name, \\$age) {\n    return false;\n});\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">every()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">every</span> se puede usar para verificar que todos los elementos de una\n    colección pasen una comprobación dada a través de una función de retorno (callback):</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>collect([1, 2, 3, 4])-&gt;every(function (\\$value, \\$key) {\n    return \\$value &gt; 2;\n});\n// false\n</code></pre>\n<p>Si la colección está vacía, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">every</span> devolverá true:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([]);\n\\$collection-&gt;every(function(\\$value, \\$key) {\n    return \\$value &gt; 2;\n});\n// true\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">except()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">except</span> devuelve todos los elementos de la colección, excepto aquellos con\n    las llaves especificadas:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['product_id' =&gt; 1, 'price' =&gt; 100, 'discount' =&gt; false]);\n\\$filtered = \\$collection-&gt;except(['price', 'discount']);\n\\$filtered-&gt;all();\n// ['product_id' =&gt; 1]\n</code></pre>\n<p>Para hacer lo contrario a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">except</span>, vea el método only.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">filter()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">filter</span> filtra la colección usando una función de retorno (callback),\n    manteniendo solo los elementos que pasan la comprobación dada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3, 4]);\n\\$filtered = \\$collection-&gt;filter(function (\\$value, \\$key) {\n    return \\$value &gt; 2;\n});\n\\$filtered-&gt;all();\n// [3, 4]\n</code></pre>\n<p>Si no se proporciona una función de retorno, se eliminarán todos los elementos de la colección\n    que son equivalentes a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3, null, false, '', 0, []]);\n\\$collection-&gt;filter()-&gt;all();\n// [1, 2, 3]\n</code></pre>\n<p>Para hacer lo contrario a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">filter</span>, echa un vistazo al método reject.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">first()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">first</span> devuelve el primer elemento de la colección que pasa la comprobación\n    en una función de retorno (callback) dada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>collect([1, 2, 3, 4])-&gt;first(function (\\$value, \\$key) {\n    return \\$value &gt; 2;\n});\n// 3\n</code></pre>\n<p>También puedes llamar al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">first</span> sin argumentos para obtener el primer elemento\n    de la colección. Si la colección está vacía, se devuelve <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>collect([1, 2, 3, 4])-&gt;first();\n// 1\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">firstWhere()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">firstWhere</span> devuelve el primer elemento de la colección con la clave y el\n    valor proporcionado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    ['name' =&gt; 'Regena', 'age' =&gt; null],\n    ['name' =&gt; 'Linda', 'age' =&gt; 14],\n    ['name' =&gt; 'Diego', 'age' =&gt; 23],\n    ['name' =&gt; 'Linda', 'age' =&gt; 84],\n]);\n\\$collection-&gt;firstWhere('name', 'Linda');\n// ['name' =&gt; 'Linda', 'age' =&gt; 14]\n</code></pre>\n<p>También puedes llamar al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">firstWhere</span> con un operador:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection-&gt;firstWhere('age', '&gt;=', 18);\n// ['name' =&gt; 'Diego', 'age' =&gt; 23]\n</code></pre>\n<p>Similar al método where, puedes pasar un argumento al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">firstWhere</span>. En este\n    escenario, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">firstWhere</span> retornará el primer elemento donde el valor de la\n    clave dada es \"verídico\":</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection-&gt;firstWhere('age');\n// ['name' =&gt; 'Linda', 'age' =&gt; 14]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">flatMap()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">flatMap</span> itera a través de la colección y pasa cada valor a una función de\n    retorno (callback). La función de retorno es libre de modificar el elemento y devolverlo,\n    formando así una nueva colección de elementos modificados. Entonces, el arreglo se aplana a un\n    solo nivel:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    ['name' =&gt; 'Sally'],\n    ['school' =&gt; 'Arkansas'],\n    ['age' =&gt; 28]\n]);\n\\$flattened = \\$collection-&gt;flatMap(function (\\$values) {\n    return array_map('strtoupper', \\$values);\n});\n\\$flattened-&gt;all();\n// ['name' =&gt; 'SALLY', 'school' =&gt; 'ARKANSAS', 'age' =&gt; '28'];\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">flatten()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">flatten</span> aplana una colección multidimensional en una de una sola\n    dimensión:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['name' =&gt; 'taylor', 'languages' =&gt; ['php', 'javascript']]);\n\\$flattened = \\$collection-&gt;flatten();\n\\$flattened-&gt;all();\n// ['taylor', 'php', 'javascript'];\n</code></pre>\n<p>Opcionalmente, puedes pasarle a la función un argumento de \"profundidad\":</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    'Apple' =&gt; [\n        ['name' =&gt; 'iPhone 6S', 'brand' =&gt; 'Apple'],\n    ],\n    'Samsung' =&gt; [\n        ['name' =&gt; 'Galaxy S7', 'brand' =&gt; 'Samsung']\n    ],\n]);\n\\$products = \\$collection-&gt;flatten(1);\n\\$products-&gt;values()-&gt;all();\n/*\n    [\n        ['name' =&gt; 'iPhone 6S', 'brand' =&gt; 'Apple'],\n        ['name' =&gt; 'Galaxy S7', 'brand' =&gt; 'Samsung'],\n    ]\n*/\n</code></pre>\n<p>En este ejemplo, al llamar a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">flatten</span> sin proporcionar la profundidad también se\n    aplanarían los arreglos anidados, lo que da como resultado<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">['iPhone 6S', 'Apple', 'Galaxy S7', 'Samsung']</span>.\n    Proporcionar una profundidad te permite restringir los niveles de arreglos anidados que se\n    aplanarán.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">flip()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">flip</span> intercambia las llaves de la colección con sus valores\n    correspondientes:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['name' =&gt; 'taylor', 'framework' =&gt; 'laravel']);\n\\$flipped = \\$collection-&gt;flip();\n\\$flipped-&gt;all();\n// ['taylor' =&gt; 'name', 'laravel' =&gt; 'framework']\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">forget()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">forget</span> elimina un elemento de la colección por su clave:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['name' =&gt; 'taylor', 'framework' =&gt; 'laravel']);\n\\$collection-&gt;forget('name');\n\\$collection-&gt;all();\n// ['framework' =&gt; 'laravel']\n</code></pre>\n<p>Nota</p>\n<p>A diferencia de la mayoría de métodos de una colección, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">forget</span> no devuelve una nueva\n    colección modificada; modifica la colección a la que se llama.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">forPage()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">forPage</span> devuelve una nueva colección que contiene los elementos que\n    estarían presentes en un número de página determinado. El método acepta el número de página como\n    su primer argumento y la cantidad de elementos para mostrar por página como su segundo\n    argumento:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\\$chunk = \\$collection-&gt;forPage(2, 3);\n\\$chunk-&gt;all();\n// [4, 5, 6]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span> devuelve el elemento en una clave determinada. Si la clave no existe,\n    se devuelve <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['name' =&gt; 'taylor', 'framework' =&gt; 'laravel']);\n\\$value = \\$collection-&gt;get('name');\n// taylor\n</code></pre>\n<p>Opcionalmente, puedes pasar un valor predeterminado como segundo argumento:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['name' =&gt; 'taylor', 'framework' =&gt; 'laravel']);\n\\$value = \\$collection-&gt;get('foo', 'default-value');\n// default-value\n</code></pre>\n<p>Incluso puedes pasar una función de retorno (callback) como el valor por defecto. El resultado de\n    la función de retorno se devolverá si la clave especificada no existe:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection-&gt;get('email', function () {\n    return 'default-value';\n});\n// default-value\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">groupBy()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">groupBy</span> agrupa los elementos de la colección con una clave determinada:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    ['account_id' =&gt; 'account-x10', 'product' =&gt; 'Chair'],\n    ['account_id' =&gt; 'account-x10', 'product' =&gt; 'Bookcase'],\n    ['account_id' =&gt; 'account-x11', 'product' =&gt; 'Desk'],\n]);\n\\$grouped = \\$collection-&gt;groupBy('account_id');\n\\$grouped-&gt;toArray();\n/*\n    [\n        'account-x10' =&gt; [\n            ['account_id' =&gt; 'account-x10', 'product' =&gt; 'Chair'],\n            ['account_id' =&gt; 'account-x10', 'product' =&gt; 'Bookcase'],\n        ],\n        'account-x11' =&gt; [\n            ['account_id' =&gt; 'account-x11', 'product' =&gt; 'Desk'],\n        ],\n    ]\n*/\n</code></pre>\n<p>Además de pasar una clave, también puedes pasar una función de retorno (callback). La función de\n    retorno debe devolver el valor de la clave por la que deseas agrupar:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$grouped = \\$collection-&gt;groupBy(function (\\$item, \\$key) {\n    return substr(\\$item['account_id'], -3);\n});\n\\$grouped-&gt;toArray();\n/*\n    [\n        'x10' =&gt; [\n            ['account_id' =&gt; 'account-x10', 'product' =&gt; 'Chair'],\n            ['account_id' =&gt; 'account-x10', 'product' =&gt; 'Bookcase'],\n        ],\n        'x11' =&gt; [\n            ['account_id' =&gt; 'account-x11', 'product' =&gt; 'Desk'],\n        ],\n    ]\n*/\n</code></pre>\n<p>Además de pasar una clave, también puedes pasar una función de retorno (callback). La función de\n    retorno debe devolver el valor de la clave por la que deseas agrupar:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$data = new Collection([\n    10 =&gt; ['user' =&gt; 1, 'skill' =&gt; 1, 'roles' =&gt; ['Role_1', 'Role_3']],\n    20 =&gt; ['user' =&gt; 2, 'skill' =&gt; 1, 'roles' =&gt; ['Role_1', 'Role_2']],\n    30 =&gt; ['user' =&gt; 3, 'skill' =&gt; 2, 'roles' =&gt; ['Role_1']],\n    40 =&gt; ['user' =&gt; 4, 'skill' =&gt; 2, 'roles' =&gt; ['Role_2']],\n]);\n\\$result = \\$data-&gt;groupBy([\n    'skill',\n    function (\\$item) {\n        return \\$item['roles'];\n    },\n], \\$preserveKeys = true);\n/*\n[\n    1 =&gt; [\n        'Role_1' =&gt; [\n            10 =&gt; ['user' =&gt; 1, 'skill' =&gt; 1, 'roles' =&gt; ['Role_1', 'Role_3']],\n            20 =&gt; ['user' =&gt; 2, 'skill' =&gt; 1, 'roles' =&gt; ['Role_1', 'Role_2']],\n        ],\n        'Role_2' =&gt; [\n            20 =&gt; ['user' =&gt; 2, 'skill' =&gt; 1, 'roles' =&gt; ['Role_1', 'Role_2']],\n        ],\n        'Role_3' =&gt; [\n            10 =&gt; ['user' =&gt; 1, 'skill' =&gt; 1, 'roles' =&gt; ['Role_1', 'Role_3']],\n        ],\n    ],\n    2 =&gt; [\n        'Role_1' =&gt; [\n            30 =&gt; ['user' =&gt; 3, 'skill' =&gt; 2, 'roles' =&gt; ['Role_1']],\n        ],\n        'Role_2' =&gt; [\n            40 =&gt; ['user' =&gt; 4, 'skill' =&gt; 2, 'roles' =&gt; ['Role_2']],\n        ],\n    ],\n];\n*/\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">has()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">has</span> determina si existe una clave dada en la colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['account_id' =&gt; 1, 'product' =&gt; 'Desk', 'amount' =&gt; 5]);\n\\$collection-&gt;has('product');\n// true\n\\$collection-&gt;has(['product', 'amount']);\n// true\n\\$collection-&gt;has(['amount', 'price']);\n// false\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">implode()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">implode</span> une a los elementos de una colección. Sus argumentos dependen del\n    tipo de elemento en la colección. Si la colección contiene arreglos u objetos, debes pasar la\n    clave de los atributos que deseas unir y la cadena que deseas colocar entre los valores:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    ['account_id' =&gt; 1, 'product' =&gt; 'Desk'],\n    ['account_id' =&gt; 2, 'product' =&gt; 'Chair'],\n]);\n\\$collection-&gt;implode('product', ', ');\n// Desk, Chair\n</code></pre>\n<p>Si la colección contiene cadenas simples o valores numéricos, pasa el separador como único\n    argumento para el método:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>collect([1, 2, 3, 4, 5])-&gt;implode('-');\n// '1-2-3-4-5'\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">intersect()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">intersect</span> elimina cualquier valor de la colección original que no esté\n    presente en el arreglo o colección dada. La colección resultante conservará las claves de la\n    colección original:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['Desk', 'Sofa', 'Chair']);\n\\$intersect = \\$collection-&gt;intersect(['Desk', 'Chair', 'Bookcase']);\n\\$intersect-&gt;all();\n// [0 =&gt; 'Desk', 2 =&gt; 'Chair']\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">intersectByKeys()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">intersectByKeys</span> elimina cualquier clave de la colección original que no\n    esté presente en el arreglo o colección dada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    'serial' =&gt; 'UX301', 'type' =&gt; 'screen', 'year' =&gt; 2009\n]);\n\\$intersect = \\$collection-&gt;intersectByKeys([\n    'reference' =&gt; 'UX404', 'type' =&gt; 'tab', 'year' =&gt; 2011\n]);\n\\$intersect-&gt;all();\n// ['type' =&gt; 'screen', 'year' =&gt; 2009]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">isEmpty()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">isEmpty</span> devuelve<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span> si la colección está vacía; de lo\n    contrario, se devuelve <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>collect([])-&gt;isEmpty();\n// true\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">isNotEmpty()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">isNotEmpty</span> devuelve <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span> si la colección no está vacía; de lo\n    contrario, se devuelve <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>collect([])-&gt;isNotEmpty();\n// false\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">join()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">join</span> une los valores de la colección con una cadena:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>collect(['a', 'b', 'c'])-&gt;join(', '); // 'a, b, c'\ncollect(['a', 'b', 'c'])-&gt;join(', ', ', and '); // 'a, b, and c'\ncollect(['a', 'b'])-&gt;join(', ', ' and '); // 'a and b'\ncollect(['a'])-&gt;join(', ', ' and '); // 'a'\ncollect([])-&gt;join(', ', ' and '); // ''\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">keyBy()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">keyBy</span> agrupa una colección por claves indicando una clave como párametro.\n    Si varios elementos tienen la misma clave, solo el último aparecerá en la nueva colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    ['product_id' =&gt; 'prod-100', 'name' =&gt; 'Desk'],\n    ['product_id' =&gt; 'prod-200', 'name' =&gt; 'Chair'],\n]);\n\\$keyed = \\$collection-&gt;keyBy('product_id');\n\\$keyed-&gt;all();\n/*\n    [\n        'prod-100' =&gt; ['product_id' =&gt; 'prod-100', 'name' =&gt; 'Desk'],\n        'prod-200' =&gt; ['product_id' =&gt; 'prod-200', 'name' =&gt; 'Chair'],\n    ]\n*/\n</code></pre>\n<p>También puedes pasar una función de retorno (callback) al método. La función debe devolver el\n    valor de la clave de la colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$keyed = \\$collection-&gt;keyBy(function (\\$item) {\n    return strtoupper(\\$item['product_id']);\n});\n\\$keyed-&gt;all();\n/*\n    [\n        'PROD-100' =&gt; ['product_id' =&gt; 'prod-100', 'name' =&gt; 'Desk'],\n        'PROD-200' =&gt; ['product_id' =&gt; 'prod-200', 'name' =&gt; 'Chair'],\n    ]\n*/\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">keys()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">keys</span> devuelve todas las claves de la colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    'prod-100' =&gt; ['product_id' =&gt; 'prod-100', 'name' =&gt; 'Desk'],\n    'prod-200' =&gt; ['product_id' =&gt; 'prod-200', 'name' =&gt; 'Chair'],\n]);\n\\$keys = \\$collection-&gt;keys();\n\\$keys-&gt;all();\n// ['prod-100', 'prod-200']\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">last()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">last</span> devuelve el último elemento de la colección que pasa una condición\n    dentro de una función de retorno (callback):</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>collect([1, 2, 3, 4])-&gt;last(function (\\$value, \\$key) {\n    return \\$value &lt; 3;\n});\n// 2\n</code></pre>\n<p>También puedes llamar al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">last</span> sin parámetros para obtener el último elemento\n    de la colección. Si la colección está vacía, se devuelve <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>collect([1, 2, 3, 4])-&gt;last();\n// 4\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">macro()</span></h4>\n<p>El método estático <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">macro</span> te permite agregar métodos a la clase\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Collection</span> en tiempo de ejecución. Consulta la documentación en Extendiendo\n    Colecciones para mas información.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make()</span></h4>\n<p>El método estático <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make</span> crea una nueva instancia de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Collection</span>. Más\n    información en la sección de Creando Colecciones.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">map()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">map</span> itera a través de la colección y pasa cada valor a una función de\n    retorno. La función de retorno es libre de modificar el elemento y devolverlo, formando así una\n    nueva colección de elementos modificados:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3, 4, 5]);\n\\$multiplied = \\$collection-&gt;map(function (\\$item, \\$key) {\n    return \\$item * 2;\n});\n\\$multiplied-&gt;all();\n// [2, 4, 6, 8, 10]\n</code></pre>\n<p>Nota</p>\n<p>Como la mayoría de los otros métodos de colecciones, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">map</span> devuelve una nueva\n    instancia de colección; no modifica la colección a la que se llama. Si quieres transformar la\n    colección original, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">transform</span>.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mapInto()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mapInto()</span> itera sobre la colección, creando una nueva instancia de la\n    clase dada pasando el valor al constructor:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>class Currency\n{\n    /**\n    * Create a new currency instance.\n    *\n    * @param  string  \\$span\n    * @return void\n    */\n    function __construct(string \\$span)\n    {\n        \\$this-&gt;span = \\$span;\n    }\n}\n\\$collection = collect(['USD', 'EUR', 'GBP']);\n\\$currencies = \\$collection-&gt;mapInto(Currency::class);\n\\$currencies-&gt;all();\n// [Currency('USD'), Currency('EUR'), Currency('GBP')]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mapSpread()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mapSpread</span> itera sobre los elementos de la colección, pasando cada valor de\n    elemento anidado a la función de retorno pasada como parámetro. La función de retorno es libre\n    de modificar el elemento y devolverlo, formando así una nueva colección de elementos\n    modificados:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\\$chunks = \\$collection-&gt;chunk(2);\n\\$sequence = \\$chunks-&gt;mapSpread(function (\\$even, \\$odd) {\n    return \\$even + \\$odd;\n});\n\\$sequence-&gt;all();\n// [1, 5, 9, 13, 17]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mapToGroups()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mapToGroups</span> agrupa los elementos de la colección por la función de retorno\n    dada. La función de retorno debería devolver un arreglo asociativo que contenga una única clave\n    / valor, formando así una nueva colección de valores agrupados:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    [\n        'name' =&gt; 'John Doe',\n        'department' =&gt; 'Sales',\n    ],\n    [\n        'name' =&gt; 'Jane Doe',\n        'department' =&gt; 'Sales',\n    ],\n    [\n        'name' =&gt; 'Johnny Doe',\n        'department' =&gt; 'Marketing',\n    ]\n]);\n\\$grouped = \\$collection-&gt;mapToGroups(function (\\$item, \\$key) {\n    return [\\$item['department'] =&gt; \\$item['name']];\n});\n\\$grouped-&gt;toArray();\n/*\n    [\n        'Sales' =&gt; ['John Doe', 'Jane Doe'],\n        'Marketing' =&gt; ['Johnny Doe'],\n    ]\n*/\n\\$grouped-&gt;get('Sales')-&gt;all();\n// ['John Doe', 'Jane Doe']\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mapWithKeys()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mapWithKeys</span> itera a través de la colección y pasa cada valor a la función\n    de retorno dada. La función de retorno debe devolver un arreglo asociativo que contiene una\n    unica clave / valor:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    [\n        'name' =&gt; 'John',\n        'department' =&gt; 'Sales',\n        'email' =&gt; 'john@example.com'\n    ],\n    [\n        'name' =&gt; 'Jane',\n        'department' =&gt; 'Marketing',\n        'email' =&gt; 'jane@example.com'\n    ]\n]);\n\\$keyed = \\$collection-&gt;mapWithKeys(function (\\$item) {\n    return [\\$item['email'] =&gt; \\$item['name']];\n});\n\\$keyed-&gt;all();\n/*\n    [\n        'john@example.com' =&gt; 'John',\n        'jane@example.com' =&gt; 'Jane',\n    ]\n*/\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">max()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">max</span> devuelve el valor máximo de una clave determinada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$max = collect([['foo' =&gt; 10], ['foo' =&gt; 20]])-&gt;max('foo');\n// 20\n\\$max = collect([1, 2, 3, 4, 5])-&gt;max();\n// 5\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">median()</span></h4>\n<p>\n    El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">median</span> devuelve el\n    valor medio\n    de una clave dada:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$median = collect([['foo' =&gt; 10], ['foo' =&gt; 10], ['foo' =&gt; 20], ['foo' =&gt; 40]])-&gt;median('foo');\n// 15\n\\$median = collect([1, 1, 2, 4])-&gt;median();\n// 1.5\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">merge()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">merge</span> combina el arreglo o colección dada con la colección original. Si\n    una clave en los elementos dados coincide con una clave de la colección original, el valor de\n    los elementos dados sobrescribirá el valor en la colección original:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['product_id' =&gt; 1, 'price' =&gt; 100]);\n\\$merged = \\$collection-&gt;merge(['price' =&gt; 200, 'discount' =&gt; false]);\n\\$merged-&gt;all();\n// ['product_id' =&gt; 1, 'price' =&gt; 200, 'discount' =&gt; false]\n</code></pre>\n<p>Si las llaves de los elementos son numéricas, los valores se agregarán al final de la\n    colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['Desk', 'Chair']);\n\\$merged = \\$collection-&gt;merge(['Bookcase', 'Door']);\n\\$merged-&gt;all();\n// ['Desk', 'Chair', 'Bookcase', 'Door']\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mergeRecursive()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mergeRecursive</span> une el arreglo o colección dada de forma recursiva con la\n    colección original. Si una cadena en los elementos dados coincide con una cadena en la colección\n    original, entonces los valores para dichas cadenas son unidos en un arreglo, y esto es hecho de\n    forma recursiva:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['product_id' =&gt; 1, 'price' =&gt; 100]);\n\\$merged = \\$collection-&gt;merge(['product_id' =&gt; 2, 'price' =&gt; 200, 'discount' =&gt; false]);\n\\$merged-&gt;all();\n// ['product_id' =&gt; [1, 2], 'price' =&gt; [100, 200], 'discount' =&gt; false]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">min()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">min</span> devuelve el valor mínimo de una llave determinada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$min = collect([['foo' =&gt; 10], ['foo' =&gt; 20]])-&gt;min('foo');\n// 10\n\\$min = collect([1, 2, 3, 4, 5])-&gt;min();\n// 1\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mode()</span></h4>\n<p>\n    El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mode</span> devuelve el\n    valor moda\n    de una clave dada:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$mode = collect([['foo' =&gt; 10], ['foo' =&gt; 10], ['foo' =&gt; 20], ['foo' =&gt; 40]])-&gt;mode('foo');\n// [10]\n\\$mode = collect([1, 1, 2, 4])-&gt;mode();\n// [1]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">nth()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">nth</span> crea una nueva colección que consiste en cada elemento n-ésimo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['a', 'b', 'c', 'd', 'e', 'f']);\n\\$collection-&gt;nth(4);\n// ['a', 'e']\n</code></pre>\n<p>Opcionalmente puedes pasar un desplazamiento como segundo argumento:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection-&gt;nth(4, 1);\n// ['b', 'f']\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">only()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">only</span> devuelve los elementos de la colección con las claves especificadas:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['product_id' =&gt; 1, 'name' =&gt; 'Desk', 'price' =&gt; 100, 'discount' =&gt; false]);\n\\$filtered = \\$collection-&gt;only(['product_id', 'name']);\n\\$filtered-&gt;all();\n// ['product_id' =&gt; 1, 'name' =&gt; 'Desk']\n</code></pre>\n<p>Para hacer lo inverso a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">only</span>, usa el método except.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pad()</span></h4>\n<p>\n    El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pad</span> llenará el arreglo con el valor dado hasta que el arreglo alcance el\n    tamaño especificado. Este método se comporta como la función\n    array_pad\n    de PHP.\n</p>\n<p>Para rellenar a la izquierda, debes especificar un tamaño negativo. No se realizará ningún\n    relleno si el valor absoluto del tamaño dado es menor o igual que la longitud del arreglo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['A', 'B', 'C']);\n\\$filtered = \\$collection-&gt;pad(5, 0);\n\\$filtered-&gt;all();\n// ['A', 'B', 'C', 0, 0]\n\\$filtered = \\$collection-&gt;pad(-5, 0);\n\\$filtered-&gt;all();\n// [0, 0, 'A', 'B', 'C']\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">partition()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">partition</span> se puede combinar con la función PHP <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">list</span> para\n    separar los elementos que pasan una comprobación dada de aquellos que no lo hacen:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3, 4, 5, 6]);\nlist(\\$underThree, \\$equalOrAboveThree) = \\$collection-&gt;partition(function (\\$i) {\n    return \\$i &lt; 3;\n});\n\\$underThree-&gt;all();\n// [1, 2]\n\\$equalOrAboveThree-&gt;all();\n// [3, 4, 5, 6]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pipe()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pipe</span> pasa la colección a una función de retorno y devuelve el resultado:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3]);\n\\$piped = \\$collection-&gt;pipe(function (\\$collection) {\n    return \\$collection-&gt;sum();\n});\n// 6\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pluck()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pluck</span> recupera todos los valores para una llave dada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    ['product_id' =&gt; 'prod-100', 'name' =&gt; 'Desk'],\n    ['product_id' =&gt; 'prod-200', 'name' =&gt; 'Chair'],\n]);\n\\$plucked = \\$collection-&gt;pluck('name');\n\\$plucked-&gt;all();\n// ['Desk', 'Chair']\n</code></pre>\n<p>También puedes especificar cómo deseas que se coloquen las llaves:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$plucked = \\$collection-&gt;pluck('name', 'product_id');\n\\$plucked-&gt;all();\n// ['prod-100' =&gt; 'Desk', 'prod-200' =&gt; 'Chair']\n</code></pre>\n<p>Si existen llaves duplicadas, el último elemento que coincida será insertado en la colección\n    recuperada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    ['brand' =&gt; 'Tesla',  'color' =&gt; 'red'],\n    ['brand' =&gt; 'Pagani', 'color' =&gt; 'white'],\n    ['brand' =&gt; 'Tesla',  'color' =&gt; 'black'],\n    ['brand' =&gt; 'Pagani', 'color' =&gt; 'orange'],\n]);\n\\$plucked = \\$collection-&gt;pluck('color', 'brand');\n\\$plucked-&gt;all();\n// ['Tesla' =&gt; 'black', 'Pagani' =&gt; 'orange']\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pop()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pop</span> elimina y devuelve el último elemento de la colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3, 4, 5]);\n\\$collection-&gt;pop();\n// 5\n\\$collection-&gt;all();\n// [1, 2, 3, 4]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">prepend()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">prepend</span> agrega un elemento al comienzo de la colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3, 4, 5]);\n\\$collection-&gt;prepend(0);\n\\$collection-&gt;all();\n// [0, 1, 2, 3, 4, 5]\n</code></pre>\n<p>También puedes pasar un segundo argumento para establecer la clave del elemento antepuesto:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['one' =&gt; 1, 'two' =&gt; 2]);\n\\$collection-&gt;prepend(0, 'zero');\n\\$collection-&gt;all();\n// ['zero' =&gt; 0, 'one' =&gt; 1, 'two' =&gt; 2]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pull()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pull</span> elimina y devuelve un elemento de la colección por su clave:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['product_id' =&gt; 'prod-100', 'name' =&gt; 'Desk']);\n\\$collection-&gt;pull('name');\n// 'Desk'\n\\$collection-&gt;all();\n// ['product_id' =&gt; 'prod-100']\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">push()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">push</span> agrega un elemento al final de la colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3, 4]);\n\\$collection-&gt;push(5);\n\\$collection-&gt;all();\n// [1, 2, 3, 4, 5]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">put()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">put</span> establece la clave y el valor dado en la colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['product_id' =&gt; 1, 'name' =&gt; 'Desk']);\n\\$collection-&gt;put('price', 100);\n\\$collection-&gt;all();\n// ['product_id' =&gt; 1, 'name' =&gt; 'Desk', 'price' =&gt; 100]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">random()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">random</span> devuelve un elemento aleatorio de la colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3, 4, 5]);\n\\$collection-&gt;random();\n// 4 - (retrieved randomly)\n</code></pre>\n<p>Opcionalmente, puedes pasar un número entero a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">random</span> para especificar cuántos\n    elementos deseas recuperar al azar. Siempre se devuelve una colección de valores cuando se pasa\n    explícitamente la cantidad de valores que deseas recibir:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$random = \\$collection-&gt;random(3);\n\\$random-&gt;all();\n// [2, 4, 5] - (retrieved randomly)\n</code></pre>\n<p>Si la colección tiene un númeno menor de elementos al solicitado, el método arrojará un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">InvalidArgumentException</span>.\n</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">reduce()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">reduce</span> reduce la colección a un solo valor, pasando el resultado de cada\n    iteración a la iteración siguiente:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3]);\n\\$total = \\$collection-&gt;reduce(function (\\$carry, \\$item) {\n    return \\$carry + \\$item;\n});\n// 6\n</code></pre>\n<p>El valor de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$carry</span> en la primera iteración es <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>; sin embargo,\n    puedes especificar su valor inicial pasando un segundo argumento a reducir:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection-&gt;reduce(function (\\$carry, \\$item) {\n    return \\$carry + \\$item;\n}, 4);\n// 10\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">reject()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">reject</span> filtra la colección usando una función de retorno. La función de\n    retorno debe devolver <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span> si el elemento debe eliminarse de la colección\n    resultante:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3, 4]);\n\\$filtered = \\$collection-&gt;reject(function (\\$value, \\$key) {\n    return \\$value &gt; 2;\n});\n\\$filtered-&gt;all();\n// [1, 2]\n</code></pre>\n<p>Para el inverso del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">reject</span>, ve el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">filter</span>.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">replace()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">replace</span> se comporta de forma similar a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">merge</span>; sin embargo, en\n    adición a sobrescribir los elementos que coinciden con las cadenas, el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">replace</span> también sobrescribirá los elementos en la colección que tienen claves\n    númericas coincidentes:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['Taylor', 'Abigail', 'James']);\n\\$replaced = \\$collection-&gt;replace([1 =&gt; 'Victoria', 3 =&gt; 'Finn']);\n// ['Taylor', 'Victoria', 'James', 'Finn']\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">replaceRecursive()</span></h4>\n<p>Este método funciona como el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">replace</span>, pero se reflejerá en arreglos y\n    aplicará el mismo proceso de reemplazo a los valores internos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['Taylor', 'Abigail', ['James', 'Victoria', 'Finn']]);\n\\$replaced = \\$collection-&gt;replaceRecursive(['Charlie', 2 =&gt; [1 =&gt; 'King']]);\n\\$replaced-&gt;all();\n// ['Charlie', 'Abigail', ['James', 'King', 'Finn']]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">reverse()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">reverse</span> invierte el orden de los elementos de la colección, conservando\n    las claves originales:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['a', 'b', 'c', 'd', 'e']);\n\\$reversed = \\$collection-&gt;reverse();\n\\$reversed-&gt;all();\n/*\n    [\n        4 =&gt; 'e',\n        3 =&gt; 'd',\n        2 =&gt; 'c',\n        1 =&gt; 'b',\n        0 =&gt; 'a',\n    ]\n*/\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">search()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">search</span> busca en la colección el valor dado y devuelve su clave si se\n    encuentra. Si el valor no se encuentra, se devuelve <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>.</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([2, 4, 6, 8]);\n\\$collection-&gt;search(4);\n// 1\n</code></pre>\n<p>La búsqueda se realiza usando una comparación \"flexible\" (loose), lo que significa que una cadena\n    con un valor entero se considerará igual a un número entero del mismo valor. Para usar una\n    comparación \"estricta\", pasa <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span> como segundo parámetro del método:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection-&gt;search('4', true);\n// false\n</code></pre>\n<p>Alternativamente, puedes pasar tu propia función de retorno para buscar el primer elemento que\n    pase la validación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection-&gt;search(function (\\$item, \\$key) {\n    return \\$item &gt; 5;\n});\n// 2\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">shift()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">shift</span> elimina y devuelve el primer elemento de la colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3, 4, 5]);\n\\$collection-&gt;shift();\n// 1\n\\$collection-&gt;all();\n// [2, 3, 4, 5]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">shuffle()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">shuffle</span> mezcla aleatoriamente los elementos en la colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3, 4, 5]);\n\\$shuffled = \\$collection-&gt;shuffle();\n\\$shuffled-&gt;all();\n// [3, 2, 5, 1, 4] - (generated randomly)\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">slice()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">slice</span> devuelve una porción de la colección que comienza en el índice\n    pasado como parámetro:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\\$slice = \\$collection-&gt;slice(4);\n\\$slice-&gt;all();\n// [5, 6, 7, 8, 9, 10]\n</code></pre>\n<p>Si deseas limitar el tamaño de la porción devuelta, pase el tamaño deseado como segundo argumento\n    para el método:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$slice = \\$collection-&gt;slice(4, 2);\n\\$slice-&gt;all();\n// [5, 6]\n</code></pre>\n<p>El segmento devuelto conservará las claves de forma predeterminada. Si no deseas conservar las\n    claves originales, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">values</span> para volverlos a indexar.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">some()</span></h4>\n<p>Alias para el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">contains</span>.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sort()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sort</span> ordena la colección. La colección ordenada conserva las claves del\n    arreglo original, por lo que en este ejemplo utilizaremos el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">values</span> para\n    restablecer las claves de los índices numerados consecutivamente:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([5, 3, 1, 2, 4]);\n\\$sorted = \\$collection-&gt;sort();\n\\$sorted-&gt;values()-&gt;all();\n// [1, 2, 3, 4, 5]\n</code></pre>\n<p>\n    Si tus necesidades de ordenamiento son más avanzadas, puedes pasar una funión de retorno a\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sort</span> con tu propio algoritmo. Consulta la documentación de PHP en\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">uasort</span>\n    , que es lo que llama el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sort</span> de la colección.\n</p>\n<p>TIP</p>\n<p>Si necesitas ordenar una colección de matrices u objetos anidados, consulta los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sortBy</span>\n    y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sortByDesc</span>.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sortBy()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sortBy</span> ordena la colección con la clave dada. La colección ordenada\n    conserva las claves del arreglo original, por lo que en este ejemplo utilizaremos el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">values</span> para restablecer las claves de los índices numerados consecutivamente:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    ['name' =&gt; 'Desk', 'price' =&gt; 200],\n    ['name' =&gt; 'Chair', 'price' =&gt; 100],\n    ['name' =&gt; 'Bookcase', 'price' =&gt; 150],\n]);\n\\$sorted = \\$collection-&gt;sortBy('price');\n\\$sorted-&gt;values()-&gt;all();\n/*\n    [\n        ['name' =&gt; 'Chair', 'price' =&gt; 100],\n        ['name' =&gt; 'Bookcase', 'price' =&gt; 150],\n        ['name' =&gt; 'Desk', 'price' =&gt; 200],\n    ]\n*/\n</code></pre>\n<p>Puedes también pasar tu propia función de retorno para determinar como ordenar los valores de la\n    colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    ['name' =&gt; 'Desk', 'colors' =&gt; ['Black', 'Mahogany']],\n    ['name' =&gt; 'Chair', 'colors' =&gt; ['Black']],\n    ['name' =&gt; 'Bookcase', 'colors' =&gt; ['Red', 'Beige', 'Brown']],\n]);\n\\$sorted = \\$collection-&gt;sortBy(function (\\$product, \\$key) {\n    return count(\\$product['colors']);\n});\n\\$sorted-&gt;values()-&gt;all();\n/*\n    [\n        ['name' =&gt; 'Chair', 'colors' =&gt; ['Black']],\n        ['name' =&gt; 'Desk', 'colors' =&gt; ['Black', 'Mahogany']],\n        ['name' =&gt; 'Bookcase', 'colors' =&gt; ['Red', 'Beige', 'Brown']],\n    ]\n*/\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sortByDesc()</span></h4>\n<p>Este método tiene la misma funcionalidad que el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sortBy</span>, pero ordenará la\n    colección en el orden opuesto.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sortKeys()</span></h4>\n<p>The <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sortKeys</span> method ordena la colección por las llaves del arrelgo asociativo\n    subyacente:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    'id' =&gt; 22345,\n    'first' =&gt; 'John',\n    'last' =&gt; 'Doe',\n]);\n\\$sorted = \\$collection-&gt;sortKeys();\n\\$sorted-&gt;all();\n/*\n    [\n        'first' =&gt; 'John',\n        'id' =&gt; 22345,\n        'last' =&gt; 'Doe',\n    ]\n*/\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sortKeysDesc()</span></h4>\n<p>Este método tiene la misma funcionalidad que el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sortKeys</span>, pero ordenará la\n    colección en el orden opuesto.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">splice()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">splice</span> elimina y devuelve una porción de elementos comenzando en el índice\n    especificado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3, 4, 5]);\n\\$chunk = \\$collection-&gt;splice(2);\n\\$chunk-&gt;all();\n// [3, 4, 5]\n\\$collection-&gt;all();\n// [1, 2]\n</code></pre>\n<p>Puedes pasar un segundo parámetro para limitar el tamaño del fragmento resultante:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3, 4, 5]);\n\\$chunk = \\$collection-&gt;splice(2, 1);\n\\$chunk-&gt;all();\n// [3]\n\\$collection-&gt;all();\n// [1, 2, 4, 5]\n</code></pre>\n<p>Además, puedes pasar un tercer parámetro que contenga los nuevos elementos para reemplazar los\n    elementos eliminados de la colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3, 4, 5]);\n\\$chunk = \\$collection-&gt;splice(2, 1, [10, 11]);\n\\$chunk-&gt;all();\n// [3]\n\\$collection-&gt;all();\n// [1, 2, 10, 11, 4, 5]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">split()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">split</span> divide una colección en el número de grupos dado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3, 4, 5]);\n\\$groups = \\$collection-&gt;split(3);\n\\$groups-&gt;toArray();\n// [[1, 2], [3, 4], [5]]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sum()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sum</span> devuelve la suma de todos los elementos de la colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>collect([1, 2, 3, 4, 5])-&gt;sum();\n// 15\n</code></pre>\n<p>Si la colección contiene arreglos u objetos anidados, debes pasar una clave para determinar qué\n    valores sumar:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    ['name' =&gt; 'JavaScript: The Good Parts', 'pages' =&gt; 176],\n    ['name' =&gt; 'JavaScript: The Definitive Guide', 'pages' =&gt; 1096],\n]);\n\\$collection-&gt;sum('pages');\n// 1272\n</code></pre>\n<p>Además, puedes pasar una función de retorno para determinar qué valores de la colección\n    sumar:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    ['name' =&gt; 'Chair', 'colors' =&gt; ['Black']],\n    ['name' =&gt; 'Desk', 'colors' =&gt; ['Black', 'Mahogany']],\n    ['name' =&gt; 'Bookcase', 'colors' =&gt; ['Red', 'Beige', 'Brown']],\n]);\n\\$collection-&gt;sum(function (\\$product) {\n    return count(\\$product['colors']);\n});\n// 6\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">take()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">take</span> devuelve una nueva colección con el número especificado de elementos:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([0, 1, 2, 3, 4, 5]);\n\\$chunk = \\$collection-&gt;take(3);\n\\$chunk-&gt;all();\n// [0, 1, 2]\n</code></pre>\n<p>También puedes pasar un número entero negativo para tomar la cantidad especificada de elementos\n    del final de la colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([0, 1, 2, 3, 4, 5]);\n\\$chunk = \\$collection-&gt;take(-2);\n\\$chunk-&gt;all();\n// [4, 5]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tap()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tap</span> pasa la colección a la función de retorno dada, lo que te permite\n    \"aprovechar\" la colección en un punto específico y hacer algo con los elementos sin afectar a la\n    propia colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>collect([2, 4, 3, 1, 5])\n    -&gt;sort()\n    -&gt;tap(function (\\$collection) {\n        Log::debug('Values after sorting', \\$collection-&gt;values()-&gt;toArray());\n    })\n    -&gt;shift();\n// 1\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">times()</span></h4>\n<p>El método estático <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">times</span> crea una nueva colección invocando una función de retorno y\n    la cantidad determinada de veces:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = Collection::times(10, function (\\$number) {\n    return \\$number * 9;\n});\n\\$collection-&gt;all();\n// [9, 18, 27, 36, 45, 54, 63, 72, 81, 90]\n</code></pre>\n<p>Este método puede ser útil cuando se combina con Factories para crear modelos Eloquent:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$categories = Collection::times(3, function (\\$number) {\n    return factory(Category::class)-&gt;create(['name' =&gt; \"Category No. \\$number\"]);\n});\n\\$categories-&gt;all();\n/*\n    [\n        ['id' =&gt; 1, 'name' =&gt; 'Category #1'],\n        ['id' =&gt; 2, 'name' =&gt; 'Category #2'],\n        ['id' =&gt; 3, 'name' =&gt; 'Category #3'],\n    ]\n*/\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toArray()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toArray</span> convierte la colección en un simple <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">array</span> de PHP. Si\n    los valores de la colección son modelos Eloquent, los modelos también se convertirán en\n    arreglos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['name' =&gt; 'Desk', 'price' =&gt; 200]);\n\\$collection-&gt;toArray();\n/*\n    [\n        ['name' =&gt; 'Desk', 'price' =&gt; 200],\n    ]\n*/\n</code></pre>\n<p>Nota</p>\n<p><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toArray</span> también convierte todos los objetos anidados de la colección que son una\n    instancia de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arrayable</span> en un arreglo. En cambio, si deseas obtener el arreglo\n    subyacente sin procesar, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">all</span>.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toJson()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toJson</span> convierte la colección en una cadena serializada JSON:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['name' =&gt; 'Desk', 'price' =&gt; 200]);\n\\$collection-&gt;toJson();\n// '{\"name\":\"Desk\", \"price\":200}'\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">transform()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">transform</span> itera sobre la colección y llama a la función de retorno dada\n    con cada elemento de la colección. Los elementos en la colección serán reemplazados por los\n    valores devueltos de la función de retorno:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3, 4, 5]);\n\\$collection-&gt;transform(function (\\$item, \\$key) {\n    return \\$item * 2;\n});\n\\$collection-&gt;all();\n// [2, 4, 6, 8, 10]\n</code></pre>\n<p>Nota</p>\n<p>A diferencia de la mayoría de otros métodos de las colecciones, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">transform</span> modifica\n    la colección en sí. Si deseas crear una nueva colección en su lugar, usa el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">map</span>.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">union()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">union</span> agrega el arreglo dado a la colección. Si el arreglo contiene claves\n    que ya están en la colección original, se preferirán los valores de la colección original:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1 =&gt; ['a'], 2 =&gt; ['b']]);\n\\$union = \\$collection-&gt;union([3 =&gt; ['c'], 1 =&gt; ['b']]);\n\\$union-&gt;all();\n// [1 =&gt; ['a'], 2 =&gt; ['b'], 3 =&gt; ['c']]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unique()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unique</span> devuelve todos los elementos únicos en la colección. La colección\n    devuelta conserva las claves del arreglo original, por lo que en este ejemplo utilizaremos el\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">values</span> para restablecer las llaves de los índices numerados\n    consecutivamente:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 1, 2, 2, 3, 4, 2]);\n\\$unique = \\$collection-&gt;unique();\n\\$unique-&gt;values()-&gt;all();\n// [1, 2, 3, 4]\n</code></pre>\n<p>Al tratar con arreglos u objetos anidados, puedes especificar la clave utilizada para determinar\n    la singularidad:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    ['name' =&gt; 'iPhone 6', 'brand' =&gt; 'Apple', 'type' =&gt; 'phone'],\n    ['name' =&gt; 'iPhone 5', 'brand' =&gt; 'Apple', 'type' =&gt; 'phone'],\n    ['name' =&gt; 'Apple Watch', 'brand' =&gt; 'Apple', 'type' =&gt; 'watch'],\n    ['name' =&gt; 'Galaxy S6', 'brand' =&gt; 'Samsung', 'type' =&gt; 'phone'],\n    ['name' =&gt; 'Galaxy Gear', 'brand' =&gt; 'Samsung', 'type' =&gt; 'watch'],\n]);\n\\$unique = \\$collection-&gt;unique('brand');\n\\$unique-&gt;values()-&gt;all();\n/*\n    [\n        ['name' =&gt; 'iPhone 6', 'brand' =&gt; 'Apple', 'type' =&gt; 'phone'],\n        ['name' =&gt; 'Galaxy S6', 'brand' =&gt; 'Samsung', 'type' =&gt; 'phone'],\n    ]\n*/\n</code></pre>\n<p>También puedes pasar una función de retorno para determinar la singularidad del elemento:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$unique = \\$collection-&gt;unique(function (\\$item) {\n    return \\$item['brand'].\\$item['type'];\n});\n\\$unique-&gt;values()-&gt;all();\n/*\n    [\n        ['name' =&gt; 'iPhone 6', 'brand' =&gt; 'Apple', 'type' =&gt; 'phone'],\n        ['name' =&gt; 'Apple Watch', 'brand' =&gt; 'Apple', 'type' =&gt; 'watch'],\n        ['name' =&gt; 'Galaxy S6', 'brand' =&gt; 'Samsung', 'type' =&gt; 'phone'],\n        ['name' =&gt; 'Galaxy Gear', 'brand' =&gt; 'Samsung', 'type' =&gt; 'watch'],\n    ]\n*/\n</code></pre>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unique</span> utiliza comparaciones \"flexibles\" (loose) al verificar valores de\n    elementos, lo que significa que una cadena con un valor entero se considerará igual a un entero\n    del mismo valor. Usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">uniqueStrict</span> para filtrar usando una comparación\n    \"estricta\".</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">uniqueStrict()</span></h4>\n<p>Este método tiene la misma funcionalidad que el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unique</span>; sin embargo, todos\n    los valores se comparan utilizando comparaciones \"estrictas\".</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unless()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unless</span> ejecutará una función de retorno a menos que el primer argumento\n    dado al método se evalúe como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3]);\n\\$collection-&gt;unless(true, function (\\$collection) {\n    return \\$collection-&gt;push(4);\n});\n\\$collection-&gt;unless(false, function (\\$collection) {\n    return \\$collection-&gt;push(5);\n});\n\\$collection-&gt;all();\n// [1, 2, 3, 5]\n</code></pre>\n<p>Para hacer lo inverso a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unless</span>, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">when</span>.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unlessEmpty()</span></h4>\n<p>Alias para el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whenNotEmpty</span>.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unlessNotEmpty()</span></h4>\n<p>Alias para el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whenEmpty</span>.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unwrap()</span></h4>\n<p>El método estático <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unwrap</span> devuelve los elementos subyacentes de la colección del\n    valor dado cuando corresponda:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Collection::unwrap(collect('John Doe'));\n// ['John Doe']\nCollection::unwrap(['John Doe']);\n// ['John Doe']\nCollection::unwrap('John Doe');\n// 'John Doe'\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">values()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">values</span> devuelve una nueva colección con las claves restablecidas en\n    enteros consecutivos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    10 =&gt; ['product' =&gt; 'Desk', 'price' =&gt; 200],\n    11 =&gt; ['product' =&gt; 'Desk', 'price' =&gt; 200]\n]);\n\\$values = \\$collection-&gt;values();\n\\$values-&gt;all();\n/*\n    [\n        0 =&gt; ['product' =&gt; 'Desk', 'price' =&gt; 200],\n        1 =&gt; ['product' =&gt; 'Desk', 'price' =&gt; 200],\n    ]\n*/\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">when()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">when</span> ejecutará una función de retorno cuando el primer argumento dado al\n    método se evalúa como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([1, 2, 3]);\n\\$collection-&gt;when(true, function (\\$collection) {\n    return \\$collection-&gt;push(4);\n});\n\\$collection-&gt;when(false, function (\\$collection) {\n    return \\$collection-&gt;push(5);\n});\n\\$collection-&gt;all();\n// [1, 2, 3, 4]\n</code></pre>\n<p>Para hacer lo inverso a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">when</span>, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unless</span>.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whenEmpty()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whenEmpty</span> ejecutará la función de retorno dada cuando la colección esté\n    vacía:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['michael', 'tom']);\n\\$collection-&gt;whenEmpty(function (\\$collection) {\n    return \\$collection-&gt;push('adam');\n});\n\\$collection-&gt;all();\n// ['michael', 'tom']\n\\$collection = collect();\n\\$collection-&gt;whenEmpty(function (\\$collection) {\n    return \\$collection-&gt;push('adam');\n});\n\\$collection-&gt;all();\n// ['adam']\n\\$collection = collect(['michael', 'tom']);\n\\$collection-&gt;whenEmpty(function(\\$collection) {\n    return \\$collection-&gt;push('adam');\n}, function(\\$collection) {\n    return \\$collection-&gt;push('taylor');\n});\n\\$collection-&gt;all();\n// ['michael', 'tom', 'taylor']\n</code></pre>\n<p>Para el inverso de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whenEmpty</span>, ve el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whenNotEmpty</span>.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whenNotEmpty()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whenNotEmpty</span> ejecutará la función de retorno dada cuando la colección no\n    esté vacía:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['michael', 'tom']);\n\\$collection-&gt;whenNotEmpty(function (\\$collection) {\n    return \\$collection-&gt;push('adam');\n});\n\\$collection-&gt;all();\n// ['michael', 'tom', 'adam']\n\\$collection = collect();\n\\$collection-&gt;whenNotEmpty(function (\\$collection) {\n    return \\$collection-&gt;push('adam');\n});\n\\$collection-&gt;all();\n// []\n\\$collection = collect();\n\\$collection-&gt;whenNotEmpty(function(\\$collection) {\n    return \\$collection-&gt;push('adam');\n}, function(\\$collection) {\n    return \\$collection-&gt;push('taylor');\n});\n\\$collection-&gt;all();\n// ['taylor']\n</code></pre>\n<p>Para el inverso de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whenNotEmpty</span>, ve el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whenEmpty</span>.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where</span> filtra la colección por clave y valor pasados como parámetros:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    ['product' =&gt; 'Desk', 'price' =&gt; 200],\n    ['product' =&gt; 'Chair', 'price' =&gt; 100],\n    ['product' =&gt; 'Bookcase', 'price' =&gt; 150],\n    ['product' =&gt; 'Door', 'price' =&gt; 100],\n]);\n\\$filtered = \\$collection-&gt;where('price', 100);\n\\$filtered-&gt;all();\n/*\n    [\n        ['product' =&gt; 'Chair', 'price' =&gt; 100],\n        ['product' =&gt; 'Door', 'price' =&gt; 100],\n    ]\n*/\n</code></pre>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where</span> usa comparaciones \"flexibles\" (loose) al verificar valores de\n    elementos, lo que significa que una cadena con un valor entero se considerará igual a un entero\n    del mismo valor. Usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereStrict</span> para hacer comparaciones \"estrictas\".\n</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereStrict()</span></h4>\n<p>Este método tiene la misma funcionalidad que el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where</span>; sin embargo, todos los\n    valores se comparan utilizando comparaciones \"estrictas\".</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereBetween()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereBetween</span> filtra la colección dentro de un rango dado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    ['product' =&gt; 'Desk', 'price' =&gt; 200],\n    ['product' =&gt; 'Chair', 'price' =&gt; 80],\n    ['product' =&gt; 'Bookcase', 'price' =&gt; 150],\n    ['product' =&gt; 'Pencil', 'price' =&gt; 30],\n    ['product' =&gt; 'Door', 'price' =&gt; 100],\n]);\n\\$filtered = \\$collection-&gt;whereBetween('price', [100, 200]);\n\\$filtered-&gt;all();\n/*\n    [\n        ['product' =&gt; 'Desk', 'price' =&gt; 200],\n        ['product' =&gt; 'Bookcase', 'price' =&gt; 150],\n        ['product' =&gt; 'Door', 'price' =&gt; 100],\n    ]\n*/\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereIn()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereIn</span> filtra la colección por una clave / valor contenida dentro del\n    arreglo dado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    ['product' =&gt; 'Desk', 'price' =&gt; 200],\n    ['product' =&gt; 'Chair', 'price' =&gt; 100],\n    ['product' =&gt; 'Bookcase', 'price' =&gt; 150],\n    ['product' =&gt; 'Door', 'price' =&gt; 100],\n]);\n\\$filtered = \\$collection-&gt;whereIn('price', [150, 200]);\n\\$filtered-&gt;all();\n/*\n    [\n        ['product' =&gt; 'Bookcase', 'price' =&gt; 150],\n        ['product' =&gt; 'Desk', 'price' =&gt; 200],\n    ]\n*/\n</code></pre>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereIn</span> usa comparaciones \"flexibles\" (loose) al verificar valores de\n    elementos, lo que significa que una cadena con un valor entero se considerará igual a un número\n    entero del mismo valor. Usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereInStrict</span> para hacer comparaciones\n    \"estrictas\".</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereInStrict()</span></h4>\n<p>Este método tiene la misma funcionalidad que el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereIn</span>; sin embargo, todos\n    los valores se comparan utilizando comparaciones \"estrictas\".</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereInstanceOf()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereInstanceOf</span> filtra la colección por un tipo de clase dado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    new User,\n    new User,\n    new Post,\n]);\nreturn \\$collection-&gt;whereInstanceOf(User::class);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereNotBetween()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereNotBetween</span> filtra la colección fuera de un rango dado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    ['product' =&gt; 'Desk', 'price' =&gt; 200],\n    ['product' =&gt; 'Chair', 'price' =&gt; 80],\n    ['product' =&gt; 'Bookcase', 'price' =&gt; 150],\n    ['product' =&gt; 'Pencil', 'price' =&gt; 30],\n    ['product' =&gt; 'Door', 'price' =&gt; 100],\n]);\n\\$filtered = \\$collection-&gt;whereNotBetween('price', [100, 200]);\n\\$filtered-&gt;all();\n/*\n    [\n        ['product' =&gt; 'Chair', 'price' =&gt; 80],\n        ['product' =&gt; 'Pencil', 'price' =&gt; 30],\n    ]\n*/\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereNotIn()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereNotIn</span> filtra la colección por una clave / valor que no está contenida\n    dentro del arreglo dado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect([\n    ['product' =&gt; 'Desk', 'price' =&gt; 200],\n    ['product' =&gt; 'Chair', 'price' =&gt; 100],\n    ['product' =&gt; 'Bookcase', 'price' =&gt; 150],\n    ['product' =&gt; 'Door', 'price' =&gt; 100],\n]);\n\\$filtered = \\$collection-&gt;whereNotIn('price', [150, 200]);\n\\$filtered-&gt;all();\n/*\n    [\n        ['product' =&gt; 'Chair', 'price' =&gt; 100],\n        ['product' =&gt; 'Door', 'price' =&gt; 100],\n    ]\n*/\n</code></pre>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereNotIn</span> utiliza comparaciones \"flexibles\" (loose) cuando se comprueban\n    los valores de los elementos, lo que significa que una cadena con un valor entero se considerará\n    igual a un número entero del mismo valor. Usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereNotInStrict</span> para hacer\n    comparaciones \"estrictas\".</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereNotInStrict()</span></h4>\n<p>Este método tiene la misma funcionalidad que el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereNotIn</span>; sin embargo,\n    todos los valores se comparan utilizando comparaciones \"estrictas\".</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">wrap()</span></h4>\n<p>El método estático <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">wrap</span> envuelve el valor dado en una colección cuando corresponda:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = Collection::wrap('John Doe');\n\\$collection-&gt;all();\n// ['John Doe']\n\\$collection = Collection::wrap(['John Doe']);\n\\$collection-&gt;all();\n// ['John Doe']\n\\$collection = Collection::wrap(collect('John Doe'));\n\\$collection-&gt;all();\n// ['John Doe']\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">zip()</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">zip</span> combina los valores del arreglo con los valores de la colección\n    original en el índice correspondiente:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['Chair', 'Desk']);\n\\$zipped = \\$collection-&gt;zip([100, 200]);\n\\$zipped-&gt;all();\n// [['Chair', 100], ['Desk', 200]]\n</code></pre>\n<h2>Mensajes de orden superior</h2>\n<p>Las colecciones también brindan soporte para \"mensajes de orden superior\", que son atajos para\n    realizar acciones comunes en las colecciones. Los métodos de recopilación que proporcionan\n    mensajes de orden superior son: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">average</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">avg</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">contains</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">each</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">every</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">filter</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">first</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">flatMap</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">groupBy</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">keyBy</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">map</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">max</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">min</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">partition</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">reject</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">some</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sortBy</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sortByDesc</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sum</span>, and <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unique</span>.\n</p>\n<p>Se puede acceder a cada mensaje de orden superior como una propiedad dinámica en una instancia de\n    colección. Por ejemplo, usemos el mensaje <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">each</span> de orden superior para llamar a un\n    método en cada objeto dentro de una colección:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$users = User::where('votes', '&gt;', 500)-&gt;get();\n\\$users-&gt;each-&gt;markAsVip();\n</code></pre>\n<p>Del mismo modo, podemos usar el mensaje de orden superior <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sum</span> para reunir el número\n    total de \"votos\" para una colección de usuarios:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$users = User::where('group', 'Development')-&gt;get();\nreturn \\$users-&gt;sum-&gt;votes;\n</code></pre>\n</div>"
      },
      {
        "titulo": "Eventos",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Eventos</h1>\n<ul>\n    <li>Introducción</li>\n    <li>\n        Registro de eventos y oyentes\n        <ul>\n            <li>Generación de eventos y oyentes</li>\n            <li>Registro manual de eventos</li>\n            <li>Descubrimiento de eventos</li>\n        </ul>\n    </li>\n    <li>Definiendo eventos</li>\n    <li>Definiendo oyentes</li>\n    <li>\n        Oyentes de eventos en cola\n        <ul>\n            <li>Accediendo manualmente a la cola</li>\n            <li>Manejo de trabajos fallidos</li>\n        </ul>\n    </li>\n    <li>Despachando eventos</li>\n    <li>\n        Suscriptores de eventos\n        <ul>\n            <li>Escribiendo suscriptores de eventos</li>\n            <li>Registrando suscriptores de eventos</li>\n        </ul>\n    </li>\n</ul>\n<h2>Introducción</h2>\n<p>Los eventos de Laravel proporcionan una implementación de observador simple, lo que permite\n    suscribirse y escuchar diversos eventos que ocurren en tu aplicación. Las clases de eventos\n    normalmente se almacenan en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Events</span>, mientras que tus oyentes se\n    almacenan en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Listeners</span>. No te preocupes si no ves estos directorios en tu\n    aplicación, ya que se crearán para ti cuando generes eventos y oyentes utilizando los comandos\n    de consola Artisan.</p>\n<p>Los eventos sirven como una excelente manera de desacoplar varios aspectos de tu aplicación, ya\n    que un solo evento puede tener múltiples oyentes que no dependen entre sí. Por ejemplo, es\n    posible que desees enviar una notificación de Slack a tu usuario cada vez que se envíe un\n    pedido. En lugar de acoplar tu código de procesamiento de pedidos a tu código de notificación\n    Slack, puedes generar un evento <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">OrderShipped</span>, que un oyente puede recibir y\n    transformar en una notificación Slack.</p>\n<h2>Registro de eventos y oyentes</h2>\n<p>El <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">EventServiceProvider</span> incluido en tu aplicación Laravel proporciona un lugar\n    conveniente para registrar todos los oyentes de eventos de tu aplicación. La propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">listen</span>\n    contiene un arreglo de todos los eventos (claves) y sus oyentes (valores). Puedes agregar tantos\n    eventos a este arreglo como lo requieras tu aplicación. Por ejemplo, agreguemos un evento <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">OrderShipped</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* The event listener mappings for the application.\n*\n* @var array\n*/\nprotected \\$listen = [\n    'App\\Events\\OrderShipped' =&gt; [\n        'App\\Listeners\\SendShipmentNotification',\n    ],\n];\n</code></pre>\n<h3># Generación de eventos y oyentes</h3>\n<p>Por supuesto, crear manualmente los archivos para cada evento y oyente es engorroso. En vez de\n    eso, agrega oyentes y eventos a tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">EventServiceProvider</span> y usa el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">event:generate</span>.\n    Este comando generará cualquier evento u oyente que esté listado en tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">EventServiceProvider</span>.\n    Los eventos y oyentes que ya existen quedarán intactos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan event:generate\n</code></pre>\n<h3># Registro manual de eventos</h3>\n<p>Normalmente, los eventos deberían registrarse a través del arreglo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$listen</span> de\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">EventServiceProvider</span>; sin embargo, también puedes registrar manualmente eventos\n    basados en Closure en el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span> de tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">EventServiceProvider</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Register any other events for your application.\n*\n* @return void\n*/\npublic function boot()\n{\n    parent::boot();\n    Event::listen('event.name', function (\\$foo, \\$bar) {\n        //\n    });\n}\n</code></pre>\n<h4># Comodín de oyentes de un evento</h4>\n<p>Puedes incluso registrar oyentes usando el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">*</span> como un parámetro comodín, lo que te\n    permite capturar múltiples eventos en el mismo oyente. Los comodines de oyentes reciben el\n    nombre del evento como su primer argumento y el arreglo de datos de eventos completo como su\n    segundo argumento:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Event::listen('event.*', function (\\$eventName, array \\$data) {\n    //\n});\n</code></pre>\n<h3># Descubrimiento de eventos</h3>\n<p>Nota</p>\n<p>El Descubrimiento de Eventos está disponible para Laravel 5.8.9 o posterior.</p>\n<p>En vez de registrar eventos y oyentes (listeners) manualmente en el arreglo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$listen</span>\n    del <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">EventServiceProvider</span>, puedes habilitar la detección automática de eventos.\n    Cuando se habilita la detección de eventos, Laravel encontrará y registrará automáticamente tus\n    eventos y oyentes escaneando el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Listeners</span> de tu aplicación. Además,\n    todos los eventos definidos explícitamente listados en el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">EventServiceProvider</span>\n    seguirán registrados.</p>\n<p>Laravel encuentra los listeners de eventos mediante el escaneo de las clases listener usando\n    reflexión. Cuando Laravel encuentra algun método de clase listener que empieza por\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">handle</span>, Laravel registrará dichos métodos como listeners de eventos para el evento\n    que está escrito en la firma del método:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use App\\Events\\PodcastProcessed;\nclass SendPodcastProcessedNotification\n{\n    /**\n    * Handle the given event.\n    *\n    * @param  \\App\\Events\\PodcastProcessed\n    * @return void\n    */\n    public function handle(PodcastProcessed \\$event)\n    {\n        //\n    }\n}\n</code></pre>\n<p>La detección de eventos está deshabilitada de forma predeterminada, pero puedes habilitarla\n    sobreescribiendo el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">shouldDiscoverEvents</span> del\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">EventServiceProvider</span> de tu aplicación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Determine if events and listeners should be automatically discovered.\n*\n* @return bool\n*/\npublic function shouldDiscoverEvents()\n{\n    return true;\n}\n</code></pre>\n<p>Por defecto, se escanearán todos los oyentes dentro del directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Listeners</span> de tu\n    aplicación. Si deseas definir directorios adicionales para analizar, puedes sobreescribir el\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">discoverEventsWithin</span> en tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">EventServiceProvider</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the listener directories that should be used to discover events.\n*\n* @return array\n*/\nprotected function discoverEventsWithin()\n{\n    return [\n        \\$this-&gt;app-&gt;path('Listeners'),\n    ];\n}\n</code></pre>\n<p>En producción, es probable que no desees que el framework analice todos tus oyentes en cada\n    petición. Por lo tanto, durante tu proceso de despliegue, debes ejecutar el comando Artisan\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">event:cache</span> para almacenar en caché un manifiesto de todos los eventos y oyentes de\n    tu aplicación. Este manifiesto será utilizado por el framework para acelerar el proceso de\n    registro de eventos. El comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">event:clear</span> puede ser usado para destruir la caché.\n</p>\n<p>TIP TIP</p>\n<p>El comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">event:list</span> puede ser usado para mostrar una lista de todos los eventos y\n    oyentes registrados por tu aplicación.</p>\n<h2>Definiendo eventos</h2>\n<p>Una clase de evento es un contenedor de datos que guarda la información relacionada con el\n    evento. Por ejemplo, supongamos que nuestro evento <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">OrderShipped</span> (orden enviada)\n    generado recibe un objeto ORM Eloquent:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Events;\nuse App\\Order;\nuse Illuminate\\Queue\\SerializesModels;\nclass OrderShipped\n{\n    use SerializesModels;\n    public \\$order;\n    /**\n    * Create a new event instance.\n    *\n    * @param  \\App\\Order  \\$order\n    * @return void\n    */\n    public function __construct(Order \\$order)\n    {\n        \\$this-&gt;order = \\$order;\n    }\n}\n</code></pre>\n<p>Como puedes ver, esta clase de evento no contiene lógica. Es un contenedor para la instancia\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Order</span> que se compró. El trait <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">SerializesModels</span> utilizado por el evento\n    serializará con elegancia cualquier modelo Eloquent si el objeto del evento se serializa\n    utilizando la función de PHP <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">serialize</span>.</p>\n<h2>Definiendo oyentes</h2>\n<p>A continuación, echemos un vistazo al oyente de nuestro evento de ejemplo. Los oyentes de eventos\n    reciben la instancia de evento en su método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">handle</span>. El comando\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">event:generate</span> importará automáticamente la clase de evento adecuada y declarará el\n    tipo de evento en el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">handle</span>. Dentro del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">handle</span>, puedes\n    realizar las acciones necesarias para responder al evento:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Listeners;\nuse App\\Events\\OrderShipped;\nclass SendShipmentNotification\n{\n    /**\n    * Create the event listener.\n    *\n    * @return void\n    */\n    public function __construct()\n    {\n        //\n    }\n    /**\n    * Handle the event.\n    *\n    * @param  \\App\\Events\\OrderShipped  \\$event\n    * @return void\n    */\n    public function handle(OrderShipped \\$event)\n    {\n        // Access the order using \\$event-&gt;order...\n    }\n}\n</code></pre>\n<p>TIP TIP</p>\n<p>Tus oyentes de eventos también pueden declarar el tipo de cualquier dependencia que necesiten de\n    sus constructores. Todos los oyentes de eventos se resuelven a través contenedor de servicio de\n    Laravel, por lo que las dependencias se inyectarán automáticamente.</p>\n<h4># Deteniendo la propagación de un evento</h4>\n<p>A veces, es posible que desees detener la propagación de un evento a otros oyentes. Puede hacerlo\n    devolviendo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span> desde el método<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">handle</span> de tu oyente.</p>\n<h2>Oyentes de Eventos de Cola</h2>\n<p>Los oyentes de colas pueden ser beneficiosos si tu oyente va a realizar una tarea lenta, como\n    enviar un correo electrónico o realizar una solicitud HTTP. Antes de comenzar con oyentes de\n    cola, asegúrate de configurar su cola e iniciar un oyente de colas en tu servidor o entorno de\n    desarrollo local.</p>\n<p>Para especificar que un oyente debe estar en cola, agrega la interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ShouldQueue</span> a\n    la clase de oyente. Los oyentes generados por el comando de Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">event:generate</span>\n    ya tienen esta interfaz importada en el espacio de nombres actual, por lo que puedes usarla\n    inmediatamente:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Listeners;\nuse App\\Events\\OrderShipped;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nclass SendShipmentNotification implements ShouldQueue\n{\n    //\n}\n</code></pre>\n<p>¡Eso es! Ahora, cuando este oyente es llamado por un evento, el despachador de eventos lo\n    colocará en cola automáticamente usando el sistema de colas de Laravel. Si no se lanzan\n    excepciones cuando la cola ejecuta el oyente, el trabajo en cola se eliminará automáticamente\n    una vez que haya terminado de procesarse.</p>\n<h4># Personalizando la conexión de la cola y el nombre de la cola</h4>\n<p>Si deseas personalizar la conexión de cola, el nombre de la cola o el tiempo de demora de la cola\n    de un oyente de eventos, puedes definir las propiedades <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$connection</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$queue</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$delay</span> en tu clase de oyente:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Listeners;\nuse App\\Events\\OrderShipped;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nclass SendShipmentNotification implements ShouldQueue\n{\n    /**\n    * The name of the connection the job should be sent to.\n    *\n    * @var string|null\n    */\n    public \\$connection = 'sqs';\n    /**\n    * The name of the queue the job should be sent to.\n    *\n    * @var string|null\n    */\n    public \\$queue = 'listeners';\n    /**\n    * The time (seconds) before the job should be processed.\n    *\n    * @var int\n    */\n    public \\$delay = 60;\n}\n</code></pre>\n<h4># Cola condicional de listeners</h4>\n<p>Algunas veces, necesitarás determinar si un listener debe ser agregado a una cola en base a datos\n    que sólo están disponibles en tiempo de ejecución. Para lograr esto, un método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">shouldQueue</span> puede ser agregar a un listener para determinar si el listener debe ser\n    agregado a una cola y ejecutado de forma sincronica:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Listeners;\nuse App\\Events\\OrderPlaced;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nclass RewardGiftCard implements ShouldQueue\n{\n    /**\n    * Reward a gift card to the customer.\n    *\n    * @param  \\App\\Events\\OrderPlaced  \\$event\n    * @return void\n    */\n    public function handle(OrderPlaced \\$event)\n    {\n        //\n    }\n    /**\n    * Determine whether the listener should be queued.\n    *\n    * @param  \\App\\Events\\OrderPlaced  \\$event\n    * @return bool\n    */\n    public function shouldQueue(OrderPlaced \\$event)\n    {\n        return \\$event-&gt;order-&gt;subtotal &gt;= 5000;\n    }\n}\n</code></pre>\n<h3># Accediendo manualmente a la cola</h3>\n<p>Si necesitas acceder manualmente a los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">delete</span> y<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">release</span> de la\n    cola de trabajo subyacente del oyente, puedes hacerlo utilizando el trait <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Queue\\InteractsWithQueue</span>.\n    Este trait se importa de forma predeterminada en los oyentes generados y proporciona acceso a\n    estos métodos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Listeners;\nuse App\\Events\\OrderShipped;\nuse Illuminate\\Queue\\InteractsWithQueue;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nclass SendShipmentNotification implements ShouldQueue\n{\n    use InteractsWithQueue;\n    /**\n        * Handle the event.\n        *\n        * @param  \\App\\Events\\OrderShipped  \\$event\n        * @return void\n        */\n    public function handle(OrderShipped \\$event)\n    {\n        if (true) {\n            \\$this-&gt;release(30);\n        }\n    }\n}\n</code></pre>\n<h3># Manejo de trabajos fallidos</h3>\n<p>A veces, tus oyentes de eventos en cola pueden fallar. Si el oyente en cola supera el número\n    máximo de intentos según lo define tu trabajador de cola, se llamará al método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">failed</span> en tu oyente. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">failed</span> recibe la instancia del evento y\n    la excepción que causó el error:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Listeners;\nuse App\\Events\\OrderShipped;\nuse Illuminate\\Queue\\InteractsWithQueue;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nclass SendShipmentNotification implements ShouldQueue\n{\n    use InteractsWithQueue;\n    /**\n    * Handle the event.\n    *\n    * @param  \\App\\Events\\OrderShipped  \\$event\n    * @return void\n    */\n    public function handle(OrderShipped \\$event)\n    {\n        //\n    }\n    /**\n    * Handle a job failure.\n    *\n    * @param  \\App\\Events\\OrderShipped  \\$event\n    * @param  \\Exception  \\$exception\n    * @return void\n    */\n    public function failed(OrderShipped \\$event, \\$exception)\n    {\n        //\n    }\n}\n</code></pre>\n<h2>Despachando eventos</h2>\n<p>Para enviar un evento, puedes pasar una instancia del evento a la función de ayuda (helper)\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">event</span>. El helper enviará el evento a todos tus oyentes registrados. Dado que el\n    helper <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">event</span> está disponible globalmente, puedes llamarlo desde cualquier lugar de\n    tu aplicación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse App\\Order;\nuse App\\Events\\OrderShipped;\nuse App\\Http\\Controllers\\Controller;\nclass OrderController extends Controller\n{\n    /**\n    * Ship the given order.\n    *\n    * @param  int  \\$orderId\n    * @return Response\n    */\n    public function ship(\\$orderId)\n    {\n        \\$order = Order::findOrFail(\\$orderId);\n        // Order shipment logic...\n        event(new OrderShipped(\\$order));\n    }\n}\n</code></pre>\n<p>TIP TIP</p>\n<p>Al realizar pruebas, puede ser útil afirmar que ciertos eventos se enviaron sin activar realmente\n    a tus oyentes. Las funciones de ayuda (helpers) incluidas en Laravel hace que sea fácil de\n    hacerlo.</p>\n<h2>Suscriptores de eventos</h2>\n<h3># Escribiendo suscriptores de eventos</h3>\n<p>Los suscriptores de eventos son clases que pueden suscribirse a múltiples eventos dentro de la\n    misma clase, lo que te permite definir varios manejadores de eventos dentro de una sola clase.\n    Los suscriptores deben definir un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">subscribe</span>, al que se le pasará una\n    instancia de despachador de eventos. Puedes llamar al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">listen</span> en el\n    despachador dado para registrar los oyentes de eventos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Listeners;\nclass UserEventSubscriber\n{\n    /**\n    * Handle user login events.\n    */\n    public function handleUserLogin(\\$event) {}\n    /**\n    * Handle user logout events.\n    */\n    public function handleUserLogout(\\$event) {}\n    /**\n    * Register the listeners for the subscriber.\n    *\n    * @param  \\Illuminate\\Events\\Dispatcher  \\$events\n    */\n    public function subscribe(\\$events)\n    {\n        \\$events-&gt;listen(\n            'Illuminate\\Auth\\Events\\Login',\n            'App\\Listeners\\UserEventSubscriber@handleUserLogin'\n        );\n        \\$events-&gt;listen(\n            'Illuminate\\Auth\\Events\\Logout',\n            'App\\Listeners\\UserEventSubscriber@handleUserLogout'\n        );\n    }\n}\n</code></pre>\n<h3># Registrando suscriptores de eventos</h3>\n<p>Después de escribir el suscriptor, estás listo para registrarlo con el despachador de eventos.\n    Puede registrar suscriptores usando la propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$subscribe</span> en el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">EventServiceProvider</span>.\n    Por ejemplo, vamos a agregar el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">UserEventSubscriber</span> a la lista:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Providers;\nuse Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider as ServiceProvider;\nclass EventServiceProvider extends ServiceProvider\n{\n    /**\n    * The event listener mappings for the application.\n    *\n    * @var array\n    */\n    protected \\$listen = [\n        //\n    ];\n    /**\n    * The subscriber classes to register.\n    *\n    * @var array\n    */\n    protected \\$subscribe = [\n        'App\\Listeners\\UserEventSubscriber',\n    ];\n}\n</code></pre>\n</div>"
      },
      {
        "titulo": "Almacenamiento de archivos",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Almacenamiento De Archivos</h1>\n<ul>\n    <li>Introducción</li>\n    <li>\n        Configuración\n        <ul>\n            <li>Disco público</li>\n            <li>Driver local</li>\n            <li>Prerrequisitos del driver</li>\n            <li>Cache</li>\n        </ul>\n    </li>\n    <li>Obteniendo instancias del disco</li>\n    <li>\n        Retornando archivos\n        <ul>\n            <li>Descargando archivos</li>\n            <li>URLs de archivos</li>\n            <li>Metadatos de archivos</li>\n        </ul>\n    </li>\n    <li>\n        Almacenando archivos\n        <ul>\n            <li>Carga de archivos</li>\n            <li>Visibilidad de archivos</li>\n        </ul>\n    </li>\n    <li>Eliminando archivos</li>\n    <li>Directorios</li>\n    <li>Sitemas de archivos personalizados</li>\n</ul>\n<h2>Introducción</h2>\n<p>\n    Laravel proporciona una podera abstracción del sistema de archivos gracias al genial paquete de\n    PHP\n    Flysystem\n    de Frank de Jonge. La integración de Flysystem de Laravel proporciona drivers simples de usar\n    para trabajar con sistemas de archivos locales, Amazon S3 y Rackspace Cloud Storage.\n</p>\n<h2>Configuración</h2>\n<p>La configuración del sistema de archivos está ubicada en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/filesystems.php</span>.\n    Dentro de este archivo puedes configurar todos tus \"discos\". Cada disco representa un driver de\n    almacenamiento y una ubicación de almacenamiento en particular. Configuraciones de ejemplo para\n    cada driver soportado están incluídas en el archivo de configuración. Así que, modifica la\n    configuración para reflejar tus preferencias de almacenamiento y credenciales.</p>\n<p>Puedes configurar tantos discos como quieras e incluso tener múltiples discos que usen el mismo\n    driver.</p>\n<h3># El disco público</h3>\n<p>\n    El disco <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public</span> está pensado para archivos que serán publicamente accesibles. Por\n    defecto, el disco <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public</span> usa el driver <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">local</span> y almacena estos archivos\n    en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">storage/app/public</span>. Para hacerlos accesibles desde la web, debes crear un enlace\n    simbólico desde <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public/storage</span> a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">storage/app/public</span>. Esta convención\n    mantendrá tus archivos publicamente accesibles en un directorio que puede ser fácilmente\n    compartido a través de despliegues al usar sistemas de despligue sin tiempo de inactividad como\n    Envoyer\n    .\n</p>\n<p>Para crear un enlace simbólico, puedes usar el comando de Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">storage:link</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan storage:link\n</code></pre>\n<p>Una vez que un archivo ha sido guardado y el enlace simbólico ha sido creado, puedes crear una\n    URL a los archivos usando el helper <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">asset</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>echo asset('storage/file.txt');\n</code></pre>\n<h3># Driver local</h3>\n<p>Al usar el driver <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">local</span>, todas las operaciones sobre archivos son relativas al\n    directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">root</span> definido en tu archivo de configuración. Por defecto, este valor\n    está establecido al directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">storage/app</span>. Por lo tanto, el siguiente método\n    almacenará un archivo en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">storage/app/file.txt</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Storage::disk('local')-&gt;put('file.txt', 'Contents');\n</code></pre>\n<h3># Prerrequisitos del driver</h3>\n<h4># Paquetes de Composer</h4>\n<p>Antes de usar los drivers de SFTP, S3 o Rackspace, necesitarás instalar el paquete apropiado\n    mediante Composer:</p>\n<ul>\n    <li>SFTP: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">league/flysystem-sftp ~1.0</span></li>\n    <li>Amazon S3: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">league/flysystem-aws-s3-v3 ~1.0</span></li>\n    <li>Rackspace: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">league/flysystem-rackspace ~1.0</span></li>\n</ul>\n<p>Algo sumamente recomendable para mejorar el rendimiento es usar un adaptador de caché.\n    Necesitarás un paquete adicional para esto:</p>\n<ul>\n    <li>CachedAdapter: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">league/flysystem-cached-adapter ~1.0</span></li>\n</ul>\n<h4># Configuración del driver S3</h4>\n<p>La información de configuración del driver de S3 está ubicada en tu archivo de configuración\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/filesystems.php</span>. Este archivo contiene un arreglo de configuración de\n    ejemplo para un driver de S3. Eres libre de modificar este arreglo con tu propia configuración y\n    credenciales de S3. Por conveniencia, estas variables de entorno coinciden con la convención de\n    nombres usada por AWS CLI.</p>\n<h4># Configuración del driver FTP</h4>\n<p>Las integraciones de Flysystem de Laravel funcionan bien con FTP; sin embargo, una configuración\n    de ejemplo no está incluida con el archivo de configuración por defecto del framework <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">filesystems.php</span>.\n    Si necesitas configurar un sistema de archivos FTP, puedes usar la siguiente configuración de\n    ejemplo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'ftp' =&gt; [\n    'driver'   =&gt; 'ftp',\n    'host'     =&gt; 'ftp.example.com',\n    'username' =&gt; 'your-username',\n    'password' =&gt; 'your-password',\n    // Optional FTP Settings...\n    // 'port'     =&gt; 21,\n    // 'root'     =&gt; '',\n    // 'passive'  =&gt; true,\n    // 'ssl'      =&gt; true,\n    // 'timeout'  =&gt; 30,\n],\n</code></pre>\n<h4># Configuración del driver SFTP</h4>\n<p>Las integraciones de Flysystem de Laravel funcionan bien con SFTP; sin embargo, una configuración\n    de ejemplo no está incluída con el archivo de configuración por defecto del framework <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">filesystems.php</span>.\n    Si necesitas configurar un sistema de archivos SFTP, puedes usar la siguiente configuración de\n    ejemplo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'sftp' =&gt; [\n    'driver' =&gt; 'sftp',\n    'host' =&gt; 'example.com',\n    'username' =&gt; 'your-username',\n    'password' =&gt; 'your-password',\n    // Settings for SSH key based authentication...\n    // 'privateKey' =&gt; '/path/to/privateKey',\n    // 'password' =&gt; 'encryption-password',\n    // Optional SFTP Settings...\n    // 'port' =&gt; 22,\n    // 'root' =&gt; '',\n    // 'timeout' =&gt; 30,\n],\n</code></pre>\n<h4># Configuración del driver Rackspace</h4>\n<p>Las integraciones de Flysystem de Laravel funcionan bien con Rackspace; sin embargo, una\n    configuración de ejemplo no está incluida con el archivo de configuración por defecto del\n    framework <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">filesystems.php</span>. Si necesitas configurar un sistema de archivos de\n    Rackspace, puedes usar la siguiente configuración de ejemplo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'rackspace' =&gt; [\n    'driver'    =&gt; 'rackspace',\n    'username'  =&gt; 'your-username',\n    'key'       =&gt; 'your-key',\n    'container' =&gt; 'your-container',\n    'endpoint'  =&gt; 'https://identity.api.rackspacecloud.com/v2.0/',\n    'region'    =&gt; 'IAD',\n    'url_type'  =&gt; 'publicURL',\n],\n</code></pre>\n<h3># Cache</h3>\n<p>Para habilitar la cache para un disco dado, puedes agregar una directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cache</span> a las\n    opciones de configuración del disco. La opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cache</span> debe ser un arreglo de\n    opciones de cache que contiene un nombre de disco <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">disk</span>, el tiempo de expiración en\n    segundos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">expire</span>, y el prefijo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">prefix</span> de la cache:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'s3' =&gt; [\n    'driver' =&gt; 's3',\n    // Other Disk Options...\n    'cache' =&gt; [\n        'store' =&gt; 'memcached',\n        'expire' =&gt; 600,\n        'prefix' =&gt; 'cache-prefix',\n    ],\n],\n</code></pre>\n<h2>Obteniendo instancias del disco</h2>\n<p>El facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Storage</span> puede ser usado para interactuar con cualquier de tus discos\n    configurados. Por ejemplo, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">put</span> en el facade para almacenar un\n    avatar en el disco por defecto. Si llamas a métodos en el facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Storage</span> sin\n    primero llamar al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">disk</span>, la llamada al método será automáticamente pasada al\n    disco por defecto:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Storage;\nStorage::put('avatars/1', \\$fileContents);\n</code></pre>\n<p>Si tus aplicaciones interactuan con múltiples discos, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">disk</span> en\n    el facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Storage</span> para trabajar con archivos en un disco en particular:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Storage::disk('s3')-&gt;put('avatars/1', \\$fileContents);\n</code></pre>\n<h2>Retornando archivos</h2>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span> puede ser usado para retornar el contenido de un archivo. Las cadenas\n    del archivo serán retornadas por el método. Recuerda, todas las rutas del archivo deben ser\n    especificadas relativas a la ubicación \"raíz\" configurada por el disco:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$contents = Storage::get('file.jpg');\n</code></pre>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">exists</span> puede ser usado para determinar si un archivo existe en el disco:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$exists = Storage::disk('s3')-&gt;exists('file.jpg');\n</code></pre>\n<h3># Descargando archivos</h3>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">download</span> puede ser usado para generar una respuesta que obliga al\n    navegador del usuario a descargar el archivo al directorio dado. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">download</span>\n    acepta un nombre de archivo como segundo argumento del método, que determinará el nombre del\n    archivo que es visto por el usuario descargando el archivo. Finalmente, puedes pasar un arreglo\n    de encabezados HTTP como tercer argumento al método:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return Storage::download('file.jpg');\nreturn Storage::download('file.jpg', \\$name, \\$headers);\n</code></pre>\n<h3># URLs de archivos</h3>\n<p>Puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url</span> para obtener la URL del archivo dado. Si estás usando el\n    driver <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">local</span>, esto típicamente agregará <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">/storage</span> a la ruta dada y\n    retornará una URL relativa al archivo. Si estás usando el driver <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">s3</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">rackspace</span>,\n    será retornada la URL remota completamente habilitada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Storage;\n\\$url = Storage::url('file.jpg');\n</code></pre>\n<p>Nota</p>\n<p>Recuerda, si estás usando el driver <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">local</span>, todos los archivos que deberían ser\n    públicamente accesibles deben ser colocados en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">storage/app/public</span>.\n    Además, debes crear un enlace simbólico a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public/storage</span> que apunte al directorio\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">storage/app/public</span>.</p>\n<h4># URLs temporales</h4>\n<p>Para archivos almacenados usando los drivers <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">s3</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">rackspace</span>, puedes\n    crear una URL temporal a un archivo dado usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">temporaryUrl</span>. Este método\n    acepta una ruta y una instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DateTime</span> que especifica cuando la URL debería\n    expirar:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$url = Storage::temporaryUrl(\n    'file.jpg', now()-&gt;addMinutes(5)\n);\n</code></pre>\n<p>\n    Si necesitas especificar\n    parametros de petición de S3\n    adicionales, puedes pasar el arreglo de parametros de petición como tercer argumento del método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">temporaryUrl</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$url = Storage::temporaryUrl(\n    'file.jpg',\n    now()-&gt;addMinutes(5),\n    ['ResponseContentType' =&gt; 'application/octet-stream'],\n);\n</code></pre>\n<h4># Personalización del host de URL local</h4>\n<p>Si te gustaría predefinir el host para archivos almacenados en un disco usando el driver <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">local</span>,\n    puedes agregar una opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url</span> al arreglo de configuración del disco:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'public' =&gt; [\n    'driver' =&gt; 'local',\n    'root' =&gt; storage_path('app/public'),\n    'url' =&gt; env('APP_URL').'/storage',\n    'visibility' =&gt; 'public',\n],\n</code></pre>\n<h3># Metadatos de archivos</h3>\n<p>Además de leer y agregar archivos, Laravel también puede proporcionar información sobre los\n    archivos. Por ejemplo, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">size</span> puede ser usado para obtener el tamaño del\n    archivo en bytes:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Storage;\n\\$size = Storage::size('file.jpg');\n</code></pre>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">lastModified</span> retorna la marca de tiempo de UNIX de la última vez en que el\n    archivo fue modificado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$time = Storage::lastModified('file.jpg');\n</code></pre>\n<h2>Almacenando archivos</h2>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">put</span> puede ser usado para almacenar el contenido de archivos en un disco.\n    Puedes también pasar un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">recurso</span> de PHP al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">put</span>, que usará el\n    soporte subyancete de stream de Flysystem. Usar streams es altamente recomendable al lidiar con\n    archivos grandes:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Storage;\nStorage::put('file.jpg', \\$contents);\nStorage::put('file.jpg', \\$resource);\n</code></pre>\n<h4># Streaming automático</h4>\n<p>Si te gustaría que Laravel automáticamente haga streaming de un archivo dado a tu ubicación de\n    almacenamiento, puedes usar los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">putFile</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">putFileAs</span>. Este\n    método acepta una instancia de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Http\\File</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Http\\UploadedFile</span>\n    y automáticamente hará stream del archivo a la ubicación deseada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Http\\File;\nuse Illuminate\\Support\\Facades\\Storage;\n// Automatically generate a unique ID for file name...\nStorage::putFile('photos', new File('/path/to/photo'));\n// Manually specify a file name...\nStorage::putFileAs('photos', new File('/path/to/photo'), 'photo.jpg');\n</code></pre>\n<p>Hay algunas cosas importantes a tener en cuenta sobre el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">putFile</span>. Observa que\n    sólo especificamos un nombre de directorio, no un nombre de archivo. Por defecto, el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">putFile</span> generará un ID único que servirá como nombre del archivo. La extensión del\n    archivo será determinada examinando el tipo MIME del archivo. La ruta al archivo será retornada\n    por el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">putFile</span> para que puedes almacenar la ruta, incluyendo el nombre de\n    archivo generado, en tu base de datos.</p>\n<p>Los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">putFile</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">putFileAs</span> también aceptan un argumento para\n    especificar la \"visibilidad\" del archivo almacenado. Esto es particularmente útil si estás\n    almacenando el archivo en disco en la nube como S3 y te gustaría que el archivo sea públicamente\n    accesible:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Storage::putFile('photos', new File('/path/to/photo'), 'public');\n</code></pre>\n<h4># Añadir al inicio o al final de un archivo</h4>\n<p>Los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">prepend</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">append</span> te permiten escribir al inicio o final de\n    un archivo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Storage::prepend('file.log', 'Prepended Text');\nStorage::append('file.log', 'Appended Text');\n</code></pre>\n<h4># Copiando y moviendo archivos</h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">copy</span> puede ser usado para copiar un archivo existente a una nueva\n    ubicación en el disco, mientras que el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">move</span> puede ser usado para renombrar o\n    mover un archivo existente a una nueva ubicación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Storage::copy('old/file.jpg', 'new/file.jpg');\nStorage::move('old/file.jpg', 'new/file.jpg');\n</code></pre>\n<h3># Carga de archivos</h3>\n<p>En las aplicaciones web, una de los casos de uso más comunes para almacenar archivos es almacenar\n    archivos cargados por los usuarios como imagenes de perfil, fotos y documentos. Laravel hace que\n    sea muy fácil almacenar archivos cargados usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">store</span> en la instancia de\n    un archivo cargado. Llama al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">store</span> con la ruta en la quieres almacenar el\n    archivo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nclass UserAvatarController extends Controller\n{\n    /**\n    * Update the avatar for the user.\n    *\n    * @param  Request  \\$request\n    * @return Response\n    */\n    public function update(Request \\$request)\n    {\n        \\$path = \\$request-&gt;file('avatar')-&gt;store('avatars');\n        return \\$path;\n    }\n}\n</code></pre>\n<p>Hay algunas cosas importantes a tener en cuenta sobre este ejemplo. Observa que sólo\n    especificamos un nombre de directorio, no un nombre de archivo. Por defecto, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">store</span>\n    generará un ID único que servirá como nombre de archivo. La extensión del archivo será\n    determinada examinando el tipo MIME del archivo. La ruta al archivo será retornada por el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">store</span> para que puedas guardar la ruta, inculyendo el nombre generado, en tu base de\n    datos.</p>\n<p>También puedes llamar al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">putFile</span> en el facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Storage</span> para\n    realizar la misma manipulación de archivo del ejemplo superior:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$path = Storage::putFile('avatars', \\$request-&gt;file('avatar'));\n</code></pre>\n<h4># Especificando un nombre de archivo</h4>\n<p>Si no te gustaría que un nombre de archivo sea automáticamente asignado a tu archivo almacenado,\n    puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">storeAs</span>, que recibe una ruta, el nombre del archivo y el\n    disco (opcional) y sus argumentos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$path = \\$request-&gt;file('avatar')-&gt;storeAs(\n    'avatars', \\$request-&gt;user()-&gt;id\n);\n</code></pre>\n<p>Puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">putFileAs</span> en el facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Storage</span>, que realizará las\n    mismas manipulaciones de archivos del ejemplo de arriba:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$path = Storage::putFileAs(\n    'avatars', \\$request-&gt;file('avatar'), \\$request-&gt;user()-&gt;id\n);\n</code></pre>\n<h4># Especificando un disco</h4>\n<p>Por defecto, este método usará tu disco predeterminado. Si te gustaría especificar otro disco,\n    pasa el nombre del disco como segundo argumento al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">store</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$path = \\$request-&gt;file('avatar')-&gt;store(\n    'avatars/'.\\$request-&gt;user()-&gt;id, 's3'\n);\n</code></pre>\n<h3># Visibilidad de archivos</h3>\n<p>En la integración de Flysystem de Laravel, \"visibilidad\" es una abstracción de permisos de\n    archivos a través de múltiples plataformas. Los archivos pueden ser declarados tanto <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public</span>\n    o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">private</span>. Cuando un archivo es declarado <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public</span>, estás indicando que\n    el archivo debería ser generalmente accesible por otros. Por ejemplo, al usar el driver de S3,\n    puedes retornar URLs para archivos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public</span>.</p>\n<p>Puedes establecer la visibilidad al establecer el archivo mediante el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">put</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Storage;\nStorage::put('file.jpg', \\$contents, 'public');\n</code></pre>\n<p>Si el archivo ya ha sido almacenado, su visibilidad puede ser retornada y establecida mediante\n    los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">getVisibility</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">setVisibility</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$visibility = Storage::getVisibility('file.jpg');\nStorage::setVisibility('file.jpg', 'public')\n</code></pre>\n<h2>Eliminando archivos</h2>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">delete</span> acepta un solo nombre de archivo o un arreglo de archivos a\n    eliminar del disco:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Storage;\nStorage::delete('file.jpg');\nStorage::delete(['file.jpg', 'file2.jpg']);\n</code></pre>\n<p>Si es necesario, puedes especificar el disco en el que se debe eliminar el archivo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Storage;\nStorage::disk('s3')-&gt;delete('folder_path/file_name.jpg');\n</code></pre>\n<h2>Directorios</h2>\n<h4># Obtener todos los archivos dentro de un directorio</h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">files</span> retorna un arreglo de todos los archivos en un directorio dado. Si\n    te gustaría retornar una lista de todos los archivos dentro de un directorio dado incluyendo\n    subdirectorios, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">allFiles</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Facades\\Storage;\n\\$files = Storage::files(\\$directory);\n\\$files = Storage::allFiles(\\$directory);\n</code></pre>\n<h4># Obtener todos los directorios dentro de un directorio</h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">directories</span> retorna un arreglo de todos los directorios dentro de un\n    directorio dado. Adicionalmente, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">allDirectories</span> para obtener\n    una lista de todos los directorios dentro de un directorio dado y todos sus subdirectorios:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$directories = Storage::directories(\\$directory);\n// Recursive...\n\\$directories = Storage::allDirectories(\\$directory);\n</code></pre>\n<h4># Crear un directorio</h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">makeDirectory</span> creará el directorio dado, incluyendo cualquier\n    subdirectorio necesario:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Storage::makeDirectory(\\$directory);\n</code></pre>\n<h4># Eliminar un directorio</h4>\n<p>Finalmente, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">deleteDirectory</span> puede ser usado para eliminar un directorio y\n    todos sus archivos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Storage::deleteDirectory(\\$directory);\n</code></pre>\n<h2>Sistemas de archivos personalizados</h2>\n<p>La integración de Flysystem de Laravel proporciona drivers para múltiples \"drivers\"; sin embargo,\n    Flysystem no está limitado a estos y tiene adaptadores para muchos otros sistemas de\n    almacenamiento. Puedes crear un driver personalizado si quieres usar alguno de los adaptadores\n    adicionales en tu aplicación de Laravel.</p>\n<p>Para configurar el sistema de archivos personalizado necesitarás un adaptador de Flysystem. Vamos\n    a agregar un adaptador de Dropbox mantenido por la comunidad a nuestro proyecto:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>composer require spatie/flysystem-dropbox\n</code></pre>\n<p>Luego, debes crear un proveedor de servicios como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DropboxServiceProvider</span>. En el\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span> del proveedor, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">extend</span> del facade\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Storage</span> para definir el driver personalizado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Providers;\nuse Storage;\nuse League\\Flysystem\\Filesystem;\nuse Illuminate\\Support\\ServiceProvider;\nuse Spatie\\Dropbox\\Client as DropboxClient;\nuse Spatie\\FlysystemDropbox\\DropboxAdapter;\nclass DropboxServiceProvider extends ServiceProvider\n{\n    /**\n    * Register bindings in the container.\n    *\n    * @return void\n    */\n    public function register()\n    {\n        //\n    }\n    /**\n    * Bootstrap any application services.\n    *\n    * @return void\n    */\n    public function boot()\n    {\n        Storage::extend('dropbox', function (\\$app, \\$config) {\n            \\$client = new DropboxClient(\n                \\$config['authorization_token']\n            );\n            return new Filesystem(new DropboxAdapter(\\$client));\n        });\n    }\n}\n</code></pre>\n<p>El primer argumento del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">extend</span> es el nombre del driver y el segundo es una\n    Closure que recibe las variables <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$app</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$config</span>. La Closure resolver\n    debe retornar una instancia de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">League\\Flysystem\\Filesystem</span>. La variable <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$config</span>\n    contiene los valores definidos en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/filesystems.php</span> para el disco\n    especificado.</p>\n<p>Luego, registra el proveedor de servicios en tu archivo de configuración\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/app.php</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'providers' =&gt; [\n    // ...\n    App\\Providers\\DropboxServiceProvider::class,\n];\n</code></pre>\n<p>Una vez que has creado y registrado el proveedor de servicios de la extensión, puedes usar el\n    driver <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dropbox</span> en tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/filesystems.php</span>.\n</p>\n</div>"
      },
      {
        "titulo": "Ayudantes",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Helpers</h1>\n<ul>\n    <li>Introducción</li>\n    <li>Métodos disponibles</li>\n</ul>\n<h2>Introducción</h2>\n<p>Laravel incluye una variedad de funciones \"helpers\" globales de PHP. Muchas de esas funciones son\n    usadas por el mismo framework; sin embargo, eres libre de usarlas en tus aplicaciones si lo\n    encuentras conveniente.</p>\n<h2>Métodos disponibles</h2>\n<h3># Arreglos &amp; Objetos</h3>\n<p>Arr::add Arr::collapse Arr::divide Arr::dot Arr::except Arr::first Arr::flatten Arr::forget\n    Arr::get Arr::has Arr::last Arr::only Arr::pluck Arr::prepend Arr::pull Arr::random Arr::set\n    Arr::sort Arr::sortRecursive Arr::where Arr::wrap data_fill data_get data_set head last</p>\n<h3># Rutas</h3>\n<p>app_path base_path config_path database_path mix public_path resource_path storage_path</p>\n<h3># Cadenas</h3>\n<p>__ class_basename e preg_replace_array Str::after Str::before Str::camel Str::contains\n    Str::containsAll Str::endsWith Str::finish Str::is Str::kebab Str::limit Str::orderedUuid\n    Str::plural Str::random Str::replaceArray Str::replaceFirst Str::replaceLast Str::singular\n    Str::slug Str::snake Str::start Str::startsWith Str::studly Str::title Str::uuid trans\n    trans_choice</p>\n<h3># URLs</h3>\n<p>action asset route secure_asset secure_url url</p>\n<h3># Variados</h3>\n<p>abort abort_if abort_unless app auth back bcrypt blank broadcast cache class_uses_recursive\n    collect config cookie csrf_field csrf_token dd decrypt dispatch dispatch_now dump encrypt env\n    event factory filled info logger method_field now old optional policy redirect report request\n    rescue resolve response retry session tap throw_if throw_unless today trait_uses_recursive\n    transform validator value view with</p>\n<h2>Listado de Métodos</h2>\n<h2>Arreglos &amp; Objetos</h2>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::add()</span> {#collection-method .first-collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::add</span> agrega una clave / valor dada a un arreglo si la clave no existe\n    previamente en el arreglo o existe pero con un valor <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$array = Arr::add(['name' =&gt; 'Desk'], 'price', 100);\n// ['name' =&gt; 'Desk', 'price' =&gt; 100]\n\\$array = Arr::add(['name' =&gt; 'Desk', 'price' =&gt; null], 'price', 100);\n// ['name' =&gt; 'Desk', 'price' =&gt; 100]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::collapse()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::collapse</span> colapsa un arreglo de arreglos en un único arreglo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$array = Arr::collapse([[1, 2, 3], [4, 5, 6], [7, 8, 9]]);\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::divide()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::divide</span> retorna dos arreglos, uno contiene las claves y el otro\n    contiene los valores del arreglo dado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n[\\$keys, \\$values] = Arr::divide(['name' =&gt; 'Desk']);\n// \\$keys: ['name']\n// \\$values: ['Desk']\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::dot()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::dot()</span> aplana un arreglo multidimensional en un arreglo de un sólo\n    nivel que usa la notación de \"punto\" para indicar la profundidad:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$array = ['products' =&gt; ['desk' =&gt; ['price' =&gt; 100]]];\n\\$flattened = Arr::dot(\\$array);\n// ['products.desk.price' =&gt; 100]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::except()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::except()</span> remueve los pares clave / valor de un arreglo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$array = ['name' =&gt; 'Desk', 'price' =&gt; 100];\n\\$filtered = Arr::except(\\$array, ['price']);\n// ['name' =&gt; 'Desk']\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::first()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::first()</span> devuelve el primer elemento de un arreglo que cumpla la\n    condición dada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$array = [100, 200, 300];\n\\$first = Arr::first(\\$array, function (\\$value, \\$key) {\n    return \\$value &gt;= 150;\n});\n// 200\n</code></pre>\n<p>Un valor por defecto puede ser pasado como un tercer parámetro al método. Este valor será\n    retornado si no hay un valor que cumpla la condición:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$first = Arr::first(\\$array, \\$callback, \\$default);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::flatten()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::flatten</span> unifica un arreglo multidimensional en un arreglo de un solo\n    nivel:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$array = ['name' =&gt; 'Joe', 'languages' =&gt; ['PHP', 'Ruby']];\n\\$flattened = Arr::flatten(\\$array);\n// ['Joe', 'PHP', 'Ruby']\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::forget()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::forget</span> remueve un par clave / valor de un arreglo anidado usando la\n    notación de \"punto\":</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$array = ['products' =&gt; ['desk' =&gt; ['price' =&gt; 100]]];\nArr::forget(\\$array, 'products.desk');\n// ['products' =&gt; []]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::get()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::get</span> recupera un valor de un arreglo anidado usando la notación de\n    \"punto\":</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$array = ['products' =&gt; ['desk' =&gt; ['price' =&gt; 100]]];\n\\$price = Arr::get(\\$array, 'products.desk.price');\n// 100\n</code></pre>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::get</span> acepta un valor por defecto, el cual será devuelto si la clave\n    especificada no es encontrada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$discount = Arr::get(\\$array, 'products.desk.discount', 0);\n// 0\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::has()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::has</span> comprueba si un elemento o elementos dados existen en un arreglo\n    usando la notación de \"punto\":</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$array = ['product' =&gt; ['name' =&gt; 'Desk', 'price' =&gt; 100]];\n\\$contains = Arr::has(\\$array, 'product.name');\n// true\n\\$contains = Arr::has(\\$array, ['product.price', 'product.discount']);\n// false\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::last()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::last</span> retorna el último elemento de un arreglo que cumpla la\n    condición dada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$array = [100, 200, 300, 110];\n\\$last = Arr::last(\\$array, function (\\$value, \\$key) {\n    return \\$value &gt;= 150;\n});\n// 300\n</code></pre>\n<p>Un valor por defecto puede ser pasado como tercer argumento al método. Este valor será devuelto\n    si ningún valor cumple la condición:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$last = Arr::last(\\$array, \\$callback, \\$default);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::only()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::only</span> retorna solo el par clave / valor especificado del arreglo\n    dado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$array = ['name' =&gt; 'Desk', 'price' =&gt; 100, 'orders' =&gt; 10];\n\\$slice = Arr::only(\\$array, ['name', 'price']);\n// ['name' =&gt; 'Desk', 'price' =&gt; 100]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::pluck()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::pluck</span> recupera todos los valores para una clave dada de un arreglo:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$array = [\n    ['developer' =&gt; ['id' =&gt; 1, 'name' =&gt; 'Taylor']],\n    ['developer' =&gt; ['id' =&gt; 2, 'name' =&gt; 'Abigail']],\n];\n\\$names = Arr::pluck(\\$array, 'developer.name');\n// ['Taylor', 'Abigail']\n</code></pre>\n<p>Puedes además especificar como deseas que la lista resultante sea codificada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$names = Arr::pluck(\\$array, 'developer.name', 'developer.id');\n// [1 =&gt; 'Taylor', 2 =&gt; 'Abigail']\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::prepend()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::prepend</span> colocará un elemento al comienzo de un arreglo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$array = ['one', 'two', 'three', 'four'];\n\\$array = Arr::prepend(\\$array, 'zero');\n// ['zero', 'one', 'two', 'three', 'four']\n</code></pre>\n<p>Si es necesario, puedes especificar la clave que debería ser usada por el valor:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$array = ['price' =&gt; 100];\n\\$array = Arr::prepend(\\$array, 'Desk', 'name');\n// ['name' =&gt; 'Desk', 'price' =&gt; 100]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::pull()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::pull</span> retorna y remueve un par clave / valor de un arreglo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$array = ['name' =&gt; 'Desk', 'price' =&gt; 100];\n\\$name = Arr::pull(\\$array, 'name');\n// \\$name: Desk\n// \\$array: ['price' =&gt; 100]\n</code></pre>\n<p>Un valor por defecto puede ser pasado como tercer argumento del método. Este valor será devuelto\n    si la clave no existe:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$value = Arr::pull(\\$array, \\$key, \\$default);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::random()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::random</span> retorna un valor aleatorio de un arreglo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$array = [1, 2, 3, 4, 5];\n\\$random = Arr::random(\\$array);\n// 4 - (retrieved randomly)\n</code></pre>\n<p>Puedes además especificar el número de elementos a retornar como un segundo argumento opcional.\n    Nota que proveer este argumento retornará un arreglo, incluso si solo deseas un elemento:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$items = Arr::random(\\$array, 2);\n// [2, 5] - (retrieved randomly)\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::set()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::set</span> establece un valor dentro de un arreglo anidado usando la\n    notación de \"punto\":</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$array = ['products' =&gt; ['desk' =&gt; ['price' =&gt; 100]]];\nArr::set(\\$array, 'products.desk.price', 200);\n// ['products' =&gt; ['desk' =&gt; ['price' =&gt; 200]]]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::sort()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::sort</span> clasifica un arreglo por sus valores:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$array = ['Desk', 'Table', 'Chair'];\n\\$sorted = Arr::sort(\\$array);\n// ['Chair', 'Desk', 'Table']\n</code></pre>\n<p>Puedes además clasificar el arreglo por los resultados de la función de retorno dada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$array = [\n    ['name' =&gt; 'Desk'],\n    ['name' =&gt; 'Table'],\n    ['name' =&gt; 'Chair'],\n];\n\\$sorted = array_values(Arr::sort(\\$array, function (\\$value) {\n    return \\$value['name'];\n}));\n/*\n    [\n        ['name' =&gt; 'Chair'],\n        ['name' =&gt; 'Desk'],\n        ['name' =&gt; 'Table'],\n    ]\n*/\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::sortRecursive()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">array_sort_recursive</span> clasifica recursivamente un arreglo usando la\n    función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sort</span> para sub-arreglos numericos y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ksort</span> para sub-arreglos\n    asociativos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$array = [\n    ['Roman', 'Taylor', 'Li'],\n    ['PHP', 'Ruby', 'JavaScript'],\n    ['one' =&gt; 1, 'two' =&gt; 2, 'three' =&gt; 3],\n];\n\\$sorted = Arr::sortRecursive(\\$array);\n/*\n    [\n        ['JavaScript', 'PHP', 'Ruby'],\n        ['one' =&gt; 1, 'three' =&gt; 3, 'two' =&gt; 2],\n        ['Li', 'Roman', 'Taylor'],\n    ]\n*/\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::where()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::where</span> filtra un arreglo usando la función de retorno dada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$array = [100, '200', 300, '400', 500];\n\\$filtered = Arr::where(\\$array, function (\\$value, \\$key) {\n    return is_string(\\$value);\n});\n// [1 =&gt; '200', 3 =&gt; '400']\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::wrap()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Arr::wrap</span> envuelve el valor dado en un arreglo. Si el valor dado ya es un\n    arreglo este no será cambiado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$string = 'Laravel';\n\\$array = Arr::wrap(\\$string);\n// ['Laravel']\n</code></pre>\n<p>Si el valor dado es nulo, un arreglo vacío será devuelto:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Arr;\n\\$nothing = null;\n\\$array = Arr::wrap(\\$nothing);\n// []\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">data_fill()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">data_fill</span> establece un valor faltante dentro de un arreglo anidado u\n    objeto usando la notación de \"punto\":</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$data = ['products' =&gt; ['desk' =&gt; ['price' =&gt; 100]]];\ndata_fill(\\$data, 'products.desk.price', 200);\n// ['products' =&gt; ['desk' =&gt; ['price' =&gt; 100]]]\ndata_fill(\\$data, 'products.desk.discount', 10);\n// ['products' =&gt; ['desk' =&gt; ['price' =&gt; 100, 'discount' =&gt; 10]]]\n</code></pre>\n<p>Esta función además acepta asteriscos como comodines y rellenará el objetivo en consecuencia:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$data = [\n    'products' =&gt; [\n        ['name' =&gt; 'Desk 1', 'price' =&gt; 100],\n        ['name' =&gt; 'Desk 2'],\n    ],\n];\ndata_fill(\\$data, 'products.*.price', 200);\n/*\n    [\n        'products' =&gt; [\n            ['name' =&gt; 'Desk 1', 'price' =&gt; 100],\n            ['name' =&gt; 'Desk 2', 'price' =&gt; 200],\n        ],\n    ]\n*/\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">data_get()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">data_get</span> recupera un valor de un arreglo anidado u objeto usando la\n    notación de \"punto\":</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$data = ['products' =&gt; ['desk' =&gt; ['price' =&gt; 100]]];\n\\$price = data_get(\\$data, 'products.desk.price');\n// 100\n</code></pre>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">data_get</span> acepta además un valor por defecto, el cual será retornado si la\n    clave especificada no es encontrada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$discount = data_get(\\$data, 'products.desk.discount', 0);\n// 0\n</code></pre>\n<p>La función también acepta wildcards usando astericos, que pueden tener como objetivo cualquier\n    clave del arreglo u objeto:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$data = [\n    'product-one' =&gt; ['name' =&gt; 'Desk 1', 'price' =&gt; 100],\n    'product-two' =&gt; ['name' =&gt; 'Desk 2', 'price' =&gt; 150],\n];\ndata_get(\\$data, '*.name');\n// ['Desk 1', 'Desk 2'];\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">data_set()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">data_set</span> establece un valor dentro de un arreglo anidado u objeto usando\n    la notación de \"punto\":</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$data = ['products' =&gt; ['desk' =&gt; ['price' =&gt; 100]]];\ndata_set(\\$data, 'products.desk.price', 200);\n// ['products' =&gt; ['desk' =&gt; ['price' =&gt; 200]]]\n</code></pre>\n<p>Esta función además acepta comodines y establecerá valores en el objetivo en consecuencia:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$data = [\n    'products' =&gt; [\n        ['name' =&gt; 'Desk 1', 'price' =&gt; 100],\n        ['name' =&gt; 'Desk 2', 'price' =&gt; 150],\n    ],\n];\ndata_set(\\$data, 'products.*.price', 200);\n/*\n    [\n        'products' =&gt; [\n            ['name' =&gt; 'Desk 1', 'price' =&gt; 200],\n            ['name' =&gt; 'Desk 2', 'price' =&gt; 200],\n        ],\n    ]\n*/\n</code></pre>\n<p>Por defecto, cualquier valor existente es sobrescrito. Si deseas solo establecer un valor si no\n    existe, puedes pasar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span> como cuarto argumento:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$data = ['products' =&gt; ['desk' =&gt; ['price' =&gt; 100]]];\ndata_set(\\$data, 'products.desk.price', 200, false);\n// ['products' =&gt; ['desk' =&gt; ['price' =&gt; 100]]]\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">head()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">head</span> retorna el primer elemento en el arreglo dado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$array = [100, 200, 300];\n\\$first = head(\\$array);\n// 100\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">last()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">last</span> retorna el último elemento en el arreglo dado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$array = [100, 200, 300];\n\\$last = last(\\$array);\n// 300\n</code></pre>\n<h2>Rutas</h2>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app_path()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app_path</span> retorna la ruta completa al directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app</span>. Además\n    puedes usar la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app_path</span> para generar una ruta completa a un archivo\n    relativo al directorio de la aplicación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$path = app_path();\n\\$path = app_path('Http/Controllers/Controller.php');\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">base_path()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">base_path</span> retorna la ruta completa a la raíz del proyecto. Además puedes\n    usar la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">base_path</span> para generar una ruta completa a un archivo dado relativo\n    al directorio raíz del proyecto:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$path = base_path();\n\\$path = base_path('vendor/bin');\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config_path()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config_path</span> retorna la ruta completa al directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config</span>.\n    Puedes además usar la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config_path</span> para generar una ruta completa a un\n    archivo dado dentro del directorio de configuración de la aplicación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$path = config_path();\n\\$path = config_path('app.php');\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database_path()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database_path</span> retorna la ruta completa al directorio\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database</span>. Puedes además usar la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database_path</span> para generar una\n    ruta completa a un archivo dado dentro del directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$path = database_path();\n\\$path = database_path('factories/UserFactory.php');\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mix()</span> {#collection-method}</h4>\n<p>\n    La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mix</span> retorna la ruta al\n    archivo versionado Mix\n    :\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$path = mix('css/app.css');\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public_path()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public_path</span> retorna la ruta completa al directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public</span>.\n    Puedes además usar la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public_path</span> para generar una ruta completa a un\n    archivo dado dentro del directorio public:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$path = public_path();\n\\$path = public_path('css/app.css');\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resource_path()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resource_path</span> retorna la ruta completa al directorio\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources</span>. Puedes además usar la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resource_path</span> para generar\n    una ruta completa a un archivo dado dentro del directorio resources:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$path = resource_path();\n\\$path = resource_path('sass/app.scss');\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">storage_path()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">storage_path</span> retorna la ruta compelta al directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">storage</span>.\n    Puedes además usar la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">storage_path</span> para generar una ruta completa a un\n    archivo dado dentro del directorio storage:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$path = storage_path();\n\\$path = storage_path('app/file.txt');\n</code></pre>\n<h2>Cadenas</h2>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">__()</span> {#collection-method}</h4>\n<p>\n    La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">__</span> traduce la cadena de traducción dada o clave de traducción dada\n    usando tus\n    archivos de localización\n    :\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>echo __('Welcome to our application');\necho __('messages.welcome');\n</code></pre>\n<p>Si la cadena o llave de traducción especificada no existe, la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">__</span> retornará\n    el valor dado. Así, usando el ejemplo de arriba, la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">__</span> podría retornar\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">messages.welcome</span> si esa clave de traducción no existe.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">class_basename()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">class_basename</span> retorna el nombre de la clase dada con el espacio de\n    nombre de la clase removido:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$class = class_basename('Foo\\Bar\\Baz');\n// Baz\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">e()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">e</span> ejecuta la función de PHP <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">htmlspecialchars</span> con la opción\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">double_enspan</span> establecida establecida a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span> por defecto:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>echo e('&lt;html&gt;foo&lt;/html&gt;');\n// &amp;lt;html&amp;gt;foo&amp;lt;/html&amp;gt;\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">preg_replace_array()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">preg_replace_array</span> reemplaza un patrón dado en la cadena secuencialmente\n    usando un arreglo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$string = 'The event will take place between :start and :end';\n\\$replaced = preg_replace_array('/:[a-z_]+/', ['8:30', '9:00'], \\$string);\n// The event will take place between 8:30 and 9:00\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::after()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::after</span> retorna todo después del valor dado en una cadena:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$slice = Str::after('This is my name', 'This is');\n// ' my name'\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::before()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::before</span> retorna todo antes del valor dado en una cadena:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$slice = Str::before('This is my name', 'my name');\n// 'This is '\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::camel()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::camel</span> convierte la cadena dada a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">camelCase</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$converted = Str::camel('foo_bar');\n// fooBar\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::contains()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::contains</span> determina si la cadena dada contiene el valor dado\n    (sensible a mayúsculas y minúsculas):</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$contains = Str::contains('This is my name', 'my');\n// true\n</code></pre>\n<p>Puedes además pasar un arreglo de valores para determinar si la cadena dada contiene cualquiera\n    de los valores:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$contains = Str::contains('This is my name', ['my', 'foo']);\n// true\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::containsAll()</span> {#collection-method}</h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::containsAll</span> determina si la cadena dada contiene todos los valores\n    del arreglo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$containsAll = Str::containsAll('This is my name', ['my', 'name']);\n// true\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::endsWith()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::endsWith</span> determina si la cadena dada finaliza con el valor dado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$result = Str::endsWith('This is my name', 'name');\n// true\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::finish()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::finish</span> agrega una instancia individual del valor dado a una cadena\n    si éste no finaliza con el valor:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$adjusted = Str::finish('this/string', '/');\n// this/string/\n\\$adjusted = Str::finish('this/string/', '/');\n// this/string/\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::is()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::is</span> determina si una cadena dada concuerda con un patrón dado.\n    Asteriscos pueden ser usados para indicar comodines:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$matches = Str::is('foo*', 'foobar');\n// true\n\\$matches = Str::is('baz*', 'foobar');\n// false\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::kebab()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::kebab</span> convierte la cadena dada a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">kebab-case</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$converted = Str::kebab('fooBar');\n// foo-bar\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::limit()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::limit</span> trunca la cadena dada en la longitud especificada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$truncated = Str::limit('The quick brown fox jumps over the lazy dog', 20);\n// The quick brown fox...\n</code></pre>\n<p>Puedes además pasar un tercer argumento para cambiar la cadena que será adjuntada al final:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$truncated = Str::limit('The quick brown fox jumps over the lazy dog', 20, ' (...)');\n// The quick brown fox (...)\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::orderedUuid</span> {#collection-method}</h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::orderedUuid</span> genera una \"primera marca de tiempo\" UUID que puede ser\n    eficientemente almacenada en una columna indexada de la base de datos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\nreturn (string) Str::orderedUuid();\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::plural()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::plural</span> convierte una cadena a su forma plural. Esta función\n    actualmente solo soporta el idioma inglés:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$plural = Str::plural('car');\n// cars\n\\$plural = Str::plural('child');\n// children\n</code></pre>\n<p>Puedes además proporcionar un entero como segundo argumento a la función para recuperar la forma\n    singular o plural de la cadena:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$plural = Str::plural('child', 2);\n// children\n\\$plural = Str::plural('child', 1);\n// child\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::random()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::random</span> genera una cadena aleatoria con la longitud especificada.\n    Esta función usa la función PHP <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">random_bytes</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$random = Str::random(40);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::replaceArray()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::replaceArray</span> reemplaza un valor dado en la cadena secuencialmente\n    usando un arreglo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$string = 'The event will take place between ? and ?';\n\\$replaced = Str::replaceArray('?', ['8:30', '9:00'], \\$string);\n// The event will take place between 8:30 and 9:00\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::replaceFirst()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::replaceFirst</span> reemplaza la primera ocurrencia de un valor dado en una\n    cadena:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$replaced = Str::replaceFirst('the', 'a', 'the quick brown fox jumps over the lazy dog');\n// a quick brown fox jumps over the lazy dog\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::replaceLast()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::replaceLast</span> reemplaza la última ocurrencia de un valor dado en una\n    cadena:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$replaced = Str::replaceLast('the', 'a', 'the quick brown fox jumps over the lazy dog');\n// the quick brown fox jumps over a lazy dog\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::singular()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::singular</span> convierte una cadena a su forma singular. Esta función\n    actualmente solo soporta el idioma inglés:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$singular = Str::singular('cars');\n// car\n\\$singular = Str::singular('children');\n// child\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::slug()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::slug</span> genera una URL amigable con la cadena dada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$slug = Str::slug('Laravel 5 Framework', '-');\n// laravel-5-framework\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::snake()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::snake()</span> convierte la cadena dada a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">snake_case</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$converted = Str::snake('fooBar');\n// foo_bar\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::start()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::start</span> agrega una instancia individual del valor dado a una cadena si\n    ésta no inicia con ese valor:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$adjusted = Str::start('this/string', '/');\n// /this/string\n\\$adjusted = Str::start('/this/string', '/');\n// /this/string\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::startsWith()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::startsWith</span> determina si la cadena dada comienza con el valor dado:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$result = Str::startsWith('This is my name', 'This');\n// true\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::studly()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::studly</span> convierte la cadena dada a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">StudlyCase</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$converted = Str::studly('foo_bar');\n// FooBar\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::title()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::title</span> convierte la cadena dada a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Title Case</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\n\\$converted = Str::title('a nice title uses the correct case');\n// A Nice Title Uses The Correct Case\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::uuid()</span> {#collection-method}</h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Str::uuid</span> genera un UUID (versión 4):</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Support\\Str;\nreturn (string) Str::uuid();\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">trans()</span> {#collection-method}</h4>\n<p>\n    La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">trans</span> traduce la clave de traducción dada usando tus\n    archivos de localización\n    :\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>echo trans('messages.welcome');\n</code></pre>\n<p>Si la clave de traducción especificada no existe, la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">trans</span> retornará la\n    clave dada. Así, usando el ejemplo de arriba, la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">trans</span> podría retornar\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">messages.welcome</span> si la clave de traducción no existe.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">trans_choice()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">trans_choice</span> traduce la clave de traducción dada con inflexión:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>echo trans_choice('messages.notifications', \\$unreadCount);\n</code></pre>\n<p>Si la clave de traducción dada no existe, la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">trans_choice</span> retornará la clave\n    dada. Así, usando el ejemplo de arriba, la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">trans_choice</span> podría retornar\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">messages.notifications</span> si la clave de traducción no existe.</p>\n<h2>URLs</h2>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">action()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">action</span> genera una URL para la acción del controlador dada. No necesitas\n    pasar el espacio de nombre completo. En lugar de eso, pasa al controlador el nombre de clase\n    relativo al espacio de nombre <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Http\\Controllers</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$url = action('HomeController@index');\n\\$url = action([HomeController::class, 'index']);\n</code></pre>\n<p>Si el método acepta parámetros de ruta, puedes pasarlos como segundo argumento al método:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$url = action('UserController@profile', ['id' =&gt; 1]);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">asset()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">asset</span> genera una URL para un asset usando el esquema actual de la\n    solicitud (HTTP o HTTPS):</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$url = asset('img/photo.jpg');\n</code></pre>\n<p>Puedes configurar la URL host del asset estableciendo la variable <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ASSET_URL</span> en tu\n    archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span>. Esto puede ser útil si alojas tus assets en un servicio externo como\n    Amazon S3:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>// ASSET_URL=http://example.com/assets\n\\$url = asset('img/photo.jpg'); // http://example.com/assets/img/photo.jpg\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">route()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">route</span> genera una URL para el nombre de ruta dado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$url = route('routeName');\n</code></pre>\n<p>Si la ruta acepta parámetros, puedes pasarlos como segundo argumento al método:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$url = route('routeName', ['id' =&gt; 1]);\n</code></pre>\n<p>Por defecto, la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">route</span> genera una URL absoluta. Si deseas generar una URL\n    relativa, puedes pasar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span> como tercer argumento:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$url = route('routeName', ['id' =&gt; 1], false);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">secure_asset()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">secure_asset</span> genera una URL para un asset usando HTTPS:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$url = secure_asset('img/photo.jpg');\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">secure_url()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">secure_url</span> genera una URL HTTPS completa a la ruta dada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$url = secure_url('user/profile');\n\\$url = secure_url('user/profile', [1]);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url</span> genera una URL completa a la ruta dada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$url = url('user/profile');\n\\$url = url('user/profile', [1]);\n</code></pre>\n<p>Si una ruta no es proporcionada, una instancia de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Routing\\UrlGenerator</span> es\n    retornada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$current = url()-&gt;current();\n\\$full = url()-&gt;full();\n\\$previous = url()-&gt;previous();\n</code></pre>\n<h2>Variados</h2>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">abort()</span> {#collection-method}</h4>\n<p>\n    La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">abort</span> arroja\n    una excepción HTTP\n    que será renderizada por el\n    manejador de excepciones\n    :\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>abort(403);\n</code></pre>\n<p>Puedes además proporcionar el texto de respuesta de la excepción y las cabeceras de la respuesta\n    personalizados:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>abort(403, 'Unauthorized.', \\$headers);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">abort_if()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">abort_if</span> arroja una excepción HTTP si una expresión booleana dada es\n    evaluada a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>abort_if(! Auth::user()-&gt;isAdmin(), 403);\n</code></pre>\n<p>Como el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">abort</span>, puedes proporcionar además el texto de respuesta para la\n    excepción como tercer argumento y un arreglo de cabeceras de respuesta personalizadas como\n    cuarto argumento.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">abort_unless()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">abort_unless</span> arroja una excepción HTTP si una expresión booleana dada es\n    evaluada a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>abort_unless(Auth::user()-&gt;isAdmin(), 403);\n</code></pre>\n<p>Como el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">abort</span>, puedes proporcionar además el texto de respuesta para la\n    excepción como tercer argumento y un arreglo de cabeceras de respuesta personalizadas como\n    cuarto argumento.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app()</span> {#collection-method}</h4>\n<p>\n    La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app</span> retorna la instancia del\n    contenedor de servicio\n    :\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$container = app();\n</code></pre>\n<p>Puedes pasar una clase o nombre de interfaz para resolverlo desde el contenedor:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$api = app('HelpSpot\\API');\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">auth()</span> {#collection-method}</h4>\n<p>\n    La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">auth</span> retorna una instancia del\n    autenticador\n    . Puedes usarla en vez del facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Auth</span> por conveniencia:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$user = auth()-&gt;user();\n</code></pre>\n<p>Si es necesario, puedes especificar con cual instancia del guard podrías acceder:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$user = auth('admin')-&gt;user();\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">back()</span> {#collection-method}</h4>\n<p>\n    La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">back</span> genera una\n    respuesta de redirección HTTP\n    a la ubicación previa del usuario:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return back(\\$status = 302, \\$headers = [], \\$fallback = false);\nreturn back();\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">bcrypt()</span> {#collection-method}</h4>\n<p>\n    La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">bcrypt</span>\n    encripta\n    el valor dado usando Bcrypt. Puedes usarlo como una alternativa al facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Hash</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$password = bcrypt('my-secret-password');\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">blank()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">blank</span> retorna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span> si el valor dado es \"vacío\":</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>blank('');\nblank('   ');\nblank(null);\nblank(collect());\n// true\nblank(0);\nblank(true);\nblank(false);\n// false\n</code></pre>\n<p>Para lo inverso de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">blank</span>, mira el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">filled</span>.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">broadcast()</span> {#collection-method}</h4>\n<p>\n    La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">broadcast</span>\n    emite\n    el\n    evento\n    dado a sus listeners:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>broadcast(new UserRegistered(\\$user));\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cache()</span> {#collection-method}</h4>\n<p>\n    La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cache</span> puede ser usada para obtener un valor de la\n    cache\n    . Si la clave dada no existe en la cache, un valor opcional por defecto será retornado:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$value = cache('key');\n\\$value = cache('key', 'default');\n</code></pre>\n<p>Puedes agregar elementos a la cache pasando un arreglo de pares clave / valor a la función.\n    También debes pasar la cantidad de segundos o la duración que el valor almacenado en caché debe\n    considerarse válido:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>cache(['key' =&gt; 'value'], 300);\ncache(['key' =&gt; 'value'], now()-&gt;addSeconds(10));\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">class_uses_recursive()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">class_uses_recursive</span> retorna todos los traits usados por una clase,\n    incluyendo traits por todas las clases padre:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$traits = class_uses_recursive(App\\User::class);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">collect()</span> {#collection-method}</h4>\n<p>\n    La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">collect</span> crea una instancia de\n    colecciones\n    del valor dado:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$collection = collect(['taylor', 'abigail']);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config()</span> {#collection-method}</h4>\n<p>\n    La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config</span> obtiene el valor de una variable de\n    configuración\n    . Los valores de configuración pueden ser accesados usando la sintaxis de \"punto\", la cual\n    incluye el nombre del archivo y la opción que deseas acceder. Un valor por defecto puede ser\n    especificado y es retornado si la opción de configuración no existe:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$value = config('app.timezone');\n\\$value = config('app.timezone', \\$default);\n</code></pre>\n<p>Puedes establecer variables de configuración en tiempo de ejecución pasando un arreglo de pares\n    clave / valor:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>config(['app.debug' =&gt; true]);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cookie()</span> {#collection-method}</h4>\n<p>\n    La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cookie</span> crea una nueva instancia de\n    cookie\n    :\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$cookie = cookie('name', 'value', \\$minutes);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">csrf_field()</span> {#collection-method}</h4>\n<p>\n    La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">csrf_field</span> genera un campo de entrada <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hidden</span> que contiene\n    el valor del token CSRF. Por ejemplo, usando la\n    sintaxis de Blade\n    :\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>{{ csrf_field() }}\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">csrf_token()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">csrf_token</span> recupera el valor del actual token CSRF:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$token = csrf_token();\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dd()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dd</span> desecha las variables dadas y finaliza la ejecución del script:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>dd(\\$value);\ndd(\\$value1, \\$value2, \\$value3, ...);\n</code></pre>\n<p>Si no quieres detener la ejecución de tu script, usa la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dump</span> en su lugar.\n</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">decrypt()</span> {#collection-method}</h4>\n<p>\n    La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">decrypt</span> desencripta el valor dado usando el\n    encriptador\n    de Laravel:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$decrypted = decrypt(\\$encrypted_value);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dispatch()</span> {#collection-method}</h4>\n<p>\n    La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dispatch</span> empuja el\n    trabajo\n    dado sobre la\n    cola de trabajos\n    de Laravel:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>dispatch(new App\\Jobs\\SendEmails);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dispatch_now()</span> {#collection-method}</h4>\n<p>\n    La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dispatch_now</span> ejecuta el\n    trabajo\n    dado inmediatamente y retorna el valor de su método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">handle</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$result = dispatch_now(new App\\Jobs\\SendEmails);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dump()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dump</span> desecha las variables dadas:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>dump(\\$value);\ndump(\\$value1, \\$value2, \\$value3, ...);\n</code></pre>\n<p>Si quieres parar de ejecutar el script después de desechar las variables, usa la función\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dd</span> en su lugar.</p>\n<p>TIP</p>\n<p>Puedes usar el comando de Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dump-server</span> para interceptar todas las llamadas\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dump</span> y mostrarlas en la ventana de tu consola en lugar de tu navegador.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">encrypt()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">encrypt</span> encripta el valor dado usando el encriptador de Laravel:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$encrypted = encrypt(\\$unencrypted_value);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">env()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">env</span> recupera el valor de una variable de entorno o retorna un valor por\n    defecto:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$env = env('APP_ENV');\n// Returns 'production' if APP_ENV is not set...\n\\$env = env('APP_ENV', 'production');\n</code></pre>\n<p>Nota</p>\n<p>Si ejecutas el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config:cache</span> durante tu proceso de despliegue, deberías estar\n    seguro de que eres el único llamando a la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">env</span> desde dentro de tus archivos\n    de configuración. Una vez que la configuración está en caché, el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span> no\n    será cargado y todas las llamadas a la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span> retornarán <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>.\n</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">event()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">event</span> despacha el evento dado a sus listeners:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>event(new UserRegistered(\\$user));\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">factory()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">factory</span> crea un constructor de model factories para una clase dada,\n    nombre y cantidad. Este puede ser usado mientras pruebas o haces seeding:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$user = factory(App\\User::class)-&gt;make();\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">filled()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">filled</span> retorna el valor dado que no esté \"vacío\":</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>filled(0);\nfilled(true);\nfilled(false);\n// true\nfilled('');\nfilled('   ');\nfilled(null);\nfilled(collect());\n// false\n</code></pre>\n<p>Para el inverso de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">filled</span>, mira el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">blank</span>.</p>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">info()</span> {#collection-method}</h4>\n<p>La función<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">info</span> escribirá información al log:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>info('Some helpful information!');\n</code></pre>\n<p>Un arreglo de datos contextuales puede además ser pasado a la función:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>info('User login attempt failed.', ['id' =&gt; \\$user-&gt;id]);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">logger()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">logger</span> puede ser usada para escribir mensaje de nivel <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">debug</span>\n    al log:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>logger('Debug message');\n</code></pre>\n<p>Un arreglo de datos contextuales puede además ser pasado a la función:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>logger('User has logged in.', ['id' =&gt; \\$user-&gt;id]);\n</code></pre>\n<p>Una instancia del logger será retornada si no hay un valor pasado a la función:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>logger()-&gt;error('You are not allowed here.');\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">method_field()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">method_field</span> genera un campo de entrada HTML <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hidden</span> que\n    contiene el valor falsificado del verbo de los formularios HTTP. Por ejemplo, usando la sintaxis\n    de Blade:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;form method=\"POST\"&gt;\n    {{ method_field('DELETE') }}\n&lt;/form&gt;\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">now()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">now</span> crea una nueva instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Support\\Carbon</span> con\n    la hora actual:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$now = now();\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">old()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">old</span> recupera un viejo valor de entrada flasheado en la sesión:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$value = old('value');\n\\$value = old('value', 'default');\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">optional()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">optional</span> acepta cualquier argumento y te permite acceder a propiedades o\n    métodos de llamada en ese objeto. Si el objeto dado es <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>, las propiedades y\n    métodos retornarán <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span> en vez de causar un error:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return optional(\\$user-&gt;address)-&gt;street;\n{!! old('name', optional(\\$user)-&gt;name) !!}\n</code></pre>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">optional</span> también acepta un Closure como segundo argumento. El Closure\n    será invocado si el valor proporcionado como primer argumento no es null:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return optional(User::find(\\$id), function (\\$user) {\n    return new DummyUser;\n});\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">policy()</span> {#collection-method}</h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">policy</span> recupera una instancia de la política para una clase dada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$policy = policy(App\\User::class);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redirect()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redirect</span> retorna una respuesta de redirección HTTP o retorna la instancia\n    del redirector si no hay argumentos llamados:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return redirect(\\$to = null, \\$status = 302, \\$headers = [], \\$secure = null);\nreturn redirect('/home');\nreturn redirect()-&gt;route('route.name');\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">report()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">report</span> reportará una excepción usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">report</span> de tu\n    manejador de excepciones:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>report(\\$e);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">request()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">request</span> retorna la instancia de la solicitud actual u obtiene un elemento\n    de entrada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$request = request();\n\\$value = request('key', \\$default);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">rescue()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">rescue</span> ejecuta la función de retorno dada y almacena en cache cualquier\n    excepción que ocurra durante su ejecución. Todas las excepciones que son capturadas serán\n    enviadas al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">report</span> de tu manejador de excepciones; no obstante, la solicitud\n    continuará procesando:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return rescue(function () {\n    return \\$this-&gt;method();\n});\n</code></pre>\n<p>También puedes pasar un segundo argumento a la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">rescue</span>. Este argumento será\n    el valor por \"defecto\" que debería ser retornado si una excepción ocurre mientras se ejecuta la\n    función de retorno:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return rescue(function () {\n    return \\$this-&gt;method();\n}, false);\nreturn rescue(function () {\n    return \\$this-&gt;method();\n}, function () {\n    return \\$this-&gt;failure();\n});\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resolve()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resolve</span> resuelve un nombre de clase o interfaz dado a su instancia usando\n    elcontenedor de servicios:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$api = resolve('HelpSpot\\API');\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">response()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">response</span> crea una instancia de respuesta u obtiene una instancia del\n    factory de respuesta:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return response('Hello World', 200, \\$headers);\nreturn response()-&gt;json(['foo' =&gt; 'bar'], 200, \\$headers);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">retry()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">retry</span> intenta ejecutar la función de retorno dada hasta que el máximo\n    número de intentos límite se cumple. Si la función de retorno no arroja una excepción, su valor\n    de retorno será retornado. Si la función de retorno arroja una excepción, se volverá a intentar\n    automáticamente. Si el máximo número de intentos es excedido, la excepción será arrojada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return retry(5, function () {\n    // Attempt 5 times while resting 100ms in between attempts...\n}, 100);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">session()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">session</span> puede ser usada para obtener o establecer valores de session:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$value = session('key');\n</code></pre>\n<p>Puedes establecer valores pasando un arreglo de pares clave / valor a la función:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>session(['chairs' =&gt; 7, 'instruments' =&gt; 3]);\n</code></pre>\n<p>La sesión almacenada será retornada si no se pasa un valor a la función:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$value = session()-&gt;get('key');\nsession()-&gt;put('key', \\$value);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tap()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tap</span> acepta dos argumentos: un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$value</span> arbitrario y una\n    función de retorno. El <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$value</span> será pasado a la función de retorno y será retornado\n    por la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tap</span>. El valor de retorno de la función de retorno es irrelevante:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$user = tap(User::first(), function (\\$user) {\n    \\$user-&gt;name = 'taylor';\n    \\$user-&gt;save();\n});\n</code></pre>\n<p>Si no hay función de retorno para la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tap</span>, puedes llamar cualquier método en\n    el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$value</span> dado. El valor de retorno del método al que llama siempre será <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$value</span>,\n    sin importar lo que el método retorna en su definición. Por ejemplo, el método de Eloquent\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">update</span> típicamente retorna un entero. Sin embargo, podemos forzar que el método\n    retorne el modelo en sí mismo encadenando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">update</span> a través de la función\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tap</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$user = tap(\\$user)-&gt;update([\n    'name' =&gt; \\$name,\n    'email' =&gt; \\$email,\n]);\n</code></pre>\n<p>Para agregar un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tap</span> a una clase, puedes agregar el trait <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Support\\Traits\\Tappable</span>\n    a la clase. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tap</span> de este trait acepta un Closoure como único argumento. La\n    instancia del objeto será pasada al Closure y luego retornada por el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tap</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return \\$user-&gt;tap(function (\\$user) {\n    //\n});\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">throw_if()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">throw_if</span> arroja la excepción dada si una expresión booleana dada es\n    evaluada a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>throw_if(! Auth::user()-&gt;isAdmin(), AuthorizationException::class);\nthrow_if(\n    ! Auth::user()-&gt;isAdmin(),\n    AuthorizationException::class,\n    'You are not allowed to access this page'\n);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">throw_unless()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">throw_unless</span> arroja la excepción dada si una expresión booleana dada es\n    evaluada a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>throw_unless(Auth::user()-&gt;isAdmin(), AuthorizationException::class);\nthrow_unless(\n    Auth::user()-&gt;isAdmin(),\n    AuthorizationException::class,\n    'You are not allowed to access this page'\n);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">today()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">today</span> crea una nueva instancia de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Support\\Carbon</span>\n    para la fecha actual:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$today = today();\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">trait_uses_recursive()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">trait_uses_recursive</span> retorna todos los traits usados por un trait:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$traits = trait_uses_recursive(\\Illuminate\\Notifications\\Notifiable::class);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">transform()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">transform</span> ejecuta una función de retorno en un valor dado si el valor no\n    está en vacío y retorna el resultado de la función de retorno:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$callback = function (\\$value) {\n    return \\$value * 2;\n};\n\\$result = transform(5, \\$callback);\n// 10\n</code></pre>\n<p>Un valor o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span> puede ser pasado como el tercer parámetro al método. Este valor\n    será retornado si el valor dado está vacío:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$result = transform(null, \\$callback, 'The value is blank');\n// The value is blank\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">validator()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">validator</span> crea un nueva instancia del validador con los argumentos dados.\n    Puedes usarlo en vez del facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Validator</span> por conveniencia:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$validator = validator(\\$data, \\$rules, \\$messages);\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">value()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">value</span> retorna el valor dado. Sin embargo, si pasas un\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span> a la función, el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span> será ejecutado y su resultado será\n    devuelto:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$result = value(true);\n// true\n\\$result = value(function () {\n    return false;\n});\n// false\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">view()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">view</span> recupera una instancia de la vista:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return view('auth.login');\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">with()</span> {#collection-method}</h4>\n<p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">with</span> retorna el valor dado. Si se le pasa un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span> como\n    segundo argumento a la función, el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span> será ejecutado y su resultado será\n    devuelto:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$callback = function (\\$value) {\n    return (is_numeric(\\$value)) ? \\$value * 2 : 0;\n};\n\\$result = with(5, \\$callback);\n// 10\n\\$result = with(null, \\$callback);\n// 0\n\\$result = with(5, null);\n// 5\n</code></pre>\n</div>"
      },
      {
        "titulo": "Correo Electronico",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Correos Electrónicos</h1>\n<ul>\n    <li>\n        Introducción\n        <ul>\n            <li>Requisitos previos</li>\n        </ul>\n    </li>\n    <li>Generando mailables</li>\n    <li>\n        Escribiendo mailables\n        <ul>\n            <li>Configurando el envío</li>\n            <li>Configurando la vista</li>\n            <li>Datos en vistas</li>\n            <li>Archivos adjuntos</li>\n            <li>Archivos adjuntos en línea</li>\n            <li>Personalizar el mensaje de swiftMailer</li>\n        </ul>\n    </li>\n    <li>\n        Mailables en markdown\n        <ul>\n            <li>Generando mailables en markdown</li>\n            <li>Escribiendo mensajes en markdown</li>\n            <li>Personalizando los componentes</li>\n        </ul>\n    </li>\n    <li>\n        Enviando correo\n        <ul>\n            <li>Colas de correos</li>\n        </ul>\n    </li>\n    <li>\n        Renderizando mailables\n        <ul>\n            <li>Previsualizando mailables en el navegador</li>\n        </ul>\n    </li>\n    <li>Configuración regional de mailables</li>\n    <li>Correos y desarrollo Local</li>\n    <li>Eventos</li>\n</ul>\n<h2>Introducción</h2>\n<p>\n    Laravel proporciona una API limpia y simple sobre la popular biblioteca\n    SwiftMailer\n    con drivers para SMTP, Mailgun, Postmark, SparkPost, Amazon SES y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sendmail</span>,\n    permitiéndote comenzar rápidamente a enviar correos a través de un servicio local o en la nube\n    de tu elección.\n</p>\n<h3># Requisitos previos</h3>\n<p>Los drivers basados \u200B\u200Ben una API como Mailgun, SparkPost y Postmark suelen ser más simples y\n    rápidos que los servidores SMTP. Si es posible, deberías usar uno de estos drivers. Todos los\n    drivers con API requieren la biblioteca Guzzle HTTP, que puede instalarse a través del gestor de\n    paquetes Composer:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>composer require guzzlehttp/guzzle\n</code></pre>\n<h4># Driver Mailgun</h4>\n<p>Para usar el driver de Mailgun, primero instale Guzzle, luego configura la opción\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">driver</span> en tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/mail.php</span> en\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mailgun</span>. Luego, verifica que tu archivo de configuración\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/services.php</span> contiene las siguientes opciones:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'mailgun' =&gt; [\n    'domain' =&gt; 'your-mailgun-domain',\n    'secret' =&gt; 'your-mailgun-key',\n],\n</code></pre>\n<p>\n    Si no estás usando la\n    región de Mailgun\n    \"US\", puedes definir el endpoint de tu región en el archivo de configuración\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">services</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'mailgun' =&gt; [\n    'domain' =&gt; 'your-mailgun-domain',\n    'secret' =&gt; 'your-mailgun-key',\n    'endpoint' =&gt; 'api.eu.mailgun.net',\n],\n</code></pre>\n<h4># Driver Postmark</h4>\n<p>Para usar el driver de Postmark, instala el transporte de SwiftMailer de Postmark mediante\n    Composer:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>composer require wildbit/swiftmailer-postmark\n</code></pre>\n<p>Luego, instala Guzzle y establece la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">driver</span> en tu archivo de configuración\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/mail.php</span> a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">postmark</span>. Finalmente, verifica que tu archivo de\n    configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/services.php</span> contiene las siguientes opciones:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'postmark' =&gt; [\n    'token' =&gt; 'your-postmark-token',\n],\n</code></pre>\n<h4># Driver SparkPost</h4>\n<p>Para usar el driver SparkPost, primero instale Guzzle, luego configura la opción\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">driver</span> en tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/mail.php</span> en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sparkpost</span>.\n    Luego, verifica que tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/services.php</span> contiene las\n    siguientes opciones:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'sparkpost' =&gt; [\n    'secret' =&gt; 'your-sparkpost-key',\n],\n</code></pre>\n<p>\n    Si es necesario, puedes también configurar cuál\n    endpoint de API\n    debería ser usado:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'sparkpost' =&gt; [\n    'secret' =&gt; 'your-sparkpost-key',\n    'options' =&gt; [\n        'endpoint' =&gt; 'https://api.eu.sparkpost.com/api/v1/transmissions',\n    ],\n],\n</code></pre>\n<h4># Driver SES</h4>\n<p>Para usar el driver de Amazon SES, primero debes instalar Amazon AWS SDK para PHP. Puedes\n    instalar esta biblioteca agregando la siguiente línea a la sección <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">require</span> del\n    archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">composer.json</span> y ejecutando el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">composer update</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\"aws/aws-sdk-php\": \"~3.0\"\n</code></pre>\n<p>A continuación, configura la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">driver</span> en tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/mail.php</span>\n    en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ses</span> y verifica que tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/services.php</span>\n    contiene las siguientes opciones:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'ses' =&gt; [\n    'key' =&gt; 'your-ses-key',\n    'secret' =&gt; 'your-ses-secret',\n    'region' =&gt; 'ses-region',  // e.g. us-east-1\n],\n</code></pre>\n<p>\n    Si necesitas incluir\n    opciones adicionales\n    al ejecutar la petición <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">SendRawEmail</span> de SES, puedes definir un arreglo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">options</span>\n    dentro de tu configuración de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ses</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'ses' =&gt; [\n    'key' =&gt; 'your-ses-key',\n    'secret' =&gt; 'your-ses-secret',\n    'region' =&gt; 'ses-region',  // e.g. us-east-1\n    'options' =&gt; [\n        'ConfigurationSetName' =&gt; 'MyConfigurationSet',\n        'Tags' =&gt; [\n            [\n                'Name' =&gt; 'foo',\n                'Value' =&gt; 'bar',\n            ],\n        ],\n    ],\n],\n</code></pre>\n<h2>Generando mailables</h2>\n<p>En Laravel, cada tipo de correo electrónico enviado por su aplicación se representa como una\n    clase \"Mailable\". Estas clases se almacenan en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Mail</span>. No te\n    preocupes si no ves este directorio en tu aplicación, ya que se generará para ti cuando crees tu\n    primera clase mailable usando el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:mail</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan make:mail OrderShipped\n</code></pre>\n<h2>Escribiendo mailables</h2>\n<p>Toda la configuración de una clase mailable se realiza en el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">build</span>. Dentro de\n    este método, puedes llamar a varios métodos como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">from</span>,<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">subject</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">view</span>\n    y<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">attach</span> para configurar la presentación y entrega del correo electrónico.</p>\n<h3># Configurando el remitente</h3>\n<h4># Usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">from</span></h4>\n<p>Primero, exploremos la configuración del remitente para el correo electrónico. O, en otras\n    palabras, para quién será el correo electrónico (from). Hay dos formas de configurar el\n    remitente. En primer lugar, puede usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">from</span> dentro de su método<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">build</span>\n    de la clase mailable:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Build the message.\n*\n* @return \\$this\n*/\npublic function build()\n{\n    return \\$this-&gt;from('example@example.com')\n                -&gt;view('emails.orders.shipped');\n}\n</code></pre>\n<h4># Usando una dirección global con <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">from</span></h4>\n<p>Sin embargo, si tu aplicación utiliza la misma dirección \"from\" para todos sus correos\n    electrónicos, puede resultar engorroso llamar al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">from</span> en cada clase mailable\n    que genere. En su lugar, puede especificar una dirección global \"from\" en su archivo de\n    configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/mail.php</span>. Esta dirección se usará si no se especifica ninguna\n    otra dirección \"from\" dentro de la clase mailable:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'from' =&gt; ['address' =&gt; 'example@example.com', 'name' =&gt; 'App Name'],\n</code></pre>\n<p>Adicionalmente, puedes definir una dirección global \"reply_to\" dentro de tu archivo de\n    configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/mail.php</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'reply_to' =&gt; ['address' =&gt; 'example@example.com', 'name' =&gt; 'App Name'],\n</code></pre>\n<h3># Configurando la vista</h3>\n<p>\n    Dentro de un método 'build' de la clase Mailable, puede usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">view</span> para\n    especificar qué plantilla se debe usar al representar los contenidos del correo electrónico.\n    Dado que cada correo electrónico generalmente usa una\n    Plantilla Blade\n    para representar sus contenidos, tienes toda la potencia y la comodidad del motor de plantillas\n    Blade al construir el HTML de su correo electrónico:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Build the message.\n*\n* @return \\$this\n*/\npublic function build()\n{\n    return \\$this-&gt;view('emails.orders.shipped');\n}\n</code></pre>\n<p>TIP</p>\n<p>Es posible que desees crear un directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views/emails</span> para albergar todas\n    tus plantillas de correos electrónicos; sin embargo, puedes colocarlos donde quieras siempre y\n    cuando este dentro del directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views</span>.</p>\n<h4># Correos con texto plano</h4>\n<p>Si deseas definir una versión de texto sin formato en tu correo electrónico, puedes usar el\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">text</span>. Al igual que el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">view</span>, el método<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">text</span>\n    acepta un nombre de plantilla que se usará para representar el contenido del correo electrónico.\n    Eres libre de definir una versión HTML y de texto sin formato del mensaje:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Build the message.\n*\n* @return \\$this\n*/\npublic function build()\n{\n    return \\$this-&gt;view('emails.orders.shipped')\n                -&gt;text('emails.orders.shipped_plain');\n}\n</code></pre>\n<h3># Datos en Vistas</h3>\n<h4># A través de propiedades públicas</h4>\n<p>Por lo general, querrás pasar algunos datos a tu vista que puedes utilizar al representar el HTML\n    del correo electrónico. Hay dos maneras en que puedes hacer que los datos estén disponibles para\n    la vista. Primero, cualquier propiedad pública definida en tu clase Mailable se pondrá\n    automáticamente a disposición de la vista. Entonces, por ejemplo, puedes pasar datos al\n    constructor de tu clase Mailable y establecer esos datos a propiedades públicas definidas en la\n    clase:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Mail;\nuse App\\Order;\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Mail\\Mailable;\nuse Illuminate\\Queue\\SerializesModels;\nclass OrderShipped extends Mailable\n{\n    use Queueable, SerializesModels;\n    /**\n    * The order instance.\n    *\n    * @var Order\n    */\n    public \\$order;\n    /**\n    * Create a new message instance.\n    *\n    * @return void\n    */\n    public function __construct(Order \\$order)\n    {\n        \\$this-&gt;order = \\$order;\n    }\n    /**\n    * Build the message.\n    *\n    * @return \\$this\n    */\n    public function build()\n    {\n        return \\$this-&gt;view('emails.orders.shipped');\n    }\n}\n</code></pre>\n<p>Una vez que los datos se han establecido en una propiedad pública, estarán automáticamente\n    disponibles en tu vista, por lo que puedes acceder a ella como si tuvieras acceso a cualquier\n    otro dato en tus plantillas Blade:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;div&gt;\n    Price: {{ \\$order-&gt;price }}\n&lt;/div&gt;\n</code></pre>\n<h4># A través del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">with</span>:</h4>\n<p>Si deseas personalizar el formato de los datos de tu correo electrónico antes de enviarlos a la\n    plantilla, puedes pasar manualmente los datos a la vista mediante el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">with</span>.\n    Por lo general, aún podrás pasar datos a través del constructor de la clase Mailable; sin\n    embargo, debes establecer estos datos en propiedades <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">protected</span>\n    o<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">private</span> para que los datos no estén automáticamente disponibles para la plantilla.\n    Luego, al llamar al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">with</span>, se pase un arreglo de datos que deseas poner a\n    disposición de la plantilla:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Mail;\nuse App\\Order;\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Mail\\Mailable;\nuse Illuminate\\Queue\\SerializesModels;\nclass OrderShipped extends Mailable\n{\n    use Queueable, SerializesModels;\n    /**\n    * The order instance.\n    *\n    * @var Order\n    */\n    protected \\$order;\n    /**\n    * Create a new message instance.\n    *\n    * @return void\n    */\n    public function __construct(Order \\$order)\n    {\n        \\$this-&gt;order = \\$order;\n    }\n    /**\n    * Build the message.\n    *\n    * @return \\$this\n    */\n    public function build()\n    {\n        return \\$this-&gt;view('emails.orders.shipped')\n                    -&gt;with([\n                        'orderName' =&gt; \\$this-&gt;order-&gt;name,\n                        'orderPrice' =&gt; \\$this-&gt;order-&gt;price,\n                    ]);\n    }\n}\n</code></pre>\n<p>Una vez que los datos se han pasado con el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">with</span>, estarán automáticamente\n    disponibles en la vista, por lo que puedes acceder a ellos como lo harías con cualquier otro\n    dato en las plantillas Blade:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;div&gt;\n    Price: {{ \\$orderPrice }}\n&lt;/div&gt;\n</code></pre>\n<h3># Archivos adjuntos</h3>\n<p>Para agregar archivos adjuntos a un correo electrónico, podemos usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">attach</span> dentro del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">build</span> de la clase Mailable. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">attach</span>\n    acepta la ruta completa al archivo como su primer argumento:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Build the message.\n*\n* @return \\$this\n*/\npublic function build()\n{\n    return \\$this-&gt;view('emails.orders.shipped')\n                -&gt;attach('/path/to/file');\n}\n</code></pre>\n<p>Al adjuntar archivos a un mensaje, también puedes especificar el nombre para mostrar y / o el\n    tipo MIME pasando un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">array</span> como segundo argumento al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">attach</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Build the message.\n*\n* @return \\$this\n*/\npublic function build()\n{\n    return \\$this-&gt;view('emails.orders.shipped')\n                -&gt;attach('/path/to/file', [\n                    'as' =&gt; 'name.pdf',\n                    'mime' =&gt; 'application/pdf',\n                ]);\n}\n</code></pre>\n<h4># Adjuntando archivos desde el disco</h4>\n<p>Si has almacenado un archivo en uno de tus discos, puedes adjuntarlo al correo electrónico usando\n    el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">attachFromStorage</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Build the message.\n*\n* @return \\$this\n*/\npublic function build()\n{\n    return \\$this-&gt;view('email.orders.shipped')\n                -&gt;attachFromStorage('/path/to/file');\n}\n</code></pre>\n<p>De ser necesario, puedes especificar el nombre del archivo adjunto y opciones adicionales usando\n    el segundo y tercer argumento del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">attachFromStorage</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Build the message.\n*\n* @return \\$this\n*/\npublic function build()\n{\n    return \\$this-&gt;view('email.orders.shipped')\n                -&gt;attachFromStorage('/path/to/file', 'name.pdf', [\n                    'mime' =&gt; 'application/pdf'\n                ]);\n}\n</code></pre>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">attachFromStorageDisk</span> puede ser usado si necesitas especificar un disco de\n    almacenamiento diferente a tu disco por defecto:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Build the message.\n*\n* @return \\$this\n*/\npublic function build()\n{\n    return \\$this-&gt;view('email.orders.shipped')\n                -&gt;attachFromStorageDisk('s3', '/path/to/file');\n}\n</code></pre>\n<h4># Archivos adjuntos desde la memoria</h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">attachData</span> se puede usar para adjuntar una cadena de bytes sin formato\n    como un archivo adjunto. Por ejemplo, puede usar este método si ha generado un PDF en la memoria\n    y desea adjuntarlo al correo electrónico sin escribirlo en el disco. El método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">attachData</span> acepta los bytes de datos brutos como su primer argumento, el nombre del\n    archivo como su segundo argumento y un arreglo de opciones como su tercer argumento:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Build the message.\n*\n* @return \\$this\n*/\npublic function build()\n{\n    return \\$this-&gt;view('emails.orders.shipped')\n                -&gt;attachData(\\$this-&gt;pdf, 'name.pdf', [\n                    'mime' =&gt; 'application/pdf',\n                ]);\n}\n</code></pre>\n<h3># Archivos adjuntos en línea</h3>\n<p>La incrustación de imágenes en línea en sus correos electrónicos suele ser engorrosa; sin\n    embargo, Laravel proporciona una forma conveniente de adjuntar imágenes a sus correos\n    electrónicos y recuperar el CID apropiado. Para incrustar una imagen en línea, usa el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">embed</span> en la variable <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$message</span> dentro de tu plantilla de correo\n    electrónico. Laravel automáticamente hace que la variable <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$message</span> esté disponible\n    para todas tus plantillas de correo electrónico, por lo que no tienes que preocuparte por\n    pasarla manualmente:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;body&gt;\n    Here is an image:\n    &lt;img src=\"{{ \\$message-&gt;embed(\\$pathToImage) }}\"&gt;\n&lt;/body&gt;\n</code></pre>\n<p>Nota</p>\n<p>La variable <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$message</span> no está disponible en los mensajes ya que los mensajes de\n    texto plano (plain-text) no utilizan archivos adjuntos en línea.</p>\n<h4># Incrustar datos adjuntos de la memoria</h4>\n<p>Si ya tienes una cadena de datos en la memoria que desees incorporar a una plantilla de correo\n    electrónico, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">embedData</span> en la variable <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$message</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;body&gt;\n    Here is an image from raw data:\n    &lt;img src=\"{{ \\$message-&gt;embedData(\\$data, \\$name) }}\"&gt;\n&lt;/body&gt;\n</code></pre>\n<h3># Personalizar el mensaje de SwiftMailer</h3>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withSwiftMessage</span> de la clase base <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Mailable</span> te permite\n    registrar una función anónima que se invocará con la instancia del mensaje de SwiftMailer sin\n    procesar antes de enviar el mensaje. Esto le da la oportunidad de personalizar el mensaje antes\n    de que se entregue:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Build the message.\n*\n* @return \\$this\n*/\npublic function build()\n{\n    \\$this-&gt;view('emails.orders.shipped');\n    \\$this-&gt;withSwiftMessage(function (\\$message) {\n        \\$message-&gt;getHeaders()\n                -&gt;addTextHeader('Custom-Header', 'HeaderValue');\n    });\n}\n</code></pre>\n<h2>Mailables en markdown</h2>\n<p>Los mensajes escritos con Markdown le permiten aprovechar las plantillas y los componentes\n    precompilados de las notificaciones por correo en tus documentos. Dado que los mensajes se\n    escriben en Markdown, Laravel puede generar plantillas HTML atractivas para los mensajes y\n    generar automáticamente una contraparte de texto sin formato.</p>\n<h3># Generar mailables en markdown</h3>\n<p>Para generar una clase de Mailable con una plantilla para Markdown puedes usar la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--markdown</span>\n    del comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:mail</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan make:mail OrderShipped --markdown=emails.orders.shipped\n</code></pre>\n<p>Luego de generar la clase, dentro de su método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">build</span> debes llamar llame al método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">markdown</span> en lugar del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">view</span>. Los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">markdown</span>\n    aceptan el nombre de la plantilla Markdown y un arreglo opcional de datos para poner a\n    disposición de la plantilla:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Build the message.\n*\n* @return \\$this\n*/\npublic function build()\n{\n    return \\$this-&gt;from('example@example.com')\n                -&gt;markdown('emails.orders.shipped');\n}\n</code></pre>\n<h3># Escribir mensajes en Markdown</h3>\n<p>Los correos con Markdown utilizan una combinación de componentes Blade y sintaxis Markdown que le\n    permiten construir fácilmente mensajes de correo al mismo tiempo que aprovechas los componentes\n    prefabricados de Laravel:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>@component('mail::message')\n# Order Shipped\nYour order has been shipped!\n@component('mail::button', ['url' =&gt; \\$url])\nView Order\n@endcomponent\nThanks,&lt;br&gt;\n{{ config('app.name') }}\n@endcomponent\n</code></pre>\n<p>TIP</p>\n<p>No uses una sangría excesiva al escribir correos electrónicos de Markdown. Los analizadores de\n    Markdown renderizarán contenido sangrado como bloques de código.</p>\n<h4># Componente button</h4>\n<p>El componente de botón representa un enlace de botón centrado. El componente acepta dos\n    argumentos, una <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url</span> y un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">color</span> opcional. Los colores compatibles son\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">primary</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">success</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">error</span>. Puedes agregar los botones que\n    desees a un mensaje:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>@component('mail::button', ['url' =&gt; \\$url, 'color' =&gt; 'success'])\nView Order\n@endcomponent\n</code></pre>\n<h4># Componente panel</h4>\n<p>El componente del panel representa el bloque de texto dado en un panel que tiene un color de\n    fondo ligeramente diferente que el resto del mensaje. Esto te permite llamar la atención sobre\n    un bloque de texto dado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>@component('mail::panel')\nThis is the panel content.\n@endcomponent\n</code></pre>\n<h4># Componente table</h4>\n<p>El componente de tabla le permite transformar una tabla en Markdown a una tabla HTML. El\n    componente acepta la tabla en Markdown como su contenido. La alineación de columna de tabla es\n    compatible con la sintaxis de alineación de tabla de Markdown predeterminada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>@component('mail::table')\n| Laravel       | Table         | Example  |\n| ------------- |:-------------:| --------:|\n| Col 2 is      | Centered      | \\$10      |\n| Col 3 is      | Right-Aligned | \\$20      |\n@endcomponent\n</code></pre>\n<h3># Personalizar los componentes</h3>\n<p>Puedes exportar todos los componentes de correo Markdown a su propia aplicación para\n    personalización. Para exportar los componentes, use el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">vendor:publish</span> y la\n    opción del tag <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">laravel-mail</span> de esta forma:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan vendor:publish --tag=laravel-mail\n</code></pre>\n<p>Este comando publicará los componentes de correo Markdown en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views/vendor/mail</span>.\n    El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mail</span> contendrá un directorio<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">html</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">text</span>,\n    cada uno con sus respectivas representaciones de cada componente disponible. Eres libre de\n    personalizar estos componentes como desees.</p>\n<h4># Personalizar el CSS</h4>\n<p>Después de exportar los componentes, el directorio\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views/vendor/mail/html/themes</span> contendrá un archivo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">default.css</span>, puedes personalizar el CSS en este archivo y sus estilos se alinearán\n    automáticamente en las representaciones HTML de sus mensajes de correo Markdown.</p>\n<p>Si te gustaría construir un nuevo tema para los componentes de Markdown de Laravel, puedes\n    colocar un archivo CSS dentro del directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">html/themes</span>. Luego de nombrar y\n    guardar tu archivo de CSS, actualiza la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">theme</span> del archivo de configuración\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mail</span> con el nuevo nombre de tu tema.</p>\n<p>Para personalizar un tema para un mailable individual, debes establecer la propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$theme</span>\n    de la clase mailable a el nombre del tema que debería ser usado al enviar el mailable.</p>\n<h2>Enviar correo</h2>\n<p>Para enviar un mensajes debes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">to</span> en el facade llamado\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Mail</span>. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">to</span> acepta una dirección de correo, una instancia de\n    usuario o una colección de usuarios. Si pasas un objeto o una colección de objetos, el remitente\n    utilizará automáticamente sus propiedades de \"email\" y \"name\" cuando configure los destinatarios\n    del correo electrónico, por lo tanto, asegúrese de que estos atributos estén disponibles en sus\n    objetos. Una vez que haya especificado sus destinatarios, puede pasar una instancia de su clase\n    mailable al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">send</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse App\\Order;\nuse App\\Mail\\OrderShipped;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Mail;\nuse App\\Http\\Controllers\\Controller;\nclass OrderController extends Controller\n{\n    /**\n    * Ship the given order.\n    *\n    * @param  Request  \\$request\n    * @param  int  \\$orderId\n    * @return Response\n    */\n    public function ship(Request \\$request, \\$orderId)\n    {\n        \\$order = Order::findOrFail(\\$orderId);\n        // Ship order...\n        Mail::to(\\$request-&gt;user())-&gt;send(new OrderShipped(\\$order));\n    }\n}\n</code></pre>\n<p>No estás limitado a especificar los destinatarios \"a\" al enviar un mensaje. Eres libre de\n    configurar los destinatarios \"a\", \"cc\" y \"bcc\", todo dentro de una única llamada a un método\n    encadenado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Mail::to(\\$request-&gt;user())\n    -&gt;cc(\\$moreUsers)\n    -&gt;bcc(\\$evenMoreUsers)\n    -&gt;send(new OrderShipped(\\$order));\n</code></pre>\n<h2>Renderizar mailables</h2>\n<p>Algunas veces puedes querer capturar el contenido HTML de un mailable sin enviarlo. Para lograr\n    esto, puedes llamar al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">render</span> del mailable. Este método retornará los\n    contenidos evaluados del mailable como una cadena:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$invoice = App\\Invoice::find(1);\nreturn (new App\\Mail\\InvoicePaid(\\$invoice))-&gt;render();\n</code></pre>\n<h3># Previsualizar mailables en el navegador</h3>\n<p>Al diseñar una plantilla mailable, es conveniente previsualizar rápidamente el mailable\n    renderizado en tu navegador como una plantilla de Blade corriente. Por esta razón, Laravel te\n    permite retornar cualquier mailable directamente desde un Closure de ruta o un controlador.\n    Cuando un mailable es retornado, será renderizado y mostrado en el navegador, permitiéndote\n    previsualizar su diseño sin necesidad de enviarlo a una dirección de correo electrónico\n    real:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('mailable', function () {\n    \\$invoice = App\\Invoice::find(1);\n    return new App\\Mail\\InvoicePaid(\\$invoice);\n});\n</code></pre>\n<h3># Correo en cola</h3>\n<h4># Poniendo en cola un correo electronico</h4>\n<p>Con el envío de correos electrónicos puede alargar drásticamente el tiempo de respuesta de su\n    aplicación, muchos desarrolladores eligen poner correos electrónicos en cola para el envío en\n    segundo plano. Laravel lo hace fácil usando su función incorporada API de cola unificada. Para\n    poner en cola un correo, use el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue</span> en el facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Mail</span> después\n    de especificar los destinatarios del mensaje:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Mail::to(\\$request-&gt;user())\n    -&gt;cc(\\$moreUsers)\n    -&gt;bcc(\\$evenMoreUsers)\n    -&gt;queue(new OrderShipped(\\$order));\n</code></pre>\n<p>Este método se encargará automáticamente de insertar un trabajo en la cola para que el mensaje se\n    envíe en segundo plano. Necesitarás configurar tus colas antes de usar esta característica.</p>\n<h4># Cola de mensajes retrasada</h4>\n<p>Si deseas retrasar la entrega de un mensaje de correo electrónico en cola, puedes usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">later</span>. Como primer argumento, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">later</span> acepta una instancia\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DateTime</span> que indica cuándo se debe enviar el mensaje:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$when = now()-&gt;addMinutes(10);\nMail::to(\\$request-&gt;user())\n    -&gt;cc(\\$moreUsers)\n    -&gt;bcc(\\$evenMoreUsers)\n    -&gt;later(\\$when, new OrderShipped(\\$order));\n</code></pre>\n<h4># Enviar a queues específicas</h4>\n<p>Como todas las clases mailable generadas usando el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:mail</span> usan el trait\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Bus\\Queueable</span> puedes llamar a los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">onQueue</span> y<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">onConnection</span>\n    en cualquier instancia de clase mailable, lo que te permite especificar la conexión y nombre de\n    cola para el mensaje:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$message = (new OrderShipped(\\$order))\n                -&gt;onConnection('sqs')\n                -&gt;onQueue('emails');\nMail::to(\\$request-&gt;user())\n    -&gt;cc(\\$moreUsers)\n    -&gt;bcc(\\$evenMoreUsers)\n    -&gt;queue(\\$message);\n</code></pre>\n<h4># En cola por defecto</h4>\n<p>Si tienes clases mailables que deseas que siempre se pongan en cola, puedes implementar la\n    interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ShouldQueue</span> en la clase. Ahora, incluso si llamas al método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">send</span> cuando envies correos el mailable se pondrá en cola ya que implementa la\n    interfaz:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Contracts\\Queue\\ShouldQueue;\nclass OrderShipped extends Mailable implements ShouldQueue\n{\n    //\n}\n</code></pre>\n<h2>Configuración regional de mailables</h2>\n<p>Laravel te permite enviar mailables en una configuración regional diferente al del idioma actual,\n    e incluso recordará dicha configuración si el correo es agregado a una cola.</p>\n<p>Para lograr esto, el facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Mail</span> ofrece un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">locale</span> para\n    establecer el idioma deseado. La aplicación cambiará a dicho configuración regional cuando el\n    mailable sea formateado y luego volverá a la configuración anterior cuando el formato es\n    completado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Mail::to(\\$request-&gt;user())-&gt;locale('es')-&gt;send(\n    new OrderShipped(\\$order)\n);\n</code></pre>\n<h3># Configuración regional de usuarios</h3>\n<p>Algunas veces, las aplicaciones almacenan la configuración regional preferida de cada usuario. Al\n    implementar la interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">HasLocalePreference</span> en uno o más de tus modelos, puedes\n    instruir a Laravel a usar dicha configuración almacenado al enviar correos electrónicos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Contracts\\Translation\\HasLocalePreference;\nclass User extends Model implements HasLocalePreference\n{\n    /**\n    * Get the user's preferred locale.\n    *\n    * @return string\n    */\n    public function preferredLocale()\n    {\n        return \\$this-&gt;locale;\n    }\n}\n</code></pre>\n<p>Una vez has implementado la interfaz, Laravel automáticamente usará la configuración regional\n    preferida al enviar mailables y notificaciones al modelo. Por lo tanto, no hay necesidad de\n    llamar al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">locale</span> al usar esta interfaz:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Mail::to(\\$request-&gt;user())-&gt;send(new OrderShipped(\\$order));\n</code></pre>\n<h2>Correos y desarrollo local</h2>\n<p>Al desarrollar una aplicación que envía correos electrónicos, probablemente no deseas enviar\n    correos electrónicos a direcciones reales. Laravel proporciona varias formas de \"desactivar\" el\n    envío real de correos electrónicos durante el desarrollo local.</p>\n<h4># Driver Log</h4>\n<p>En lugar de enviar sus correos electrónicos, el driver de correos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">log</span> escribirá\n    todos los mensajes de correo electrónico en tus archivos de logs para su inspección. Para\n    obtener más información sobre cómo configurar su aplicación por entorno, revisa la configuración\n    en la documentación.</p>\n<h4># Destinatario universal</h4>\n<p>Otra solución proporcionada por Laravel es establecer un destinatario universal de todos los\n    correos electrónicos enviados por el framework. De esta forma, todos los correos electrónicos\n    generados por tu aplicación serán enviados a una dirección específica, en lugar de la dirección\n    realmente especificada al enviar el mensaje. Esto se puede hacer a través de la opción\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">to</span> en tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/mail.php</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'to' =&gt; [\n    'address' =&gt; 'example@example.com',\n    'name' =&gt; 'Example'\n],\n</code></pre>\n<h4># Mailtrap</h4>\n<p>\n    Finalmente, puedes usar un servicio como\n    Mailtrap\n    y el driver <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">smtp</span> para enviar sus mensajes de correo electrónico a un buzón\n    'ficticio' donde puedes verlos en un verdadero cliente de correo electrónico. Este enfoque tiene\n    el beneficio de permitirle inspeccionar realmente los correos electrónicos finales en el visor\n    de mensajes de Mailtrap.\n</p>\n<h2>Eventos</h2>\n<p>Laravel dispara dos eventos durante el proceso de envío de mensajes de correo. El evento <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">MessageSending</span>\n    se dispara antes de que se envíe un mensaje, mientras que el evento<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">MessageSent</span> se\n    dispara después de que se ha enviado un mensaje. Recuerda, estos eventos se disparan cuando el\n    correo <em>se envía</em>, no cuando se pone en cola. Puedes registrar un detector de eventos\n    para este evento en tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">EventServiceProvider</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* The event listener mappings for the application.\n*\n* @var array\n*/\nprotected \\$listen = [\n    'Illuminate\\Mail\\Events\\MessageSending' =&gt; [\n        'App\\Listeners\\LogSendingMessage',\n    ],\n    'Illuminate\\Mail\\Events\\MessageSent' =&gt; [\n        'App\\Listeners\\LogSentMessage',\n    ],\n];\n</code></pre>\n</div>"
      },
      {
        "titulo": "Notificaciones",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Notificaciones</h1>\n<ul>\n    <li>Introducción</li>\n    <li>Crear notificaciones</li>\n    <li>\n        Enviar notificaciones\n        <ul>\n            <li>Utilizar el atributo notifiable</li>\n            <li>Utilizar la facade notification</li>\n            <li>Especificar canales de entrega</li>\n            <li>Notificaciones en cola</li>\n            <li>Notificaciones bajo demanda</li>\n        </ul>\n    </li>\n    <li>\n        Notificaciones por correo\n        <ul>\n            <li>Formato para mensajes por correo</li>\n            <li>Personalizar el remitente</li>\n            <li>Personalizar el destinatario</li>\n            <li>Personalizar el asunto</li>\n            <li>Personalizar las plantillas</li>\n            <li>Previsualizar notificaciones de correo</li>\n        </ul>\n    </li>\n    <li>\n        Notificaciones por correo en markdown\n        <ul>\n            <li>Generar el mensaje</li>\n            <li>Escribir el mensaje</li>\n            <li>Personalizar los componentes</li>\n        </ul>\n    </li>\n    <li>\n        Notificaciones de la base de datos\n        <ul>\n            <li>Prerrequisitos</li>\n            <li>Formato de notificaciones de base de datos</li>\n            <li>Acceder a las notificaciones</li>\n            <li>Marcar notificaciones como leídas</li>\n        </ul>\n    </li>\n    <li>\n        Notificaciones de difusión\n        <ul>\n            <li>Prerrequisitos</li>\n            <li>Formato de notificaciones de difusión</li>\n            <li>Escuchar notificaciones</li>\n        </ul>\n    </li>\n    <li>\n        Notificaciones por SMS\n        <ul>\n            <li>Prerrequisitos</li>\n            <li>Formato de notificaciones por SMS</li>\n            <li>Personalizar el número remitente</li>\n            <li>Enrutar notificaciones por SMS</li>\n        </ul>\n    </li>\n    <li>\n        Notificaciones por Slack\n        <ul>\n            <li>Prerrequisitos</li>\n            <li>Formato de notificaciones por Slack</li>\n            <li>Archivos adjuntos en Slack</li>\n            <li>Enrutar notificaciones por Slack</li>\n        </ul>\n    </li>\n    <li>Configuración regional de notificaciones</li>\n    <li>Eventos de notificación</li>\n    <li>Canales personalizados</li>\n</ul>\n<h2>Introducción</h2>\n<p>\n    Además de soporte para\n    enviar correos electrónicos\n    , Laravel brinda soporte para el envío de notificaciones mediante una variedad de canales de\n    entrega, incluyendo correo, SMS (a través de\n    Nexmo\n    ) y\n    Slack\n    . Las notificaciones pueden ser también almacenadas en una base de datos para que puedan ser\n    mostradas en la interfaz de tu página web.\n</p>\n<p>Generalmente, las notificaciones deben ser mensajes cortos e informativos que notifiquen a los\n    usuarios que algo ocurrió en tu aplicación. Por ejemplo, si estás escribiendo una aplicación de\n    facturación, podrías enviar una notificación de \"Recibo de Pago\" a tus usuarios mediante correo\n    electrónico y por SMS.</p>\n<h2>Crear notificaciones</h2>\n<p>En Laravel, cada notificación está representada por una sola clase (generalmente almacenada en el\n    directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Notifications</span>). No te preocupes si no ves este directorio en tu\n    aplicación, será creada por ti cuando ejecutes el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:notification</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan make:notification InvoicePaid\n</code></pre>\n<p>Este comando colocará una clase de notificación nueva en tu directorio\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Notifications</span>. Cada clase de notificación contiene un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">via</span> y\n    un número variable de métodos de construcción de mensaje (tales como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toMail</span> o\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toDatabase</span>) que convierten la notificación en un mensaje optimizado para ese canal\n    en particular.</p>\n<h2>Enviar notificaciones</h2>\n<h3># Usar el atributo notifiable</h3>\n<p>\n    Las notificaciones pueden ser enviadas en dos formas: usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">notify</span> del\n    atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Notifiable</span> o usando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Notification</span>\n    facade\n    . Primero, exploremos el uso del atributo:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nclass User extends Authenticatable\n{\n    use Notifiable;\n}\n</code></pre>\n<p>Este atributo es utilizado por el modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\User</span> por defecto y contiene un método\n    que puede ser usado para enviar notificaciones: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">notify</span>. El método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">notify</span> espera recibir una instancia de notificación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use App\\Notifications\\InvoicePaid;\n\\$user-&gt;notify(new InvoicePaid(\\$invoice));\n</code></pre>\n<p>TIP</p>\n<p>Recuerda que puedes usar el atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Notifications\\Notifiable</span> en\n    cualquiera de tus modelos. No estás limitado a incluirlo solamente en tu modelo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span>.</p>\n<h3># Usar la facade notification</h3>\n<p>Alternativamente, puedes enviar notificaciones mediante la facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Notification</span>. Esto\n    es útil principalmente cuando necesitas enviar una notificación a múltiples entidades\n    notificables, como un grupo de usuarios. Para enviar notificaciones usando la facade, pasa todas\n    las entidades notificables y la instancia de notificación al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">send</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Notification::send(\\$users, new InvoicePaid(\\$invoice));\n</code></pre>\n<h3># Especificar canales de entrega</h3>\n<p>Cada clase de notificación tiene un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">via</span> que determina mediante cuáles canales\n    será entregada la notificación. Las notificaciones pueden ser enviadas por los canales <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mail</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">broadcast</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">nexmo</span>, y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">slack</span>.</p>\n<p>TIP</p>\n<p>\n    Si estás interesado en utilizar otros canales de entrega como Telegram o Pusher, revisa el sitio\n    dirigido por la comunidad\n    Laravel Notification Channels\n    .\n</p>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">via</span> recibe una instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$notifiable</span> la cual será una\n    instancia de la clase a la cual la notificación está siendo enviada. Puedes usar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$notifiable</span>\n    para determinar mediante cuáles canales debería ser entregada la notificación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the notification's delivery channels.\n*\n* @param  mixed  \\$notifiable\n* @return array\n*/\npublic function via(\\$notifiable)\n{\n    return \\$notifiable-&gt;prefers_sms ? ['nexmo'] : ['mail', 'database'];\n}\n</code></pre>\n<h3># Notificaciones en cola</h3>\n<p>Nota</p>\n<p>Antes de poner notificaciones en cola, se debe configurar una cola y activar un worker.</p>\n<p>Enviar notificaciones puede tomar tiempo, especialmente si el canal necesita una API externa para\n    llamar o entregar la notificación. Para acelerar el tiempo de respuesta de tu notificación,\n    permite que sea puesta en cola añadiendo la interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ShouldQueue</span> y el atributo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Queueable</span> a tu clase. La interfaz y el atributo son importados para todas las\n    notificaciones generadas usando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:notification</span>, así que puedesn añadir de\n    inmediato a tu clase de notificación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Notifications;\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Notifications\\Notification;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nclass InvoicePaid extends Notification implements ShouldQueue\n{\n    use Queueable;\n    // ...\n}\n</code></pre>\n<p>Una vez que la interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ShouldQueue</span> haya sido agregada a tu notificación, puedes\n    enviarla con normalidad. Laravel detectará <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ShouldQueue</span> en la clase y\n    automáticamente pondrá en cola la entrega de la notificación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$user-&gt;notify(new InvoicePaid(\\$invoice));\n</code></pre>\n<p>Si quisieras retrasar la entrega de la notificación, puedes encadenar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">delay</span> al instanciar tu notificación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$when = now()-&gt;addMinutes(10);\n\\$user-&gt;notify((new InvoicePaid(\\$invoice))-&gt;delay(\\$when));\n</code></pre>\n<h3># Notificaciones bajo demanda</h3>\n<p>A veces puede que necesites enviar una notificación a alguien que no está almacenado como\n    \"usuario\" de tu aplicación. Usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Notification::route</span>, puedes\n    especificar información de enrutamiento para una notificación ad-hoc antes de enviarla:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Notification::route('mail', 'taylor@example.com')\n            -&gt;route('nexmo', '5555555555')\n            -&gt;notify(new InvoicePaid(\\$invoice));\n</code></pre>\n<h2>Notificaciones por correo</h2>\n<h3># Formato de mensajes por correo</h3>\n<p>Si una notificación tiene soporte para ser enviada por correo, se debe definir un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toMail</span>\n    en la clase de la notificación. Este método recibirá una entidad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$notifiable</span> y\n    debe devolver una instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Notifications\\Messages\\MailMessage</span>. Los\n    mensajes por correo pueden contener líneas de texto, así como una \"llamada a la acción\".\n    Observemos un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toMail</span> de ejemplo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the mail representation of the notification.\n*\n* @param  mixed  \\$notifiable\n* @return \\Illuminate\\Notifications\\Messages\\MailMessage\n*/\npublic function toMail(\\$notifiable)\n{\n    \\$url = url('/invoice/'.\\$this-&gt;invoice-&gt;id);\n    return (new MailMessage)\n                -&gt;greeting('Hello!')\n                -&gt;line('One of your invoices has been paid!')\n                -&gt;action('View Invoice', \\$url)\n                -&gt;line('Thank you for using our application!');\n}\n</code></pre>\n<p>TIP</p>\n<p>Nota que se está usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$this-&gt;invoice-&gt;id</span> en el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toMail</span>.\n    Puedes pasar cualquier dato que la notificación necesite para generar su mensaje dentro del\n    constructor de la notificación.</p>\n<p>En este ejemplo, registramos un saludo, una línea de texto, un llamado a la acción y luego otra\n    línea de texto. Estos elementos proporcionados por el objeto <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">MailMessage</span> hacen que\n    sea rápido y sencillo dar formato a pequeños correos transaccionales. El canal de correo\n    entonces traducirá los componentes del mensaje en una plantilla HTML agradable y con capacidad\n    de respuesta, justo con su contraparte de texto simple. He aquí un ejemplo de un correo generado\n    por el canal <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mail</span>:</p>\n<img src=\"https://laravel.com/assets/img/notification-example.png\" width=\"551\" height=\"596\">\n<p>TIP</p>\n<p>Al enviar notificaciones por correo, asegúrate de establecer el valor <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">name</span> en tu\n    archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/app.php</span>. Este valor será usado en el encabezado y pie de los\n    mensajes de notificación por correo.</p>\n<h4># Otras opciones de formato para notificaciones</h4>\n<p>En lugar de definir las \"líneas\" de texto en la clase notification, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">view</span>\n    para especificar una plantilla personalizada que debe ser usada para renderizar el correo de\n    notificación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the mail representation of the notification.\n*\n* @param  mixed  \\$notifiable\n* @return \\Illuminate\\Notifications\\Messages\\MailMessage\n*/\npublic function toMail(\\$notifiable)\n{\n    return (new MailMessage)-&gt;view(\n        'emails.name', ['invoice' =&gt; \\$this-&gt;invoice]\n    );\n}\n</code></pre>\n<p>Además, puedes devolver un objeto mailable desde el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toMail</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use App\\Mail\\InvoicePaid as Mailable;\n/**\n* Get the mail representation of the notification.\n*\n* @param  mixed  \\$notifiable\n* @return Mailable\n*/\npublic function toMail(\\$notifiable)\n{\n    return (new Mailable(\\$this-&gt;invoice))-&gt;to(\\$this-&gt;user-&gt;email);\n}\n</code></pre>\n<h4># Mensajes de error</h4>\n<p>Algunas notificaciones informan a los usuarios acerca de errores, como un pago fallido. puedes\n    indicar que un mensaje por correo se refiere a un error llamando al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">error</span>\n    cuando se construye el mensaje. Al usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">error</span> en un mensaje por correo,\n    el botón de llamado a la acción será rojo en vez de azul:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the mail representation of the notification.\n*\n* @param  mixed  \\$notifiable\n* @return \\Illuminate\\Notifications\\Message\n*/\npublic function toMail(\\$notifiable)\n{\n    return (new MailMessage)\n                -&gt;error()\n                -&gt;subject('Notification Subject')\n                -&gt;line('...');\n}\n</code></pre>\n<h3># Personalizar el remitente</h3>\n<p>Por defecto, el remitente del correo electrónico es definido en el archivo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/mail.php</span>. Sin embargo, también puedes definir un remitente a través de una\n    notificación específica:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the mail representation of the notification.\n*\n* @param  mixed  \\$notifiable\n* @return \\Illuminate\\Notifications\\Messages\\MailMessage\n*/\npublic function toMail(\\$notifiable)\n{\n    return (new MailMessage)\n                -&gt;from('noreply@laravel.com', 'Laravel')\n                -&gt;line('...');\n}\n</code></pre>\n<h3># Personalizar el destinatario</h3>\n<p>Al enviar notificaciones mediante el canal <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mail</span>, el sistema de notificaciones\n    automáticamente buscará una propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">email</span> en tu entidad notificable. Puedes\n    personalizar la dirección de correo electrónico usada para entregar la notificación definiendo\n    el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">routeNotificationForMail</span> en la entidad:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nclass User extends Authenticatable\n{\n    use Notifiable;\n    /**\n    * Route notifications for the mail channel.\n    *\n    * @param  \\Illuminate\\Notifications\\Notification  \\$notification\n    * @return string\n    */\n    public function routeNotificationForMail(\\$notification)\n    {\n        return \\$this-&gt;email_address;\n    }\n}\n</code></pre>\n<h3># Personalizar el asunto</h3>\n<p>Por defecto, el asunto del correo electrónico es el nombre de la clase de notificación formateada\n    a \"title case\". Así que si tu clase de notificación se llama <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">InvoicePaid</span>, el asunto\n    del correo será <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Invoice Paid</span>. Si se prefiere especificar un asunto explícito para\n    el mensaje, puedes llamar al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">subject</span> al construir el mensaje:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the mail representation of the notification.\n*\n* @param  mixed  \\$notifiable\n* @return \\Illuminate\\Notifications\\Messages\\MailMessage\n*/\npublic function toMail(\\$notifiable)\n{\n    return (new MailMessage)\n                -&gt;subject('Notification Subject')\n                -&gt;line('...');\n}\n</code></pre>\n<h3># Personalizar las plantillas</h3>\n<p>Puedes modificar las plantillas HTML y de texto simple usadas por las notificaciones de correo\n    publicando los recursos del paquete de notificación. Luego de ejecutar este comando, las\n    plantillas de notificación de correo estarán ubicadas en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views/vendor/notifications</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan vendor:publish --tag=laravel-notifications\n</code></pre>\n<h3># Previsualizar notificaciones de correo</h3>\n<p>Al diseñar una plantilla de notificación de correo, es conveniente previsualizar rápidamente el\n    mensaje de correo renderizado en tu navegador como una plantilla normal de Blade. Por esta\n    razón, Laravel te permite retornar cualquier mensaje de correo generado por una notificación de\n    correo directamente desde un Closure de ruta o un controlador. Cuando un\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">MailMessage</span> es retornado, este será renderizado y mostrado en el navegador,\n    permitiendote previsualizar rápidamente su diseño sin necesidad de enviarlo a un correo\n    electrónico real:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('mail', function () {\n    \\$invoice = App\\Invoice::find(1);\n    return (new App\\Notifications\\InvoicePaid(\\$invoice))\n                -&gt;toMail(\\$invoice-&gt;user);\n});\n</code></pre>\n<h2>Notificaciones por correo markdown</h2>\n<p>Las notificaciones por correo Markdown permiten tomar ventaja de las plantillas prefabricadas\n    para notificaciones por correo, dando a su vez libertad para escribir mensajes más largos y\n    personalizados. Como los mensajes están escritos en Markdown, Laravel puede renderizar\n    plantillas HTML bellas y responsivas para los mensajes y a la vez generar automáticamente su\n    contraparte en texto simple.</p>\n<h3># Generar el mensaje</h3>\n<p>Para generar una notificación con su plantilla Markdown correspondiente, puedes usar la opción\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--markdown</span> del comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:notification</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan make:notification InvoicePaid --markdown=mail.invoice.paid\n</code></pre>\n<p>Como todas las otras notificaciones, aquellas que usan plantillas Markdown deben definir un\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toMail</span> en su clase de notificación. Sin embargo, en lugar de usar los\n    modelos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">line</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">action</span> para construir la notificación, se usa el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">markdown</span> para especificar el nombre de la plantilla Markdown a ser usada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the mail representation of the notification.\n*\n* @param  mixed  \\$notifiable\n* @return \\Illuminate\\Notifications\\Messages\\MailMessage\n*/\npublic function toMail(\\$notifiable)\n{\n    \\$url = url('/invoice/'.\\$this-&gt;invoice-&gt;id);\n    return (new MailMessage)\n                -&gt;subject('Invoice Paid')\n                -&gt;markdown('mail.invoice.paid', ['url' =&gt; \\$url]);\n}\n</code></pre>\n<h3># Escribir el mensaje</h3>\n<p>Las notificaciones por correo Markdown usan una combinación de componentes Blade y sintaxis\n    Markdown que te permiten construir fácilmente notificaciones a la vez que se apalancan los\n    componentes de notificación prefabricados por Laravel:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>@component('mail::message')\n# Invoice Paid\nYour invoice has been paid!\n@component('mail::button', ['url' =&gt; \\$url])\nView Invoice\n@endcomponent\nThanks,&lt;br&gt;\n{{ config('app.name') }}\n@endcomponent\n</code></pre>\n<h4># Componente button</h4>\n<p>El componente button renderiza un enlace a un botón centrado. El componente acepta dos\n    argumentos, una <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url</span> y un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">color</span> opcional. LOs colores disponibles son\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">blue</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">green</span>, y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">red</span>. Puedes añadir tantos componentes de\n    botón a una notificación como desees:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>@component('mail::button', ['url' =&gt; \\$url, 'color' =&gt; 'green'])\nView Invoice\n@endcomponent\n</code></pre>\n<h4># Componente panel</h4>\n<p>El componente panel renderiza el bloque de texto dado en un panel que tiene un color de fondo\n    ligeramente distinto al resto de la notificación. Esto permite poner énfasis en un determinado\n    bloque de texto:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>@component('mail::panel')\nThis is the panel content.\n@endcomponent\n</code></pre>\n<h4># Componente table</h4>\n<p>El componente table permite transformar una tabla Markdown en una tabla HTML. El componente\n    acepta la tabla Markdown como contenido. La alineación de columnas es soportada usando la\n    sintaxis de alineación de tablas de Markdown por defecto:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>@component('mail::table')\n| Laravel       | Table         | Example  |\n| ------------- |:-------------:| --------:|\n| Col 2 is      | Centered      | \\$10      |\n| Col 3 is      | Right-Aligned | \\$20      |\n@endcomponent\n</code></pre>\n<h3># Personalizar los componentes</h3>\n<p>Puedes exportar todos los componentes de notificación de Markdown a tu propia aplicación para\n    personalización. Para exportar los componentes, se usa el comando Artisan\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">vendor:publish</span> para publicar la etiqueta del asset <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">laravel-mail</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan vendor:publish --tag=laravel-mail\n</code></pre>\n<p>Este comando publicará los componentes de correo de Markdown al directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views/vendor/mail</span>.\n    El directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mail</span> contendrá los directorios <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">html</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">text</span>,\n    cada uno contiene sus respectivas representaciones de cada componente disponible. Eres libre de\n    personalizar estos componentes de acuerdo a su preferencia.</p>\n<h3># Personalizar CSS</h3>\n<p>Después de exportar los componentes, el directorio\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views/vendor/mail/html/themes</span> contendrá un archivo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">default.css</span>. Puedes personalizar el CSS en este archivo y los estilos\n    automáticamente se alinearán con las representaciones HTML de las notificaciones Markdown.</p>\n<p>Si te gustaría construir un nuevo tema para los componentes Markdown de Laravel, puedes colocar\n    un archivo CSS dentro del directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">html/themes</span>. Luego de nombrar y guardar tus\n    archivos de CSS, actualiza la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">theme</span> del archivo de configuración\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mail</span> para que coincida con el nombre de tu nuevo tema.</p>\n<p>Para personalizar un tema para una notificación individual, puedes llamar al método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">theme</span> al momento de construir el mensaje de la notificación. El método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">theme</span> acepta el nombre del tema que debería ser usado al momento de enviar la\n    notificación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the mail representation of the notification.\n*\n* @param  mixed  \\$notifiable\n* @return \\Illuminate\\Notifications\\Messages\\MailMessage\n*/\npublic function toMail(\\$notifiable)\n{\n    return (new MailMessage)\n                -&gt;theme('invoices')\n                -&gt;theme('invoice')\n                -&gt;subject('Invoice Paid')\n                -&gt;markdown('mail.invoice.paid', ['url' =&gt; \\$url]);\n}\n</code></pre>\n<h2>Notificaciones de base de datos</h2>\n<h3># Prerrequisitos</h3>\n<p>El canal de notificaciones <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database</span> guarda la información de notificación en una\n    tabla de base de datos. Esta tabla contendrá información como el tipo de notificación así como\n    datos JSON personalizados que describen la notificación.</p>\n<p>Puedes buscar en la tabla para mostrar las notificaciones en la interfaz de usuario de la\n    aplicación. Pero, antes de poder hacer esto, necesitarás crear una tabla de base de datos para\n    almacenar las notificaciones. Puedes usar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">notifications:table</span> para\n    generar una migración con el esquema de tabla apropiado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan notifications:table\nphp artisan migrate\n</code></pre>\n<h3># Agregar formato a las notificaciones de la base de datos</h3>\n<p>Si una notificación posee soporte para ser almacenada en una tabla de base de datos, debes\n    definir un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toDatabase</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toArray</span> en la clase de notificación.\n    Este método recibirá una entidad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$notifiable</span> y debería devolver un arreglo PHP\n    sencillo. El arreglo devuelto estará codificado como JSON y almacenado en la columna\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">data</span>de la tabla <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">notifications</span>. Observemos un ejemplo del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toArray</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the array representation of the notification.\n*\n* @param  mixed  \\$notifiable\n* @return array\n*/\npublic function toArray(\\$notifiable)\n{\n    return [\n        'invoice_id' =&gt; \\$this-&gt;invoice-&gt;id,\n        'amount' =&gt; \\$this-&gt;invoice-&gt;amount,\n    ];\n}\n</code></pre>\n<h4># <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toDatabase</span> Vs. <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toArray</span></h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toArray</span> también es usado por el canal <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">broadcast</span> para\n    determinar cuáles datos difundir al cliente JavaScript. Si prefieres tener dos representaciones\n    de arreglos para los canales <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">broadcast</span>, debes definir un\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toDatabase</span> en lugar de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toArray</span>.</p>\n<h3># Acceder a las notificaciones</h3>\n<p>Una vez que las notificaciones se almacenan en la base de datos, necesitas una forma conveniente\n    de acceder a ellas desde tus entidades notificables. El atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Notifications\\Notifiable</span>,\n    el cual está incluido en el modelo de Laravel <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\User</span> por defecto, incluye una\n    relación Eloquent <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">notifications</span> que devuelve las notificaciones para la entidad.\n    Para conseguir las notificaciones, puedes acceder a este método como a cualquier otra relación\n    Eloquent. Por defecto, las notificaciones serán clasificadas por el timestamp\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">created_at</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$user = App\\User::find(1);\nforeach (\\$user-&gt;notifications as \\$notification) {\n    echo \\$notification-&gt;type;\n}\n</code></pre>\n<p>Si quieres recibir sólo las notificaciones \"no leídas (unread)\", puedes usar la relación <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unreadNotifications</span>.\n    Nuevamente, las notificaciones serán clasificadas por el timestamp <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">created_at</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$user = App\\User::find(1);\nforeach (\\$user-&gt;unreadNotifications as \\$notification) {\n    echo \\$notification-&gt;type;\n}\n</code></pre>\n<p>TIP</p>\n<p>Para acceder a las notificaciones desde el cliente JavaScript, se debe definir un controlador de\n    notificaciones para tu aplicación que devuelva las notificaciones para una entidad notificable,\n    como el usuario actual. puedes entonces elaborar una petición HTTP al URI de ese controlador\n    desde el cliente JavaScript.</p>\n<h3># Marcar notificaciones como leídas</h3>\n<p>Normalmente, querrás marcar una notificación como \"leída (read)\" cuando un usuario la ve. El\n    atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Notifications\\Notifiable</span> provee un método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">markAsRead</span> el cual actualiza la columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">read_at</span> en el registro de base\n    de datos de las notificaciones:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$user = App\\User::find(1);\nforeach (\\$user-&gt;unreadNotifications as \\$notification) {\n    \\$notification-&gt;markAsRead();\n}\n</code></pre>\n<p>Sin embargo, en lugar de hacer bucle a través de cada notificación, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">markAsRead</span>\n    directamente en un grupo de notificaciones:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$user-&gt;unreadNotifications-&gt;markAsRead();\n</code></pre>\n<p>Asimismo, puedes utilizar una consulta de actualización masiva para marcar todas las\n    notificaciones como leídas sin necesidad de recuperarlas de la base de datos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$user = App\\User::find(1);\n\\$user-&gt;unreadNotifications()-&gt;update(['read_at' =&gt; now()]);\n</code></pre>\n<p>Puedes hacer <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">delete</span> a las notificaciones para removerlas por completo de la tabla:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$user-&gt;notifications()-&gt;delete();\n</code></pre>\n<h2>Notificaciones de difusión</h2>\n<h3># Prerrequisitos</h3>\n<p>Antes de difundir notificaciones, debes configurar y familiarizarse con los servicios\n    broadcasting de eventos de Laravel. La difusión de eventos brinda una forma de reaccionar a los\n    eventos de Laravel disparados por el servidor, desde el cliente JavaScript.</p>\n<h3># Formato de notificaciones de difusión</h3>\n<p>EL canal <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">broadcast</span> difunde notificaciones usando los servicios broadcasting de\n    eventos de Laravel, permitiéndole al cliente JavaScript capturar notificaciones en tiempo real.\n    Si una notificación posee soporte para difusión, debes definir un método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toBroadcast</span> en la clase de notificación. Este método recibirá una entidad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$notifiable</span>\n    y debe devolver una instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">BroadcastMessage</span>. Si el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toBroadcast</span> no existe, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toArray</span> será usado para recopilar los\n    datos que deberían ser transmitidos. Los datos devueltos estarán codificados como JSON y se\n    difundirán al cliente JavaScript. Observemos un ejemplo del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toBroadcast</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Notifications\\Messages\\BroadcastMessage;\n/**\n* Get the broadcastable representation of the notification.\n*\n* @param  mixed  \\$notifiable\n* @return BroadcastMessage\n*/\npublic function toBroadcast(\\$notifiable)\n{\n    return new BroadcastMessage([\n        'invoice_id' =&gt; \\$this-&gt;invoice-&gt;id,\n        'amount' =&gt; \\$this-&gt;invoice-&gt;amount,\n    ]);\n}\n</code></pre>\n<h4># Configuración de la cola de difusión</h4>\n<p>Todas las notificaciones de difusión son puestas en cola para ser difundidas. Si prefieres\n    configurar la conexión a la cola o el nombre de la cola usada para las operaciones de difusión,\n    puedes usar los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">onConnection</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">onQueue</span> de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">BroadcastMessage</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>return (new BroadcastMessage(\\$data))\n                -&gt;onConnection('sqs')\n                -&gt;onQueue('broadcasts');\n</code></pre>\n<p>TIP</p>\n<p>Adicional a los datos especificados, las notificaciones de difusión contendrán también un campo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">type</span> que contiene el nombre de clase de la notificación.</p>\n<h3># Escuchar notificaciones</h3>\n<p>Las notificaciones se difundirán en un canal privado formateado utilizando la convención <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">{notifiable}.{id}</span>.\n    Por lo tanto, si estás enviando una notificación a una instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\User</span> con una\n    ID de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">1</span>, la notificación será difundida en el canal privado <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App.User.1</span>.\n    Al usar Laravel Echo, puedes fácilmente escuchar notificaciones en un canal utilizando el método\n    helper <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">notification</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Echo.private('App.User.' + userId)\n    .notification((notification) =&gt; {\n        console.log(notification.type);\n    });\n</code></pre>\n<h4># Personalizar el canal de notificación</h4>\n<p>Si quieres personalizar los canales mediante los cuales una entidad notificable recibe sus\n    notificaciones de difusión, puedes definir un método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">receivesBroadcastNotificationsOn</span> en la entidad notificable:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Broadcasting\\PrivateChannel;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nclass User extends Authenticatable\n{\n    use Notifiable;\n    /**\n    * The channels the user receives notification broadcasts on.\n    *\n    * @return string\n    */\n    public function receivesBroadcastNotificationsOn()\n    {\n        return 'users.'.\\$this-&gt;id;\n    }\n}\n</code></pre>\n<h2>Notificaciones por SMS</h2>\n<h3># Prerrequisitos</h3>\n<p>\n    El envío de notificaciones por SMS en Laravel trabaja con\n    Nexmo\n    . Antes de poder enviar notificaciones mediante Nexmo, necesitas instalar el paquete Composer\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">laravel/nexmo-notification-channel</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>composer require laravel/nexmo-notification-channel\n</code></pre>\n<p>Luego, necesitas agregar algunas opciones de configuración al archivo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/services.php</span>. Puedes copiar el ejemplo de configuración siguiente para\n    empezar:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'nexmo' =&gt; [\n    'key' =&gt; env('NEXMO_KEY'),\n    'secret' =&gt; env('NEXMO_SECRET'),\n    'sms_from' =&gt; '15556666666',\n],\n</code></pre>\n<p>La opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sms_from</span> es el número de teléfono remitente de los mensajes SMS. Se debe\n    generar un número de teléfono para la aplicación en el panel de control de Nexmo.</p>\n<h3># Formato de notificaciones de SMS</h3>\n<p>Si una notificación tiene soporte para ser enviada mediante SMS, debes definir un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toNexmo</span>\n    en la clase de notificación. Este método recibirá una entidad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$notifiable</span> y debe\n    devolver una instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Notifications\\Messages\\NexmoMessage</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the Nexmo / SMS representation of the notification.\n*\n* @param  mixed  \\$notifiable\n* @return NexmoMessage\n*/\npublic function toNexmo(\\$notifiable)\n{\n    return (new NexmoMessage)\n                -&gt;content('Your SMS message content');\n}\n</code></pre>\n<h4># Contenido unispan</h4>\n<p>Si el mensaje SMS contiene caracteres Unispan, debes llamar al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unispan</span> al\n    construir la instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">NexmoMessage</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the Nexmo / SMS representation of the notification.\n*\n* @param  mixed  \\$notifiable\n* @return NexmoMessage\n*/\npublic function toNexmo(\\$notifiable)\n{\n    return (new NexmoMessage)\n                -&gt;content('Your unispan message')\n                -&gt;unispan();\n}\n</code></pre>\n<h3># Personalizando el número remitente</h3>\n<p>Si deseas enviar algunas notificaciones desde un número telefónico diferente al especificado en\n    el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/services.php</span>, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">from</span> en una\n    instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">NexmoMessage</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the Nexmo / SMS representation of the notification.\n*\n* @param  mixed  \\$notifiable\n* @return NexmoMessage\n*/\npublic function toNexmo(\\$notifiable)\n{\n    return (new NexmoMessage)\n                -&gt;content('Your SMS message content')\n                -&gt;from('15554443333');\n}\n</code></pre>\n<h3># Enrutar notificaciones por SMS</h3>\n<p>Al enviar notificaciones a través del canal <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">nexmo</span>, el sistema de notificaciones\n    buscará automáticamente por un atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">phone_number</span> en la entidad notificable. Si\n    deseas personalizar el número telefónico al cual la notificación será entregada, define un\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">routeNotificationForNexmo</span> en la entidad:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nclass User extends Authenticatable\n{\n    use Notifiable;\n    /**\n    * Route notifications for the Nexmo channel.\n    *\n    * @param  \\Illuminate\\Notifications\\Notification  \\$notification\n    * @return string\n    */\n    public function routeNotificationForNexmo(\\$notification)\n    {\n        return \\$this-&gt;phone;\n    }\n}\n</code></pre>\n<h2>Notificaciones por Slack</h2>\n<h3># Prerrequisitos</h3>\n<p>Antes de poder enviar notificaciones mediante Slack, debes instalar el paquete para el canal de\n    notificación mediante Composer:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>composer require laravel/slack-notification-channel\n</code></pre>\n<p>\n    También necesitarás configurar una integración\n    \"Incoming Webhook\"\n    para tu equipo en Slack. Esta integración proveerá una URL utilizable para enrutamiento de\n    notificaciones de Slack.\n</p>\n<h3># Formato de notificaciones por Slack</h3>\n<p>Si una notificación tiene soporte para ser enviada como mensaje por Slack, debes definir un\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toSlack</span> en la clase de notificación. EL método recibirá una entidad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$notifiable</span>\n    y debe devolver una instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Notifications\\Messages\\SlackMessage</span>. Los\n    mensajes de Slack pueden contener texto así como un \"archivo adjunto\" que formatea texto\n    adicional o un arreglo de campos. Observemos un ejemplo básico de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toSlack</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the Slack representation of the notification.\n*\n* @param  mixed  \\$notifiable\n* @return SlackMessage\n*/\npublic function toSlack(\\$notifiable)\n{\n    return (new SlackMessage)\n                -&gt;content('One of your invoices has been paid!');\n}\n</code></pre>\n<p>En este ejemplo estamos solamente enviando una línea de texto a Slack, la cual creará un mensaje\n    que luce como éste:</p>\n<img src=\"https://laravel.com/assets/img/basic-slack-notification.png\">\n<h4># Personalizar el remitente y destinatario</h4>\n<p>Puedes usar los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">from</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">to</span> para personalizar el remitente y el\n    destinatario. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">from</span> acepta un nombre de usuario y un identificador emoji,\n    mientras que el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">to</span> acepta un canal y un usuario:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the Slack representation of the notification.\n*\n* @param  mixed  \\$notifiable\n* @return SlackMessage\n*/\npublic function toSlack(\\$notifiable)\n{\n    return (new SlackMessage)\n                -&gt;from('Ghost', ':ghost:')\n                -&gt;to('#other')\n                -&gt;content('This will be sent to #other');\n}\n</code></pre>\n<p>También puedes utilizar una imagen como logo en vez de un emoji:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the Slack representation of the notification.\n*\n* @param  mixed  \\$notifiable\n* @return SlackMessage\n*/\npublic function toSlack(\\$notifiable)\n{\n    return (new SlackMessage)\n                -&gt;from('Laravel')\n                -&gt;image('https://laravel.com/favicon.png')\n                -&gt;content('This will display the Laravel logo next to the message');\n}\n</code></pre>\n<h3># Archivos adjuntos en Slack</h3>\n<p>También puedes añadir \"adjuntos\" a los mensajes en Slack. Éstos brindan opciones de formato más\n    amplias que mensajes de texto simple. En este ejemplo, enviaremos una notificación de error\n    acerca de una excepción que ocurrió en una aplicación, incluyendo un enlace para ver más\n    detalles sobre la excepción:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the Slack representation of the notification.\n*\n* @param  mixed  \\$notifiable\n* @return SlackMessage\n*/\npublic function toSlack(\\$notifiable)\n{\n    \\$url = url('/exceptions/'.\\$this-&gt;exception-&gt;id);\n    return (new SlackMessage)\n                -&gt;error()\n                -&gt;content('Whoops! Something went wrong.')\n                -&gt;attachment(function (\\$attachment) use (\\$url) {\n                    \\$attachment-&gt;title('Exception: File Not Found', \\$url)\n                                -&gt;content('File [background.jpg] was not found.');\n                });\n}\n</code></pre>\n<p>El ejemplo anterior generará un mensaje en Slack como el siguiente:</p>\n<img src=\"https://laravel.com/assets/img/basic-slack-attachment.png\">\n<p>Los adjuntos te permitirán especificar un arreglo de datos que deben ser presentados al usuario.\n    Los datos dados serán presentados en forma de tabla para su fácil lectura:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the Slack representation of the notification.\n*\n* @param  mixed  \\$notifiable\n* @return SlackMessage\n*/\npublic function toSlack(\\$notifiable)\n{\n    \\$url = url('/invoices/'.\\$this-&gt;invoice-&gt;id);\n    return (new SlackMessage)\n                -&gt;success()\n                -&gt;content('One of your invoices has been paid!')\n                -&gt;attachment(function (\\$attachment) use (\\$url) {\n                    \\$attachment-&gt;title('Invoice 1322', \\$url)\n                                -&gt;fields([\n                                    'Title' =&gt; 'Server Expenses',\n                                    'Amount' =&gt; '\\$1,234',\n                                    'Via' =&gt; 'American Express',\n                                    'Was Overdue' =&gt; ':-1:',\n                                ]);\n                });\n}\n</code></pre>\n<p>El ejemplo anterior generará un mensaje en Slack como el siguiente:</p>\n<img src=\"https://laravel.com/assets/img/slack-fields-attachment.png\">\n<h4># Contenido adjunto en markdown</h4>\n<p>\n    Si algunos de tus campos adjuntos contienen Markdown, puedes usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">markdown</span> para instruir a Slack procesar y mostrar los campos proporcionados como\n    texto formateado en Markdown. Los valores aceptados por este método son: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pretext</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">text</span>, y / o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fields</span>. Para más información sobre formato de adjuntos de\n    Slack, revisa la\n    documentación del API de Slack\n    :\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the Slack representation of the notification.\n*\n* @param  mixed  \\$notifiable\n* @return SlackMessage\n*/\npublic function toSlack(\\$notifiable)\n{\n    \\$url = url('/exceptions/'.\\$this-&gt;exception-&gt;id);\n    return (new SlackMessage)\n                -&gt;error()\n                -&gt;content('Whoops! Something went wrong.')\n                -&gt;attachment(function (\\$attachment) use (\\$url) {\n                    \\$attachment-&gt;title('Exception: File Not Found', \\$url)\n                                -&gt;content('File [background.jpg] was *not found*.')\n                                -&gt;markdown(['text']);\n                });\n}\n</code></pre>\n<h3># Enrutar notificaciones de slack</h3>\n<p>Para enrutar notificaciones de Slack a la ubicación apropiada, debes definir un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">routeNotificationForSlack</span>\n    en tu entidad notificable. Esto debería devolver un webhook URL al cual debe ser entregada la\n    notificación. Las Webhook URLs puedn ser generadas añadiendo un servicio \"Incoming Webhook\" a tu\n    equipo Slack:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nclass User extends Authenticatable\n{\n    use Notifiable;\n    /**\n    * Route notifications for the Slack channel.\n    *\n    * @param  \\Illuminate\\Notifications\\Notification  \\$notification\n    * @return string\n    */\n    public function routeNotificationForSlack(\\$notification)\n    {\n        return 'https://hooks.slack.com/services/...';\n    }\n}\n</code></pre>\n<h2>Configuración regional de notificaciones</h2>\n<p>Laravel te permite enviar notificaciones en una configuración regional distinta al idioma actual\n    e incluso recordará esta configuración si la notificación está encolada.</p>\n<p>Para lograr esto, la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Notifications\\Notification</span> ofrece un método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">locale</span> para establecer el idioma deseado. La aplicación cambiará a esta\n    configuración cuando la notificación esté siendo formateada y luego se revertirá a la\n    configuración regional previa cuando el formato esté completo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$user-&gt;notify((new InvoicePaid(\\$invoice))-&gt;locale('es'));\n</code></pre>\n<p>La configuración regional de múltiples entradas notificables también puede ser logradas mediante\n    la facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Notification</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Notification::locale('es')-&gt;send(\\$users, new InvoicePaid(\\$invoice));\n</code></pre>\n<h3># Configuración regional preferida por el usuario</h3>\n<p>A veces, las aplicaciones almacenan la configuración regional preferida de cada usuario. Al\n    implementar la interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">HasLocalePreference</span> en tu modelo notificable, puedes\n    instruir a Laravel que use esta configuración almacenada al enviar una notificación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use Illuminate\\Contracts\\Translation\\HasLocalePreference;\nclass User extends Model implements HasLocalePreference\n{\n    /**\n    * Get the user's preferred locale.\n    *\n    * @return string\n    */\n    public function preferredLocale()\n    {\n        return \\$this-&gt;locale;\n    }\n}\n</code></pre>\n<p>Una vez esté implementada la interfaz, Laravel usará automáticamentela configuración regional\n    preferida al enviar notificaciones y mailables al modelo. Por lo tanto, no es necesario llamar\n    al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">locale</span> cuando usas esta interfaz:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$user-&gt;notify(new InvoicePaid(\\$invoice));\n</code></pre>\n<h2>Eventos de notificación</h2>\n<p>Cuando una notificación es enviada, el evento <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Notifications\\Events\\NotificationSent</span>\n    es desencadenado por el sistema de notificación. Esto contiene la entidad \"notifiable\" y la\n    instancia de ntificación en sí. Puedes registrar listeners para este evento en tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">EventServiceProvider</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* The event listener mappings for the application.\n*\n* @var array\n*/\nprotected \\$listen = [\n    'Illuminate\\Notifications\\Events\\NotificationSent' =&gt; [\n        'App\\Listeners\\LogNotification',\n    ],\n];\n</code></pre>\n<p>TIP</p>\n<p>Luego de registrar listeners en tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">EventServiceProvider</span>, usa el comando Artisan\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">event:generate</span> para generar rápidamente clases de listeners.</p>\n<p>Dentro de un listener de eventos, puedes acceder a las propiedades <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">notifiable</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">notification</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">channel</span> del evento para aprender más acerca de el\n    destinatario de la notificación o sobre la notificación en sí:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Handle the event.\n*\n* @param  NotificationSent  \\$event\n* @return void\n*/\npublic function handle(NotificationSent \\$event)\n{\n    // \\$event-&gt;channel\n    // \\$event-&gt;notifiable\n    // \\$event-&gt;notification\n    // \\$event-&gt;response\n}\n</code></pre>\n<h2>Canales personalizados</h2>\n<p>Laravel viene una gran cantidad de canales de notificación, pero puedes ser deseable escribir\n    controladores propios para entregar notificaciones mediante otros canales. Laravel hace de esto\n    algo sencillo. Para empezar, debes definir una clase que contenga un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">send</span> El\n    método debe recibir dos argumentos: un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$notifiable</span> y un\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$notification</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Channels;\nuse Illuminate\\Notifications\\Notification;\nclass VoiceChannel\n{\n    /**\n    * Send the given notification.\n    *\n    * @param  mixed  \\$notifiable\n    * @param  \\Illuminate\\Notifications\\Notification  \\$notification\n    * @return void\n    */\n    public function send(\\$notifiable, Notification \\$notification)\n    {\n        \\$message = \\$notification-&gt;toVoice(\\$notifiable);\n        // Send notification to the \\$notifiable instance...\n    }\n}\n</code></pre>\n<p>Una vez que la clase de notificación ha sido definida, puedes devolver el nombre de la clase\n    desde el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">via</span> de cualquier notificación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Notifications;\nuse Illuminate\\Bus\\Queueable;\nuse App\\Channels\\VoiceChannel;\nuse App\\Channels\\Messages\\VoiceMessage;\nuse Illuminate\\Notifications\\Notification;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nclass InvoicePaid extends Notification\n{\n    use Queueable;\n    /**\n    * Get the notification channels.\n    *\n    * @param  mixed  \\$notifiable\n    * @return array|string\n    */\n    public function via(\\$notifiable)\n    {\n        return [VoiceChannel::class];\n    }\n    /**\n    * Get the voice representation of the notification.\n    *\n    * @param  mixed  \\$notifiable\n    * @return VoiceMessage\n    */\n    public function toVoice(\\$notifiable)\n    {\n        // ...\n    }\n}\n</code></pre>\n</div>"
      },
      {
        "titulo": "Desarrollo de paquetes",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Desarrollo de Paquetes</h1>\n<ul>\n    <li>\n        Introducción\n        <ul>\n            <li>Una nota sobre facades</li>\n        </ul>\n    </li>\n    <li>Descubrimiento de paquetes</li>\n    <li>Proveedores de servicios</li>\n    <li>\n        Recursos\n        <ul>\n            <li>Configuración</li>\n            <li>Migraciones</li>\n            <li>Rutas</li>\n            <li>Traducciones</li>\n            <li>Vistas</li>\n        </ul>\n    </li>\n    <li>Comandos</li>\n    <li>Archivos públicos</li>\n    <li>Publicar grupos de archivos</li>\n</ul>\n<h2>Introducción</h2>\n<p>\n    Los paquetes son la forma principal de agregar funcionalidad a Laravel. Los paquetes pueden ser\n    cualquier cosa, desde una estupenda manera de trabajar con fechas como\n    Carbon\n    , o un framework completo de pruebas BDD como\n    Behat\n    .\n</p>\n<p>Hay diferentes tipos de paquetes. Algunos paquetes son independientes, lo que significa que\n    funcionan con cualquier framework de PHP. Carbon y Behat son ejemplos de paquetes\n    independientes. Cualquiera de estos paquetes se puede usar con Laravel simplemente\n    solicitándolos en el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">composer.json</span>.</p>\n<p>Por otro lado, otros paquetes están específicamente destinados para su uso con Laravel. Estos\n    paquetes pueden tener rutas, controladores, vistas y configuraciones específicamente diseñadas\n    para mejorar una aplicación Laravel. Esta guía cubre principalmente el desarrollo de aquellos\n    paquetes que son específicos de Laravel.</p>\n<h3># Una nota sobre facades</h3>\n<p>\n    Al escribir una aplicación Laravel, generalmente no importa si usas interfaces o facades ya que\n    ambos brindan niveles esencialmente iguales de capacidad de pruebas. Sin embargo, al escribir\n    paquetes, tu paquete normalmente no tendrá acceso a todos las funciones helpers de prueba de\n    Laravel. Si deseas escribir pruebas para el paquete como si existiera dentro de una típica\n    aplicación Laravel puedes usar el paquete\n    Orchestral Testbench\n    .\n</p>\n<h2>Descubrimiento de paquetes</h2>\n<p>\n    En el archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/app.php</span> de una aplicación Laravel, la opción\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">providers</span> define una lista de proveedores de servicios que Laravel debe cargar.\n    Cuando alguien instala tu paquete normalmente querrás que tu proveedor de servicio sea incluido\n    en esta lista. En lugar de requerir que los usuarios agreguen manualmente su proveedor de\n    servicios a la lista, puede definir el proveedor en la sección <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">extra</span> del archivo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">composer.json</span> de tu paquete. Además de los proveedores de servicios, también puedes\n    enumerar los\n    facades\n    que desees registrar:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\"extra\": {\n    \"laravel\": {\n        \"providers\": [\n            \"Barryvdh\\\\Debugbar\\\\ServiceProvider\"\n        ],\n        \"aliases\": {\n            \"Debugbar\": \"Barryvdh\\\\Debugbar\\\\Facade\"\n        }\n    }\n},\n</code></pre>\n<p>Una vez que tu paquete se haya configurado para su descubrimiento, Laravel registrará\n    automáticamente sus proveedores de servicios y facades cuando esté instalado, creando una\n    experiencia de instalación conveniente para los usuarios de tu paquete.</p>\n<h3># Exclusión del descubrimiento de paquetes</h3>\n<p>Si eres es el consumidor de un paquete y deseas deshabilitar el descubrimiento de paquetes para\n    un paquete, puedes incluir el nombre del paquete en la sección <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">extra</span> del archivo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">composer.json</span> de tu aplicación Laravel:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\"extra\": {\n    \"laravel\": {\n        \"dont-discover\": [\n            \"barryvdh/laravel-debugbar\"\n        ]\n    }\n},\n</code></pre>\n<p>Puede deshabilitar el descubrimiento de paquetes para todos los paquetes que usan el carácter\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">*</span> dentro de la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dont-discover</span> de tu aplicación:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\"extra\": {\n    \"laravel\": {\n        \"dont-discover\": [\n            \"*\"\n        ]\n    }\n},\n</code></pre>\n<h2>Proveedores de servicios</h2>\n<p>\n    Los\n    Proveedores de Servicios\n    son la conexión entre tu paquete y Laravel. Un proveedor de servicios es responsable de enlazar\n    cosas a Laravel con el\n    Contenedor de Servicios\n    e informar a Laravel dónde cargar los recursos del paquete como vistas y archivos de\n    configuración y de configuración regional.\n</p>\n<p>\n    Un Proveedor de Servicios extiende de la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Support\\ServiceProvider</span> y\n    contiene dos métodos: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">register</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span>. La clase base <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ServiceProvider</span>\n    está ubicada en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">illuminate/support</span>, donde debemos especificar todas las\n    dependencias de nuestro paquete. Para obtener más información sobre la estructura y el propósito\n    de los proveedores de servicios, visita su\n    documentación\n    .\n</p>\n<h2>Recursos</h2>\n<h3># Configuración</h3>\n<p>Por lo general, deberás publicar el archivo de configuración de tu paquete en el propio\n    directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config</span> de la aplicación. Esto permitirá a los usuarios anular fácilmente\n    sus opciones de configuración predeterminadas. Para permitir que se publiquen sus archivos de\n    configuración, debes llamar al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">publishes</span> desde el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span>\n    de tu proveedor de servicios:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Perform post-registration booting of services.\n*\n* @return void\n*/\npublic function boot()\n{\n    \\$this-&gt;publishes([\n        __DIR__.'/path/to/config/courier.php' =&gt; config_path('courier.php'),\n    ]);\n}\n</code></pre>\n<p>Ahora, cuando los usuarios de tu paquete ejecutan el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">vendor:publish</span> de\n    Laravel, su archivo se copiará a la ubicación de publicación especificada. Una vez que se haya\n    publicado su configuración, se podrá acceder a sus valores como cualquier otro archivo de\n    configuración:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$value = config('courier.option');\n</code></pre>\n<p>Nota</p>\n<p>No debes definir funciones anónimas en tus archivos de configuración ya que no se pueden\n    serializar correctamente cuando los usuarios ejecutan el comando Artisan\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config:cache</span>.</p>\n<h4># Configuración predeterminada del paquete</h4>\n<p>También puedes fusionar tu propio archivo de configuración de paquete con la copia publicada de\n    la aplicación. Esto permitirá que los usuarios definan solo las opciones que realmente desean\n    anular en la copia publicada de la configuración. Para fusionar las configuraciones, use el\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mergeConfigFrom</span> dentro del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">register</span> de tu proveedor de\n    servicios:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Register bindings in the container.\n*\n* @return void\n*/\npublic function register()\n{\n    \\$this-&gt;mergeConfigFrom(\n        __DIR__.'/path/to/config/courier.php', 'courier'\n    );\n}\n</code></pre>\n<p>Nota</p>\n<p>Este método solo combina el primer nivel de la matriz de configuración. Si los usuarios definen\n    parcialmente una matriz de configuración multidimensional las opciones faltantes no se\n    fusionarán.</p>\n<h3># Rutas</h3>\n<p>Si tu paquete contiene rutas, puede cargarlas usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">loadRoutesFrom</span>. Este\n    método determinará automáticamente si las rutas de la aplicación se almacenan en caché y no\n    cargarán el archivo de rutas si las rutas ya se han almacenado en caché:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Perform post-registration booting of services.\n*\n* @return void\n*/\npublic function boot()\n{\n    \\$this-&gt;loadRoutesFrom(__DIR__.'/routes.php');\n}\n</code></pre>\n<h3># Migraciones</h3>\n<p>Si tu paquete contiene migraciones de base de datos, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">loadMigrationsFrom</span>\n    para informarle a Laravel cómo cargarlas. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">loadMigrationsFrom</span> acepta la\n    ruta a las migraciones de tu paquete como su único argumento:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Perform post-registration booting of services.\n*\n* @return void\n*/\npublic function boot()\n{\n    \\$this-&gt;loadMigrationsFrom(__DIR__.'/path/to/migrations');\n}\n</code></pre>\n<p>Una vez que se hayan registrado las migraciones de tu paquete, éstas se ejecutarán\n    automáticamente cuando se utilize el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">php artisan migrate</span>. Cabe destacar que\n    no es necesario exportarlas al directorio principal de las migraciones en la aplicación.</p>\n<h3># Traducciones</h3>\n<p>Si tu paquete contiene archivos de traducción puedes usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">loadTranslationsFrom</span> para informarle a Laravel cómo cargarlos. Por ejemplo, si tu\n    paquete se llama <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">courier</span>, debes agregar lo siguiente al método<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span> de\n    tu proveedor de servicios:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Perform post-registration booting of services.\n*\n* @return void\n*/\npublic function boot()\n{\n    \\$this-&gt;loadTranslationsFrom(__DIR__.'/path/to/translations', 'courier');\n}\n</code></pre>\n<p>Las traducciones de paquetes se referencian usando la convención de sintaxis <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">package::file.line</span>.\n    Por lo tanto, puedes cargar la línea <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">welcome</span> del paquete <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">courier</span> del\n    archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">messages</span> de la siguiente manera:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>echo trans('courier::messages.welcome');\n</code></pre>\n<h4># Publicación de traducciones</h4>\n<p>Si deseas publicar las traducciones de tu paquete en el directorio\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/lang/vendor</span> de la aplicación, puedes usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">publishes</span> del proveedor de servicios. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">publishes</span> acepta un\n    arreglo de rutas de paquetes y sus ubicaciones de publicación deseadas. Por ejemplo, para\n    publicar los archivos de traducción para el paquete <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">courier</span>, puedes hacer lo\n    siguiente:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Perform post-registration booting of services.\n*\n* @return void\n*/\npublic function boot()\n{\n    \\$this-&gt;loadTranslationsFrom(__DIR__.'/path/to/translations', 'courier');\n    \\$this-&gt;publishes([\n        __DIR__.'/path/to/translations' =&gt; resource_path('lang/vendor/courier'),\n    ]);\n}\n</code></pre>\n<p>Ahora, cuando los usuarios de tu paquete ejecutan el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">vendor:publish</span>\n    de Laravel, las traducciones de tu paquete se publicarán en la ubicación de publicación\n    especificada.</p>\n<h3># Vistas</h3>\n<p>Para registrar las vistas de tu paquete con Laravel necesitas decirle a Laravel dónde están\n    ubicadas. Puedes hacerlo utilizando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">loadViewsFrom</span> del proveedor de\n    servicios. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">loadViewsFrom</span> acepta dos argumentos: la ruta a sus plantillas\n    de vista y el nombre de tu paquete. Por ejemplo, si el nombre de tu paquete es\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">courier</span>, debe agregar lo siguiente al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span> de tu proveedor de\n    servicios:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Perform post-registration booting of services.\n*\n* @return void\n*/\npublic function boot()\n{\n    \\$this-&gt;loadViewsFrom(__DIR__.'/path/to/views', 'courier');\n}\n</code></pre>\n<p>Las vistas de paquete se referencian usando la convención de sintaxis <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">package::view</span>.\n    Entonces, una vez que tu ruta de vista se registra en un proveedor de servicios, puedes cargar\n    la vista <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">admin</span> del paquete <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">courier</span> de la siguiente manera:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Route::get('admin', function () {\n    return view('courier::admin');\n});\n</code></pre>\n<h4># Desactivar vistas del paquete</h4>\n<p>Cuando utilizas el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">loadViewsFrom</span>, Laravel en realidad registra dos\n    ubicaciones para sus vistas: el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views/vendor</span> de la aplicación\n    y el directorio que tu especificas. Entonces, usando el ejemplo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">courier</span>, Laravel\n    primero comprobará si el desarrollador ha proporcionado una versión personalizada de la vista en\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views/vendor/courier</span>. Entonces, si la vista no se ha personalizado,\n    Laravel buscará en el directorio de las vistas del paquete que has colocado en el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">loadViewsFrom</span>.\n    Esto facilita a los usuarios del paquete personalizar o anular las vistas de tu paquete.</p>\n<h4># Publicación de vistas</h4>\n<p>Si desea que tus vistas estén disponibles para su publicación en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views/vendor</span>\n    de la aplicación, puedes usar el método<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">publishes</span> del proveedor de servicios. El\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">publishes</span> acepta una matriz de rutas de vista de paquete y sus ubicaciones\n    de publicación deseadas:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Perform post-registration booting of services.\n*\n* @return void\n*/\npublic function boot()\n{\n    \\$this-&gt;loadViewsFrom(__DIR__.'/path/to/views', 'courier');\n    \\$this-&gt;publishes([\n        __DIR__.'/path/to/views' =&gt; resource_path('views/vendor/courier'),\n    ]);\n}\n</code></pre>\n<p>Ahora, cuando los usuarios de su paquete ejecutan el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">vendor:publish</span>\n    de Laravel, las vistas de su paquete se copiarán en la ubicación especificada.</p>\n<h2>Comandos</h2>\n<p>Para registrar los comandos Artisan de tu paquete con Laravel puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">commands</span>.\n    Este método espera un arreglo con los nombres de clases de comando. Una vez que los comandos han\n    sido registrados, puedes ejecutarlos usando Artisan CLI:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Bootstrap the application services.\n*\n* @return void\n*/\npublic function boot()\n{\n    if (\\$this-&gt;app-&gt;runningInConsole()) {\n        \\$this-&gt;commands([\n            FooCommand::class,\n            BarCommand::class,\n        ]);\n    }\n}\n</code></pre>\n<h2>Archivos públicos</h2>\n<p>Tu paquete puede tener archivos como JavaScript, CSS e imágenes. Para publicar estos archivos en\n    el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public</span> de la aplicación debes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">publishes</span>\n    del proveedor de servicios. En este ejemplo, también agregaremos una etiqueta de grupo de\n    archivos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">public</span>, que se puede usar para publicar grupos de archivos relacionados:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Perform post-registration booting of services.\n*\n* @return void\n*/\npublic function boot()\n{\n    \\$this-&gt;publishes([\n        __DIR__.'/path/to/assets' =&gt; public_path('vendor/courier'),\n    ], 'public');\n}\n</code></pre>\n<p>Ahora, cuando los usuarios de tu paquete ejecuten el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">vendor:publish</span> tus\n    archivos se copiarán en la ubicación especificada. Como normalmente necesitarás sobrescribir los\n    archivos cada vez que se actualice el paquete, puedes usar el indicador <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--force</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan vendor:publish --tag=public --force\n</code></pre>\n<h2>Publicar grupos de archivos</h2>\n<p>Es posible que desees publicar grupos de archivos y recursos de paquetes por separado. Por\n    ejemplo, es posible que desees permitir que los usuarios publiquen los archivos de configuración\n    de su paquete sin verse obligados a publicar los archivos de tu paquete. Puede hacer esto\n    \"etiquetándolos\" cuando llames al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">publishes</span> del proveedor de servicios de un\n    paquete. Por ejemplo, usemos etiquetas para definir dos grupos de publicación en el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span> de un proveedor de servicios de paquetes:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Perform post-registration booting of services.\n*\n* @return void\n*/\npublic function boot()\n{\n    \\$this-&gt;publishes([\n        __DIR__.'/../config/package.php' =&gt; config_path('package.php')\n    ], 'config');\n    \\$this-&gt;publishes([\n        __DIR__.'/../database/migrations/' =&gt; database_path('migrations')\n    ], 'migrations');\n}\n</code></pre>\n<p>Ahora tus usuarios pueden publicar estos grupos por separado al hacer referencia a su etiqueta\n    cuando ejecuten el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">vendor:publish</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan vendor:publish --tag=config\n</code></pre>\n</div>"
      },
      {
        "titulo": "Colas",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Colas De Trabajo</h1>\n<ul>\n    <li>\n        Introducción\n        <ul>\n            <li>Conexiones vs. colas</li>\n            <li>Notas y requisitos previos de driver</li>\n        </ul>\n    </li>\n    <li>\n        Creación de trabajos\n        <ul>\n            <li>Generación de clases de trabajos</li>\n            <li>Estructura de clases</li>\n        </ul>\n    </li>\n    <li>\n        Despachar trabajos\n        <ul>\n            <li>Despacho postergado</li>\n            <li>Envío sincrónico</li>\n            <li>Encadenamiento de trabajos</li>\n            <li>Personalizar la Cola y conexión</li>\n            <li>Especificar intentos máximos de trabajos / valores de timeout</li>\n            <li>Límites de rango</li>\n            <li>Manejo de errores</li>\n        </ul>\n    </li>\n    <li>Closures de dolas</li>\n    <li>\n        Ejecutar el worker de cola\n        <ul>\n            <li>Prioridades en cola</li>\n            <li>Workers de cola y despliegue</li>\n            <li>Expiraciones de trabajo y tiempos de espera</li>\n        </ul>\n    </li>\n    <li>Configuración de Supervisor</li>\n    <li>\n        Manejo de trabajos fallidos\n        <ul>\n            <li>Remediando trabajos fallidos</li>\n            <li>Eventos de trabajos fallidos</li>\n            <li>Reintentando trabajos fallidos</li>\n            <li>Ignorando modelos faltantes</li>\n        </ul>\n    </li>\n    <li>Eventos de trabajo</li>\n</ul>\n<h2>Introducción</h2>\n<p>TIP</p>\n<p>\n    Laravel ahora ofrece Horizon, un hermoso tablero y sistema de configuración para las colas\n    motorizadas por Redis. Entra en\n    Horizon documentation\n    para más inormación.\n</p>\n<p>Las colas de Laravel brindan una API unificada a través de una variedad de backends de cola\n    diferentes como Beanstalk, Amazon SQS, Redis, o incluso una base de datos relacional. Las colas\n    permiten diferir el procesamiento de una tarea que consume tiempo, como enviar un correo\n    electrónico, para un momento posterior. Diferir estas tareas acelera drásticamente las\n    solicitudes web en tu aplicación.</p>\n<p>\n    La configuración de cola está almacenada en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/queue.php</span>. En este archivo\n    encontrarás configuraciones de conexión para cada driver de cola incluido en el framework, que\n    comprende una base de datos,\n    Beanstalkd\n    ,\n    Amazon SQS\n    ,\n    Redis\n    , y un controlador sincrónico que ejecutará trabajos inmediatamente (para uso local). Un driver\n    de cola <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span> también está incluido, que descarta los trabajos completados de la\n    cola.\n</p>\n<h3># Conexiones vs. colas</h3>\n<p>Antes de empezar con las colas de Laravel, es importante entender la distinción entre\n    \"conexiones\" y \"colas\". En tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/queue.php</span>, hay una opción de\n    configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">connections</span>. Esta opción define una conexión particular a un servicio\n    de backend como Amazon SQS, Beanstalk o Redis. Sin embargo, cualquier conexión de cola dada\n    puede tener múltiples \"colas\" las cuales pueden ser considerarse como diferentes pilas de\n    trabajos en espera.</p>\n<p>Ten en cuenta que cada ejemplo de configuración de conexión en el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue</span>\n    contiene un atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue</span>. Ésta es la cola por defecto a la cual los trabajos\n    serán despachados cuando son enviados a una conexión dada. En otras palabras, si despachas un\n    trabajo sin definir explícitamente a cuál cola debe ser despachado, el trabajo será colocado en\n    la cola definida en el atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue</span> de la configuración de conexión:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>// This job is sent to the default queue...\nJob::dispatch();\n// This job is sent to the \"emails\" queue...\nJob::dispatch()-&gt;onQueue('emails');\n</code></pre>\n<p>Algunas aplicaciones quizá no necesiten nunca insertar trabajos en múltiples colas, prefiriendo\n    en su lugar tener una cola simple. Sin embargo, empujar trabajos a múltiples colas puede ser\n    especialmente útil para aplicaciones que deseen priorizar o segmentar el procesamiento de sus\n    trabajos, puesto que el worker de cola de Laravel permite especificar cuáles colas deben ser\n    procesadas de acuerdo a su prioridad. Por ejemplo, si se insertan trabajos a una cola\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">high</span> se puede ejecutar un worker que les dé mayor prioridad de procesamiento:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan queue:work --queue=high,default\n</code></pre>\n<h3># Notas y requisitos previos del driver</h3>\n<h4># Base de datos</h4>\n<p>Para utilizar el driver de cola <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database</span>, necesitarás una tabla de base de datos\n    para mantener los trabajos. Para generar una migración que crea esta tabla, ejecute el comando\n    Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue:table</span>. Una vez creada la migración, puede migrar la base de datos\n    mediante el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">migrate</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan queue:table\nphp artisan migrate\n</code></pre>\n<h4># Redis</h4>\n<p>Para usar el controlador de cola <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redis</span>, debes configurar una conexión a una base de\n    datos Redis en tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/database.php</span>.</p>\n<p><strong>Redis Cluster</strong></p>\n<p>\n    Si tu conexión de cola Redis usa un Redis Cluster, tus nombres de cola deben contener un\n    key hash tag\n    . Esto es requerido para asegurar que todas las llaves Redis para una determinada cola sean\n    colocadas en el mismo hash slot:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'redis' =&gt; [\n    'driver' =&gt; 'redis',\n    'connection' =&gt; 'default',\n    'queue' =&gt; '{default}',\n    'retry_after' =&gt; 90,\n],\n</code></pre>\n<p><strong>Bloqueo</strong></p>\n<p>Al usar la cola Redis, se puede usar la opción de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">block_for</span> para\n    especificar por cuánto tiempo debería esperar el controlador para que un trabajo esté disponible\n    antes de repetirse a través del bucle del worker y volver a consultar la base de datos Redis.\n</p>\n<p>Ajustar este valor en la carga de cola puede ser más eficiente que consultar continuamente la\n    base de datos Redis buscando nuevos trabajos. Por ejemplo, puedes establecer el valor en\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">5</span> para indicar que el controlador debe bloquearse por cinco segundos mientras\n    espera a que un trabajo esté disponible:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>'redis' =&gt; [\n    'driver' =&gt; 'redis',\n    'connection' =&gt; 'default',\n    'queue' =&gt; 'default',\n    'retry_after' =&gt; 90,\n    'block_for' =&gt; 5,\n],\n</code></pre>\n<h4># Requisitos previos para otros controladores</h4>\n<p>Las siguientes dependencias son necesarias para sus controladores respectivos:</p>\n<ul>\n    <li>Amazon SQS: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">aws/aws-sdk-php ~3.0</span></li>\n    <li>Beanstalkd: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pda/pheanstalk ~4.0</span></li>\n    <li>Redis: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">predis/predis ~1.0</span></li>\n</ul>\n<h2>Creación de trabajos</h2>\n<h3># Generación de clases de trabajos</h3>\n<p>Por defecto, todos los trabajos que se pueden poner en cola para la aplicación son almacenados en\n    el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Jobs</span>. Si <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Jobs</span> no existe, será creado cuando se\n    ejecute el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:job</span>. Puedes generar un nuevo trabajo en cola\n    utilizando la CLI Artisan:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan make:job ProcessPodcast\n</code></pre>\n<p>La clase generada implementará la interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Contracts\\Queue\\ShouldQueue</span>,\n    indicando a Laravel que el trabajo debe ser insertado a la cola de forma asíncrona.</p>\n<h3># Estructura de clases</h3>\n<p>Las clases de trabajo son muy sencillas, normalmente contienen un único método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">handle</span> que se llama cuando la cola procesa el trabajo. Para empezar, echemos un\n    vistazo a una clase de trabajo de ejemplo. En este ejemplo, vamos a pretender que administramos\n    un servicio de publicación de podcasts y necesitamos procesar los archivos de podcast cargados\n    antes de que se publiquen:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Jobs;\nuse App\\Podcast;\nuse App\\AudioProcessor;\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Queue\\SerializesModels;\nuse Illuminate\\Queue\\InteractsWithQueue;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Foundation\\Bus\\Dispatchable;\nclass ProcessPodcast implements ShouldQueue\n{\n    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;\n    protected \\$podcast;\n    /**\n    * Create a new job instance.\n    *\n    * @param  Podcast  \\$podcast\n    * @return void\n    */\n    public function __construct(Podcast \\$podcast)\n    {\n        \\$this-&gt;podcast = \\$podcast;\n    }\n    /**\n    * Execute the job.\n    *\n    * @param  AudioProcessor  \\$processor\n    * @return void\n    */\n    public function handle(AudioProcessor \\$processor)\n    {\n        // Process uploaded podcast...\n    }\n}\n</code></pre>\n<p>En este ejemplo, ten en cuenta que hemos podido pasar un modelo Eloquent directamente hacia el\n    constructor del trabajo en cola. Debido al trait <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">SerializesModels</span> que el trabajo\n    está usando, los modelos Eloquent serán serializados y deserializados correctamente cuando el\n    trabajo se esté procesando. Si tu trabajo en cola acepta un modelo Eloquent en su constructor,\n    sólo el identificador para el modelo será serializado en la cola. Cuando el trabajo se maneja\n    realmente, el sistema de cola volverá a recuperar automáticamente la instancia del modelo\n    completo de la base de datos. Todo es totalmente transparente a tu aplicación y previene\n    inconvenientes que pueden surgir de serializar instancias Eloquent completas.</p>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">handle</span> es llamado cuando el trabajo es procesado por la cola. Ten en\n    cuenta que podemos declarar el tipo de dependencias en el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">handle</span> del\n    trabajo. El contenedor de servicios de Laravel automáticamente inyecta estas dependencias.</p>\n<p>Si te gustaría tomar control sobre cómo el contenedor inyecta dependencias en el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">handle</span>,\n    puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">bindMethod</span> del contenedor. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">bindMethod</span>\n    acepta una función de retorno (callback) que recibe el trabajo y el contenedor. Dentro del\n    callback, eres libre de invocar al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">handle</span> de la forma que desees.\n    Típicamente, deberías llamar a este método desde un proveedor de servicios:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>use App\\Jobs\\ProcessPodcast;\n\\$this-&gt;app-&gt;bindMethod(ProcessPodcast::class.'@handle', function (\\$job, \\$app) {\n    return \\$job-&gt;handle(\\$app-&gt;make(AudioProcessor::class));\n});\n</code></pre>\n<p>Nota</p>\n<p>Los datos binarios, como los contenidos de imagen, deben ser pasados a través de la función\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">base64_enspan</span> antes de ser pasados a un trabajo en cola. De otra forma, el trabajo\n    podría no serializarse correctamente a JSON cuando es colocado en la cola.</p>\n<h2>Despachar trabajos</h2>\n<p>Una vez escrita la clase de trabajo, se puede despachar usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dispatch</span> en\n    el mismo trabajo. Los argumentos pasados a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dispatch</span> serán entregados al constructor\n    de trabajos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse App\\Jobs\\ProcessPodcast;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nclass PodcastController extends Controller\n{\n    /**\n    * Store a new podcast.\n    *\n    * @param  Request  \\$request\n    * @return Response\n    */\n    public function store(Request \\$request)\n    {\n        // Create podcast...\n        ProcessPodcast::dispatch(\\$podcast);\n    }\n}\n</code></pre>\n<h3># Despacho postergado</h3>\n<p>Si quieres postergar la ejecución de un trabajo en cola, puedes utilizar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">delay</span> al despachar un trabajo. Por ejemplo, especifiquemos que un trabajo no\n    debería estar disponible para procesamiento hasta 10 minutos después que haya sido despachado:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse App\\Jobs\\ProcessPodcast;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nclass PodcastController extends Controller\n{\n    /**\n    * Store a new podcast.\n    *\n    * @param  Request  \\$request\n    * @return Response\n    */\n    public function store(Request \\$request)\n    {\n        // Create podcast...\n        ProcessPodcast::dispatch(\\$podcast)\n                -&gt;delay(now()-&gt;addMinutes(10));\n    }\n}\n</code></pre>\n<p>Nota</p>\n<p>El servicio de cola Amazon SQS tiene un tiempo máximo de retraso de 15 minutos.</p>\n<h3># Despacho sincrónico</h3>\n<p>Si deseas enviar un trabajo inmediatamente (sincrónicamente), puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dispatchNow</span>.\n    Al usar este método, el trabajo no se pondrá en cola y se ejecutará inmediatamente dentro del\n    proceso actual:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Http\\Request;\nuse App\\Jobs\\ProcessPodcast;\nuse App\\Http\\Controllers\\Controller;\nclass PodcastController extends Controller\n{\n    /**\n    * Store a new podcast.\n    *\n    * @param  Request  \\$request\n    * @return Response\n    */\n    public function store(Request \\$request)\n    {\n        // Create podcast...\n        ProcessPodcast::dispatchNow(\\$podcast);\n    }\n}\n</code></pre>\n<h3># Encadenamiento de trabajos</h3>\n<p>El encadenamiento de trabajos te permite especificar una lista de trabajos en cola que deben ser\n    ejecutados en secuencia. Si un trabajo en la secuencia falla, el resto no será ejecutado. Para\n    ejecutar una cadena de trabajos en cola, puedes utilizar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withChain</span> en\n    cualquier trabajo a enviar:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>ProcessPodcast::withChain([\n    new OptimizePodcast,\n    new ReleasePodcast\n])-&gt;dispatch();\n</code></pre>\n<p>Nota</p>\n<p>La eliminación de trabajos mediante el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$this-&gt;delete()</span> no impedirá que se\n    procesen los trabajos encadenados. La cadena sólo dejará de ejecutarse si falla un trabajo en la\n    cadena.</p>\n<h4># Cola y conexión en cadena</h4>\n<p>Si quieres especificar la cola y conexión por defecto que debe ser usada para los trabajos\n    encadenados, se puede usar los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">allOnConnection</span> and <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">allOnQueue</span>.\n    Estos métodos especifican la conexión y nombre de cola que debe ser usado a menos que el trabajo\n    en cola sea asignado explícitamente a una diferente conexión / cola:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>ProcessPodcast::withChain([\n    new OptimizePodcast,\n    new ReleasePodcast\n])-&gt;dispatch()-&gt;allOnConnection('redis')-&gt;allOnQueue('podcasts');\n</code></pre>\n<h3># Personalizar La Cola Y La Conexión</h3>\n<h4># Despachar a una cola específica</h4>\n<p>Al insertar trabajos en diferentes colas, puedes \"categorizar\" los trabajos en cola e incluso\n    priorizar cuántos workers son asignados a las distintas colas. Sin embargo, es preciso resaltar\n    que esto no inserta trabajos en diferentes \"conexiones\" de cola definidas en el archivo de\n    configuración de colas, sino en colas específicas dentro de una sola conexión. Para especificar\n    la cola, se usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">onQueue</span> al despachar un trabajo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse App\\Jobs\\ProcessPodcast;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nclass PodcastController extends Controller\n{\n    /**\n    * Store a new podcast.\n    *\n    * @param  Request  \\$request\n    * @return Response\n    */\n    public function store(Request \\$request)\n    {\n        // Create podcast...\n        ProcessPodcast::dispatch(\\$podcast)-&gt;onQueue('processing');\n    }\n}\n</code></pre>\n<h4># Despachar a una conexión específica</h4>\n<p>Si estás trabajando con múltiples conexiones de cola, puedes especificar en cuál conexión deseas\n    insertar un trabajo. Para especificar la conexión, utiliza el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">onConnection</span>\n    al despachar el trabajo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse App\\Jobs\\ProcessPodcast;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nclass PodcastController extends Controller\n{\n    /**\n    * Store a new podcast.\n    *\n    * @param  Request  \\$request\n    * @return Response\n    */\n    public function store(Request \\$request)\n    {\n        // Create podcast...\n        ProcessPodcast::dispatch(\\$podcast)-&gt;onConnection('sqs');\n    }\n}\n</code></pre>\n<p>Puedes encadenar los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">onConnection</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">onQueue</span> para especificar la\n    conexión y cola de un trabajo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>ProcessPodcast::dispatch(\\$podcast)\n                -&gt;onConnection('sqs')\n                -&gt;onQueue('processing');\n</code></pre>\n<p>Alternativamente, puedes especificar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">connection</span> como una propiedad en la clase del\n    trabajo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Jobs;\nclass ProcessPodcast implements ShouldQueue\n{\n    /**\n        * The queue connection that should handle the job.\n        *\n        * @var string\n        */\n    public \\$connection = 'sqs';\n}\n</code></pre>\n<h3># Especificar intentos máximos de un trabajo y valores de tiempos de espera (timeout)</h3>\n<h4># Número de intentos máximo</h4>\n<p>Una forma de especificar el número máximo de veces que un trabajo puede ser intentado es mediante\n    la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--tries</span> en la línea de comandos Artisan:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan queue:work --tries=3\n</code></pre>\n<p>Sin embargo, puedes tomar un camino más granular definiendo el número máximo de intentos dentro\n    de la clase de trabajos. Si el número máximo de intentos está especificado en el trabajo,\n    precederá sobre el valor provisto en la línea de comandos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Jobs;\nclass ProcessPodcast implements ShouldQueue\n{\n    /**\n    * The number of times the job may be attempted.\n    *\n    * @var int\n    */\n    public \\$tries = 5;\n}\n</code></pre>\n<h4># Intentos basados en tiempo</h4>\n<p>Como alternativa a definir cuántas veces un trabajo puede ser intentado antes de que falle,\n    puedes definir en qué momento el trabajo debería pasar a tiempo de espera (timeout). Esto\n    permite intentar un trabajo cualquier cantidad de veces dentro de un marco de tiempo dado. Para\n    definir el momento en el que un trabajo debería pasar a timeout, se agrega un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">retryUntil</span>\n    en la clase de trabajos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Determine the time at which the job should timeout.\n*\n* @return \\DateTime\n*/\npublic function retryUntil()\n{\n    return now()-&gt;addSeconds(5);\n}\n</code></pre>\n<p>TIP</p>\n<p>También puedes definir un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">retryUntil</span> en los listeners de eventos en cola.</p>\n<h4># Tiempo de espera (timeout)</h4>\n<p>Nota</p>\n<p>La característica <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">timeout</span> está optimizada para PHP 7.1+ y la extensión\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pcntl</span>.</p>\n<p>De igual modo, el número máximo de segundos para ejecutar un trabajo pueden ser especificados\n    usando la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--timeout</span> en la línea de comandos Artisan:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan queue:work --timeout=30\n</code></pre>\n<p>Sin embargo, es posible querer definir el número máximo de segundos para ejecutar un trabajo\n    dentro de su clase. Si el timeout está especificado en el trabajo, prevalecerá sobre cualquier\n    otro timeout especificado en la línea de comandos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Jobs;\nclass ProcessPodcast implements ShouldQueue\n{\n    /**\n    * The number of seconds the job can run before timing out.\n    *\n    * @var int\n    */\n    public \\$timeout = 120;\n}\n</code></pre>\n<h3># Límite de rango</h3>\n<p>Nota</p>\n<p>Esta característica requiere que la aplicación pueda interactuar con un Redis server.</p>\n<p>Si tu aplicación interactúa con Redis, puedes regular los trabajos en cola por tiempo o\n    concurrencia. Esta característica puede ser de ayuda cuando los trabajos en cola interactúan con\n    APIs que también poseen límite de frecuencia.</p>\n<p>Por ejemplo, usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">throttle</span>, puedes regular cierto tipo de trabajo para\n    que se ejecute sólo diez veces por minuto. Si no se puede obtener un bloqueo, normalmente debes\n    liberar el trabajo de vuelta a la cola para que pueda volver a intentarlo más tarde:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Redis::throttle('key')-&gt;allow(10)-&gt;every(60)-&gt;then(function () {\n    // Job logic...\n}, function () {\n    // Could not obtain lock...\n    return \\$this-&gt;release(10);\n});\n</code></pre>\n<p>TIP</p>\n<p>En el ejemplo anterior, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">key</span> puede ser cualquier cadena que identifique únicamente el\n    tipo de trabajo que se quiere limitar. Por ejemplo, puedes desear construir la key basada en el\n    nombre de clase del trabajo y las IDS de los modelos Eloquent en los cuáles opera.</p>\n<p>Nota</p>\n<p>Liberar un trabajo limitado de vuelta a la cola seguirá incrementando el número total de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">intentos</span>\n    del trabajo.</p>\n<p>Alternativamente, puedes especificar el número máximo de workers que pueden procesar\n    simultáneamente un trabajo determinado. Esto puede ser útil cuando un trabajo en cola está\n    modificando un recurso que solo debe ser modificado por un trabajo a la vez. Por ejemplo,\n    utilizando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">funnel</span>, puedes limitar los trabajos de un tipo dado para que\n    solo sean procesados por un worker a la vez:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Redis::funnel('key')-&gt;limit(1)-&gt;then(function () {\n    // Job logic...\n}, function () {\n    // Could not obtain lock...\n    return \\$this-&gt;release(10);\n});\n</code></pre>\n<p>TIP</p>\n<p>Al utilizar límite de frecuencias, el número de intentos que el trabajo necesitará para\n    ejecutarse exitosamente puede ser difícil de determinar. Por lo tanto, es útil combinar límite\n    de frecuencias con intentos basados en el tiempo.</p>\n<h3># Manejo de errores</h3>\n<p>Si una excepción es lanzada mientras el trabajo está siendo procesado, el trabajo será\n    automáticamente liberado a la cola para que pueda ser intentado de nuevo. EL trabajo continuará\n    siendo liberado hasta que haya sido intentado el número de veces máximo permitido por tu\n    aplicación. El número máximo de intentos es definido por la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--tries</span> usada en\n    el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue:work</span>. De forma alterna, el número máximo de intentos puede\n    ser definido en la clase de trabajos en sí. Más información acerca de ejecutar el worker de cola\n    se puede encontrar a continuación.</p>\n<h2>Closures de colas</h2>\n<p>En lugar de enviar una clase de trabajo a la cola, también puedes enviar una Closure. Esto es\n    ideal para tareas rápidas y simples que deben ejecutarse fuera del ciclo de solicitud\n    actual:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$podcast = App\\Podcast::find(1);\ndispatch(function () use (\\$podcast) {\n    \\$podcast-&gt;publish();\n});\n</code></pre>\n<p>Al enviar Closures a la cola, el contenido del código del Closure está firmado criptográficamente\n    para que no se pueda modificar en tránsito.</p>\n<h2>Ejecutar el worker de cola</h2>\n<p>Laravel incluye un worker de cola que procesará trabajos nuevos a medida que éstos son insertados\n    en la cola. Puedes ejecutar el worker usando el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue:work</span>. Ten en\n    cuenta que una vez iniciado <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue:work</span>, continuará ejecutándose hasta que sea\n    detenido manualmente o hasta que la terminal sea cerrada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan queue:work\n</code></pre>\n<p>TIP</p>\n<p>Para mantener el proceso <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue:work</span> ejecutado permanentemente en segundo plano,\n    debes usar un monitor de procesos como Supervisor para asegurar que el worker de cola no deja de\n    ejecutarse.</p>\n<p>Recuerda, los workers en cola son procesos de larga duración y almacenan el estado de la\n    aplicación iniciada en la memoria. Como resultado, no notarán cambios en la base de código\n    después de que se han iniciado. Por lo tanto, durante el proceso de despliegue, asegúrate de\n    reiniciar los workers de cola.</p>\n<p>Alternativamente, puedes ejecutar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue:listen</span>. Al usar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue:listen</span>,\n    no tienes que reiniciar manualmente el worker luego de que tu código sea cambiado; sin embargo,\n    este comando no es tan eficiente como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue:work</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan queue:listen\n</code></pre>\n<h4># Especificando la conexión y cola</h4>\n<p>También puedes especificar qué conexión de cola debe utilizar el worker. El nombre de conexión\n    pasado al comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">work</span> debe corresponder a una de las conexiones definidas en tu\n    archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/queue.php</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan queue:work redis\n</code></pre>\n<p>Puedes personalizar tu worker de colas más allá al solo procesar colas particulares para una\n    conexión dada. Por ejemplo, si todos tus correos electrónicos son procesados en una cola <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">emails</span>\n    en tu cola de conexión <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redis</span>, puedes emitir el siguiente comando para iniciar un\n    worker que solo procesa dicha cola:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan queue:work redis --queue=emails\n</code></pre>\n<h4># Procesar un sólo trabajo</h4>\n<p>La opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--once</span> puede ser usada para indicarle al worker procesar sólo un trabajo\n    de la cola:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan queue:work --once\n</code></pre>\n<h4># Procesar todos los trabajos en cola y luego salir</h4>\n<p>La opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--stop-when-empty</span> puede ser usada para indicarle al worker procesar todos\n    los trabajos y luego salir elegantemente. Esta opción puede ser útil al trabajar colas de\n    Laravel con un contenedor Docker si deseas desactivar el contenedor cuando la cola esté vacía:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan queue:work --stop-when-empty\n</code></pre>\n<h4># Consideraciones de recursos</h4>\n<p>Los Daemon de workers de cola no \"reinician\" el framework antes de procesar cada trabajo. Por lo\n    tanto, debes liberar cualquier recurso pesado luego de que cada trabajo sea completado. Por\n    ejemplo, si estás realizando manipulación de imágenes con la librería GD, debes liberar la\n    memoria cuando se termine con <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">imagedestroy</span>.</p>\n<h3># Prioridades de cola</h3>\n<p>A veces puedes desear priorizar cómo se procesan las colas. Por ejemplo, en tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/queue.php</span>\n    puedes establecer la <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue</span> predeterminada para tu conexión <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redis</span> en\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">low</span>. Sin embargo, ocasionalmente puedes desear insertar un trabajo en una cola de\n    prioridad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">high</span> de esta forma:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>dispatch((new Job)-&gt;onQueue('high'));\n</code></pre>\n<p>Para iniciar un worker que verifique que todos los trabajos en la cola <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">high</span> sean\n    procesados antes de continuar con los tabajos en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">low</span>, pasa una lista de nombres de\n    colas delimitada por comas al comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">work</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan queue:work --queue=high,low\n</code></pre>\n<h3># Workers de Cola y despliegue</h3>\n<p>Debido a que los workers de cola son procesos de vida útil larga, no detectarán cambios en el\n    código sin ser reiniciados. Así que la forma más sencilla de poner en producción una aplicación\n    utilizando workers de cola es reiniciando los workers durante el proceso de despliegue. Puedes\n    con elegancia reiniciar todos los workers ejecutando el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue:restart</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan queue:restart\n</code></pre>\n<p>Este comando indicará a todos los workers de cola que \"mueran\" luego de terminar el procesamiento\n    de su trabajo actual para que ningún trabajo existente se pierda. Como los workers de cola\n    morirán cuando se ejecute el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue:restart</span>, un administrador de procesos\n    debe estar en ejecución, como Supervisor para reiniciar automáticamente los workers de la cola.\n</p>\n<p>TIP</p>\n<p>La cola utiliza caché para almacenar señales de reinicio, por lo que debes verificar si un driver\n    de caché está configurado debidamente en tu aplicación antes de utilizar esta\n    característica.</p>\n<h3># Expiraciones De Trabajo Y Tiempos De Espera</h3>\n<h4># Expiración de trabajos</h4>\n<p>En tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/queue.php</span>, cada conexión de cola define una\n    opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">retry_after</span>. Esta opción especifica cuántos segundos debe esperar la\n    conexión de cola antes de reintentar un trabajo que está siendo procesado. Por ejemplo, si el\n    valor de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">retry_after</span> es establecido en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">90</span>, el trabajo será liberado de\n    nuevo a la cola si se ha estado procesando por 90 segundos sin haber sido eliminado.\n    Generalmente, debes fijar el valor de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">retry_after</span> al número máximo de segundos que\n    le toma razonablemente a tus trabajos ser completamente procesados.</p>\n<p>Nota</p>\n<p>\n    La única conexión de cola que no contiene un valor <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">retry_after</span> es Amazon SQS. SQS\n    reintentará el trabajo basándose en el\n    Default Visibility Timeout\n    que es administrado dentro de la consola de AWS.\n</p>\n<h4># Worker timeouts</h4>\n<p>El comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue:work</span> expone una opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--timeout</span>. <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--timeout</span>\n    especifica qué tanto el proceso maestro de cola de Laravel esperará antes de detener un worker\n    de cola hijo que está procesando un trabajo. A veces un proceso de cola hijo puede \"congelarse\"\n    por varias razones, como una llamada HTTP externa que no responde. La opción\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--timeout</span> remueve los procesos congelados que han excedido el tiempo límite\n    especificado:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan queue:work --timeout=60\n</code></pre>\n<p>La opción de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">retry_after</span> y la opción CLI <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--timeout</span> son\n    diferentes, pero trabajan juntas para asegurar que los trabajos no se pierdan y que los trabajos\n    se procesen exitosamente sólo una vez.</p>\n<p>Nota</p>\n<p>El valor <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--timeout</span> siempre debe ser al menos unos segundos menor que el valor de\n    configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">retry_after</span>. Esto asegurará que un worker procesando un trabajo\n    determinado siempre sea detenido antes que el trabajo se reintente. Si la opción\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--timeout</span> es mayor al valor de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">retry_after</span>, los trabajos\n    podrían ser procesados dos veces.</p>\n<h4># Duración de descanso del worker</h4>\n<p>Cuando hay trabajos disponibles en cola, el worker seguirá procesando trabajos sin retraso entre\n    ellos. Sin embargo, la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sleep</span> determina por cuánto tiempo \"dormirá\" el worker\n    si no hay nuevos trabajos disponibles. Mientras duerme, el worker no procesará trabajos nuevos -\n    los trabajos serán procesados luego de que el worker despierte.</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan queue:work --sleep=3\n</code></pre>\n<h2>Configuración De Supervisor</h2>\n<h4># Instalar Supervisor</h4>\n<p>Supervisor es un monitor de procesos para el sistema operativo Linux y reiniciará automáticamente\n    tu proceso <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue:work</span> si éste falla. Para instalar Supervisor en Ubuntu, se puede\n    usar el siguiente comando:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>sudo apt-get install supervisor\n</code></pre>\n<p>TIP</p>\n<p>\n    Si configurar Supervisor por ti mismo suena abrumador, considera usar\n    Laravel Forge\n    , el cual instalará y configurará Supervisor automáticamente para tus proyectos en Laravel.\n</p>\n<h4># Configurar Supervisor</h4>\n<p>Los archivos de configuración de Supervisor están almacenados generalmente en el directorio\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">/etc/supervisor/conf.d</span>. Dentro de este directorio, puedes crear cualquier número de\n    archivos de configuración que le instruyan a Supervisor cómo monitorear los procesos. Por\n    ejemplo, creemos un archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">laravel-worker.conf</span> que inicie y\n    monitoree el proceso <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue:work</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>[program:laravel-worker]\nprocess_name=%(program_name)s_%(process_num)02d\ncommand=php /home/forge/app.com/artisan queue:work sqs --sleep=3 --tries=3\nautostart=true\nautorestart=true\nuser=forge\nnumprocs=8\nredirect_stderr=true\nstdout_logfile=/home/forge/app.com/worker.log\n</code></pre>\n<p>En este ejemplo, la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">numprocs</span> le indicará a Supervisor ejecutar ocho\n    procesos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue:work</span> y monitorearlos todos, reiniciándolos automáticamente si\n    fallan. Debes cambiar la porción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue:work sqs</span> de la directiva\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">command</span> para reflejar la conexión de cola deseada.</p>\n<h4># Iniciar Supervisor</h4>\n<p>Una vez que el archivo de configuración haya sido creado, puedes actualizar la configuración de\n    Supervisor e iniciar los procesos usando los siguientes comandos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>sudo supervisorctl reread\nsudo supervisorctl update\nsudo supervisorctl start laravel-worker:*\n</code></pre>\n<p>\n    Para más información acerca de Supervisor, consulta\n    la documentación de Supervisor\n    .\n</p>\n<h2>Manejo de trabajos fallidos</h2>\n<p>Algunas veces los trabajos en cola fallarán. Esto no es problema, ¡las cosas no siempre salen\n    como esperamos! Laravel incluye una forma conveniente de especificar el número máximo de veces\n    que un trabajo debe ser intentado. Luego que un trabajo haya excedido esta cantidad de intentos,\n    será insertado en la tabla de base de datos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">failed_jobs</span>. Para crear una migración\n    para la tabla <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">failed_jobs</span> puedes usar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue:failed-table</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan queue:failed-table\nphp artisan migrate\n</code></pre>\n<p>Entonces, al ejecutar el worker de cola, debes especificar el número máximo de intentos que un\n    trabajo debe intentarse usando la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--tries</span> en el comando\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue:work</span> Si no especificas un valor para <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--tries</span> los trabajos se\n    intentarán indefinidamente:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan queue:work redis --tries=3\n</code></pre>\n<p>Adicionalmente, puedes especificar cuantos segundos debe esperar Laravel antes de volver a\n    intentar un trabajo que ha fallado usando la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--delay</span>. Por defecto, un\n    trabajo se vuelve a intentar inmediatamente:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan queue:work redis --tries=3 --delay=3\n</code></pre>\n<p>Si te gustaría configurar la demora del trabajo fallido por cada trabajo, puedes hacerlo\n    definiendo una propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">retryAfter</span> en tu clase de cola de trabajos:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* The number of seconds to wait before retrying the job.\n*\n* @var int\n*/\npublic \\$retryAfter = 3;\n</code></pre>\n<h3># Limpiar después de un trabajo fallido</h3>\n<p>Se puede definir un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">failed</span> directamente en la clase de trabajo, permitiendo\n    realizar una limpieza específica de trabajo cuando una falla ocurre. Esta es la ubicación\n    perfecta para enviar una alerta a tus usuarios o revertir cualquier acción realizada por el\n    trabajo. La <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Exception</span> que causó la falla en el trabajo será pasada al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">failed</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Jobs;\nuse Exception;\nuse App\\Podcast;\nuse App\\AudioProcessor;\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Queue\\SerializesModels;\nuse Illuminate\\Queue\\InteractsWithQueue;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nclass ProcessPodcast implements ShouldQueue\n{\n    use InteractsWithQueue, Queueable, SerializesModels;\n    protected \\$podcast;\n    /**\n    * Create a new job instance.\n    *\n    * @param  Podcast  \\$podcast\n    * @return void\n    */\n    public function __construct(Podcast \\$podcast)\n    {\n        \\$this-&gt;podcast = \\$podcast;\n    }\n    /**\n    * Execute the job.\n    *\n    * @param  AudioProcessor  \\$processor\n    * @return void\n    */\n    public function handle(AudioProcessor \\$processor)\n    {\n        // Process uploaded podcast...\n    }\n    /**\n    * The job failed to process.\n    *\n    * @param  Exception  \\$exception\n    * @return void\n    */\n    public function failed(Exception \\$exception)\n    {\n        // Send user notification of failure, etc...\n    }\n}\n</code></pre>\n<h3># Eventos de trabajo fallido</h3>\n<p>\n    Si quieres registrar un evento para ser llamado cuando un trabajo falle, puedes usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Queue::failing</span>. Este evento representa una gran oportunidad para notificarle a tu\n    equipo por correo electrónico o por\n    Slack\n    . Por ejemplo, puedes adjuntar una respuesta a este evento desde el\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AppServiceProvider</span> incluido en Laravel:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Providers;\nuse Illuminate\\Support\\Facades\\Queue;\nuse Illuminate\\Queue\\Events\\JobFailed;\nuse Illuminate\\Support\\ServiceProvider;\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n    * Register the service provider.\n    *\n    * @return void\n    */\n    public function register()\n    {\n        //\n    }\n    /**\n    * Bootstrap any application services.\n    *\n    * @return void\n    */\n    public function boot()\n    {\n        Queue::failing(function (JobFailed \\$event) {\n            // \\$event-&gt;connectionName\n            // \\$event-&gt;job\n            // \\$event-&gt;exception\n        });\n    }\n}\n</code></pre>\n<h3># Reintentando trabajos fallidos</h3>\n<p>Para visualizar todos los trabajos fallidos insertados en la tabla de base de datos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">failed_jobs</span>\n    se puede usar el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue:failed</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan queue:failed\n</code></pre>\n<p>El comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue:failed</span> listará la ID del trabajo, su conexión, cola y el tiempo en\n    el cual falló. La ID del trabajo puede ser usada para reintentar el trabajo fallido. Por\n    ejemplo, para reintentar un trabajo fallido con una ID <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">5</span>, ejecuta el siguiente\n    comando:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan queue:retry 5\n</code></pre>\n<p>Para reintentar todos tus trabajos fallidos, ejecuta el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue:retry</span> y pasa\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">all</span> como ID:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan queue:retry all\n</code></pre>\n<p>Si deseas borrar un trabajo fallido, puedes usar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue:forget</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan queue:forget 5\n</code></pre>\n<p>Para eliminar todos los trabajos fallidos, puedes usar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue:flush</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>php artisan queue:flush\n</code></pre>\n<h3># Ignorando modelos faltantes</h3>\n<p>Cuando inyectas un modelo Eloquent en un trabajo, se serializa automáticamente antes de colocarlo\n    en la cola y se restaura cuando se procesa el trabajo. Sin embargo, si el modelo ha sido\n    eliminado mientras el trabajo estaba esperando a ser procesado por un trabajador, tu trabajo\n    puede fallar con la excepción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ModelNotFoundException</span>.</p>\n<p>Por conveniencia, puedes elegir eliminar automáticamente los trabajos con modelos faltantes\n    configurando la propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">deleteWhenMissingModels</span> de tu trabajo en\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Delete the job if its models no longer exist.\n*\n* @var bool\n*/\npublic \\$deleteWhenMissingModels = true;\n</code></pre>\n<h2>Eventos de trabajo</h2>\n<p>Usando los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">before</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">after</span> en la facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Queue</span>,\n    puedes especificar funciones de retorno (callbacks) para que sean ejecutadas antes o después de\n    que un trabajo en cola sea procesado. Estas callbacks son una gran oportunidad para realizar\n    registro adicional o incrementar estadísticas para un panel de control. Generalmente, debes\n    llamar a estos métodos desde un proveedor de servicios. Por ejemplo puedes usar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AppServiceProvider</span>,\n    incluido en Laravel:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Providers;\nuse Illuminate\\Support\\Facades\\Queue;\nuse Illuminate\\Support\\ServiceProvider;\nuse Illuminate\\Queue\\Events\\JobProcessed;\nuse Illuminate\\Queue\\Events\\JobProcessing;\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n    * Bootstrap any application services.\n    *\n    * @return void\n    */\n    public function boot()\n    {\n        Queue::before(function (JobProcessing \\$event) {\n            // \\$event-&gt;connectionName\n            // \\$event-&gt;job\n            // \\$event-&gt;job-&gt;payload()\n        });\n        Queue::after(function (JobProcessed \\$event) {\n            // \\$event-&gt;connectionName\n            // \\$event-&gt;job\n            // \\$event-&gt;job-&gt;payload()\n        });\n    }\n    /**\n    * Register the service provider.\n    *\n    * @return void\n    */\n    public function register()\n    {\n        //\n    }\n}\n</code></pre>\n<p>Usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">looping</span> en la facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Queue</span>, puedes especificar\n    funciones de retorno (callbacks) que se ejecuten antes que el worker intente recuperar un\n    trabajo de una cola. Por ejemplo, quizás necesites registrar una Closure para deshacer cualquier\n    transacción abierta por un trabajo fallido anteriormente:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>Queue::looping(function () {\n    while (DB::transactionLevel() &gt; 0) {\n        DB::rollBack();\n    }\n});\n</code></pre>\n</div>"
      },
      {
        "titulo": "Programación de tareas",
        "contenido": "<div style='font-size: 14.2px;'>\n<h1>Programación de tareas</h1>\n<ul>\n    <li>Introducción</li>\n    <li>\n        Definición de programaciones\n        <ul>\n            <li>Programando comandos de Artisan</li>\n            <li>Programando trabajos en cola</li>\n            <li>Programando comandos de shell</li>\n            <li>Programando opciones de frecuencias</li>\n            <li>Zonas Horarias</li>\n            <li>Previniendo superposición de tareas</li>\n            <li>Ejecutando tareas en un servidor</li>\n            <li>Tareas en segundo plano</li>\n            <li>Modo de mantenimiento</li>\n        </ul>\n    </li>\n    <li>Resultado de la Tarea</li>\n    <li>Hooks de tareas</li>\n</ul>\n<h2>Introducción</h2>\n<p>En el pasado, es posible que hayas generado una entrada Cron para cada tarea que necesitabas\n    programar en su servidor. Sin embargo, esto puede convertirse rápidamente en un sufrimiento,\n    dado que tu programación de tareas no está en el control de versiones y debes hacer SSH a tu\n    servidor para agregar entradas Cron adicionales.</p>\n<p>El programador de comandos de Laravel te permite definir tu programación de comandos de forma\n    fluída y expresiva dentro de Laravel. Al usar el programador, una sola entrada Cron es necesaria\n    en tu servidor. Tu programación de tareas es definida en el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">schedule</span> del\n    archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Console/Kernel.php</span>. Para ayudarte a comenzar, un ejemplo sencillo está\n    definido dentro del método.</p>\n<h3># Iniciando el programador</h3>\n<p>\n    Al usar el programador, sólo necesitas agregar la siguiente entrada Cron a tu servidor. Si no\n    sabes cómo agregar entradas Cron a tu servidor, considera usar un servicio como\n    Laravel Forge\n    que puede administrar las entradas Cron por ti:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>* * * * * php /path-to-your-project/artisan schedule:run &gt;&gt; /dev/null 2&gt;&amp;1\n</code></pre>\n<p>Este Cron llamará al programador de tareas de Laravel cada minuto. Cuando el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">schedule:run</span>\n    es ejecutado, Laravel evaluará tus tareas programadas y ejecutará las tareas pendientes.</p>\n<h2>Definición de programaciones</h2>\n<p>Puedes definir todas tus tareas programadas en el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">schedule</span> de la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Console\\Kernel</span>.\n    Para empezar, veamos un ejemplo de programación de una tarea. En este ejemplo, programaremos una\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span> que será llamada cada día a medianoche. Dentro de la <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span>\n    ejecutaremos un consulta a la base de datos para vaciar una tabla:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>&lt;?php\nnamespace App\\Console;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Console\\Scheduling\\Schedule;\nuse Illuminate\\Foundation\\Console\\Kernel as ConsoleKernel;\nclass Kernel extends ConsoleKernel\n{\n    /**\n    * The Artisan commands provided by your application.\n    *\n    * @var array\n    */\n    protected \\$commands = [\n        //\n    ];\n    /**\n    * Define the application's command schedule.\n    *\n    * @param  \\Illuminate\\Console\\Scheduling\\Schedule  \\$schedule\n    * @return void\n    */\n    protected function schedule(Schedule \\$schedule)\n    {\n        \\$schedule-&gt;call(function () {\n            DB::table('recent_users')-&gt;delete();\n        })-&gt;daily();\n    }\n}\n</code></pre>\n<p>\n    Además de programar usando Closures, también puedes usar\n    objetos invocables\n    . Los objetos invocables son clases PHP sencillas que contienen un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">__invoke</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$schedule-&gt;call(new DeleteRecentUsers)-&gt;daily();\n</code></pre>\n<h3># Programando comandos de artisan</h3>\n<p>\n    Además de programador llamadas a Closures, también puedes programar\n    comandos de Artisan\n    y comandos del sistema operativo. Por ejemplo, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">command</span> para\n    programar un comando de Artisan usando ya sea el nombre del comando o de la clase:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$schedule-&gt;command('emails:send Taylor --force')-&gt;daily();\n\\$schedule-&gt;command(EmailsCommand::class, ['Taylor', '--force'])-&gt;daily();\n</code></pre>\n<h3># Programando trabajos en colas</h3>\n<p>\n    El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">job</span> puede ser usado para programar\n    un trabajo en cola\n    . Este método proporciona una forma conveniente de programar trabajos sin usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">call</span>\n    para crear Closures de forma manual para agregar el trabajo a la cola:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$schedule-&gt;job(new Heartbeat)-&gt;everyFiveMinutes();\n// Dispatch the job to the \"heartbeats\" queue...\n\\$schedule-&gt;job(new Heartbeat, 'heartbeats')-&gt;everyFiveMinutes();\n</code></pre>\n<h3># Programando comandos de shell</h3>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">exec</span> puede ser usado para emitir un comando al sistema operativo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$schedule-&gt;exec('node /home/forge/script.js')-&gt;daily();\n</code></pre>\n<h3># Programando opciones de frecuencias</h3>\n<p>Hay una variedad de programaciones que puedes asignar a tu tarea:</p>\n<table>\n    <thead>\n    <tr>\n        <th>Método</th>\n        <th>Descripción</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;cron('* * * * * *');</span></td>\n        <td>Ejecuta la tarea en una programación Cron personalizada</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;everyMinute();</span></td>\n        <td>Ejecuta la tarea cada minuto</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;everyFiveMinutes();</span></td>\n        <td>Ejecuta la tarea cada cinco minutos</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;everyTenMinutes();</span></td>\n        <td>Ejecuta la tarea cada diez minutos</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;everyFifteenMinutes();</span></td>\n        <td>Ejecuta la tarea cada quince minutos</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;everyThirtyMinutes();</span></td>\n        <td>Ejecuta la tarea cada treinta minutos</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;hourly();</span></td>\n        <td>Ejecuta la tarea cada hora</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;hourlyAt(17);</span></td>\n        <td>Ejecuta la tarea cada hora en el minuto 17</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;daily();</span></td>\n        <td>Ejecuta la tarea cada día a la medianoche</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;dailyAt('13:00');</span></td>\n        <td>Ejecuta la tarea cada día a las 13:00</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;twiceDaily(1, 13);</span></td>\n        <td>Ejecuta la tarea cada día a las 1:00 y a las 13:00</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;weekly();</span></td>\n        <td>Ejecuta la tarea cada semana</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;weeklyOn(1, '8:00');</span></td>\n        <td>Ejecuta a tarea cada semana los lunes a las 8:00</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;monthly();</span></td>\n        <td>Ejecuta la tarea cada mes</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;monthlyOn(4, '15:00');</span></td>\n        <td>Ejecuta la tarea el 4 de cada mes a las 15:00</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;quarterly();</span></td>\n        <td>Ejecuta la tarea cada trimestre</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;yearly();</span></td>\n        <td>Ejecuta la tarea cada año</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;timezone('America/New_York');</span></td>\n        <td>Establece la zona horaria</td>\n    </tr>\n    </tbody>\n</table>\n<p>Estos métodos pueden ser combinados con restricciones adicionales para crear programaciones más\n    ajustadas que sólo se ejecutan en determinados días de la semana. Por ejemplo, para programar un\n    comando para que sea ejecutado los lunes:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>// Ejecuta una vez por semana los martes a la 1 PM...\n\\$schedule-&gt;call(function () {\n    //\n})-&gt;weekly()-&gt;mondays()-&gt;at('13:00');\n// Ejecuta cada hora de 8 AM a 5 PM los días laborales...\n\\$schedule-&gt;command('foo')\n            -&gt;weekdays()\n            -&gt;hourly() method\n            -&gt;timezone('America/Chicago')\n            -&gt;between('8:00', '17:00');\n</code></pre>\n<p>A continuación hay una lista de restricciones de programación adicionales:</p>\n<table>\n    <thead>\n    <tr>\n        <th>Method</th>\n        <th>Description</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;weekdays();</span></td>\n        <td>Limita la tarea a los días laborales</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;weekends();</span></td>\n        <td>Limita la tarea a los fines de semana</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;sundays();</span></td>\n        <td>Limita la tarea a los domingos</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;mondays();</span></td>\n        <td>Limita la tarea a los lunes</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;tuesdays();</span></td>\n        <td>Limita la tarea los martes</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;wednesdays();</span></td>\n        <td>Limita la tarea a los miércoles</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;thursdays();</span></td>\n        <td>Limita la tarea a los jueves</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;fridays();</span></td>\n        <td>Limita la tarea a los viernes</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;saturdays();</span></td>\n        <td>Limita la tarea a los sábados</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;between(\\$start, \\$end);</span></td>\n        <td>Limita la tarea para ser ejecutado entre \\$start y \\$end</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;when(Closure);</span></td>\n        <td>Limita la tarea dependiendo de una prueba de veracidad</td>\n    </tr>\n    <tr>\n        <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;environments(\\$env);</span></td>\n        <td>Limita la tarea a ambientes específicos</td>\n    </tr>\n    </tbody>\n</table>\n<h4># Restricciones de tiempo between</h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">between</span> puede ser usado para limitar la ejecución de una tarea dependiendo\n    de la hora del día:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$schedule-&gt;command('reminders:send')\n                    -&gt;hourly()\n                    -&gt;between('7:00', '22:00');\n</code></pre>\n<p>De forma similar, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unlessBetween</span> puede ser usado para excluir la ejecución\n    de una tarea por un periodo de tiempo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$schedule-&gt;command('reminders:send')\n                    -&gt;hourly()\n                    -&gt;unlessBetween('23:00', '4:00');\n</code></pre>\n<h4># Restricciones de veracidad</h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">when</span> puede ser usado para limitar la ejecución de una tarea en base al\n    resultado de un test de veracidad dado. En otras palabras, si la <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span> dada\n    retorna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>, la tarea será ejecutada siempre y cuando ninguna otra restricción\n    prevenga que la tarea de ser ejecutada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$schedule-&gt;command('emails:send')-&gt;daily()-&gt;when(function () {\n    return true;\n});\n</code></pre>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">skip</span> puede ser visto como el inverso de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">when</span>. Si el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">skip</span> retorna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>, la tarea programada no será ejecutada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$schedule-&gt;command('emails:send')-&gt;daily()-&gt;skip(function () {\n    return true;\n});\n</code></pre>\n<p>Al usar métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">when</span> encadenados, el comando programado sólo será ejecutado si todas\n    las condiciones <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">when</span> retornan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>.</p>\n<h4># Restricciones de entorno</h4>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">environments</span> se puede utilizar para ejecutar tareas sólo en los entornos\n    dados:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$schedule-&gt;command('emails:send')\n            -&gt;daily()\n            -&gt;environments(['staging', 'production']);\n</code></pre>\n<h3># Zonas horarias</h3>\n<p>Usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">timezone</span>, puedes especificar que el tiempo de una tarea programada\n    debe ser interpretada en una zona horaria dada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$schedule-&gt;command('report:generate')\n            -&gt;timezone('America/New_York')\n            -&gt;at('02:00')\n</code></pre>\n<p>Si estás asignando la misma zona horaria a todas tus tareas programadas, puedes desear definir un\n    método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">scheduleTimezone</span> en tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Console/Kernel.php</span>. Este\n    método debería retornar la zona horaria por defecto que debe ser asignada a todas las tareas\n    programadas.</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>/**\n* Get the timezone that should be used by default for scheduled events.\n*\n* @return \\DateTimeZone|string|null\n*/\nprotected function scheduleTimezone()\n{\n    return 'America/Chicago';\n}\n</code></pre>\n<p>Nota</p>\n<p>Recuerda que algunas zonas horarias usan horario de verano. Cuando ocurren cambios por horario de\n    verano, tu tarea programada puede ejecutarse dos veces o puede no ser ejecutada. Por esto,\n    recomendamos evitar programación con zona horaria en la medida de lo posible.</p>\n<h3># Previniendo superposición de tareas</h3>\n<p>Por defecto, las tareas programadas serán ejecutadas incluso si la instancia anterior de la tarea\n    todavía está en ejecución. Para evitar esto, puedes usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withoutOverlapping</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$schedule-&gt;command('emails:send')-&gt;withoutOverlapping();\n</code></pre>\n<p>En este ejemplo, el comando de Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">emails:send</span> será ejecutado cada minuto si ya\n    no está siendo ejecutado. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withoutOverlapping</span> es especialmente útil si\n    tienes tareas que varían drásticamente en su tiempo de ejecución, evitando que puedas predecir\n    exactamente cuánto tiempo tomará una tarea.</p>\n<p>Si es necesario, puedes especificar cuántos minutos deben pasar antes de que el bloqueo \"sin\n    superposición\" expire. Por defecto, el bloqueo expirará luego de 24 horas:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$schedule-&gt;command('emails:send')-&gt;withoutOverlapping(10);\n</code></pre>\n<h3># Ejecutando tareas en un servidor</h3>\n<p>Nota</p>\n<p>Para utilizar esta característica, tu aplicación debe estar usando el controlador de caché <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">memcached</span>\n    o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redis</span> como predeterminado. Además, todos los servidores deben comunicarse al\n    mismo servidor central de caché.</p>\n<p>Si tu aplicación está siendo ejecutada en múltiples servidores, puedes limitar un trabajo\n    programado a sólo ejecutarse en un servidor. Por ejemplo, asume que se tiene una tarea\n    programada que genera un reporte nuevo cada viernes en la noche. Si el programador de tareas\n    está siendo ejecutado en tres servidores de worker, la tarea programada se ejecutará en todos y\n    generará el reporte tres veces. ¡No es bueno!</p>\n<p>Para indicar que la tarea debe ejecutarse sólo en un servidor, usa el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">onOneServer</span> al definir la tarea programada. El primer servidor en obtener la tarea\n    asegurará un bloqueo atómico en el trabajo para prevenir que otros servidores ejecuten la misma\n    tarea al mismo tiempo:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$schedule-&gt;command('report:generate')\n                -&gt;fridays()\n                -&gt;at('17:00')\n                -&gt;onOneServer();\n</code></pre>\n<h3># Tareas en segundo plano</h3>\n<p>Por defcto, múltiples comandos programados al mismo tiempo se ejecutarán secuencialmente. Si\n    tienes comandos de ejecución larga, esto puede causar que los siguientes comandos sean\n    ejecutados mucho más tarde que lo esperado. Si deseas ejecutar comandos en segundo plano para\n    que todos funcionen de forma simultánea, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">runInBackground</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$schedule-&gt;command('analytics:report')\n         -&gt;daily()\n         -&gt;runInBackground();\n</code></pre>\n<p>Nota</p>\n<p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">runInBackground</span> sólo puede ser usado al programar tareas mediante los\n    métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">command</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">exec</span>.</p>\n<h3># Modo de mantenimiento</h3>\n<p>Las tareas programadas de Laravel no serán ejecutadas cuando Laravel está en modo de\n    mantenimiento, dado que no queremos que tus tareas interfieran con cualquier mantenimiento\n    inacabado que puedes estar realizando en tu servidor. Sin embargo, si quieres forzar la\n    ejecución de una tarea incluso en modo de mantenimiento, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">evenInMaintenanceMode</span>:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$schedule-&gt;command('emails:send')-&gt;evenInMaintenanceMode();\n</code></pre>\n<h2>Resultado de la tarea</h2>\n<p>El programador de Laravel proporciona múltiples métodos convenientes para trabajar con el\n    resultado generado por una tarea programada. Primero, usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sendOutputTo</span>,\n    puedes enviar el resultado a un archivo para una inspección posterior:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$schedule-&gt;command('emails:send')\n         -&gt;daily()\n         -&gt;sendOutputTo(\\$filePath);\n</code></pre>\n<p>Si quieres agregar el resultado a un archivo dado, puedes usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">appendOutputTo</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$schedule-&gt;command('emails:send')\n         -&gt;daily()\n         -&gt;appendOutputTo(\\$filePath);\n</code></pre>\n<p>Usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">emailOutputTo</span>, puedes enviar el resultado a una dirección de correo\n    electrónico de tu preferencia. Antes de enviar por correo electrónico el resultado de una tarea,\n    debes configurar los servicios de correo electrónico de Laravel:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$schedule-&gt;command('foo')\n         -&gt;daily()\n         -&gt;sendOutputTo(\\$filePath)\n         -&gt;emailOutputTo('foo@example.com');\n</code></pre>\n<p>Si solo quieres enviar el resultado por correo electrónico si el comando falla, usa el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">emailOutputOnFailure</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$schedule-&gt;command('foo')\n         -&gt;daily()\n         -&gt;emailOutputOnFailure('foo@example.com');\n</code></pre>\n<p>Nota</p>\n<p>Los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">emailOutputTo</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">emailOutputOnFailure</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sendOutputTo</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">appendOutputTo</span> son exclusivos para los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">command</span>\n    y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">exec</span>.</p>\n<h2>Hooks de tareas</h2>\n<p>Usando los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">before</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">after</span>, puedes especificar código que será\n    ejecutado antes y después de que la tarea programada sea completada:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$schedule-&gt;command('emails:send')\n         -&gt;daily()\n         -&gt;before(function () {\n             // Task is about to start...\n         })\n         -&gt;after(function () {\n             // Task is complete...\n         });\n</code></pre>\n<p>Los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">onSuccess</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">onFailure</span> te permiten especificar código a\n    ejecutar si la tarea programada tiene éxito o falla:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$schedule-&gt;command('emails:send')\n         -&gt;daily()\n         -&gt;onSuccess(function () {\n            // The task succeeded...\n         })\n         -&gt;onFailure(function () {\n            // The task failed...\n        });\n</code></pre>\n<h4># Haciendo ping a URLs</h4>\n<p>\n    Usando los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pingBefore</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">thenPing</span>, el programador de tareas\n    puede automáticamente hacer ping a una URL dada antes o después de que una tarea sea completada.\n    Este método es útil para notificar a un servicio externo, como\n    Laravel Envoyer\n    , que tu tarea programada está comenzando o ha finalizado su ejecución:\n</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$schedule-&gt;command('emails:send')\n         -&gt;daily()\n         -&gt;pingBefore(\\$url)\n         -&gt;thenPing(\\$url);\n</code></pre>\n<p>Los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pingBeforeIf</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">thenPingIf</span> pueden ser usados para hacer ping\n    a una URL dada sólo si la condición dada es <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$schedule-&gt;command('emails:send')\n         -&gt;daily()\n         -&gt;pingBeforeIf(\\$condition, \\$url)\n         -&gt;thenPingIf(\\$condition, \\$url);\n</code></pre>\n<p>Los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pingOnSuccess</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pingOnFailure</span> pueden ser usados para hacer\n    ping a una URL dada sólo si la tarea tiene éxito o falla:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>\\$schedule-&gt;command('emails:send')\n          -&gt;daily()\n          -&gt;pingOnSuccess(\\$successUrl)\n          -&gt;pingOnFailure(\\$failureUrl);\n</code></pre>\n<p>Todos los métodos de ping requieren el paquete HTTP Guzzle. Puedes agregar Guzzle a tu proyecto\n    usando el gestor de paquetes Composer:</p>\n<pre style='background-color: #CFD8DC; color: #37474F;'><code>composer require guzzlehttp/guzzle\n</code></pre>\n</div>"
      }
    ]
  },
  {
    "titulo": "7.- Base de datos",
    "subtitulo": "",
    "items": [
      {
        "titulo": "Empezando",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Bases de datos: primeros pasos</h1>\n  <ul>\n    <li>\n      Introducción\n      <ul>\n        <li>Configuración</li>\n        <li>Conexiones de lectura y escritura</li>\n        <li>Usando múltiples conexiones de bases de datos</li>\n      </ul>\n    </li>\n    <li>Ejecutando consultas SQL nativas</li>\n    <li>Listeners de eventos de consultas</li>\n    <li>Transacciones de bases de datos</li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>\n    Laravel hace que la interacción con las bases de datos sea extremadamente fácil a través de una variedad de backends de bases de datos usando SQL nativo, el constructor de consultas query builder y el ORM Eloquent . Actualmente, Laravel soporta cuatro bases de datos.\n  </p>\n  <ul>\n    <li>MySQL</li>\n    <li>PostgreSQL</li>\n    <li>SQLite</li>\n    <li>SQL Server</li>\n  </ul>\n  <h3>Configuración</h3>\n  <p>La configuración de base de datos para tu aplicación está localizada en\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/database.php</span>. Puedes definir todo lo concerniente a tus conexiones de bases de datos, y también especificar qué conexión debería ser usada por defecto. Ejemplos para la mayoría de los sistemas de bases de datos soportados son proporcionados en este archivo.</p>\n  <p>\n    Por defecto, la configuración de entorno de muestra de Laravel está lista para usar con Laravel Homestead , la cual es una máquina virtual conveniente para el desarrollo con Laravel en tu máquina local. Eres libre de modificar esta configuración de acuerdo a tus necesidades de tu base de datos local.\n  </p>\n  <h4>Configuración de SQLite</h4>\n  <p>Después de la creación de una nueva base de datos SQLite usando un comando tal como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">touch\n  database/database.sqlite</span>, puedes configurar fácilmente tus variables de entorno para apuntar a esta base de datos creada recientemente al usar la ruta absoluta a la base de datos.\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB_CONNECTION=sqlite\nDB_DATABASE=/absolute/path/to/database.sqlite\n</code></pre>\n  <p>Para habilitar las claves foráneas en conexiones de SQLite, debes agregar la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">foreign_key_constraints</span> en tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/database.php</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'sqlite' =&gt; [\n    // ...\n    'foreign_key_constraints' =&gt; true,\n],\n</code></pre>\n  <h4>Configuración usando URLs</h4>\n  <p>Típicamente, las conexiones a bases de datos son configuradas usando múltiples valores de configuración como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">host</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">username</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">password</span>, etc. Cada uno de esos valores de configuración tiene su propia variable de entorno correspondiente. Esto quiere decir que al configurar tu información de conexión a la base de datos en un servidor de producción, necesitas administrar múltiples variables de entorno.</p>\n  <p>Algunos proveedores de bases de datos administrados como Heroku proporcionan una única \"URL\" de base de datos que contiene toda la información de conexión para la base de datos en una única cadena. Una URL de base de datos de ejemplo podría verse de la siguiente manera:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>mysql://root:password@127.0.0.1/forge?charset=UTF-8\n</code></pre>\n  <p>Estas URLs típicamente siguen una convención de esquema estándar:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>driver://username:password@host:port/database?options\n</code></pre>\n  <p>Por conveniencia, Laravel soporta dichas URLs como alternativa a configurar tu base de datos con múltiples opciones de configuración. Si la opción de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url</span> (o variable de entorno <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DATABASE_URL</span> correspondiente) está presente, esta será usada para extraer la conexión a la base de datos y la información de credenciales.</p>\n  <h3>Conexiones de lectura y escritura</h3>\n  <p>Algunas veces puedes desear contar con una conexión de base de datos para los comandos SELECT y otra para los comandos UPDATE y DELETE. Laravel hace esto una tarea fácil, y las conexiones propias siempre serán usadas si estás usando consultas nativas, el constructor de consultas Query Builder o el ORM Eloquent.</p>\n  <p>Para ver cómo las conexiones de lectura / escritura deberían ser configuradas, vamos a mirar este ejemplo:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'mysql' =&gt; [\n    'read' =&gt; [\n        'host' =&gt; [\n            '192.168.1.1',\n            '196.168.1.2',\n        ],\n    ],\n    'write' =&gt; [\n        'host' =&gt; [\n            '196.168.1.3',\n        ],\n    ],\n    'sticky'    =&gt; true,\n    'driver'    =&gt; 'mysql',\n    'database'  =&gt; 'database',\n    'username'  =&gt; 'root',\n    'password'  =&gt; '',\n    'charset'   =&gt; 'utf8mb4',\n    'collation' =&gt; 'utf8mb4_unispan_ci',\n    'prefix'    =&gt; '',\n],\n</code></pre>\n  <p>Observa que tres claves han sido agregadas al arreglo de configuración: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">read</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">write</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sticky</span>. Las claves <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">read</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">write</span> tienen valores de arreglo conteniendo una sola clave: la dirección ip del <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">host</span>. El resto de las opciones de la base de datos para las conexiones <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">read</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">write</span> serán tomadas del arreglo principal <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mysql</span>.</p>\n  <p>Únicamente necesitas colocar elementos en los arreglos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">read</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">write</span> si deseas sobreescribir los valores del arreglo principal. Así, en este caso,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">192.168.1.1</span> será usado como la máquina para la conexión de \"lectura\", mientras que\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">192.168.1.3</span> será usada para la conexión de \"escritura\". Las credenciales de bases de datos, prefijo, conjunto de caracteres, y todas las demás opciones en el arreglo principal\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mysql</span> serán compartidas a través de ambas conexiones.</p>\n  <h4>La opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sticky</span></h4>\n  <p>La opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sticky</span> es un valor <em>opcional</em> que puede ser usado para permitir la lectura inmediata de registros que han sido escritos a la base de datos durante el ciclo de solicitudes actual. Si la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sticky</span> está habilitada y una operación de \"escritura\" ha sido ejecutada contra la base de datos durante el ciclo de solicitudes actual, cualquiera de las operaciones de \"lectura\" hasta aquí usarán la conexión \"write\". Esto asegura que cualquier dato escrito durante el ciclo de solicitud pueda ser leído inmediatamente de la base de datos durante la misma solicitud. Es posible para ti decidir si este es el comportamiento deseado para tu aplicación.</p>\n  <h3>Usando conexiones de bases de datos múltiples</h3>\n  <p>Cuando estamos usando conexiones múltiples, puedes acceder a cada conexión por medio del método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">connection</span> en el Facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DB</span>. El nombre <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">name</span> pasado al método de conexión <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">connection</span> debería corresponder a una de las conexiones listadas en tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/database.php</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::connection('foo')-&gt;select(...);\n</code></pre>\n  <p>También puedes acceder a los datos nativos de la instancia PDO subyacente que usa el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">getPdo</span> en una instancia de conexión:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$pdo = DB::connection()-&gt;getPdo();\n</code></pre>\n  <h2>Ejecutando consultas SQL nativas</h2>\n  <p>Una vez que has configurado tu conexión de base de datos, puedes ejecutar consultas usando el Facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DB</span>. La clase facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DB</span> proporciona métodos para cada tipo de consulta: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">select</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">update</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">insert</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">delete</span> y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">statement</span>.</p>\n  <h4>Ejecutando una consulta select</h4>\n  <p>Para ejecutar una consulta básica, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">select</span> en el facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DB</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Support\\Facades\\DB;\nuse App\\Http\\Controllers\\Controller;\nclass UserController extends Controller\n{\n    /**\n    * Muestra una lista de todos los usuarios de la aplicación.\n    *\n    * @return Response\n    */\n    public function index()\n    {\n        \\$users = DB::select('select * from users where active = ?', [1]);\n        return view('user.index', ['users' =&gt; \\$users]);\n    }\n}\n</code></pre>\n  <p>El primer argumento pasado al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">select</span> es la consulta SQL nativa; en este caso está parametrizada, mientras el segundo argumento es cualquier parámetro a enlazar que necesita estar conectado a la consulta. Típicamente, estos son los valores de las restricciones de cláusula <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where</span>. El enlazamiento de parámetro proporciona protección contra ataques de inyección SQL.</p>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">select</span> siempre devolverá un arreglo de resultados. Cada resultado dentro del arreglo será un objeto <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">stdClass</span> de PHP, permitiendo que accedas a los valores de los resultados:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>foreach (\\$users as \\$user) {\n    echo \\$user-&gt;name;\n}\n</code></pre>\n  <h4>Usando enlaces nombrados</h4>\n  <p>En lugar de usar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">?</span> para representar tus enlaces (bindings) de parámetros, puedes ejecutar una consulta usando enlaces nombrados:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$results = DB::select('select * from users where id = :id', ['id' =&gt; 1]);\n</code></pre>\n  <h4>Ejecutando una instrucción insert</h4>\n  <p>Para ejecutar una instrucción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">insert</span>, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">insert</span> en la clase facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DB</span>. Igual que <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">select</span>, este método toma la consulta SQL nativa como su argumento inicial y lo enlaza con su argumento secundario:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::insert('insert into users (id, name) values (?, ?)', [1, 'Dayle']);\n</code></pre>\n  <h4>Ejecutando una instrucción update</h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">update</span> debería ser usado para actualizar los registros existentes en la base de datos. El número de filas afectadas por la instrucción serán devueltas:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$affected = DB::update('update users set votes = 100 where name = ?', ['John']);\n</code></pre>\n  <h4>Ejecutando una instrucción delete</h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">delete</span> debería ser usado para eliminar registros de la base de datos. Al igual que <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">update</span>, el número de filas afectadas será devuelto:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$deleted = DB::delete('delete from users');\n</code></pre>\n  <h4>Ejecutando una instrucción general</h4>\n  <p>Algunas instrucciones de bases de datos no devuelven algún valor. Para estos tipos de operaciones, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">statement</span> en la clase facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DB</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::statement('drop table users');\n</code></pre>\n  <h2>Listeners de eventos de consultas</h2>\n  <p>\n    Si prefieres recibir cada consulta SQL ejecutada por tu aplicación, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">listen</span>. Este método es útil para registrar consultas o depurar. Puedes registrar tus listeners de consultas en un proveedor de servicio :\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Providers;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\ServiceProvider;\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n    * Inicializa cualquiera de los servicios de la aplicación.\n    *\n    * @return void\n    */\n    public function boot()\n    {\n        DB::listen(function (\\$query) {\n            // \\$query-&gt;sql\n            // \\$query-&gt;bindings\n            // \\$query-&gt;time\n        });\n    }\n    /**\n    * Registra el proveedor de servicio.\n    *\n    * @return void\n    */\n    public function register()\n    {\n        //\n    }\n}\n</code></pre>\n  <h2>Transacciones de bases de datos</h2>\n  <p>Puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">transaction</span> en la clase facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DB</span> para ejecutar un conjunto de operaciones dentro de una transacción de base de datos. Si un error de excepción es arrojado dentro del código <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span> de la transacción, la transacción automáticamente terminará con un rollback. Si el código <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span> se ejecuta correctamente, la transacción terminará automáticamente con un commit. No necesitas preocuparte por hacer rollback o commit manualmente mientras estés usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">transaction</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::transaction(function () {\n    DB::table('users')-&gt;update(['votes' =&gt; 1]);\n    DB::table('posts')-&gt;delete();\n});\n</code></pre>\n  <h4>Manejando deadlocks (bloqueo mutuo)</h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">transaction</span> acepta un segundo argumento opcional el cual define el número de veces que la ejecución de una transacción debería ser reintentada cuando un ocurra un deadlock. Una vez que estos intentos hayan sido completados sin éxito, un error de excepción será arrojado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::transaction(function () {\n    DB::table('users')-&gt;update(['votes' =&gt; 1]);\n    DB::table('posts')-&gt;delete();\n}, 5);\n</code></pre>\n  <h4>Usando transacciones manualmente</h4>\n  <p>Si prefieres empezar una transacción manualmente y tener control total sobre rollbacks y commits, podrías usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">beginTransaction</span> de la clase facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DB</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::beginTransaction();\n</code></pre>\n  <p>Puedes hacer rollback de la transacción por medio del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">rollback</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::rollBack();\n</code></pre>\n  <p>Finalmente, puedes confirmar una transacción por medio del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">commit</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::commit();\n</code></pre>\n  <p>TIP</p>\n  <p>\n    Los métodos de transacción del Facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DB</span> controlan las transacciones para ambos backends de bases de datos del constructor de consultas query builder y el ORM Eloquent .\n  </p>\n</div>"
      },
      {
        "titulo": "Consultas",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Base de datos: constructor de consultas (query builder)</h1>\n  <ul>\n    <li>Introducción</li>\n    <li>\n      Obteniendo los resultados\n      <ul>\n        <li>Particionando los resultados</li>\n        <li>Agrupamientos</li>\n      </ul>\n    </li>\n    <li>Selects</li>\n    <li>Expresiones sin procesar (raw)</li>\n    <li>Joins</li>\n    <li>Uniones</li>\n    <li>\n      Cláusulas where\n      <ul>\n        <li>Agrupamiento de parámetros</li>\n        <li>Cláusulas exists where</li>\n        <li>Cláusulas where JSON</li>\n      </ul>\n    </li>\n    <li>Ordenamiento, agrupamiento, límite y desplazamiento</li>\n    <li>Cláusulas condicionales</li>\n    <li>Inserciones</li>\n    <li>\n      Actualizaciones\n      <ul>\n        <li>Actualizando columnas JSON</li>\n        <li>Incremento y decremento</li>\n      </ul>\n    </li>\n    <li>Eliminaciones</li>\n    <li>Bloqueo pesimista</li>\n    <li>Depuración</li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>El constructor de consultas (query builder) de Base de datos de Laravel, proporciona una interface fluida y conveniente para la creación y ejecución de consultas de bases de datos. Puede ser usado para ejecutar las principales operaciones de bases de datos en tu aplicación y funciona en todos los sistemas de bases de datos soportados.</p>\n  <p>El constructor de consultas de Laravel usa enlazamiento de parámetros PDO para proteger tu aplicación contra ataques de inyección SQL. No hay necesidad de limpiar cadenas que están siendo pasadas como enlaces.</p>\n  <p>Nota</p>\n  <p>PDO no admite nombres de columna de enlace (binding). Por lo tanto, nunca debes permitir que la entrada de usuario dicte los nombres de columna a los que hacen referencia tus consultas, incluidas las columnas \"ordenar por\", etc. Si debes permitir que el usuario seleccione ciertas columnas para consultar, valida siempre los nombres de las columnas con un una lista blanca de columnas permitidas.</p>\n  <h2>Obteniendo los resultados</h2>\n  <h4>Obteniendo todas las filas de una tabla</h4>\n  <p>Puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">table</span> de la clase facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DB</span> para empezar una consulta. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">table</span> devuelve una instancia para construir consultas fáciles de entender para la tabla dada, permitiendo que encadenes más restricciones dentro de la consulta y recibas finalmente los resultados usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Support\\Facades\\DB;\nuse App\\Http\\Controllers\\Controller;\nclass UserController extends Controller\n{\n    /**\n    * Show a list of all of the application's users.\n    *\n    * @return Response\n    */\n    public function index()\n    {\n        \\$users = DB::table('users')-&gt;get();\n        return view('user.index', ['users' =&gt; \\$users]);\n    }\n}\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span> devuelve una colección de la clase\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Support\\Collection</span> que contiene los resultados donde cada resultado es una instancia del objeto <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">StdClass</span> de PHP. Puedes acceder al valor de cada columna accediendo a la columna como una propiedad del objeto:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>foreach (\\$users as \\$user) {\n    echo \\$user-&gt;name;\n}\n</code></pre>\n  <h4>Obteniendo una sola fila / columna de una tabla</h4>\n  <p>Si solamente necesitas recuperar una sola fila de la tabla de la base de datos, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">first</span>. Este método devolverá un solo objeto <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">StdClass</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = DB::table('users')-&gt;where('name', 'John')-&gt;first();\necho \\$user-&gt;name;\n</code></pre>\n  <p>Si no necesitas una fila completa, puedes extraer un solo valor de un registro usando el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">value</span>. Este método devolverá directamente el valor de la columna:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$email = DB::table('users')-&gt;where('name', 'John')-&gt;value('email');\n</code></pre>\n  <p>Para obtener una sola fila por su valor de columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">id</span>, use el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">find</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = DB::table('users')-&gt;find(3);\n</code></pre>\n  <h4>Obteniendo una lista de valores de columna</h4>\n  <p>Si prefieres obtener una Colección que contenga los valores de una sola columna, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pluck</span>. En el siguiente ejemplo, obtendrémos una colección de títulos de rol:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$titles = DB::table('roles')-&gt;pluck('title');\nforeach (\\$titles as \\$title) {\n    echo \\$title;\n}\n</code></pre>\n  <p>También puedes especificar una columna clave personalizada para la colección retornada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$roles = DB::table('roles')-&gt;pluck('title', 'name');\nforeach (\\$roles as \\$name =&gt; \\$title) {\n    echo \\$title;\n}\n</code></pre>\n  <h3>Particionando los resultados</h3>\n  <p>Si nececesitas trabajar con miles de registros de bases de datos, considera usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">chunk</span>. Este método obtiene una partición pequeña de los resultados cada vez y pone cada partición dentro de un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span> para su procesamiento. Este método es muy útil para escribir comandos de Artisan que procesan miles de registros. Por ejemplo, vamos a trabajar con la tabla completa <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">users</span> en particiones de 100 registros cada vez:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::table('users')-&gt;orderBy('id')-&gt;chunk(100, function (\\$users) {\n    foreach (\\$users as \\$user) {\n        //\n    }\n});\n</code></pre>\n  <p>Puedes parar de obtener particiones para que no sean procesadas al devolver <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span> en el código <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::table('users')-&gt;orderBy('id')-&gt;chunk(100, function (\\$users) {\n    // Process the records...\n    return false;\n});\n</code></pre>\n  <p>Si estás actualizando registros de base de datos mientras particionas resultados, los resultados de particiones podrían cambiar en formas inesperadas. Entonces, cuando se actualicen los registros mientras se particiona, siempre es mejor usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">chunkById</span> en su lugar. Este método paginará automáticamente los resultados basándose en la llave primaria del registro:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::table('users')-&gt;where('active', false)\n    -&gt;chunkById(100, function (\\$users) {\n        foreach (\\$users as \\$user) {\n            DB::table('users')\n                -&gt;where('id', \\$user-&gt;id)\n                -&gt;update(['active' =&gt; true]);\n        }\n    });\n</code></pre>\n  <p>Nota</p>\n  <p>Al actualizar o eliminar registros dentro del callback de la partición, cualquier cambio en la clave primaria o claves foráneas podría afectar a la consulta de la partición. Esto podría potencialmente dar lugar a que los registros no se incluyan en los resultados particionados.</p>\n  <h3>Agrupamientos</h3>\n  <p>El constructor de consultas también proporciona una variedad de métodos de agrupamiento tales como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">count</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">max</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">min</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">avg</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sum</span>. Puedes ejecutar cualquiera de estos métodos después de construir tu consulta:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')-&gt;count();\n\\$price = DB::table('orders')-&gt;max('price');\n</code></pre>\n  <p>Puedes combinar estos métodos con otras cláusulas:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$price = DB::table('orders')\n                -&gt;where('finalized', 1)\n                -&gt;avg('price');\n</code></pre>\n  <h4>Determinando si existen registros</h4>\n  <p>EN vez de usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">count</span> para determinar si existen registros que coincidan con los límites de tu consulta, puedes usar los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">exists</span> y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">doesntExist</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>return DB::table('orders')-&gt;where('finalized', 1)-&gt;exists();\nreturn DB::table('orders')-&gt;where('finalized', 1)-&gt;doesntExist();\n</code></pre>\n  <h2>Selects</h2>\n  <h4>Especificando una cláusula select</h4>\n  <p>No siempre desearás seleccionar todas las columnas de una tabla de la base de datos. Usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">select</span>, puedes especificar una cláusula <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">select</span> personalizada para la consulta:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')-&gt;select('name', 'email as user_email')-&gt;get();\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">distinct</span> te permite forzar la consulta para que devuelva solamente resultados que sean distintos:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')-&gt;distinct()-&gt;get();\n</code></pre>\n  <p>Si ya tienes una instancia del constructor de consultas y deseas añadir una columna a su cláusula\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">select</span> existente, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">addSelect</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$query = DB::table('users')-&gt;select('name');\n\\$users = \\$query-&gt;addSelect('age')-&gt;get();\n</code></pre>\n  <h2>Expresiones sin procesar (raw)</h2>\n  <p>Algunas veces puedes necesitar usar una expresión sin procesar en una consulta. Para crear una expresión sin procesar, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DB::raw</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                     -&gt;select(DB::raw('count(*) as user_count, status'))\n                     -&gt;where('status', '&lt;&gt;', 1)\n                     -&gt;groupBy('status')\n                     -&gt;get();\n</code></pre>\n  <p>Nota</p>\n  <p>Las instrucciones sin procesar serán inyectadas dentro de la consulta como cadenas, así que deberías ser extremadamente cuidadoso para no crear vulnerabilidades de inyección SQL.</p>\n  <h3>Métodos Raw</h3>\n  <p>En lugar de usar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DB::raw</span>, también puedes usar los siguientes métodos para insertar una expresión sin procesar dentro de varias partes de tu consulta.</p>\n  <h4><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">selectRaw</span></h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">selectRaw</span> puede ser usado en lugar de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">select(DB::raw(...))</span>. Este método acepta un arreglo opcional de enlaces como su segundo argumento:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$orders = DB::table('orders')\n                -&gt;selectRaw('price * ? as price_with_tax', [1.0825])\n                -&gt;get();\n</code></pre>\n  <h4><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereRaw / orWhereRaw</span></h4>\n  <p>Los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereRaw</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">orWhereRaw</span> pueden ser usados para inyectar una cláusula <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where</span> sin procesar dentro de tu consulta. Estos métodos aceptan un arreglo opcional de enlaces como segundo argumento:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$orders = DB::table('orders')\n                -&gt;whereRaw('price &gt; IF(state = \"TX\", ?, 100)', [200])\n                -&gt;get();\n</code></pre>\n  <h4><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">havingRaw / orHavingRaw</span></h4>\n  <p>Los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">havingRaw</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">orHavingRaw</span> pueden ser usados para establecer una cadena sin procesar como el valor de la cláusula <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">having</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$orders = DB::table('orders')\n                -&gt;select('department', DB::raw('SUM(price) as total_sales'))\n                -&gt;groupBy('department')\n                -&gt;havingRaw('SUM(price) &gt; 2500')\n                -&gt;get();\n</code></pre>\n  <h4><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">orderByRaw</span></h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">orderByRaw</span> puede ser usado para establecer una cadena sin procesar como el valor de la cláusula <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">order by</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$orders = DB::table('orders')\n                -&gt;orderByRaw('updated_at - created_at DESC')\n                -&gt;get();\n</code></pre>\n  <h2>Joins</h2>\n  <h4>Cláusula inner join</h4>\n  <p>El constructor de consultas también puede ser usado para escribir instrucciones joins. Para ejecutar un \"inner join\" básico, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">join</span> en una instancia del constructor de consultas. El primer argumento pasado al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">join</span> es el nombre de la tabla que necesitas juntar, mientras que los argumentos restantes especifican las restricciones de columna para el join. Ciertamente, como puedes ver, puedes hacer un join de múltiples tablas en una sola consulta:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n            -&gt;join('contacts', 'users.id', '=', 'contacts.user_id')\n            -&gt;join('orders', 'users.id', '=', 'orders.user_id')\n            -&gt;select('users.*', 'contacts.phone', 'orders.price')\n            -&gt;get();\n</code></pre>\n  <h4>Cláusula left join / right join</h4>\n  <p>Si prefieres ejecutar un \"left join\" o un \"right join\" en vez de un \"inner join\", usa los métodos\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">leftJoin</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">rightJoin</span>. Estos métodos tienen la misma forma de uso de los argumentos que el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">join</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n            -&gt;leftJoin('posts', 'users.id', '=', 'posts.user_id')\n            -&gt;get();\n\\$users = DB::table('users')\n            -&gt;rightJoin('posts', 'users.id', '=', 'posts.user_id')\n            -&gt;get();\n</code></pre>\n  <h4>Cláusula cross join</h4>\n  <p>Para ejecutar un cláusula \"cross join\" usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">crossJoin</span> con el nombre de la tabla a la que deseas hacerle un cross join. Los cross join generan un producto cartesiano entre la primera tabla y la tabla juntada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('sizes')\n            -&gt;crossJoin('colours')\n            -&gt;get();\n</code></pre>\n  <h4>Cláusulas de join avanzadas</h4>\n  <p>También puedes especificar cláusulas join más avanzadas. Para empezar, pasa una función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span> como el segundo argumento dentro del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">join</span>. La <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span> recibirá un objeto <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">JoinClause</span> el cual permitirá que especifiques restricciones en la cláusula <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">join</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::table('users')\n        -&gt;join('contacts', function (\\$join) {\n            \\$join-&gt;on('users.id', '=', 'contacts.user_id')-&gt;orOn(...);\n        })\n        -&gt;get();\n</code></pre>\n  <p>Si prefieres usar una cláusula estilo \"where\" en tus joins, puedes usar los métodos\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">orWhere</span> en un join. En lugar de comparar dos columnas, estos métodos compararán la columna contra un valor:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::table('users')\n        -&gt;join('contacts', function (\\$join) {\n            \\$join-&gt;on('users.id', '=', 'contacts.user_id')\n                    -&gt;where('contacts.user_id', '&gt;', 5);\n        })\n        -&gt;get();\n</code></pre>\n  <h4>Subconsultas joins</h4>\n  <p>Puedes utilizar los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">joinSub</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">leftJoinSub</span> y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">rightJoinSub</span> para unir una consulta a una subconsulta. Cada uno de estos métodos recibe tres argumentos: la subconsulta, su alias de tabla y una Closure que define las columnas relacionadas:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$latestPosts = DB::table('posts')\n                    -&gt;select('user_id', DB::raw('MAX(created_at) as last_post_created_at'))\n                    -&gt;where('is_published', true)\n                    -&gt;groupBy('user_id');\n\\$users = DB::table('users')\n        -&gt;joinSub(\\$latestPosts, 'latest_posts', function (\\$join) {\n            \\$join-&gt;on('users.id', '=', 'latest_posts.user_id');\n        })-&gt;get();\n</code></pre>\n  <h2>Uniones</h2>\n  <p>El constructor de consultas también proporciona una forma rápida para \"unir\" dos consultas. Por ejemplo, puedes crear una consulta inicial y usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">union</span> para unirlo con una segunda consulta:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$first = DB::table('users')\n            -&gt;whereNull('first_name');\n\\$users = DB::table('users')\n            -&gt;whereNull('last_name')\n            -&gt;union(\\$first)\n            -&gt;get();\n</code></pre>\n  <p>TIP</p>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unionAll</span> también está disponible y tiene la misma forma de uso que <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">union</span>.\n  </p>\n  <h2>Cláusulas where</h2>\n  <h4>Cláusula where simple</h4>\n  <p>Puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where</span> en una instancia del constructor de consultas para añadir cláusulas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where</span> a la consulta. La ejecución más básica de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where</span> requiere tres argumentos. El primer argumento es el nombre de la columna. El segundo argumento es un operador, el cual puede ser cualquiera de los operadores soportados por la base de datos. Finalmente, el tercer argumento es el valor a evaluar contra la columna.</p>\n  <p>Por ejemplo, aquí está una consulta que verifica que el valor de la columna \"votes\" sea igual a 100:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')-&gt;where('votes', '=', 100)-&gt;get();\n</code></pre>\n  <p>Por conveniencia, si quieres verificar que una columna sea igual a un valor dado, puedes pasar directamente el valor como el segundo argumento del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where</span>.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')-&gt;where('votes', 100)-&gt;get();\n</code></pre>\n  <p>Puedes usar otros operadores cuando estés escribiendo una cláusula <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                -&gt;where('votes', '&gt;=', 100)\n                -&gt;get();\n\\$users = DB::table('users')\n                -&gt;where('votes', '&lt;&gt;', 100)\n                -&gt;get();\n\\$users = DB::table('users')\n                -&gt;where('name', 'like', 'T%')\n                -&gt;get();\n</code></pre>\n  <p>También puedes pasar un arreglo de condiciones a la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')-&gt;where([\n    ['status', '=', '1'],\n    ['subscribed', '&lt;&gt;', '1'],\n])-&gt;get();\n</code></pre>\n  <h4>Instrucciones or</h4>\n  <p>Puedes encadenar en conjunto las restricciones where así como añadir cláusulas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">or</span> a la consulta. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">orWhere</span> acepta los mismos argumentos que el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                    -&gt;where('votes', '&gt;', 100)\n                    -&gt;orWhere('name', 'John')\n                    -&gt;get();\n</code></pre>\n  <h4>Cláusulas where adicionales</h4>\n  <p><strong>whereBetween / orWhereBetween</strong></p>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereBetween</span> verifica que un valor de columna esté en un intervalo de valores:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                    -&gt;whereBetween('votes', [1, 100])-&gt;get();\n</code></pre>\n  <p><strong>whereNotBetween / orWhereNotBetween</strong></p>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereNotBetween</span> verifica que un valor de columna no esté en un intervalo de valores:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                    -&gt;whereNotBetween('votes', [1, 100])\n                    -&gt;get();\n</code></pre>\n  <p><strong>whereIn / whereNotIn / orWhereIn / orWhereNotIn</strong></p>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereIn</span> verifica que un valor de una columna dada esté contenido dentro del arreglo dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                    -&gt;whereIn('id', [1, 2, 3])\n                    -&gt;get();\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereNotIn</span> verifica que el valor de una columna dada <strong>no</strong> esté contenido en el arreglo dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                    -&gt;whereNotIn('id', [1, 2, 3])\n                    -&gt;get();\n</code></pre>\n  <p><strong>whereNull / whereNotNull / orWhereNull / orWhereNotNull</strong></p>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereNull</span> verifica que el valor de una columna dada sea <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">NULL</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                    -&gt;whereNull('updated_at')\n                    -&gt;get();\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereNotNull</span> verifica que el valor dado de una columna no sea\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">NULL</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                    -&gt;whereNotNull('updated_at')\n                    -&gt;get();\n</code></pre>\n  <p><strong>whereDate / whereMonth / whereDay / whereYear / whereTime</strong></p>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereDate</span> puede ser usado para comparar el valor de una columna contra una fecha:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                -&gt;whereDate('created_at', '2016-12-31')\n                -&gt;get();\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereMonth</span> puede ser usado para comparar el valor de una columna contra un mes específico de un año:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                -&gt;whereMonth('created_at', '12')\n                -&gt;get();\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereDay</span> puede ser usado para comparar el valor de una columna contra un día especíco de un mes:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                -&gt;whereDay('created_at', '31')\n                -&gt;get();\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereYear</span> puede ser usado para comparar el valor de una columna contra un año específico:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                -&gt;whereYear('created_at', '2016')\n                -&gt;get();\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereTime</span> puede ser usado para comparar el valor de una columna contra una hora específica:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                -&gt;whereTime('created_at', '=', '11:20')\n                -&gt;get();\n</code></pre>\n  <p><strong>whereColumn / orWhereColumn</strong></p>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereColumn</span> puede ser usado para verificar que dos columnas son iguales:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                -&gt;whereColumn('first_name', 'last_name')\n                -&gt;get();\n</code></pre>\n  <p>También puedes pasar un operador de comparación al método:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                -&gt;whereColumn('updated_at', '&gt;', 'created_at')\n                -&gt;get();\n</code></pre>\n  <p>Al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereColumn</span> también le puede ser pasado un arreglo de condiciones múltiples. Estas condiciones serán juntadas usando el operador <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">and</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                -&gt;whereColumn([\n                    ['first_name', '=', 'last_name'],\n                    ['updated_at', '&gt;', 'created_at']\n                ])-&gt;get();\n</code></pre>\n  <h3>Agrupando parámetros</h3>\n  <p>Algunas veces puedes necesitar crear cláusulas where más avanzadas como cláusulas \"where exists\" o grupos de parámetros anidados. El constructor de consultas de Laravel puede manejar éstos también. Para empezar, vamos a mirar un ejemplo de grupos de restricciones encerrado por llaves:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::table('users')\n            -&gt;where('name', '=', 'John')\n            -&gt;where(function (\\$query) {\n                \\$query-&gt;where('votes', '&gt;', 100)\n                        -&gt;orWhere('title', '=', 'Admin');\n            })\n            -&gt;get();\n</code></pre>\n  <p>Como puedes ver, al pasar una <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span> dentro del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">orWhere</span>, instruyes al constructor de consultas para empezar un grupo de restricción. La\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span> recibirá una instancia del constructor de consultas la cual puedes usar para establecer las restricciones que deberían estar contenidas dentro del grupo encerrado por llaves. El ejemplo de arriba producirá la siguiente instrucción SQL:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>select * from users where name = 'John' and (votes &gt; 100 or title = 'Admin')\n</code></pre>\n  <p>TIP</p>\n  <p>Siempre debes agrupar llamadas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">orWhere</span> para evitar comportamiento inesperado cuando se apliquen alcances globales.</p>\n  <h3>Cláusulas where exists</h3>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereExists</span> permite que escribas cláusulas de SQL <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereExists</span>. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereExists</span> acepta un argumento de tipo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span>, el cual recibirá una instancia del constructor de consultas permitiendo que definas la consulta que debería ser puesta dentro de la cláusula \"exists\":</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::table('users')\n            -&gt;whereExists(function (\\$query) {\n                \\$query-&gt;select(DB::raw(1))\n                        -&gt;from('orders')\n                        -&gt;whereRaw('orders.user_id = users.id');\n            })\n            -&gt;get();\n</code></pre>\n  <p>La consulta anterior producirá el siguiente SQL:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>select * from users\nwhere exists (\n    select 1 from orders where orders.user_id = users.id\n)\n</code></pre>\n  <h3>Cláusulas where JSON</h3>\n  <p>\n    Laravel también soporta consultar tipos de columna JSON en bases de datos que proporcionan soporte para tipos de columna JSON. Actualmente, esto incluye MySQL 5.7, PostgresSQL, SQL Server 2016, y SQLite 3.9.0 (con la extensión JSON1 ). Para consultar una columna JSON, usa el operador <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                -&gt;where('options-&gt;language', 'en')\n                -&gt;get();\n\\$users = DB::table('users')\n                -&gt;where('preferences-&gt;dining-&gt;meal', 'salad')\n                -&gt;get();\n</code></pre>\n  <p>Puedes usar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereJsonContains</span> para consultar arreglos JSON (sin soporte en SQLite):\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                -&gt;whereJsonContains('options-&gt;languages', 'en')\n                -&gt;get();\n</code></pre>\n  <p>MySQL and PostgreSQL proveen soporte para <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereJsonContains</span> con múltiples valores:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                -&gt;whereJsonContains('options-&gt;languages', ['en', 'de'])\n                -&gt;get();\n</code></pre>\n  <p>Puedes usar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereJsonLength</span> para consultar arreglos JSON por su longitud:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                -&gt;whereJsonLength('options-&gt;languages', 0)\n                -&gt;get();\n\\$users = DB::table('users')\n                -&gt;whereJsonLength('options-&gt;languages', '&gt;', 1)\n                -&gt;get();\n</code></pre>\n  <h2>Ordenamiento, agrupamiento, límite y desplazamiento</h2>\n  <h4>orderBy</h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">orderBy</span> permite que ordenes los resultados de la consulta por una columna dada. El primer argumento para el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">orderBy</span> debería ser la columna por la cual deseas ordenar, mientra que el segundo argumento controla la dirección del ordenamiento y puede ser <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">asc</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">desc</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                -&gt;orderBy('name', 'desc')\n                -&gt;get();\n</code></pre>\n  <h4>latest / oldest</h4>\n  <p>Los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">latest</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">oldest</span> te permiten ordenar fácilmente los resultados por fecha. Por defecto, el resultado será ordenado por la columna\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">created_at</span>. También, puedes pasar el nombre de la columna por la cual deseas ordenar:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = DB::table('users')\n                -&gt;latest()\n                -&gt;first();\n</code></pre>\n  <h4>inRandomOrder</h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">inRandomOrder</span> puede ser usado para ordenar los resultados de la consulta aletoriamente. Por ejemplo, puedes usar este método para obtener un usuario aleatorio:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$randomUser = DB::table('users')\n                -&gt;inRandomOrder()\n                -&gt;first();\n</code></pre>\n  <h4>groupBy / having</h4>\n  <p>Los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">groupBy</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">having</span> pueden ser usados para agrupar los resultados de la consulta. La forma que distingue el uso del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">having</span> es similar a la que tiene el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                -&gt;groupBy('account_id')\n                -&gt;having('account_id', '&gt;', 100)\n                -&gt;get();\n</code></pre>\n  <p>Puedes pasar argumentos múltiples al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">groupBy</span> para agrupar por múltiples columnas:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                -&gt;groupBy('first_name', 'status')\n                -&gt;having('account_id', '&gt;', 100)\n                -&gt;get();\n</code></pre>\n  <p>Para instrucciones <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">having</span> más avanzadas, echa un vistazo al método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">havingRaw</span>.</p>\n  <h4>skip / take</h4>\n  <p>Para limitar el número de resultados devueltos desde la consulta, o para avanzar un número dado de resultados en la consulta, puedes usar los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">skip</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">take</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')-&gt;skip(10)-&gt;take(5)-&gt;get();\n</code></pre>\n  <p>Alternativamente, puedes usar los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">limit</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">offset</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')\n                -&gt;offset(10)\n                -&gt;limit(5)\n                -&gt;get();\n</code></pre>\n  <h2>Cláusulas condicionales</h2>\n  <p>Algunas podrías querer que las cláusulas apliquen solamente a una consulta cuando alguna cosa más se cumple. Por ejemplo, puedes querer que solamente se aplique una instrucción\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where</span> si un valor de entrada dado está presente en la solicitud entrante. Puedes acompañar esto usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">when</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$role = \\$request-&gt;input('role');\n\\$users = DB::table('users')\n                -&gt;when(\\$role, function (\\$query) use (\\$role) {\n                    return \\$query-&gt;where('role_id', \\$role);\n                })\n                -&gt;get();\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">when</span> ejecuta solamente la Closure dada cuando el primer parámetro es\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>. Si el primer parámetro es <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>, la Closure no será ejecutada.\n  </p>\n  <p>Puedes pasar otra Closure como tercer parámetro del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">when</span>. Esta Closure se ejecutará si el primer parámetro se evalúa como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>. Para ilustrar cómo esta característica puede ser usada, la usaremos para configurar el ordenamiento predeterminado de una consulta:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$sortBy = null;\n\\$users = DB::table('users')\n                -&gt;when(\\$sortBy, function (\\$query) use (\\$sortBy) {\n                    return \\$query-&gt;orderBy(\\$sortBy);\n                }, function (\\$query) {\n                    return \\$query-&gt;orderBy('name');\n                })\n                -&gt;get();\n</code></pre>\n  <h2>Inserciones</h2>\n  <p>El constructor de consultas también proporciona un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">insert</span> para insertar registros dentro de la base de datos. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">insert</span> acepta un arreglo de nombres de columna y valores:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::table('users')-&gt;insert(\n    ['email' =&gt; 'john@example.com', 'votes' =&gt; 0]\n);\n</code></pre>\n  <p>Incluso puedes insertar varios registros dentro de la tabla con una sola llamada a\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">insert</span> pasando un arreglo de arreglos. Cada arreglo representa una fila a ser insertada dentro de la tabla:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::table('users')-&gt;insert([\n    ['email' =&gt; 'taylor@example.com', 'votes' =&gt; 0],\n    ['email' =&gt; 'dayle@example.com', 'votes' =&gt; 0]\n]);\n</code></pre>\n  <h4>IDs de auto-incremento</h4>\n  <p>Si la tabla tiene un id de auto-incremento, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">insertGetId</span> para insertar un registro y recibir el ID:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$id = DB::table('users')-&gt;insertGetId(\n    ['email' =&gt; 'john@example.com', 'votes' =&gt; 0]\n);\n</code></pre>\n  <p>Nota</p>\n  <p>Cuando estás usando PostgreSQL el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">insertGetId</span> espera que la columna de auto-incremento sea llamada <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">id</span>. Si prefieres obtener el ID con una \"secuencia\" distinta, puedes pasar el nombre de la columna como segundo parámetro del método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">insertGetId</span>.\n  </p>\n  <h2>Actualizaciones</h2>\n  <p>Además de insertar registros dentro de la base de datos, el constructor de consultas también puede actualizar registros existentes usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">update</span>. El método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">update</span>, como el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">insert</span>, acepta un arreglo de pares de columna y valor que contienen las columnas a ser actualizadas. Puedes restringir la consulta <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">update</span> usando cláusulas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::table('users')\n            -&gt;where('id', 1)\n            -&gt;update(['votes' =&gt; 1]);\n</code></pre>\n  <h4>Actualizar o insertar</h4>\n  <p>A veces es posible que desees actualizar un registro existente en la base de datos o crearlo si no existe un registro coincidente. En este escenario, se puede usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updateOrInsert</span>. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updateOrInsert</span> acepta dos argumentos: un arreglo de condiciones para encontrar el registro y un arreglo de columnas y pares de valores que contienen las columnas que se actualizarán.</p>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updateOrInsert</span> intentará primero buscar un registro de base de datos que coincida con los pares de columna y valor del primer argumento. Si el registro existe, se actualizará con los valores del segundo argumento. Si no se encuentra el registro, se insertará un nuevo registro con los atributos combinados de ambos argumentos:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::table('users')\n    -&gt;updateOrInsert(\n        ['email' =&gt; 'john@example.com', 'name' =&gt; 'John'],\n        ['votes' =&gt; '2']\n    );\n</code></pre>\n  <h2>Actualizando columnas JSON</h2>\n  <p>Cuando estamos actualizando una columna JSON, deberías usar la sintaxis <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;</span> para acceder a la clave apropiada en el objeto JSON. Esta operación es soportada solamente en MySQL 5.7+ y PostgreSQL 9.5+:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::table('users')\n            -&gt;where('id', 1)\n            -&gt;update(['options-&gt;enabled' =&gt; true]);\n</code></pre>\n  <h3>Incremento y decremento</h3>\n  <p>El constructor de consultas también proporciona métodos convenientes para incrementar o decrementar el valor de una columna dada. Esto es un atajo, que proporciona una interfaz más expresiva y concisa en comparación con la escritura manual de la declaración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">update</span>.\n  </p>\n  <p>Ambos métodos aceptan al menos un argumento: la columna a modificar. Un segundo argumento puede ser pasado opcionalmente para controlar la cantidad con la cual la columna debería ser incrementada o decrementada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::table('users')-&gt;increment('votes');\nDB::table('users')-&gt;increment('votes', 5);\nDB::table('users')-&gt;decrement('votes');\nDB::table('users')-&gt;decrement('votes', 5);\n</code></pre>\n  <p>También puedes especificar columnas adicionales para actualizar durante la operación:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::table('users')-&gt;increment('votes', 1, ['name' =&gt; 'John']);\n</code></pre>\n  <h2>Eliminaciones</h2>\n  <p>El constructor de consultas también puede ser usado para eliminar registros de la tabla por medio del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">delete</span>. Puedes restringir instrucciones <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">delete</span> al agregar cláusulas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where</span> antes de ejecutar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">delete</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::table('users')-&gt;delete();\nDB::table('users')-&gt;where('votes', '&gt;', 100)-&gt;delete();\n</code></pre>\n  <p>Si deseas truncar la tabla completa, lo cual remueve todas las filas y reinicia el ID de auto-incremento a cero, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">truncate</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::table('users')-&gt;truncate();\n</code></pre>\n  <h2>Bloqueo pesimista</h2>\n  <p>El constructor de consultas también incluye algunas funciones que ayudan a que hagas el \"bloqueo pesimista\" en tus instrucciones <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">select</span>. Para ejecutar la instrucción con un \"bloqueo compartido\", puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sharedLock</span> en una consulta. Un bloqueo compartido previene las filas seleccionadas para que no sean modificadas hasta que tu transacción se confirme:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::table('users')-&gt;where('votes', '&gt;', 100)-&gt;sharedLock()-&gt;get();\n</code></pre>\n  <p>Alternativamente, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">lockForUpdate</span>. Un bloqueo \"para actualización\" evita que las filas se modifiquen o que se seleccionen con otro bloqueo compartido:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::table('users')-&gt;where('votes', '&gt;', 100)-&gt;lockForUpdate()-&gt;get();\n</code></pre>\n  <p>Puedes usar los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dd</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dump</span> al construir una consulta para vaciar los enlaces de consulta y SQL. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dd</span> mostrará la información de depuración y luego dejará de ejecutar la solicitud. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dump</span> mostrará la información de depuración pero permitirá que la solicitud se siga ejecutando:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>DB::table('users')-&gt;where('votes', '&gt;', 100)-&gt;dd();\nDB::table('users')-&gt;where('votes', '&gt;', 100)-&gt;dump();\n</code></pre>\n</div>"
      },
      {
        "titulo": "Paginación",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Base de datos: Paginación</h1>\n  <ul>\n    <li>Introducción</li>\n    <li>\n      Uso básico\n      <ul>\n        <li>Paginando los resultados del constructor de consultas</li>\n        <li>Paginando los resultados de Eloquent</li>\n        <li>Creando un paginador manualmente</li>\n      </ul>\n    </li>\n    <li>\n      Mostrando los resultados de la paginación\n      <ul>\n        <li>Convirtiendo los resultados a JSON</li>\n      </ul>\n    </li>\n    <li>Personalizando la vista de la paginación</li>\n    <li>Métodos de instancia del paginador</li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>\n    En otros frameworks, la paginación puede ser muy difícil. El paginador de Laravel está integrado con el constructor de consultas y el ORM Eloquent , proporcionando una conveniente y fácil manera de usar paginación de resultados de forma predeterminada. El HTML generado por el paginador es compatible con el Framework de CSS Bootstrap\n    <outboundlink></outboundlink>\n    .\n  </p>\n  <h2>Uso básico</h2>\n  <h3>Paginando los resultados del constructor de consultas</h3>\n  <p>\n    Hay varias formas de paginar los elementos. La más simple es usando el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">paginate</span> en el constructor de consultas o una Consulta de Eloquent . El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">paginate</span> se encarga automáticamente de la configuración del límite y desplazamiento apropiado de la página actual que está siendo vista por el usuario. Por defecto, la página actual es detectada por el valor del argumento de cadena de consulta <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">page</span> en la solicitud HTTP. Este valor es detectado automáticamente por Laravel y también es insertado automáticamente dentro de los enlaces generados por el paginador.\n  </p>\n  <p>En este ejemplo, el único argumento pasado al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">paginate</span> es el número de elementos que prefieres que sean mostrados \"por página\". En este caso, vamos a especificar que nos gustaría mostrar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">15</span> elementos por página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Support\\Facades\\DB;\nuse App\\Http\\Controllers\\Controller;\nclass UserController extends Controller\n{\n    /**\n    * Show all of the users for the application.\n    *\n    * @return Response\n    */\n    public function index()\n    {\n        \\$users = DB::table('users')-&gt;paginate(15);\n        return view('user.index', ['users' =&gt; \\$users]);\n    }\n}\n</code></pre>\n  <p>Nota</p>\n  <p>Actualmente, las operaciones de paginación que usan una instrucción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">GroupBy</span> no pueden ser ejecutados eficientemente por Laravel. Si necesitas usar una cláusula\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">GroupBy</span> con un conjunto de resultados paginados, es recomendable que consultes la base de datos y crees un paginador manualmente.</p>\n  <h4>Paginación sencilla</h4>\n  <p>Si necesitas mostrar solamente enlaces \"Siguiente\" y \"Anterior\" en tu vista de paginación, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">simplePaginate</span> para ejecutar una consulta más eficiente. Esto es muy útil para grandes colecciones de datos cuando no necesitas mostrar un enlace para cada número de página al momento de renderizar tu vista.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = DB::table('users')-&gt;simplePaginate(15);\n</code></pre>\n  <h3>Paginando resultados de eloquent</h3>\n  <p>También puedes paginar consultas de Eloquent. En este ejemplo, paginaremos el modelo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span> con <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">15</span> elementos por página. Como puedes ver, la sintaxis es casi idéntica a la paginación de los resultados del constructor de consultas.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = App\\User::paginate(15);\n</code></pre>\n  <p>Puedes ejecutar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">paginate</span> después de configurar otras restricciones en la consulta, tal como las cláusulas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = User::where('votes', '&gt;', 100)-&gt;paginate(15);\n</code></pre>\n  <p>También puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">simplePaginate</span> al momento de paginar los modelos de Eloquent.\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = User::where('votes', '&gt;', 100)-&gt;simplePaginate(15);\n</code></pre>\n  <h3>Creando un paginador manualmente</h3>\n  <p>Algunas veces puedes desear crear una instancia de paginación manualmente, pasándole un arreglo de elementos. Puedes hacer eso al crear una instancia de la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Pagination\\Paginator</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Pagination\\LengthAwarePaginator</span>, dependiendo de tus necesidades.</p>\n  <p>La clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Paginator</span> no necesita conocer el número total de elementos en el conjunto de resultados; sin embargo, debido a esto, la clase no tiene métodos para obtener el índice de la última página. La clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">LengthAwarePaginator</span> acepta casi los mismos argumentos que la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Paginator</span>; sin embargo, si requiere una cuenta del total del número de elementos en el conjunto de resultados.</p>\n  <p>En otras palabras, la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Paginator</span> corresponde al método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">simplePaginate</span> en el constructor de consultas y Eloquent, mientras la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">LengthAwarePaginator</span> corresponde al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">paginate</span>.</p>\n  <p>Nota</p>\n  <p>\n    Cuando creas manualmente una instancia del paginador, deberías manualmente \"recortar en partes\" el arreglo de resultados que pasas al paginador. Si estás inseguro de cómo hacer esto, inspecciona la función de PHP array_slice .\n  </p>\n  <h2>Mostrando los resultados de la paginación</h2>\n  <p>Cuando ejecutas el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">paginate</span>, recibirás una instancia de la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Pagination\\LengthAwarePaginator</span>. Cuando ejecutas el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">simplePaginate</span>, recibirás una instancia de la clase\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Pagination\\Paginator</span>. Estos objetos proporcionan varios métodos que afectan la presentación del conjunto de resultados. Además de estos métodos helpers, las instancias del paginador son iteradoras, es decir, pueden ser recorridas por un ciclo repetitivo igual que un arreglo. Así, una vez que has obtenido los resultados, puedes mostrar los resultados y renderizar los enlaces de página usando Blade:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;div class=\"container\"&gt;\n    @foreach (\\$users as \\$user)\n        {{ \\$user-&gt;name }}\n    @endforeach\n&lt;/div&gt;\n{{ \\$users-&gt;links() }}\n</code></pre>\n  <p>\n    El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">links</span> renderizará los enlaces para el resto de las páginas en el conjunto de resultados. Cada uno de estos enlaces ya contendrá la variable de cadena de consulta\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">page</span> apropiada. Recuerda, el HTML generado por el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">links</span> es compatible con el Framework de CSS Boostrap .\n  </p>\n  <h4>Personalizando la URI del paginador</h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withPath</span> permite personalizar la URI usada por el paginador al momento de generar enlaces. Por ejemplo, si quieres que el paginador genere enlaces como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">http://example.com/custom/url?page=N</span>, deberías pasar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">custom/url</span> al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withPath</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Route::get('users', function () {\n    \\$users = App\\User::paginate(15);\n    \\$users-&gt;withPath('custom/url');\n    //\n});\n</code></pre>\n  <h4>Agregando enlaces de paginación</h4>\n  <p>Puedes agregar la cadena de consulta a los enlaces de paginación usando el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">appends</span>. Por ejemplo, para agregar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sort=votes</span> a cada enlace de paginación, deberías hacer la siguiente ejecución del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">appends</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>{{ \\$users-&gt;appends(['sort' =&gt; 'votes'])-&gt;links() }}\n</code></pre>\n  <p>Si deseas agregar un \"fragmento con el símbolo numeral <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">#</span>\" a las URLs del paginador, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fragment</span>. Por ejemplo, para agregar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">#foo</span> al final de cada enlace de paginación, haz la siguiente ejecución del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fragment</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>{{ \\$users-&gt;fragment('foo')-&gt;links() }}\n</code></pre>\n  <h4>Ajustando la ventana de enlace de paginación</h4>\n  <p>Puedes controlar cuántos enlaces adicionales son mostrados en cada lado de la \"ventana\" de la URL del paginador. Por defecto, tres enlaces son mostrados en cada lado de los enlaces primarios del paginador. Sin embargo, puedes controlar este número usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">onEachSide</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>{{ \\$users-&gt;onEachSide(5)-&gt;links() }}\n</code></pre>\n  <h3>Convirtiendo resultados a JSON</h3>\n  <p>Las clases resultantes del paginador de Laravel implementan la interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Contracts\\Support\\Jsonable</span> y exponen el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toJson</span>, así es muy fácil convertir los resultados de tu paginación a JSON. También puedes convertir una instancia del paginador al devolverlo desde una ruta o acción de controlador:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Route::get('users', function () {\n    return App\\User::paginate();\n});\n</code></pre>\n  <p>El JSON devuelto por el paginador incluirá meta información tal como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">total</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">current_page</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">last_page</span> y más. Los objetos de resultados reales estarán disponibles por medio de la clave <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">data</span> en el arreglo JSON. Aquí está un ejemplo del JSON creado al regresar una instancia del paginador desde una ruta:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>{\n    \"total\": 50,\n    \"per_page\": 15,\n    \"current_page\": 1,\n    \"last_page\": 4,\n    \"first_page_url\": \"http://laravel.app?page=1\",\n    \"last_page_url\": \"http://laravel.app?page=4\",\n    \"next_page_url\": \"http://laravel.app?page=2\",\n    \"prev_page_url\": null,\n    \"path\": \"http://laravel.app\",\n    \"from\": 1,\n    \"to\": 15,\n    \"data\":[\n        {\n            // Result Object\n        },\n        {\n            // Result Object\n        }\n    ]\n}\n</code></pre>\n  <h2>Personalizando la vista de la paginación</h2>\n  <p>De forma predeterminada, las vistas que son renderizadas para mostrar los enlaces de paginación son compatibles con el framework de CSS Bootstrap. Sin embargo, si no estás usando Bootstrap, eres libre de definir tus propias vistas para renderizar esos enlaces. Al momento de ejecutar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">links</span> en una instancia del paginador, pasa el nombre de la vista como primer argumento del método:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>{{ \\$paginator-&gt;links('view.name') }}\n// Passing data to the view...\n{{ \\$paginator-&gt;links('view.name', ['foo' =&gt; 'bar']) }}\n</code></pre>\n  <p>Sin embargo, la forma más fácil de personalizar las vistas de paginación es exportándolas a tu directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views/vendor</span> usando el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">vendor:publish</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan vendor:publish --tag=laravel-pagination\n</code></pre>\n  <p>Este comando ubicará las vistas dentro del directorio\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/views/vendor/pagination</span>. El archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">default.blade.php</span> dentro de este directorio corresponde a la vista de paginación predeterminada. Edita este archivo para modificar el HTML de paginación.</p>\n  <p>Si quieres designar un archivo distinto como la vista de paginación por defecto, se pueden usar los métodos de paginador <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">defaultView</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">defaultSimpleView</span> en tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AppServiceProvider</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Illuminate\\Pagination\\Paginator;\npublic function boot()\n{\n    Paginator::defaultView('view-name');\n    Paginator::defaultSimpleView('view-name');\n}\n</code></pre>\n  <h2>Métodos de la instancia paginadora</h2>\n  <p>Cada instancia del paginador proporciona información de paginación adicional por medio de los siguientes métodos:</p>\n  <table style=\"border: 1px solid #CFD8DC;\">\n    <thead>\n    <tr>\n      <th>Método</th>\n      <th>Descripción</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$results-&gt;count()</span></td>\n      <td>Obtiene el número de elementos para la página actual.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$results-&gt;currentPage()</span></td>\n      <td>Obtiene el número de la página actual.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$results-&gt;firstItem()</span></td>\n      <td>Obtiene el número de resultado del primer elemento en los resultados.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$results-&gt;getOptions()</span></td>\n      <td>Obtiene las opciones del paginador.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$results-&gt;getUrlRange(\\$start, \\$end)</span></td>\n      <td>Crea un rango de URLs de paginación.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$results-&gt;hasMorePages()</span></td>\n      <td>Determina si hay suficientes elementos para dividir en varias páginas.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$results-&gt;items()</span></td>\n      <td>Obtener los elementos de la página actual.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$results-&gt;lastItem()</span></td>\n      <td>Obtiene el número de resultado del último elemento en los resultados.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$results-&gt;lastPage()</span></td>\n      <td>Obtiene el número de página de la última página disponible. (No disponible cuando se utiliza <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">simplePaginate</span>).\n      </td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$results-&gt;nextPageUrl()</span></td>\n      <td>Obtiene la URL para la próxima página.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$results-&gt;onFirstPage()</span></td>\n      <td>Determine si el paginador está en la primera página.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$results-&gt;perPage()</span></td>\n      <td>El número de elementos a mostrar por página.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$results-&gt;previousPageUrl()</span></td>\n      <td>Obtiene la URL de la página anterior.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$results-&gt;total()</span></td>\n      <td>Determine el número total de elementos coincidentes en el almacén de datos. (No disponible cuando se utiliza <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">simplePaginate</span>).\n      </td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$results-&gt;url(\\$page)</span></td>\n      <td>Obtiene la URL para un número de página dado.</td>\n    </tr>\n    </tbody>\n  </table>\n</div>"
      },
      {
        "titulo": "Migraciones",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Base de datos: Migraciones</h1>\n  <ul>\n    <li>Introducción</li>\n    <li>Generando migraciones</li>\n    <li>Estructura de migración</li>\n    <li>\n      Ejecutando migraciones\n      <ul>\n        <li>Revertir migraciones</li>\n      </ul>\n    </li>\n    <li>\n      Tablas\n      <ul>\n        <li>Creando tablas</li>\n        <li>Renombrando / Eliminando tablas</li>\n      </ul>\n    </li>\n    <li>\n      Columnas\n      <ul>\n        <li>Creando columnas</li>\n        <li>Modificadores de columna</li>\n        <li>Modificando columnas</li>\n        <li>Eliminando columnas</li>\n      </ul>\n    </li>\n    <li>\n      Índices\n      <ul>\n        <li>Creación de indices</li>\n        <li>Renombrando indices</li>\n        <li>Eliminando indices</li>\n        <li>Restricciones de clave foránea</li>\n      </ul>\n    </li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>Las migraciones son como el control de versión para tu base de datos, permiten que tu equipo modifique y comparta fácilmente el esquema de base de datos de la aplicación. Las migraciones son emparejadas típicamente con el constructor de esquema de Laravel para construir fácilmente el esquema de base de datos de tu aplicación. Si inclusive has tenido que decirle a un miembro de equipo que agregue una columna manualmente a sus esquemas de bases de datos local, has encarado el problema que solucionan las migraciones de base de datos.</p>\n  <p>\n    La clase facade\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Schema</span> de Laravel proporciona soporte de base de datos orientado a la programación orientada a objetos para la creación y manipulación de tablas a través de todos los sistemas de bases de datos soportados por Laravel.\n  </p>\n  <h2>Generando migraciones</h2>\n  <p>\n    Para crear una migración, usa el comando Artisan\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:migration</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan make:migration create_users_table\n</code></pre>\n  <p>La nueva migración estará ubicada en tu directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database/migrations</span>. Cada nombre de archivo de migración contiene una marca de tiempo la cual permite que Laravel determine el orden de las migraciones.</p>\n  <p>Las opciones <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--table</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--create</span> también pueden ser usadas para indicar el nombre de la tabla y si la migración estará creando una nueva tabla. Estas opciones rellenan previamente el archivo stub de migración generado con la tabla especificada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan make:migration create_users_table --create=users\nphp artisan make:migration add_votes_to_users_table --table=users\n</code></pre>\n  <p>Si prefieres especificar una ruta de directorio de salida personalizada para la migración generada, puedes usar la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--path</span> al momento de ejecutar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:migration</span>. La ruta de directorio dada debe ser relativa a la ruta de directorio base de tu aplicación.</p>\n  <h2>Estructura de migración</h2>\n  <p>Una clase de migración contiene dos métodos: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">up</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">down</span>. El método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">up</span> es usado para agregar nuevas tablas, columnas, o índices para tu base de datos, mientras el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">down</span> debería revertir las operaciones ejecutadas por el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">up</span>.</p>\n  <p>Dentro de ambos métodos puedes usar el constructor de esquema de Laravel para crear y modificar expresivamente las tablas. Para aprender sobre todos los métodos disponibles en el constructor\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Schema</span>, inspecciona su documentación. Por ejemplo, este ejemplo de migración crea una tabla <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">flights</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\nclass CreateFlightsTable extends Migration\n{\n    /**\n    * Run the migrations.\n    *\n    * @return void\n    */\n    public function up()\n    {\n        Schema::create('flights', function (Blueprint \\$table) {\n            \\$table-&gt;bigIncrements('id');\n            \\$table-&gt;string('name');\n            \\$table-&gt;string('airline');\n            \\$table-&gt;timestamps();\n        });\n    }\n    /**\n    * Reverse the migrations.\n    *\n    * @return void\n    */\n    public function down()\n    {\n        Schema::drop('flights');\n    }\n}\n</code></pre>\n  <h2>Ejecutando migraciones</h2>\n  <p>Para ejecutar todas tus maravillosas migraciones, ejecuta el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">migrate</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan migrate\n</code></pre>\n  <p>Nota</p>\n  <p>\n    Si estás usando La máquina virtual de Homestead , deberías ejecutar este comando desde dentro de tu máquina virtual.\n  </p>\n  <h4>Forzando las migraciones para ejecutar en producción</h4>\n  <p>Algunas operaciones de migración son destructivas, lo que significa que pueden causar que pierdas tus datos. Con el propósito de protegerte de ejecutar estos comandos contra tu base de datos de producción, recibirás un mensaje de confirmación antes que los comandos sean ejecutados. Para forzar que los comandos se ejecuten sin retardo, usa el indicador <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--force</span>.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan migrate --force\n</code></pre>\n  <h3>Revertir migraciones</h3>\n  <p>Para revertir la operación de migración más reciente, puedes usar el comando\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">rollback</span>. Este comando reversa el último \"lote\" de migraciones, los cuales pueden incluir archivos de migración múltiples.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan migrate:rollback\n</code></pre>\n  <p>Puedes revertir un número limitado de migraciones proporcionando la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">step</span> al comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">rollback</span>. Por ejemplo, el siguiente comando revertirá los cinco \"lotes\" de migraciones más recientes:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan migrate:rollback --step=5\n</code></pre>\n  <p>El comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">migrate:reset</span> revertirá todas las migraciones de tu aplicación:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan migrate:reset\n</code></pre>\n  <h4>rollback &amp; migrate en un único comando</h4>\n  <p>El comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">migrate:refresh</span> revertirá todas tus migraciones y después ejecutará el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">migrate</span>. Este comando vuelve a crear efectivamente tu base de datos entera:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan migrate:refresh\n// Refresh the database and run all database seeds...\nphp artisan migrate:refresh --seed\n</code></pre>\n  <p>Puedes revertir y volver a migrar un número limitado de migraciones proporcionando la opción\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">step</span> al comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">refresh</span>. Por ejemplo, el siguiente comando revertirá y volverá a migrar las cinco migraciones más recientes:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan migrate:refresh --step=5\n</code></pre>\n  <h4>Eliminando todas las tablas y migrar</h4>\n  <p>El comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">migrate:fresh</span> eliminará todas las tablas de la base de datos y después ejecutará el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">migrate</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan migrate:fresh\nphp artisan migrate:fresh --seed\n</code></pre>\n  <h2>Tablas</h2>\n  <h3>Creando tablas</h3>\n  <p>Para crear una nueva tabla en la base de datos, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span> en la clase facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Schema</span>. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span> acepta dos argumentos. El primero es el nombre de la tabla, mientras que el segundo es una <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span> la cual recibe un objeto de la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Blueprint</span> que puede ser usado para definir la nueva tabla:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Schema::create('users', function (Blueprint \\$table) {\n    \\$table-&gt;bigIncrements('id');\n});\n</code></pre>\n  <p>Al momento de crear la tabla, puedes usar cualquiera de los métodos de columna del constructor de esquemas para definir las columnas de la tabla.</p>\n  <h4>Inspeccionando la tabla / Existencia de columna</h4>\n  <p>Puedes inspeccionar fácilmente la existencia de una tabla o columna usando los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hasTable</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hasColumn</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>if (Schema::hasTable('users')) {\n    //\n}\nif (Schema::hasColumn('users', 'email')) {\n    //\n}\n</code></pre>\n  <h4>Conexión de base de datos &amp; Opciones de tabla</h4>\n  <p>Si quieres ejecutar una operación de esquema en una conexión de base de datos que no es tu conexión predeterminada, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">connection</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Schema::connection('foo')-&gt;create('users', function (Blueprint \\$table) {\n    \\$table-&gt;bigIncrements('id');\n});\n</code></pre>\n  <p>Puedes usar los siguientes comandos en el constructor de esquema para definir las opciones de tabla:\n  </p>\n  <table style=\"border: 1px solid #CFD8DC;\">\n    <thead>\n    <tr>\n      <th>Comando</th>\n      <th>Descripción</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;engine = 'InnoDB';</span></td>\n      <td>Especifica el motor de almacenamiento de la tabla. (Sólo en MySQL).</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;charset = 'utf8';</span></td>\n      <td>Especifica un conjunto de caracteres. (Sólo en MySQL).</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;collation = 'utf8_unispan_ci';</span></td>\n      <td>Especifica un orden predeterminado para la tabla. (Sólo en MySQL)</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;temporary();</span></td>\n      <td>Crea una tabla temporal (excepto en SQL Server).</td>\n    </tr>\n    </tbody>\n  </table>\n  <h3>Renombrando / Eliminando tablas</h3>\n  <p>Para renombrar una tabla de base de datos existente, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">rename</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Schema::rename(\\$from, \\$to);\n</code></pre>\n  <p>Para eliminar una tabla existente, puedes usar los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">drop</span> o\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dropIfExists</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Schema::drop('users');\nSchema::dropIfExists('users');\n</code></pre>\n  <h4>Renombrando tablas con claves foráneas</h4>\n  <p>Antes de renombrar una tabla, deberías verificar que cualquiera de las restricciones de clave foránea en la tabla tenga un nombre explícito en tus archivos de migración en caso de permitir que Laravel asigne un nombre basado en la convención. De otra manera, el nombre de restricción de clave foránea se referirá al nombre que tenía la tabla.</p>\n  <h2>Columnas</h2>\n  <h3>Creando columnas</h3>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">table</span> en la clase facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Schema</span> puede ser usado para actualizar tablas existentes. Igual que el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span> acepta dos argumentos: el nombre de la tabla y una <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span> que recibe una instancia de la clase\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Blueprint</span> que puedes usar para agregar columnas a la tabla:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Schema::table('users', function (Blueprint \\$table) {\n    \\$table-&gt;string('email');\n});\n</code></pre>\n  <h4>Tipos de columna permitidos</h4>\n  <p>El constructor de esquema contiene una variedad de tipos de columna que puedes especificar al momento de construir tus tablas:</p>\n  <table style=\"border: 1px solid #CFD8DC;\">\n    <thead>\n    <tr>\n      <th>Comando</th>\n      <th>Descripción</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;bigIncrements('id');</span></td>\n      <td>Tipo de columna equivalente a Auto-incremento UNSIGNED BIGINT (clave primaria).</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;bigInteger('votes');</span></td>\n      <td>Tipo de columna equivalente a BIGINT equivalent.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;binary('data');</span></td>\n      <td>Tipo de columna equivalente a BLOB.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;boolean('confirmed');</span></td>\n      <td>Tipo de columna equivalente a BOOLEAN.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;char('name', 100);</span></td>\n      <td>Tipo de columna equivalente a CHAR con una longitud opcional.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;date('created_at');</span></td>\n      <td>Tipo de columna equivalente a DATE.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;dateTime('created_at');</span></td>\n      <td>Tipo de columna equivalente a DATETIME.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;dateTimeTz('created_at');</span></td>\n      <td>Tipo de columna equivalente a DATETIME (con hora de la zona).</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;decimal('amount', 8, 2);</span></td>\n      <td>Tipo de columna equivalente a DECIMAL con una precisión (el total de dígitos) y escala de dígitos decimales.\n      </td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;double('amount', 8, 2);</span></td>\n      <td>Tipo de columna equivalente a DOUBLE con una precisión (el total de dígitos) y escala de dígitos decimales.\n      </td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;enum('level', ['easy', 'hard']);</span></td>\n      <td>Tipo de columna equivalente a ENUM.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;float('amount', 8, 2);</span></td>\n      <td>Tipo de columna equivalente a FLOAT con una precisión (el total de dígitos) y escala de dígitos decimales.\n      </td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;geometry('positions');</span></td>\n      <td>Tipo de columna equivalente a GEOMETRY.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;geometryCollection('positions');</span></td>\n      <td>Tipo de columna equivalente a GEOMETRYCOLLECTION.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;increments('id');</span></td>\n      <td>Tipo de columna equivalente a Auto-incremento UNSIGNED INTEGER (clave primaria).</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;integer('votes');</span></td>\n      <td>Tipo de columna equivalente a INTEGER.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;ipAddress('visitor');</span></td>\n      <td>Tipo de columna equivalente a dirección IP.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;json('options');</span></td>\n      <td>Tipo de columna equivalente a JSON.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;jsonb('options');</span></td>\n      <td>Tipo de columna equivalente a JSONB.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;lineString('positions');</span></td>\n      <td>Tipo de columna equivalente a LINESTRING.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;longText('description');</span></td>\n      <td>Tipo de columna equivalente a LONGTEXT.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;macAddress('device');</span></td>\n      <td>Tipo de columna equivalente a dirección MAC.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;mediumIncrements('id');</span></td>\n      <td>Tipo de columna equivalente a Auto-incremento UNSIGNED MEDIUMINT (clave primaria).</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;mediumInteger('votes');</span></td>\n      <td>Tipo de columna equivalente a MEDIUMINT.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;mediumText('description');</span></td>\n      <td>Tipo de columna equivalente a MEDIUMTEXT.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;morphs('taggable');</span></td>\n      <td>Agrega los tipos de columna equivalente a UNSIGNED INTEGER <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">taggable_id</span> y VARCHAR <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">taggable_type</span>.\n      </td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;multiLineString('positions');</span></td>\n      <td>Tipo de columna equivalente a MULTILINESTRING.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;multiPoint('positions');</span></td>\n      <td>Tipo de columna equivalente a MULTIPOINT.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;multiPolygon('positions');</span></td>\n      <td>Tipo de columna equivalente a MULTIPOLYGON.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;nullableMorphs('taggable');</span></td>\n      <td>Permite que la columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">morphs()</span> acepte una versión de valor nulo.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;nullableTimestamps();</span></td>\n      <td>Método Alias de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">timestamps()</span>.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;point('position');</span></td>\n      <td>Tipo de columna equivalente a POINT.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;polygon('positions');</span></td>\n      <td>Tipo de columna equivalente a POLYGON.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;rememberToken();</span></td>\n      <td>Permite nulos en el tipo de columna equivalente a VARCHAR(100)\n        <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">remember_token</span>.\n      </td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;set('flavors', ['strawberry', 'vanilla']);</span></td>\n      <td>Establece una columna equivalente.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;smallIncrements('id');</span></td>\n      <td>Tipo de columna equivalente a Auto-incremento UNSIGNED SMALLINT (clave primaria).</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;smallInteger('votes');</span></td>\n      <td>Tipo de columna equivalente a SMALLINT.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;softDeletes();</span></td>\n      <td>Permite nulos en el tipo de columna equivalente a TIMESTAMP <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">deleted_at</span> para eliminaciones.\n      </td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;softDeletesTz();</span></td>\n      <td>Permite nulos en el tipo de columna equivalente a TIMESTAMP <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">deleted_at</span> (con la hora de la zona) para eliminaciones.\n      </td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;string('name', 100);</span></td>\n      <td>Tipo de columna equivalente a VARCHAR con una longitud opcional.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;text('description');</span></td>\n      <td>Tipo de columna equivalente a TEXT.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;time('sunrise');</span></td>\n      <td>Tipo de columna equivalente a TIME.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;timeTz('sunrise');</span></td>\n      <td>Tipo de columna equivalente a TIME (con la hora de la zona).</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;timestamp('added_on');</span></td>\n      <td>Tipo de columna equivalente a TIMESTAMP.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;timestampTz('added_on');</span></td>\n      <td>Tipo de columna equivalente a TIMESTAMP (con la hora de la zona).</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;timestamps();</span></td>\n      <td>Permite nulos en las columnas equivalentes TIMESTAMP <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">created_at</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updated_at</span>.\n      </td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;timestampsTz();</span></td>\n      <td>Permite nulos en las columnas equivalentes TIMESTAMP <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">created_at</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updated_at</span> (con la hora de la zona).\n      </td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;tinyIncrements('id');</span></td>\n      <td>Tipo de columna equivalente a Auto-incremento UNSIGNED TINYINT (clave primaria).</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;tinyInteger('votes');</span></td>\n      <td>Tipo de columna equivalente a TINYINT.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;unsignedBigInteger('votes');</span></td>\n      <td>Tipo de columna equivalente a UNSIGNED BIGINT.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;unsignedDecimal('amount', 8, 2);</span></td>\n      <td>Tipo de columna equivalente a UNSIGNED DECIMAL con una precisión (total de dígitos) escala (dígitos decimales).\n      </td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;unsignedInteger('votes');</span></td>\n      <td>Tipo de columna equivalente a UNSIGNED INTEGER.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;unsignedMediumInteger('votes');</span></td>\n      <td>Tipo de columna equivalente a UNSIGNED MEDIUMINT.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;unsignedSmallInteger('votes');</span></td>\n      <td>Tipo de columna equivalente a UNSIGNED SMALLINT.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;unsignedTinyInteger('votes');</span></td>\n      <td>Tipo de columna equivalente a UNSIGNED TINYINT.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;uuid('id');</span></td>\n      <td>Tipo de columna equivalente a UUID.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;year('birth_year');</span></td>\n      <td>Tipo de columna equivalente a YEAR.</td>\n    </tr>\n    </tbody>\n  </table>\n  <h3>Modificadores de columna</h3>\n  <p>Además de los tipos de columna listados anteriormente, hay varios \"modificadores\" de columna que puedes usar al momento de agregar una columna a la tabla de base de datos. Por ejemplo, para hacer que la columna \"acepte valores nulos\", puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">nullable</span>.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Schema::table('users', function (Blueprint \\$table) {\n    \\$table-&gt;string('email')-&gt;nullable();\n});\n</code></pre>\n  <p>Debajo está una lista con todos los modificadores de columna disponibles. Esta lista no incluye los modificadores de índice:</p>\n  <table style=\"border: 1px solid #CFD8DC;\">\n    <thead>\n    <tr>\n      <th>Modificador</th>\n      <th>Descripción</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;after('column')</span></td>\n      <td>Coloca la columna \"después de\" otra columna (MySQL)</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;autoIncrement()</span></td>\n      <td>Establece las columnas tipo INTEGER como auto-incremento (clave primaria)</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;charset('utf8')</span></td>\n      <td>Especifica un conjunto de caracteres para la columna (MySQL)</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;collation('utf8_unispan_ci')</span></td>\n      <td>Especifica un ordenamiento para la columna (MySQL/SQL Server)</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;comment('my comment')</span></td>\n      <td>Agrega un comentario a una columna (MySQL/PostgreSQL)</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;default(\\$value)</span></td>\n      <td>Especifica un valor \"predeterminado\" para la columna</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;first()</span></td>\n      <td>Coloca la columna al \"principio\" en la tabla (MySQL)</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;nullable(\\$value = true)</span></td>\n      <td>Permite que valores NULL (por defecto) sean insertados dentro de la columna</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;storedAs(\\$expression)</span></td>\n      <td>Crea una columna almacenada generada por la expresión (MySQL)</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;unsigned()</span></td>\n      <td>Establece las columnas tipo INTEGER como UNSIGNED (MySQL)</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;useCurrent()</span></td>\n      <td>Establece las columnas tipo TIMESTAMP para usar CURRENT_TIMESTAMP como valor predeterminado\n      </td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;virtualAs(\\$expression)</span></td>\n      <td>Crea una columna virtual generada por la expresión (MySQL)</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;generatedAs(\\$expression)</span></td>\n      <td>Crea una columna de identidad con opciones de secuencia especificadas (PostgreSQL)</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-&gt;always()</span></td>\n      <td>Define la prioridad de los valores de secuencia sobre la entrada para una columna de identidad (PostgreSQL)\n      </td>\n    </tr>\n    </tbody>\n  </table>\n  <h3>Modificando columnas</h3>\n  <h4>Prerequisitos</h4>\n  <p>Antes de modificar una columna, asegúrate de agregar la dependencia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">doctrine/dbal</span> a tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">composer.json</span>. La biblioteca DBAL de Doctrine es usada para determinar el estado actual de la columna y crear las consultas SQL necesarias para hacer los ajustes especificados a la columna:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>composer require doctrine/dbal\n</code></pre>\n  <h4>Actualizando los atributos de columna</h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">change</span> permite que modifiques algunos tipos de columna existentes a un nuevo tipo o modifiques los atributos de la columna. Por ejemplo, puedes querer aumentar el tamaño de una columna tipo cadena. Para ver el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">change</span> en acción, vamos a aumentar el tamaño de la columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">name</span> de 25 a 50 caracteres:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Schema::table('users', function (Blueprint \\$table) {\n    \\$table-&gt;string('name', 50)-&gt;change();\n});\n</code></pre>\n  <p>También podríamos modificar una columna para que acepte valores nulos:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Schema::table('users', function (Blueprint \\$table) {\n    \\$table-&gt;string('name', 50)-&gt;nullable()-&gt;change();\n});\n</code></pre>\n  <p>Nota</p>\n  <p>Solamente los siguientes tipos de columna pueden ser \"cambiados\": bigInteger, binary, boolean, date, dateTime, dateTimeTz, decimal, integer, json, longText, mediumText, smallInteger, string, text, time, unsignedBigInteger, unsignedInteger y unsignedSmallInteger.</p>\n  <h4>Renombrando columnas</h4>\n  <p>Para renombrar una columna, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">renameColumn</span> en el constructor de esquemas. Antes de renombrar una columna, asegúrate de agregar la dependencia\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">doctrine/dbal</span> a tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">composer.json</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Schema::table('users', function (Blueprint \\$table) {\n    \\$table-&gt;renameColumn('from', 'to');\n});\n</code></pre>\n  <p>Nota</p>\n  <p>Renombrar alguna columna en una tabla que también tiene una columna de tipo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">enum</span> no es soportado actualmente.</p>\n  <h3>Eliminando columnas</h3>\n  <p>Para eliminar una columna, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dropColumn</span> en el constructor de esquemas. Antes de eliminar columnas de una base de datos SQLite, necesitarás agregar la dependencia\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">doctrine/dbal</span> a tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">composer.json</span> y ejecutar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">composer\n    update</span> en tu terminal para instalar la biblioteca:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Schema::table('users', function (Blueprint \\$table) {\n    \\$table-&gt;dropColumn('votes');\n});\n</code></pre>\n  <p>Puedes eliminar múltiples columnas de una tabla al pasar un arreglo de nombres de columna al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dropColumn</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Schema::table('users', function (Blueprint \\$table) {\n    \\$table-&gt;dropColumn(['votes', 'avatar', 'location']);\n});\n</code></pre>\n  <p>Nota</p>\n  <p>Eliminar o modificar múltiples columnas dentro de una sola migración al momento de usar una base de datos SQLite no está soportado.</p>\n  <h4>Alias de comandos disponibles</h4>\n  <table style=\"border: 1px solid #CFD8DC;\">\n    <thead>\n    <tr>\n      <th>Comando</th>\n      <th>Descripción</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;dropMorphs('morphable');</span></td>\n      <td>Elimina las columnas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">morphable_id</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">morphable_type</span>.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;dropRememberToken();</span></td>\n      <td>Eliminar la columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">remember_token</span>.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;dropSoftDeletes();</span></td>\n      <td>Eliminar la columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">deleted_at</span>.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;dropSoftDeletesTz();</span></td>\n      <td>Alias del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dropSoftDeletes()</span>.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;dropTimestamps();</span></td>\n      <td>Eliminar las columnas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">created_at</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updated_at</span>.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;dropTimestampsTz();</span></td>\n      <td>Alias del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dropTimestamps()</span>.</td>\n    </tr>\n    </tbody>\n  </table>\n  <h2>Indices</h2>\n  <h3>Creando indices</h3>\n  <p>El constructor de esquemas soporta varios tipos de índices. Primero, veamos un ejemplo que especifica que los valores de una columna deben ser únicos. Para crear el índice, podemos encadenar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unique</span> en la definición de columna:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$table-&gt;string('email')-&gt;unique();\n</code></pre>\n  <p>Alternativamente, puedes crear el índice después de la definición de la columna. Por ejemplo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$table-&gt;unique('email');\n</code></pre>\n  <p>Incluso puedes pasar un arreglo de columnas a un método de índice para crear un índice compuesto (o combinado) :</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$table-&gt;index(['account_id', 'created_at']);\n</code></pre>\n  <p>Laravel generará automáticamente un nombre de índice razonable, pero puedes pasar un segundo argumento al método para especificar el nombre por ti mismo.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$table-&gt;unique('email', 'unique_email');\n</code></pre>\n  <h4>Tipos de indice disponibles</h4>\n  <p>Cada método de índice acepta un segundo argumento opcional para especificar el nombre del índice. Si se omite, el nombre se derivará de los nombres de la tabla y la(s) columna(s).</p>\n  <table style=\"border: 1px solid #CFD8DC;\">\n    <thead>\n    <tr>\n      <th>Comando</th>\n      <th>Descripción</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;primary('id');</span></td>\n      <td>Agrega una clave primaria.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;primary(['id', 'parent_id']);</span></td>\n      <td>Agrega claves compuestas.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;unique('email');</span></td>\n      <td>Agrega un índice único.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;index('state');</span></td>\n      <td>Agrega un índice con valores repetidos.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;spatialIndex('location');</span></td>\n      <td>Agrega un índice espacial. (excepto SQLite)</td>\n    </tr>\n    </tbody>\n  </table>\n  <h4>Longitudes de indices &amp; MySQL / MariaDB</h4>\n  <p>Laravel usa el conjunto de caracteres <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">utf8mb4</span> por defecto, el cual incluye soporte para almacenar \"emojis\" en la base de datos. Si estás ejecutando una versión de MySQL más antigua que la versión 5.7.7 o más vieja que la versión 10.2.2 de MariaDB, puedes que necesites configurar manualmente la longitud de cadena predeterminada generada por las migraciones con el propósito de que MySQL cree los índices para estos. Puedes configurar esto ejecutando el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Schema::defaultStringLength</span> dentro de tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AppServiceProvider</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Illuminate\\Support\\Facades\\Schema;\n/**\n* Bootstrap any application services.\n*\n* @return void\n*/\npublic function boot()\n{\n    Schema::defaultStringLength(191);\n}\n</code></pre>\n  <p>Alternativamente, puedes habilitar la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">innodb_large_prefix</span> para tu base de datos. Debes referirte a la documentación de tu base de datos para conocer las instrucciones de cómo habilitar ésta apropiadamente.</p>\n  <h3>Renombrando indices</h3>\n  <p>Para renombrar un índice, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">renameIndex</span>. Este método acepta el nombre del índice actual como primer argumento y el nombre deseado como segundo argumento:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$table-&gt;renameIndex('from', 'to')\n</code></pre>\n  <h3>Eliminando indices</h3>\n  <p>Para eliminar un índice, debes especificar el nombre del índice. De forma predeterminada, Laravel asigna automáticamente un nombre razonable para los índices. Concatena el nombre de la tabla, el nombre de la columna indexada y el tipo de índice. Aquí están algunos ejemplos:</p>\n  <table style=\"border: 1px solid #CFD8DC;\">\n    <thead>\n    <tr>\n      <th>Comando</th>\n      <th>Descripción</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;dropPrimary('users_id_primary');</span></td>\n      <td>Eliminar una clave primaria de la tabla \"users\".</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;dropUnique('users_email_unique');</span></td>\n      <td>Elimina un índice único de la tabla \"users\".</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;dropIndex('geo_state_index');</span></td>\n      <td>Elimina un índice básico de la tabla \"geo\".</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$table-&gt;dropSpatialIndex('geo_location_spatialindex');</span></td>\n      <td>Elimina un índice espacial de la tabla \"geo\" (excepto SQLite).</td>\n    </tr>\n    </tbody>\n  </table>\n  <p>Si pasas un arreglo de columnas dentro de un método que elimina los índices, el nombre de índice convencional será generado basado en el nombre de la tabla, columnas y tipo de clave:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Schema::table('geo', function (Blueprint \\$table) {\n    \\$table-&gt;dropIndex(['state']); // Drops index 'geo_state_index'\n});\n</code></pre>\n  <h3>Restricciones de clave foránea</h3>\n  <p>Laravel también proporciona soporte para la creación de restricciones de clave foránea, las cuales son usadas para forzar la integridad referencial a nivel de base de datos. Por ejemplo, vamos a definir una columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">user_id</span> en la tabla <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">posts</span> que referencia la columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">id</span> en una tabla <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">users</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Schema::table('posts', function (Blueprint \\$table) {\n    \\$table-&gt;unsignedBigInteger('user_id');\n    \\$table-&gt;foreign('user_id')-&gt;references('id')-&gt;on('users');\n});\n</code></pre>\n  <p>También puedes especificar la acción deseada para las propiedades \"on delete\" y \"on update\" de la restricción:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$table-&gt;foreign('user_id')\n      -&gt;references('id')-&gt;on('users')\n      -&gt;onDelete('cascade');\n</code></pre>\n  <p>Para eliminar una clave foránea, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dropForeign</span>. Las restricciones de clave foránea usan la misma convención de nombres que los índices. Así, concatenaremos el nombre de la tabla y el de columna en la restricción luego agrega el sufijo \"_foreign\" al nombre:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$table-&gt;dropForeign('posts_user_id_foreign');\n</code></pre>\n  <p>O, puedes pasar un arreglo de valores el cual usará automáticamente el nombre de restricción convencional al momento de eliminar:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$table-&gt;dropForeign(['user_id']);\n</code></pre>\n  <p>Puedes habilitar o deshabilitar las restricciones de clave foránea dentro de tus migraciones usando los siguientes métodos:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Schema::enableForeignKeyConstraints();\nSchema::disableForeignKeyConstraints();\n</code></pre>\n  <p>Nota</p>\n  <p>SQLite deshabilita las restricciones de clave foránea de forma predeterminada. Al usar SQLite, asegúrese de habilitar el soporte de clave foránea en la configuración de tu base de datos antes de intentar crearlos en sus migraciones.</p>\n</div>"
      },
      {
        "titulo": "Seeding",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Base de datos: Seeding</h1>\n  <ul>\n    <li>Introducción</li>\n    <li>\n      Escribiendo seeders\n      <ul>\n        <li>Usando model factories</li>\n        <li>Registrando seeders adicionales</li>\n      </ul>\n    </li>\n    <li>Ejecutando seeders</li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>Laravel incluye un método sencillo para alimentar tu base de datos con datos de prueba usando clases <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Seeder</span>. Todas las clases <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Seeder</span> son almacenadas en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database/seeds</span>. Las clases <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Seeder</span> pueden tener cualquier nombre que desees, pero deberías seguir probablemente alguna convención razonable, tales como\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">UsersTableSeeder</span> etc. De forma predeterminada, una clase\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DatabaseSeeder</span> se define para tí. A partir de esta clase, puedes usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">call</span> para registrar otras clases seeder, permitiendo que controles el orden en que se ejecutan.</p>\n  <h2>Escribiendo seeders</h2>\n  <p>\n    Para generar un seeder, ejecuta el Comando Artisan\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:seeder</span>. Todos los seeders generados por el framework seran colocados en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database/seeds</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan make:seeder UsersTableSeeder\n</code></pre>\n  <p>\n    Una clase seeder contiene solamente un método de forma predeterminada: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">run</span>. Este método es ejecutado cuando el Comando Artisan\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">db:seed</span> se ejecuta. Dentro del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">run</span>, puedes insertar datos en tu base de datos en la forma que desees. Puedes usar el constructor de consultas para insertar datos manualmente o puedes usar los Model Factories de Eloquent .\n  </p>\n  <p>TIP</p>\n  <p>\n    La protección de asignación en masa es deshabilitada automáticamente durante el seeding de la base de datos.\n  </p>\n  <p>Como un ejemplo, vamos a modificar la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DatabaseSeeder</span> predeterminada y agregar una instrucción insert al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">run</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Database\\Seeder;\nuse Illuminate\\Support\\Facades\\DB;\nclass DatabaseSeeder extends Seeder\n{\n    /**\n    * Run the database seeds.\n    *\n    * @return void\n    */\n    public function run()\n    {\n        DB::table('users')-&gt;insert([\n            'name' =&gt; Str::random(10),\n            'email' =&gt; Str::random(10).'@gmail.com',\n            'password' =&gt; bcrypt('password'),\n        ]);\n    }\n}\n</code></pre>\n  <p>TIP</p>\n  <p>Puede escribir cualquier dependencia que necesite dentro de la firma del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">run</span>. Se resolverán automáticamente a través del contenedor de servicio de Laravel.</p>\n  <h3>Usando model factories</h3>\n  <p>Ciertamente, especificar manualmente los atributos para cada seeder de modelos es lento y complicado. En lugar de eso, puedes usar Model Factories para generar convenientemente cantidades grandes de registros de bases de datos. Primero, revisa la documentación sobre model factories para aprender cómo definir tus factories. Una vez que hayas definido tus factories, puedes usar la función helper <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">factory</span> para insertar registros dentro de tu base de datos.\n  </p>\n  <p>Por ejemplo, vamos a crear 50 usuarios y establecer una asociación con los posts para cada usuario:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Run the database seeds.\n*\n* @return void\n*/\npublic function run()\n{\n    factory(App\\User::class, 50)-&gt;create()-&gt;each(function (\\$user) {\n        \\$user-&gt;posts()-&gt;save(factory(App\\Post::class)-&gt;make());\n    });\n}\n</code></pre>\n  <h3>Registrando seeders adicionales</h3>\n  <p>Dentro de la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DatabaseSeeder</span>, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">call</span> para ejecutar clases seeder adicionales. Usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">call</span> te permite separar el seeding de tu base de datos en varios archivos con el propósito de que no exista una clase seeder única que se vuelva extremadamente grande. Pasa el nombre de la clase seeder que deseas ejecutar:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Run the database seeds.\n*\n* @return void\n*/\npublic function run()\n{\n    \\$this-&gt;call([\n        UsersTableSeeder::class,\n        PostsTableSeeder::class,\n        CommentsTableSeeder::class,\n    ]);\n}\n</code></pre>\n  <h2>Ejecutando seeders</h2>\n  <p>Una vez que hayas escrito tu seeder, puedes necesitar regenerar el cargador automático de Composer usando el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dump-autoload</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>composer dump-autoload\n</code></pre>\n  <p>Ahora puedes usar el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">db:seed</span> para alimentar tu base de datos. De forma predeterminada, el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">db:seed</span> ejecuta la clase\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DatabaseSeeder</span>, la cual puede ser usada para ejecutar otras clases seeder. Sin embargo, puedes usar la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--class</span> para especificar que una clase seeder específica se ejecute individualmente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan db:seed\nphp artisan db:seed --class=UsersTableSeeder\n</code></pre>\n  <p>También puedes alimentar tu base de datos usando el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">migrate:refresh</span>, el cual también deshará y volverá a ejecutar tods tus migraciones. Este comando es útil para reconstruir tu base de datos completamente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan migrate:refresh --seed\n</code></pre>\n  <h4>Forzar la ejecución de seeders en producción</h4>\n  <p>Algunas operaciones de seeding pueden causar que alteres o pierdas datos. Para protegerte de ejecutar comandos de seeding en tu base de datos de producción, te será solicitada una confirmación antes de que los seeders sean ejecutados. Para forzar la ejecución de los seeders sin confirmación, usa la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--force</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan db:seed --force\n</code></pre>\n</div>"
      },
      {
        "titulo": "Redis",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Redis</h1>\n  <ul>\n    <li>\n      Introducción\n      <ul>\n        <li>Configuración</li>\n        <li>Predis</li>\n        <li>PhpRedis</li>\n      </ul>\n    </li>\n    <li>\n      Interactuar con redis\n      <ul>\n        <li>Canalizar comandos</li>\n      </ul>\n    </li>\n    <li>Pub / Sub</li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>\n    Redis\n    <outboundlink></outboundlink>\n    es un almacenamiento avanzado de pares clave-valor y de código abierto. A menudo se le denomina como un servidor de estructura de datos ya que los pares pueden contener cadenas\n    <outboundlink></outboundlink>\n    , hashes\n    <outboundlink></outboundlink>\n    , listas\n    <outboundlink></outboundlink>\n    , sets\n    <outboundlink></outboundlink>\n    y sets ordenados\n    <outboundlink></outboundlink>\n    .\n  </p>\n  <p>Antes de utilizar Redis con Laravel, deberás instalar el paquete <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">predis/predis</span> por medio de Composer:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>composer require predis/predis\n</code></pre>\n  <p>\n    Alternativamente, puedes instalar la extensión de PHP PhpRedis\n    <outboundlink></outboundlink>\n    por medio de PECL. La extensión puede ser más compleja de instalar pero puede ofrecer un mejor rendimiento para las aplicaciones que hacen uso extensivo de Redis.\n  </p>\n  <h3>Configuración</h3>\n  <p>La configuración de redis para tu aplicación está ubicada en el archivo de cofiguración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/database</span>. Dentro de este archivo, podrás ver el arreglo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redis</span> que contiene los servidores de Redis utilizados por tu aplicación:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'redis' =&gt; [\n    'client' =&gt; 'predis',\n    'default' =&gt; [\n        'host' =&gt; env('REDIS_HOST', '127.0.0.1'),\n        'password' =&gt; env('REDIS_PASSWORD', null),\n        'port' =&gt; env('REDIS_PORT', 6379),\n        'database' =&gt; env('REDIS_DB', 0),\n    ],\n    'cache' =&gt; [\n        'host' =&gt; env('REDIS_HOST', '127.0.0.1'),\n        'password' =&gt; env('REDIS_PASSWORD', null),\n        'port' =&gt; env('REDIS_PORT', 6379),\n        'database' =&gt; env('REDIS_CACHE_DB', 1),\n    ],\n],\n</code></pre>\n  <p>La configuración del servidor por defecto deberá ser suficiente para el entorno de desarrollo. Sin embargo, puedes modificar este arreglo según tu entorno. Cada servidor de Redis definido en tu configuración debe contener un nombre, host y puerto.</p>\n  <h4>Configuración de clusters</h4>\n  <p>Si tu aplicación está utilizando un cluster de servidores Redis, debes definir este cluster en la clave <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">clusters</span> de tu configuración de Redis:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'redis' =&gt; [\n    'client' =&gt; 'predis',\n    'clusters' =&gt; [\n        'default' =&gt; [\n            [\n                'host' =&gt; env('REDIS_HOST', 'localhost'),\n                'password' =&gt; env('REDIS_PASSWORD', null),\n                'port' =&gt; env('REDIS_PORT', 6379),\n                'database' =&gt; 0,\n            ],\n        ],\n    ],\n],\n</code></pre>\n  <p>Por defecto, los clusters realizarán la división del lado del cliente en sus nodos, permitiéndote agrupar nodos y crear una gran cantidad de RAM disponible. Sin embargo, ten en cuenta que la división del lado del cliente no gestiona el failover; por lo tanto, es principalmente adecuado para datos en caché que estén disponibles desde otro almacenamiento de datos primario. Su deseas utilizar el agrupamiento nativo de Redis, debes especificarlo en la clave <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">options</span> de tu configuración de Redis:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'redis' =&gt; [\n    'client' =&gt; 'predis',\n    'options' =&gt; [\n        'cluster' =&gt; 'redis',\n    ],\n    'clusters' =&gt; [\n        // ...\n    ],\n],\n</code></pre>\n  <h3>Predis</h3>\n  <p>\n    Además de las opciones predeterminadas de la configuración del servidor <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">host</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">port</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">password</span>, Predis admite parámetros de conexión\n    <outboundlink></outboundlink>\n    adicionales que pueden ser definidos para cada uno de tus servidores de Redis. Para utilizar estas opciones de configuración adicionales, agrégalos a la configuración del servidor de Redis en el archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/database.php</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'default' =&gt; [\n    'host' =&gt; env('REDIS_HOST', 'localhost'),\n    'password' =&gt; env('REDIS_PASSWORD', null),\n    'port' =&gt; env('REDIS_PORT', 6379),\n    'database' =&gt; 0,\n    'read_write_timeout' =&gt; 60,\n],\n</code></pre>\n  <h3>PhpRedis</h3>\n  <p>Para utilizar la extensión PhpRedis, deberás cambiar la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">client</span> de tu configuración de Redis a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">phpredis</span>. Puedes encontrar esta opción en tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/database.php</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'redis' =&gt; [\n    'client' =&gt; 'phpredis',\n    // Resto de la configuración de Redis...\n],\n</code></pre>\n  <p>Además de las opciones predeterminadas de configuración del servidor <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">host</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">port</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">password</span>, PhpRedis admite los siguientes parámetros de conexión adicionales: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">persistent</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">prefix</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">read_timeout</span> y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">timeout</span>. Puedes agregar cualquiera de estas opciones a la configuración del servidor de Redis en el archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/database.php</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'default' =&gt; [\n    'host' =&gt; env('REDIS_HOST', 'localhost'),\n    'password' =&gt; env('REDIS_PASSWORD', null),\n    'port' =&gt; env('REDIS_PORT', 6379),\n    'database' =&gt; 0,\n    'read_timeout' =&gt; 60,\n],\n</code></pre>\n  <h2>Interactuar con redis</h2>\n  <p>\n    Puedes interactuar con Redis llamando varios métodos en el facade\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Redis</span>. El facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Redis</span> admite métodos dinámicos, lo que significa que puedes llamar a cualquier comando de Redis\n    <outboundlink></outboundlink>\n    en el facade y el comando será pasado directamente a Redis. En este ejemplo, vamos a llamar al comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">GET</span> de Redis llamando al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span> en el facade\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Redis</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Support\\Facades\\Redis;\nclass UserController extends Controller\n{\n    /**\n    * Show the profile for the given user.\n    *\n    * @param  int  \\$id\n    * @return Response\n    */\n    public function showProfile(\\$id)\n    {\n        \\$user = Redis::get('user:profile:'.\\$id);\n        return view('user.profile', ['user' =&gt; \\$user]);\n    }\n}\n</code></pre>\n  <p>Como lo mencionamos anteriormente, puedes llamar a cualquier comando de Redis en el facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Redis</span>. Laravel utiliza métodos mágicos para pasar los comandos al servidor de Redis, para que pases los argumentos que espera el comando de Redis:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Redis::set('name', 'Taylor');\n\\$values = Redis::lrange('names', 5, 10);\n</code></pre>\n  <p>Alternativamente, también puedes pasar comandos al servidor usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">command</span>, el cual acepta el nombre del comando como primer argumento, y un arreglo de valores como segundo argumento:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$values = Redis::command('lrange', ['name', 5, 10]);\n</code></pre>\n  <h4>Utilizar múltiples conexiones de Redis</h4>\n  <p>Puedes obtener una instancia de Redis llamando al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Redis::connection</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$redis = Redis::connection();\n</code></pre>\n  <p>Esto te dará una instancia del servidor de Redis predeterminado. También puedes pasar la conexión o nombre del cluster al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">connection</span> para obtener un servidor o cluster en específico según lo definido en tu configuración de Redis:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$redis = Redis::connection('my-connection');\n</code></pre>\n  <h3>Canalizar comandos</h3>\n  <p>La canalización debe ser utilizada cuando envíes muchos comandos al servidor en una sola operación. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pipeline</span> acepta un argumento: un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span> que reciba una instancia de Redis. Puedes emitir todos tus comandos a esta instancia de Redis y después éstos serán ejecutados dentro de una sola operación:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Redis::pipeline(function (\\$pipe) {\n    for (\\$i = 0; \\$i &lt; 1000; \\$i++) {\n        \\$pipe-&gt;set(\"key:\\$i\", \\$i);\n    }\n});\n</code></pre>\n  <h2>Pub / Sub</h2>\n  <p>Laravel proporciona una interfaz conveniente para los comandos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">publish</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">subscribe</span> de Redis. Estos comandos de Redis te permiten escuchar mensajes en un \"canal\" dado. Puedes publicar mensajes en el canal desde otra aplicación, o incluso utilizando otro lenguaje de programación, lo que permite una comunicación sencilla entre aplicaciones y procesos.</p>\n  <p>\n    Primero, configuremos un listener para el canal usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">subscribe</span>. Vamos a colocar una llamada a este método en un comando de Artisan ya que llamar al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">subscribe</span> comienza un proceso de larga ejecución:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Console\\Commands;\nuse Illuminate\\Console\\Command;\nuse Illuminate\\Support\\Facades\\Redis;\nclass RedisSubscribe extends Command\n{\n    /**\n    * The name and signature of the console command.\n    *\n    * @var string\n    */\n    protected \\$signature = 'redis:subscribe';\n    /**\n    * The console command description.\n    *\n    * @var string\n    */\n    protected \\$description = 'Subscribe to a Redis channel';\n    /**\n    * Execute the console command.\n    *\n    * @return mixed\n    */\n    public function handle()\n    {\n        Redis::subscribe(['test-channel'], function (\\$message) {\n            echo \\$message;\n        });\n    }\n}\n</code></pre>\n  <p>Ahora podemos publicar mensajes en el canal usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">publish</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Route::get('publish', function () {\n    // Route logic...\n    Redis::publish('test-channel', json_enspan(['foo' =&gt; 'bar']));\n});\n</code></pre>\n  <h4>Suscripciones de comodines</h4>\n  <p>Usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">psubscribe</span>, puedes suscribirte a un canal comodín, el cual puede ser útil para capturar todos los mensajes en todos los canales. El nombre del canal\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$channel</span> será pasado como segundo argumento al callback <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span> proporcionado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Redis::psubscribe(['*'], function (\\$message, \\$channel) {\n    echo \\$message;\n});\nRedis::psubscribe(['users.*'], function (\\$message, \\$channel) {\n    echo \\$message;\n});\n</code></pre>\n</div>"
      }
    ]
  },
  {
    "titulo": "8.- Eloquent ORM",
    "subtitulo": "",
    "items": [
      {
        "titulo": "Primeros Pasos",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Eloquent: Primeros Pasos</h1>\n  <ul>\n    <li>Introducción</li>\n    <li>\n      Definiendo modelos\n      <ul>\n        <li>Convenciones del modelo Eloquent</li>\n        <li>Valores de atributo predeterminados</li>\n      </ul>\n    </li>\n    <li>\n      Obteniendo modelos\n      <ul>\n        <li>Colecciones</li>\n        <li>Resultados divididos en partes (chunk)</li>\n      </ul>\n    </li>\n    <li>\n      Obteniendo modelos individuales / Agrupamientos\n      <ul>\n        <li>Obteniendo agrupamientos</li>\n      </ul>\n    </li>\n    <li>\n      Insertando y actualizando modelos\n      <ul>\n        <li>Inserciones</li>\n        <li>Actualizaciones</li>\n        <li>Asignación masiva</li>\n        <li>Otros métodos de creación</li>\n      </ul>\n    </li>\n    <li>\n      Eliminando modelos\n      <ul>\n        <li>Eliminación lógica</li>\n        <li>Consultando modelos eliminados lógicamente</li>\n      </ul>\n    </li>\n    <li>\n      Alcances de consulta\n      <ul>\n        <li>Alcances globales</li>\n        <li>Alcances locales</li>\n      </ul>\n    </li>\n    <li>Comparando modelos</li>\n    <li>\n      Eventos\n      <ul>\n        <li>Observadores</li>\n      </ul>\n    </li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>El ORM Eloquent incluido con Laravel proporciona una genial y simple implentación básica de ActiveRecord para trabajar con tu base de datos. Cada tabla de base de datos tiene un correspondiente \"Modelo\" el cual es usado para interactuar con la tabla. Los modelos permiten que consultes los datos en tus tablas, así como también insertar nuevos registros dentro de la tabla.\n  </p>\n  <p>\n    Antes de empezar, asegúrate de configurar una conexión de base de datos en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/database.php</span>. Para mayor información sobre la configuración de tu base de datos, revisa la documentación .\n  </p>\n  <h2>Definiendo modelos</h2>\n  <p>Para empezar, vamos a crear un modelo de Eloquent. Los modelos residen típicamente en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app</span>, pero eres libre de colocarlos en cualquier parte que pueda ser auto-cargada de acuerdo a tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">composer.json</span>. Todos los modelos de Eloquent extienden la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Database\\Eloquent\\Model</span>.</p>\n  <p>\n    La forma más fácil de crear una instancia del modelo es usando el Comando Artisan\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:model</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan make:model Flight\n</code></pre>\n  <p>\n    Si prefieres generar una migración de base de datos cuando generes el modelo, puedes usar la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--migration</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">-m</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan make:model Flight --migration\nphp artisan make:model Flight -m\n</code></pre>\n  <h3>Convenciones del modelo Eloquent</h3>\n  <p>Ahora, vamos a mirar un modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Flight</span> de ejemplo, el cual usaremos para obtener y guardar información desde nuestra tabla de base de datos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">flights</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Flight extends Model\n{\n    //\n}\n</code></pre>\n  <h4>Nombres de tabla</h4>\n  <p>Observa que no le dijimos a Eloquent cuál tabla usar para nuestro modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Flight</span>. Por convención, el nombre de la clase en plural y en formato \"snake_case\" será usado como el nombre de tabla a menos que otro nombre sea especificado expresamente. Así, en este caso, Eloquent asumirá que el modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Flight</span> guarde los registros en la tabla <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">flights</span>. Puedes especificar una tabla personalizada al definir una propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">table</span> en tu modelo:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Flight extends Model\n{\n    /**\n    * The table associated with the model.\n    *\n    * @var string\n    */\n    protected \\$table = 'my_flights';\n}\n</code></pre>\n  <h4>Claves primarias</h4>\n  <p>Eloquent asumirá que cada tabla tiene una columna de clave primaria denominada <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">id</span>. Puedes definir una propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$primaryKey</span> protegida para sobrescribir esta convención:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Flight extends Model\n{\n    /**\n    * The primary key associated with the table.\n    *\n    * @var string\n    */\n    protected \\$primaryKey = 'flight_id';\n}\n</code></pre>\n  <p>Además, Eloquent asume que la clave primaria es un valor entero autoincremental, lo que significa que de forma predeterminada la clave primaria será convertida a un tipo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">int</span> automáticamente. Si deseas usar una clave primaria que no sea de autoincremeneto o numérica debes establecer la propiedad pública <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$incrementing</span> de tu modelo a\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nclass Flight extends Model\n{\n    /**\n    * Indicates if the IDs are auto-incrementing.\n    *\n    * @var bool\n    */\n    public \\$incrementing = false;\n}\n</code></pre>\n  <p>Si tu clave primaria no es un entero, debes establecer la propiedad protegida\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$keyType</span> de tu modelo a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">string</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nclass Flight extends Model\n{\n    /**\n    * The \"type\" of the auto-incrementing ID.\n    *\n    * @var string\n    */\n    protected \\$keyType = 'string';\n}\n</code></pre>\n  <h4>Marcas de tiempo o timestamps</h4>\n  <p>De forma predeterminada, Eloquent espera que las columnas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">created_at</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updated_at</span> existan en tus tablas. Si no deseas tener estas columnas manejadas automáticamente por Eloquent, establece la propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$timestamps</span> de tu modelo a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Flight extends Model\n{\n    /**\n    * Indicates if the model should be timestamped.\n    *\n    * @var bool\n    */\n    public \\$timestamps = false;\n}\n</code></pre>\n  <p>Si necesitas personalizar el formato de tus marcas de tiempo, establece la propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$dateFormat</span> de tu modelo. Esta propiedad determina como los atributos de fecha son guardados en la base de datos, también como su formato cuando el modelo es serializado a un arreglo o JSON:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Flight extends Model\n{\n    /**\n    * The storage format of the model's date columns.\n    *\n    * @var string\n    */\n    protected \\$dateFormat = 'U';\n}\n</code></pre>\n  <p>Si necesitas personalizar los nombres de las columnas usadas para guardar las marcas de tiempo, puedes establecer las constantes <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">CREATED_AT</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">UPDATED_AT</span>en tu modelo:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nclass Flight extends Model\n{\n    const CREATED_AT = 'creation_date';\n    const UPDATED_AT = 'last_update';\n}\n</code></pre>\n  <h4>Conexión de base de datos</h4>\n  <p>De forma predeterminada, todos los modelos Eloquent usarán la conexión de base de datos configurada por tu aplicación. Si quieres especificar una conexión diferente para el modelo, usa la propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$connection</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Flight extends Model\n{\n    /**\n    * The connection name for the model.\n    *\n    * @var string\n    */\n    protected \\$connection = 'connection-name';\n}\n</code></pre>\n  <h3>Valores de atributo predeterminados</h3>\n  <p>Si deseas definir los valores predeterminados para algunos de los atributos de su modelo, puedes definir una propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$attributes</span> en tu modelo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Flight extends Model\n{\n    /**\n    * The model's default values for attributes.\n    *\n    * @var array\n    */\n    protected \\$attributes = [\n        'delayed' =&gt; false,\n    ];\n}\n</code></pre>\n  <h2>Obteniendo modelos</h2>\n  <p>\n    Una vez que has creado un modelo y su tabla de base de datos asociada , estás listo para empezar a obtener datos de tu base de datos. Piensa en cada modelo de Eloquent como un constructor de consultas muy poderoso que te permite consultar fluidamente la tabla de base de datos asociada con el modelo. Por ejemplo:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\n\\$flights = App\\Flight::all();\nforeach (\\$flights as \\$flight) {\n    echo \\$flight-&gt;name;\n}\n</code></pre>\n  <h4>Añadiendo restricciones adicionales</h4>\n  <p>\n    El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">all</span> de Eloquent devolverá todos los resultados en la tabla del modelo. Ya que cada modelo de Eloquent sirve como un constructor de consultas , también puedes añadir restricciones a las consultas y entonces usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span> para obtener los resultados:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$flights = App\\Flight::where('active', 1)\n                -&gt;orderBy('name', 'desc')\n                -&gt;take(10)\n                -&gt;get();\n</code></pre>\n  <p>TIP</p>\n  <p>\n    Ya que los modelos de Eloquent son constructores de consultas, deberías revisar todos los métodos disponibles en el constructor de consultas . Puedes usar cualquiera de estos métodos en tus consultas de Eloquent.\n  </p>\n  <h4>Actualizando modelos</h4>\n  <p>Podemos actualizar modelos usando los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fresh</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">refresh</span>. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fresh</span> volverá a recuperar el modelo de la base de datos. La instancia de modelo existente no será afectada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$flight = App\\Flight::where('number', 'FR 900')-&gt;first();\n\\$freshFlight = \\$flight-&gt;fresh();\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">refresh</span> \"rehidratará\" el modelo existente usando datos nuevos de la base de datos. Además, todas sus relaciones cargadas previamente serán también actualizadas:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$flight = App\\Flight::where('number', 'FR 900')-&gt;first();\n\\$flight-&gt;number = 'FR 456';\n\\$flight-&gt;refresh();\n\\$flight-&gt;number; // \"FR 900\"\n</code></pre>\n  <h3>Colecciones</h3>\n  <p>Para métodos de Eloquent como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">all</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span> que obtienen varios resultados, se devolverá una instancia de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Database\\Eloquent\\Collection</span>. La clase\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Collection</span> proporciona una variedad de métodos útiles para trabajar con los resultados de Eloquent:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$flights = \\$flights-&gt;reject(function (\\$flight) {\n    return \\$flight-&gt;cancelled;\n});\n</code></pre>\n  <p>También puedes recorrer la colección como un arreglo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>foreach (\\$flights as \\$flight) {\n    echo \\$flight-&gt;name;\n}\n</code></pre>\n  <h3>Resultados divididos en partes (chunk)</h3>\n  <p>Si necesitas procesar miles de registros de Eloquent, usa el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">chunk</span>. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">chunk</span> obtendrá una \"porción\" de los modelos de Eloquent, incorporándolos a una <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span> dada para procesamiento. Usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">chunk</span> ahorrarás memoria al momento de trabajar con grandes conjuntos de resultados:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Flight::chunk(200, function (\\$flights) {\n    foreach (\\$flights as \\$flight) {\n        //\n    }\n});\n</code></pre>\n  <p>El primer argumento pasado al método es el número de registros que deseas obtener por cada \"porción\". La Closure pasada como segundo argumento será ejecutada para cada porción que sea obtenida de la base de datos. Una consulta de base de datos será ejecutada para obtener cada porción de registros pasados a la Closure.</p>\n  <h4>Usando cursores</h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cursor</span> permite que iteres a través de registros de tu base de datos usando un cursor, el cual ejecutará solamente una consulta única. Al momento de procesar grandes cantidades de datos, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cursor</span> para reducir en gran medida el uso de la memoria:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>foreach (Flight::where('foo', 'bar')-&gt;cursor() as \\$flight) {\n    //\n}\n</code></pre>\n  <h2>Obteniendo modelos individuales / Agrupamientos</h2>\n  <p>Además de obtener todos los registros de una tabla dada, también puedes obtener registros individuales usando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">find</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">first</span>. En lugar de devolver una colección de modelos, estos métodos devuelven una única instancia de modelo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Recupera un modelo por su clave primaria...\n\\$flight = App\\Flight::find(1);\n// Recupera el primer modelo que coincida con las restricciones de consulta...\n\\$flight = App\\Flight::where('active', 1)-&gt;first();\n</code></pre>\n  <p>También puedes ejecutar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">find</span> con un arreglo de claves primarias, el cual devolverá una colección de los registros que coincidan:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$flights = App\\Flight::find([1, 2, 3]);\n</code></pre>\n  <h4>Excepciones not found (no encontrado)</h4>\n  <p>Algunas veces, puedes desear arrojar una excepción si un modelo no es encontrado. Es particularmente útil en rutas o controladores. Los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">findOrFail</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">firstOrFail</span> obtendrán el primer resultado de la consulta; sin embargo, si nada es encontrado, una excepción de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Database\\Eloquent\\ModelNotFoundException</span> será arrojada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$model = App\\Flight::findOrFail(1);\n\\$model = App\\Flight::where('legs', '&gt;', 100)-&gt;firstOrFail();\n</code></pre>\n  <p>Si la excepción no es atrapada, una respuesta HTTP <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">404</span> es enviada automáticamente de regreso al usuario. No es necesario escribir verificaciones explícitas para devolver respuestas\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">404</span> cuando uses estos métodos:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Route::get('/api/flights/{id}', function (\\$id) {\n    return App\\Flight::findOrFail(\\$id);\n});\n</code></pre>\n  <h3>Obteniendo agrupamientos</h3>\n  <p>También puedes usar los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">count</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sum</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">max</span> y otros métodos de agrupamiento proporcionados por el constructor de consulta. Estos métodos devuelven el valor escalar apropiado en lugar de una completa instancia de modelo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$count = App\\Flight::where('active', 1)-&gt;count();\n\\$max = App\\Flight::where('active', 1)-&gt;max('price');\n</code></pre>\n  <h2>Insertando Y actualizando modelos</h2>\n  <h3>Inserciones</h3>\n  <p>Para agregar un nuevo registro en la base de datos crea una nueva instancia de modelo, establece los atributos del modelo y después ejecuta el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">save</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse App\\Flight;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nclass FlightController extends Controller\n{\n    /**\n    * Create a new flight instance.\n    *\n    * @param  Request  \\$request\n    * @return Response\n    */\n    public function store(Request \\$request)\n    {\n        // Validate the request...\n        \\$flight = new Flight;\n        \\$flight-&gt;name = \\$request-&gt;name;\n        \\$flight-&gt;save();\n    }\n}\n</code></pre>\n  <p>En este ejemplo, asignamos el parámetro <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">name</span> de la solicitud entrante al atributo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">name</span> de la instancia del modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Flight</span>. Cuando ejecutamos el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">save</span>, un registro será insertado en la base de datos. Las marcas de tiempo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">created_at</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updated_at</span> serán automáticamente establecidas cuando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">save</span> sea ejecutado, no hay necesidad de establecerlos manualmente.</p>\n  <h3>Actualizaciones</h3>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">save</span> también puede ser usado para actualizar modelos que ya existen en la base de datos. Para actualizar un modelo, debes obtenerlo, establecer cualquiera de los atributos que desees actualizar y después ejecutar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">save</span>. Otra vez, la marca de tiempo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updated_at</span> será actualizada automáticamente, no hay necesidad de establecer su valor manualmente.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$flight = App\\Flight::find(1);\n\\$flight-&gt;name = 'New Flight Name';\n\\$flight-&gt;save();\n</code></pre>\n  <h4>Actualizaciones masivas</h4>\n  <p>Las actualizaciones también pueden ser ejecutadas contra cualquier número de modelos que coincidan con un criterio de consulta dada. En este ejemplo, todos los vuelos que están activos o con <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">active</span> igual a 1 y tienen un atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">destination</span> igual a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">San\n  Diego</span> serán marcados como retrasados:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>App\\Flight::where('active', 1)\n            -&gt;where('destination', 'San Diego')\n            -&gt;update(['delayed' =&gt; 1]);\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">update</span> espera un arreglo de pares de columna y valor representando las columnas que deberían ser actualizadas.</p>\n  <p>Nota</p>\n  <p>Al momento de utilizar una actualización masiva por medio de Eloquent, los eventos de modelo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">saving</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">saved</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updating</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updated</span> no serán disparados para los modelos actualizados. Esto es debido a que los modelos nunca son obtenidos en realidad al momento de hacer una actualización masiva.</p>\n  <h3>Asignación masiva</h3>\n  <p>También puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span> para guardar un nuevo modelo en una sola línea. La instancia de modelo insertada te será devuelta por el método. Sin embargo, antes de hacer eso, necesitarás especificar o un atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fillable</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">guarded</span> del modelo, de modo que todos los modelos de Eloquent se protejan contra la asignación masiva de forma predeterminada.</p>\n  <p>Una vulnerabilidad en la asignación masiva ocurre cuando un usuario pasa un parámetro HTTP inesperado a través de una solicitud y ese parámetro cambia una columna en tu base de datos que no esperabas. Por ejemplo, un usuario malicioso podría enviar un parámetro <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">is_admin</span> a través de una solicitud HTTP, la cual es entonces pasada en el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span> de tu modelo, permitiendo que el usuario se promueva a si mismo como un usuario administrador.</p>\n  <p>Así que, para empezar, debes definir cuáles atributos del modelo quieres que se asignen de forma masiva. Puedes hacerlo usando la propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$fillable</span> del modelo. Por ejemplo, vamos a hacer el atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">name</span> de nuestro modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Flight</span> sea asignado masivamente.\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Flight extends Model\n{\n    /**\n    * The attributes that are mass assignable.\n    *\n    * @var array\n    */\n    protected \\$fillable = ['name'];\n}\n</code></pre>\n  <p>Una vez que hemos indicado los atributos asignables en masa, podemos usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span> para insertar un nuevo registro en la base de datos. El método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span> devuelve la instancia de modelo guardada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$flight = App\\Flight::create(['name' =&gt; 'Flight 10']);\n</code></pre>\n  <p>Si ya tienes una instancia del modelo, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fill</span> para llenarla con un arreglo de atributos:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$flight-&gt;fill(['name' =&gt; 'Flight 22']);\n</code></pre>\n  <h4>Protección de atributos</h4>\n  <p>Mientras <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$fillable</span> sirve como una \"lista blanca\" de atributos que deben ser asignados en forma masiva, también puedes elegir usar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$guarded</span>. La propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$guarded</span> debe contener un arreglo de atributos que no deseas que sean asignados en forma masiva. El resto de atributos que no estén en el arreglo serán asignados masivamente. <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$guarded</span> funciona como una \"lista negra\". Importante, debes usar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$fillable</span> o\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$guarded</span> - pero no ambos. En el ejemplo siguiente, todos los atributos <strong>excepto\n      <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">price</span></strong> serán asignados en forma masiva:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Flight extends Model\n{\n    /**\n    * The attributes that aren't mass assignable.\n    *\n    * @var array\n    */\n    protected \\$guarded = ['price'];\n}\n</code></pre>\n  <p>Si prefieres hacer todos los atributos asignados masivamente, puedes definir la propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$guarded</span> como un arreglo vacío:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* The attributes that aren't mass assignable.\n*\n* @var array\n*/\nprotected \\$guarded = [];\n</code></pre>\n  <h3>Otros Métodos De Creación</h3>\n  <h4><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">firstOrCreate</span>/ <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">firstOrNew</span></h4>\n  <p>Hay otros dos métodos que puedes usar para crear modelos con atributos de asignación masiva:\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">firstOrCreate</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">firstOrNew</span>. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">firstOrCreate</span> intentará localizar un registro de base de datos usando los pares columna / valor dados. Si el modelo no puede ser encontrado en la base de datos, un registro será insertado con los atributos del primer parámetro, junto con aquellos del segundo parámetro opcional.</p>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">firstOrNew</span>, al igual que <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">firstOrCreate</span>, intentará localizar un registro en la base de datos que coincida con los atributos dados. Sin embargo, si un modelo no es encontrado, una nueva instancia de modelo será devuelta. Nota que el modelo devuelto por\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">firstOrNew</span> todavía no ha sido enviado a la base de datos. Necesitarás ejecutar\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">save</span> manualmente para hacerlo persistente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Recupera el vuelo por nombre, o lo crea si no existe...\n\\$flight = App\\Flight::firstOrCreate(['name' =&gt; 'Flight 10']);\n// Recupera vuelo por nombre o lo crea con los atributos name, delayed y arrival_time...\n\\$flight = App\\Flight::firstOrCreate(\n    ['name' =&gt; 'Flight 10'],\n    ['delayed' =&gt; 1, 'arrival_time' =&gt; '11:30']\n);\n// Recupera por nombre, o instancia...\n\\$flight = App\\Flight::firstOrNew(['name' =&gt; 'Flight 10']);\n// Recupera por nombre o crea una instancia con los atributos name, delayed y arrival_time...\n\\$flight = App\\Flight::firstOrNew(\n    ['name' =&gt; 'Flight 10'],\n    ['delayed' =&gt; 1, 'arrival_time' =&gt; '11:30']\n);\n</code></pre>\n  <h4><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updateOrCreate</span></h4>\n  <p>También puedes encontrar situaciones donde quieras actualizar un modelo existente o crear un nuevo modelo si no existe. Laravel proporciona un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updateOrCreate</span> para hacer esto en un paso. Al igual que el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">firstOrCreate</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updateOrCreate</span> persiste el modelo, para que no haya necesidad de ejecutar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">save()</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Si hay un vuelo desde Oakland a San Diego, establece el precio a \\$99.\n// Si no existe un modelo que coincida, crea uno.\n\\$flight = App\\Flight::updateOrCreate(\n    ['departure' =&gt; 'Oakland', 'destination' =&gt; 'San Diego'],\n    ['price' =&gt; 99, 'discounted' =&gt; 1]\n);\n</code></pre>\n  <h2>Eliminando modelos</h2>\n  <p>Para eliminar un modelo, ejecuta el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">delete</span> en una instancia del modelo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$flight = App\\Flight::find(1);\n\\$flight-&gt;delete();\n</code></pre>\n  <h4>Eliminando un modelo existente por clave</h4>\n  <p>En el ejemplo anterior, estamos obteniendo el modelo de la base de datos antes de ejecutar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">delete</span>. Sin embargo, si conoces la clave primaria del modelo, puedes eliminar el modelo sin obtenerlo primero. Para hacer eso, ejecuta el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">destroy</span>. Además de recibir una sola clave primaria como argumento, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">destroy</span> aceptará múltiples claves primarias, o una collection de claves primarias:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>App\\Flight::destroy(1);\nApp\\Flight::destroy(1, 2, 3);\nApp\\Flight::destroy([1, 2, 3]);\nApp\\Flight::destroy(collect([1, 2, 3]));\n</code></pre>\n  <h4>Eliminando modelos por consultas</h4>\n  <p>También puedes ejecutar una instrucción de eliminar en un conjunto de modelos. En este ejemplo, eliminaremos todos los vuelos que están marcados como inactivos. Al igual que las actualizaciones masivas, las eliminaciones masivas no dispararán cualquiera de los eventos de modelo para los modelos que son eliminados:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$deletedRows = App\\Flight::where('active', 0)-&gt;delete();\n</code></pre>\n  <p>Nota</p>\n  <p>Al momento de ejecutar una instrucción de eliminación masiva por medio de Eloquent, los eventos de modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">deleting</span> and <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">deleted</span> no serán ejecutados para los modelos eliminados. Esto es debido a que los modelos nunca son obtenidos realmente al momento de ejecutar la instrucción de eliminación.</p>\n  <h3>Eliminación lógica (Soft Deleting)</h3>\n  <p>Además de eliminar realmente los registros de tu base de datos, Eloquent también puede \"eliminar lógicamente\" los modelos. Cuando los modelos son borrados lógicamente, no son removidos realmente de tu base de datos. En lugar de eso, un atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">deleted_at</span> es establecido en el modelo e insertado en la base de datos. Si un modelo tiene un valor <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">deleted_at</span> no nulo, el modelo ha sido eliminado lógicamente. Para habilitar eliminaciones lógicas en un modelo, usa el trait <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Database\\Eloquent\\SoftDeletes</span> en el modelo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\nclass Flight extends Model\n{\n    use SoftDeletes;\n}\n</code></pre>\n  <p>TIP</p>\n  <p>El trait <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">SoftDeletes</span> convertirá (cast) automáticamente el atributo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">deleted_at</span> a una instancia de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DateTime</span> / <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Carbon</span> para ti.\n  </p>\n  <p>Debes añadir la columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">deleted_at</span> a tu tabla de base de datos. El constructor de esquemas de Laravel contiene un método helper para crear esta columna:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Schema::table('flights', function (Blueprint \\$table) {\n    \\$table-&gt;softDeletes();\n});\n</code></pre>\n  <p>Ahora, cuando ejecutes el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">delete</span> en el modelo, la columna\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">deleted_at</span> será establecida con la fecha y hora actual. Y, al momento de consultar un modelo que use eliminaciones lógicas, los modelos eliminados lógicamente serán excluidos automáticamente de todos los resultados de consultas.</p>\n  <p>Para determinar si una instancia de modelo ha sido eliminada lógicamente, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">trashed</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>if (\\$flight-&gt;trashed()) {\n    //\n}\n</code></pre>\n  <h3>Consultando Modelos Eliminados Lógicamente</h3>\n  <h4>Incluyendo modelos eliminados lógicamente</h4>\n  <p>Como se apreció anteriormente, los modelos eliminados lógicamente serán excluidos automáticamente de los resultados de las consultas. Sin embargo, puedes forzar que los modelos eliminados lógicamente aparezcan en un conjunto resultante usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withTrashed</span> en la consulta:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$flights = App\\Flight::withTrashed()\n                -&gt;where('account_id', 1)\n                -&gt;get();\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withTrashed</span> también puede ser usado en una consulta de relación de Eloquent:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$flight-&gt;history()-&gt;withTrashed()-&gt;get();\n</code></pre>\n  <h4>Obteniedo modelos individuales eliminados lógicamente</h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">onlyTrashed</span> obtendrá <strong>solamente</strong> modelos eliminados lógicamente:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$flights = App\\Flight::onlyTrashed()\n                -&gt;where('airline_id', 1)\n                -&gt;get();\n</code></pre>\n  <h4>Restaurando modelos eliminados lógicamente</h4>\n  <p>Algunas veces puedes desear \"deshacer la eliminación\" de un modelo eliminado lógicamente. Para restaurar un modelo eliminado lógicamente a un estado activo, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">restore</span> en una instancia de modelo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$flight-&gt;restore();\n</code></pre>\n  <p>También puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">restore</span> en una consulta para restaurar rápidamente varios modelos. Otra vez, al igual que otras operaciones \"masivas\", esto no disparará cualquiera de los eventos de modelo para los modelos que sean restaurados:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>App\\Flight::withTrashed()\n        -&gt;where('airline_id', 1)\n        -&gt;restore();\n</code></pre>\n  <p>Al igual que con el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withTrashed</span>, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">restore</span> también puede ser usado en relaciones de Eloquent:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$flight-&gt;history()-&gt;restore();\n</code></pre>\n  <h4>Eliminando modelos permanentemente</h4>\n  <p>Algunas veces puedes necesitar eliminar verdaderamente un modelo de tu base de datos. Para remover permanentemente un modelo eliminado lógicamente de la base de datos, usa el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">forceDelete</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Obliga la eliminación de una instancia de un solo modelo...\n\\$flight-&gt;forceDelete();\n// Obliga la eliminación de todos los modelos relacionados...\n\\$flight-&gt;history()-&gt;forceDelete();\n</code></pre>\n  <h2>Alcances (Scopes) de consultas</h2>\n  <h3>Alcances (scopes) globales</h3>\n  <p>Los alcances globales permiten que añadas restricciones a todas las consultas para un modelo dado. La propia funcionalidad de la eliminación lógica de Laravel utiliza alcances globales para extraer solamente los modelos \"no-eliminados\" de la base de datos. Escribiendo tus propios alcances globales puede proporcionarte una forma conveniente y fácil de asegurar que cada consulta para un modelo dado reciba ciertas restricciones.</p>\n  <h4>Escribiendo scopes globales</h4>\n  <p>Escribir un alcance global es simple. Define una clase que implemente la interfaz <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Database\\Eloquent\\Scope</span>. Esta interfaz requiere que implementes un método: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">apply</span>. El método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">apply</span> puede añadir restricciones <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">where</span> a la consulta como sea necesario:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Scopes;\nuse Illuminate\\Database\\Eloquent\\Scope;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Builder;\nclass AgeScope implements Scope\n{\n    /**\n    * Apply the scope to a given Eloquent query builder.\n    *\n    * @param  \\Illuminate\\Database\\Eloquent\\Builder  \\$builder\n    * @param  \\Illuminate\\Database\\Eloquent\\Model  \\$model\n    * @return void\n    */\n    public function apply(Builder \\$builder, Model \\$model)\n    {\n        \\$builder-&gt;where('age', '&gt;', 200);\n    }\n}\n</code></pre>\n  <p>TIP</p>\n  <p>Si tu scope global está agregando columnas a la cláusula select de la consulta, deberías usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">addSelect</span> en lugar de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">select</span>. Esto evitará el reemplazo no intencional de la cláusula select existente de la consulta.</p>\n  <h4>Aplicando scopes globales</h4>\n  <p>Para asignar un scope global a un modelo, debes sobrescribir el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span> del modelo dado y usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">addGlobalScope</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse App\\Scopes\\AgeScope;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass User extends Model\n{\n    /**\n    * The \"booting\" method of the model.\n    *\n    * @return void\n    */\n    protected static function boot()\n    {\n        parent::boot();\n        static::addGlobalScope(new AgeScope);\n    }\n}\n</code></pre>\n  <p>Después de agregar el scope, una consulta a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User::all()</span> producirá el siguiente código SQL:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>select * from `users` where `age` &gt; 200\n</code></pre>\n  <h4>Alcances globales anónimos</h4>\n  <p>Eloquent también permite que definas scopes globales usando Closures, lo cual es particularmente útil para scopes simples que no se crean en una clase separada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Builder;\nclass User extends Model\n{\n    /**\n    * The \"booting\" method of the model.\n    *\n    * @return void\n    */\n    protected static function boot()\n    {\n        parent::boot();\n        static::addGlobalScope('age', function (Builder \\$builder) {\n            \\$builder-&gt;where('age', '&gt;', 200);\n        });\n    }\n}\n</code></pre>\n  <h4>Eliminar scopes globales</h4>\n  <p>Si prefieres remover un scope global para una consulta dada, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withoutGlobalScope</span>. El método acepta el nombre de clase del scope global como su único argumento:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>User::withoutGlobalScope(AgeScope::class)-&gt;get();\n</code></pre>\n  <p>O, si definiste el scope global usando un Closure:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>User::withoutGlobalScope('age')-&gt;get();\n</code></pre>\n  <p>Si prefieres eliminar varios o incluso todos los scopes globales, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withoutGlobalScopes</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Elimina todos los scopes globales...\nUser::withoutGlobalScopes()-&gt;get();\n// Elimina algunos de los scopes globales...\nUser::withoutGlobalScopes([\n    FirstScope::class, SecondScope::class\n])-&gt;get();\n</code></pre>\n  <h3>Alcances (scopes) locales</h3>\n  <p>Los scopes locales permiten que definas conjuntos de restricciones comunes que puedes reusar fácilmente a traves de tu aplicación. Por ejemplo, puedes necesitar obtener frecuentemente todos los usuarios que son considerados \"populares\". Para definir un scope, agrega el prefijo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">scope</span> a un método de modelo de Eloquent.</p>\n  <p>Los scopes deberían devolver siempre una instancia del constructor de consultas:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass User extends Model\n{\n    /**\n    * Scope a query to only include popular users.\n    *\n    * @param  \\Illuminate\\Database\\Eloquent\\Builder  \\$query\n    * @return \\Illuminate\\Database\\Eloquent\\Builder\n    */\n    public function scopePopular(\\$query)\n    {\n        return \\$query-&gt;where('votes', '&gt;', 100);\n    }\n    /**\n    * Scope a query to only include active users.\n    *\n    * @param  \\Illuminate\\Database\\Eloquent\\Builder  \\$query\n    * @return \\Illuminate\\Database\\Eloquent\\Builder\n    */\n    public function scopeActive(\\$query)\n    {\n        return \\$query-&gt;where('active', 1);\n    }\n}\n</code></pre>\n  <h4>Utilizando un scope local</h4>\n  <p>Una vez que el scope ha sido definido, puedes ejecutar los métodos de scope al momento de consultar el modelo. Sin embargo, no debes incluir el prefijo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">scope</span> cuando ejecutas el método. Incluso puedes encadenar las ejecuciones a varios scopes, por ejemplo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = App\\User::popular()-&gt;active()-&gt;orderBy('created_at')-&gt;get();\n</code></pre>\n  <p>La combinación de múltiples scopes de modelo Eloquent a través de un operador de consulta <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">or</span> puede requerir el uso de funciones de retorno Closure como:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = App\\User::popular()-&gt;orWhere(function (Builder \\$query) {\n    \\$query-&gt;active();\n})-&gt;get();\n</code></pre>\n  <p>Sin embargo, dado que esto puede ser engorroso, Laravel proporciona un método de \"orden superior\"\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">orWhere</span> que te permite encadenar estos scopes con fluidez sin el uso de Closure:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = App\\User::popular()-&gt;orWhere-&gt;active()-&gt;get();\n</code></pre>\n  <h4>Scopes dinámicos</h4>\n  <p>Algunas veces, puedes desear definir un scope que acepte parámetros. Para empezar, sólo agrega tus parámetros adicionales a tu scope. Los parámetros de scope deben ser definidos después del parámetro <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$query</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass User extends Model\n{\n    /**\n    * Scope a query to only include users of a given type.\n    *\n    * @param  \\Illuminate\\Database\\Eloquent\\Builder  \\$query\n    * @param  mixed  \\$type\n    * @return \\Illuminate\\Database\\Eloquent\\Builder\n    */\n    public function scopeOfType(\\$query, \\$type)\n    {\n        return \\$query-&gt;where('type', \\$type);\n    }\n}\n</code></pre>\n  <p>Ahora, puedes pasar los parámetros cuando llamas al scope:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = App\\User::ofType('admin')-&gt;get();\n</code></pre>\n  <h2>Comparando modelos</h2>\n  <p>En ocasiones necesitarás determinar si dos modelos son \"el mismo\". El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">is</span> puede ser usado para verificar rápidamente dos modelos que comparten llave principal, tabla y conexión a base de datos:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>if (\\$post-&gt;is(\\$anotherPost)) {\n    //\n}\n</code></pre>\n  <h2>Eventos</h2>\n  <p>Los modelos de Eloquent ejecutan varios eventos, permitiendo que captes los siguientes puntos en un ciclo de vida del modelo: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">retrieved</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">creating</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">created</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updating</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updated</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">saving</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">saved</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">deleting</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">deleted</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">restoring</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">restored</span>. Los eventos permiten que ejecutes fácilmente código cada vez que una clase de modelo específica es guardada o actualizada en la base de datos.</p>\n  <p>El evento <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">retrieved</span> se disparará cuando un modelo existente es obtenido de la base de datos. Cuando un nuevo modelo es guardado la primera vez, los eventos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">creating</span> y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">created</span> se disparan. Si un modelo ya existe en la base de datos y el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">save</span> es ejecutado, los eventos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updating</span> / <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updated</span> se dispararán. Sin embargo, en ambos casos, los eventos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">saving</span> / <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">saved</span> se dispararán.</p>\n  <p>Nota</p>\n  <p>Al realizar una actualización masiva a través de Eloquent, los eventos de modelo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">saved</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updated</span> no se activarán para los modelos actualizados. Esto se debe a que los modelos nunca se recuperan cuando se emite una actualización masiva.</p>\n  <p>Para empezar, define una propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$dispatchesEvents</span> en tu modelo Eloquent que mapee varios puntos del ciclo de vida de modelo de Eloquent a tus propias clases de eventos:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse App\\Events\\UserSaved;\nuse App\\Events\\UserDeleted;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nclass User extends Authenticatable\n{\n    use Notifiable;\n    /**\n    * The event map for the model.\n    *\n    * @var array\n    */\n    protected \\$dispatchesEvents = [\n        'saved' =&gt; UserSaved::class,\n        'deleted' =&gt; UserDeleted::class,\n    ];\n}\n</code></pre>\n  <p>\n    Después de definir y mapear tus eventos Eloquent, puedes usar listeners de eventos para manejar los eventos.\n  </p>\n  <h3>Observadores</h3>\n  <h4>Definiendo observadores</h4>\n  <p>Si estás escuchando muchos eventos en un modelo dado, puedes usar observadores para agrupar todos tus listeners dentro de una sola clase. Las clases observadoras tienen nombres de métodos que reflejan los eventos de Eloquent que deseas escuchar. Cada uno de estos métodos reciben el modelo como su único argumento. El comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:observer</span> Artisan es la forma más sencilla de crear una nueva clase de observador:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan make:observer UserObserver --model=User\n</code></pre>\n  <p>Este comando colocará el nuevo observador en tu directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App/Observers</span>. Si este directorio no existe, Artisan lo creará por ti. Tu nuevo observador lucirá como lo siguiente:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Observers;\nuse App\\User;\nclass UserObserver\n{\n    /**\n    * Handle the User \"created\" event.\n    *\n    * @param  \\App\\User  \\$user\n    * @return void\n    */\n    public function created(User \\$user)\n    {\n        //\n    }\n    /**\n    * Handle the User \"updated\" event.\n    *\n    * @param  \\App\\User  \\$user\n    * @return void\n    */\n    public function updated(User \\$user)\n    {\n        //\n    }\n    /**\n    * Handle the User \"deleted\" event.\n    *\n    * @param  \\App\\User  \\$user\n    * @return void\n    */\n    public function deleted(User \\$user)\n    {\n        //\n    }\n}\n</code></pre>\n  <p>Para registrar un observador, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">observe</span> en el modelo que deseas observar. Puedes registrar los observadores en el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span> de uno de tus proveedores de servicio. En este ejemplo, registraremos el observador en el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AppServiceProvider</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Providers;\nuse App\\User;\nuse App\\Observers\\UserObserver;\nuse Illuminate\\Support\\ServiceProvider;\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n    * Register any application services.\n    *\n    * @return void\n    */\n    public function register()\n    {\n        //\n    }\n    /**\n    * Bootstrap any application services.\n    *\n    * @return void\n    */\n    public function boot()\n    {\n        User::observe(UserObserver::class);\n    }\n}\n</code></pre>\n</div>"
      },
      {
        "titulo": "Relaciones",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Eloquent: Relaciones</h1>\n  <ul>\n    <li>Introducción</li>\n    <li>\n      Definiendo relaciones\n      <ul>\n        <li>Uno a uno</li>\n        <li>Uno a muchos</li>\n        <li>Uno a muchos (inverso)</li>\n        <li>Muchos a muchos</li>\n        <li>Definiendo modelos de tabla intermedia personalizados</li>\n        <li>Tiene uno a través de</li>\n        <li>Tiene muchos a través de</li>\n      </ul>\n    </li>\n    <li>\n      Relaciones polimórficas\n      <ul>\n        <li>Uno a uno</li>\n        <li>Uno a muchos</li>\n        <li>Muchos a muchos</li>\n        <li>Tipos polimórficos personalizados</li>\n      </ul>\n    </li>\n    <li>\n      Consultando relaciones\n      <ul>\n        <li>Métodos de relación vs. propiedades dinámicas</li>\n        <li>Consultando la existencia de relación</li>\n        <li>Consultando la ausencia de relación</li>\n        <li>Consultando relaciones polimorficas</li>\n        <li>Contando modelos relacionados</li>\n      </ul>\n    </li>\n    <li>\n      Precarga (eager loading)\n      <ul>\n        <li>Restringiendo precargas</li>\n        <li>Precarga diferida (lazy eager loading)</li>\n      </ul>\n    </li>\n    <li>\n      Insertando y actualizando modelos relacionados\n      <ul>\n        <li>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">save</span></li>\n        <li>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span></li>\n        <li>Actualizando relaciones pertenece a (BelongsTo)</li>\n        <li>Actualizando relaciones muchos a muchos</li>\n      </ul>\n    </li>\n    <li>Tocando marcas de tiempo del padre</li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>Las tablas de base de datos frecuentemente están relacionadas a otra tabla. Por ejemplo, un post de un blog puede tener muchos comentarios o un pedido podría estar relacionado al usuario que lo ordenó. Eloquent hace que manejar y trabajar con estas relaciones sea fácil y soporta varios tipos de relaciones:</p>\n  <ul>\n    <li>Uno a Uno</li>\n    <li>Uno a Muchos</li>\n    <li>Muchos a Muchos</li>\n    <li>Uno a Través de</li>\n    <li>Muchos a Través de</li>\n    <li>Uno a Uno (Polimórfica)</li>\n    <li>Uno a Muchos (Polimórfica)</li>\n    <li>Muchos a Muchos (Polimórfica)</li>\n  </ul>\n  <h2>Definiendo relaciones</h2>\n  <p>\n    Las relaciones de Eloquent se definen como métodos en tus clases de modelo de Eloquent. Debido a que, como los mismos modelos Eloquent, las relaciones también sirven como poderosos constructores de consultas , puesto que definir relaciones como métodos proporciona potentes capacidades de encadenamiento de métodos y consultas. Por ejemplo, podemos encadenar restricciones adicionales en esta relación <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">posts</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user-&gt;posts()-&gt;where('active', 1)-&gt;get();\n</code></pre>\n  <p>Pero, antes de profundizar demasiado en el uso de relaciones, aprendamos cómo definir cada tipo.\n  </p>\n  <h3>Uno A Uno</h3>\n  <p>Una relación de uno a uno es una relación muy sencilla. Por ejemplo, un modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span> podría estar asociado con un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Phone</span>. Para definir esta relación, colocaremos un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">phone</span> en el modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span>. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">phone</span> debería llamar al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hasOne</span> y devolver su resultado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass User extends Model\n{\n    /**\n    * Get the phone record associated with the user.\n    */\n    public function phone()\n    {\n        return \\$this-&gt;hasOne('App\\Phone');\n    }\n}\n</code></pre>\n  <p>El primer argumento pasado al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hasOne</span> es el nombre del modelo relacionado. Una vez que la relación es definida, podemos obtener el registro relacionado usando propiedades dinámicas de Eloquent. Las propiedades dinámicas permiten que accedas a métodos de relación como si fueran propiedades definidas en el modelo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$phone = User::find(1)-&gt;phone;\n</code></pre>\n  <p>Eloquent determina la clave foránea de la relación en base al nombre del modelo. En este caso, se asume automáticamente que el modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Phone</span> tenga una clave foránea\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">user_id</span>. Si deseas sobrescribir esta convención, puedes pasar un segundo argumento al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hasOne</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>return \\$this-&gt;hasOne('App\\Phone', 'foreign_key');\n</code></pre>\n  <p>Adicionalmente, Eloquent asume que la clave foránea debería tener un valor que coincida con la columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">id</span> (o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$primaryKey</span> personalizada) del padre. En otras palabras, Eloquent buscará el valor de la columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">id</span> del usuario en la columna\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">user_id</span> de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Phone</span>. Si prefieres que la relación use un valor distinto de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">id</span>, puedes pasar un tercer argumento al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hasOne</span> especificando tu clave personalizada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>return \\$this-&gt;hasOne('App\\Phone', 'foreign_key', 'local_key');\n</code></pre>\n  <h4>Definiendo el inverso de la relación</h4>\n  <p>Así, podemos acceder al modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Phone</span> desde nuestro <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span>. Ahora, vamos a definir una relación en el modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Phone</span> que nos permitirá accdeder al\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span> que posee el teléfono. Podemos definir el inverso de una relación\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hasOne</span> usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">belongsTo</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Phone extends Model\n{\n    /**\n    * Get the user that owns the phone.\n    */\n    public function user()\n    {\n        return \\$this-&gt;belongsTo('App\\User');\n    }\n}\n</code></pre>\n  <p>En el ejemplo anterior, Eloquent intentará hacer coincidir el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">user_id</span> del modelo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Phone</span> con un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">id</span> en el modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span>. Eloquent determina el nombre de la clave foránea de forma predeterminada al examinar el nombre del método de la relación y agregando el sufijo al nombre del método con <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">_id</span>. Sin embargo, si la clave foránea en el modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Phone</span> no es <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">user_id</span>, puedes pasar un nombre de clave personalizada como segundo argumento al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">belongsTo</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Get the user that owns the phone.\n*/\npublic function user()\n{\n    return \\$this-&gt;belongsTo('App\\User', 'foreign_key');\n}\n</code></pre>\n  <p>Si tu modelo padre no usa <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">id</span> como su clave primaria, o deseas hacer join al modelo hijo con una columna diferente, puedes pasar un tercer argumento al método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">belongsTo</span> especificando la clave personalizada de tu tabla padre:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Get the user that owns the phone.\n*/\npublic function user()\n{\n    return \\$this-&gt;belongsTo('App\\User', 'foreign_key', 'other_key');\n}\n</code></pre>\n  <h3>Uno a muchos</h3>\n  <p>Una relación de \"uno-a-muchos\" es usada para definir relaciones donde un solo modelo posee cualquier cantidad de otros modelos. Por ejemplo, un post de un blog puede tener un número infinito de comentarios. Al igual que todas las demás relaciones de Eloquent, las relaciones uno-a-muchos son definidas al colocar una función en tu modelo Eloquent:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Post extends Model\n{\n    /**\n    * Get the comments for the blog post.\n    */\n    public function comments()\n    {\n        return \\$this-&gt;hasMany('App\\Comment');\n    }\n}\n</code></pre>\n  <p>Recuerda, Eloquent determinará automáticamente la columna de clave foránea apropiada en el modelo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Comment</span>. Por convención, Eloquent tomará el nombre \"snake_case\" del modelo que la contiene y le agregará el sufijo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">_id</span>. Para este ejemplo, Eloquent asumirá que la clave foránea del modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Comment</span> es <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">post_id</span>.</p>\n  <p>Una vez que la relación ha sido definida, podemos acceder a la colección de comentarios al acceder a la propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">comments</span>. Recuerda, ya que Eloquent proporciona \"propiedades dinámicas\", podemos acceder a los métodos de la relación como si fueran definidos como propiedades en el modelo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$comments = App\\Post::find(1)-&gt;comments;\nforeach (\\$comments as \\$comment) {\n    //\n}\n</code></pre>\n  <p>Debido a que todas las relaciones también sirven como constructores de consultas (query builders), puedes agregar restricciones adicionales a cuyos comentarios sean obtenidos ejecutando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">comments</span> y encadenando condiciones en la consulta:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$comment = App\\Post::find(1)-&gt;comments()-&gt;where('title', 'foo')-&gt;first();\n</code></pre>\n  <p>Igual que el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hasOne</span>, también puedes sobrescribir las claves foráneas y locales al pasar argumentos adicionales al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hasMany</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>return \\$this-&gt;hasMany('App\\Comment', 'foreign_key');\nreturn \\$this-&gt;hasMany('App\\Comment', 'foreign_key', 'local_key');\n</code></pre>\n  <h3>Uno a muchos (inverso)</h3>\n  <p>Ahora que puedes acceder a todos los comentarios de un post, vamos a definir una relación para permitir a un comentario acceder a su post padre. Para definir el inverso de una relación <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hasMany</span>, define una función de relación en el modelo hijo que ejecute el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">belongsTo</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Comment extends Model\n{\n    /**\n    * Get the post that owns the comment.\n    */\n    public function post()\n    {\n        return \\$this-&gt;belongsTo('App\\Post');\n    }\n}\n</code></pre>\n  <p>Una vez que la relación ha sido definida, podemos obtener el modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span> para un\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Comment</span> accediendo a la \"propiedad dinámica\" de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">post</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$comment = App\\Comment::find(1);\necho \\$comment-&gt;post-&gt;title;\n</code></pre>\n  <p>En el ejemplo anterior, Eloquent tratará de hacer coincidir el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">post_id</span> del modelo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Comment</span> con un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">id</span> en el modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span>. Eloquent determina el nombre de la clave foránea por defecto, examinando el nombre del método de la relación y agregando un sufijo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">_</span> al nombre del método, seguido del nombre de la columna principal de la llave. Sin embargo, si la clave foránea en el modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Comment</span> no es\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">post_id</span>, puedes pasar un nombre de clave personalizado como segundo argumento al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">belongsTo</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Get the post that owns the comment.\n*/\npublic function post()\n{\n    return \\$this-&gt;belongsTo('App\\Post', 'foreign_key');\n}\n</code></pre>\n  <p>Si tu modelo padre no usa <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">id</span> como su clave primaria, o deseas hacer join al modelo hijo con una columna diferente, puedes pasar un tercer argumento al método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">belongsTo</span> especificando la clave personalizada de tu tabla padre.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Get the post that owns the comment.\n*/\npublic function post()\n{\n    return \\$this-&gt;belongsTo('App\\Post', 'foreign_key', 'other_key');\n}\n</code></pre>\n  <h3>Muchos a muchos</h3>\n  <p>Las relaciones de muchos-a-muchos son ligeramente más complicadas que las relaciones\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hasOne</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hasMany</span>. Un ejemplo de tal relación es un usuario con muchos roles, donde los roles también son compartidos por otros usuarios. Por ejemplo, muchos usuarios pueden tener el rol \"Admin\". Para definir esta relación, tres tablas de bases de datos son necesitadas: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">users</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">roles</span>, y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">role_user</span>. La tabla <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">role_user</span> es derivada del orden alfabético de los nombres de modelo relacionados y contiene las columnas\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">user_id</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">role_id</span>.</p>\n  <p>Las relaciones de muchos-a-muchos son definidas escribiendo un método que devuelve el resultado del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">belongsToMany</span>. Por ejemplo, vamos a definir el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">roles</span> en nuestro modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass User extends Model\n{\n    /**\n    * The roles that belong to the user.\n    */\n    public function roles()\n    {\n        return \\$this-&gt;belongsToMany('App\\Role');\n    }\n}\n</code></pre>\n  <p>Una vez que la relación es definida, puedes acceder a los roles del usuario usando la propiedad dinámica <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">roles</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = App\\User::find(1);\nforeach (\\$user-&gt;roles as \\$role) {\n    //\n}\n</code></pre>\n  <p>Como con los otros tipos de relación, puedes ejecutar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">roles</span> para continuar encadenando las restricciones de consulta en la relación:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$roles = App\\User::find(1)-&gt;roles()-&gt;orderBy('name')-&gt;get();\n</code></pre>\n  <p>Como mencionamos previamente, para determinar el nombre de la tabla asociativa, Eloquent juntará los dos nombres de modelo en orden alfabético. Sin embargo, eres libre de sobrescribir esta convención. Puedes hacer eso pasando un segundo argumento al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">belongsToMany</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>return \\$this-&gt;belongsToMany('App\\Role', 'role_user');\n</code></pre>\n  <p>Además de personalizar el nombre de la tabla asociativa, también puedes personalizar los nombres de columna de las claves en la tabla pasando argumentos adicionales al método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">belongsToMany</span>. El tercer argumento es el nombre de clave foránea del modelo en el cual estás definiendo la relación, mientras el cuarto argumento es el nombre de la clave foránea del modelo que estás asociando:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>return \\$this-&gt;belongsToMany('App\\Role', 'role_user', 'user_id', 'role_id');\n</code></pre>\n  <h4>Definiendo el inverso de la relación</h4>\n  <p>Para definir el inverso de una relación de muchos-a-muchos, puedes colocar otra llamada de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">belongsToMany</span> en tu modelo relacionado. Para continuar con nuestro ejemplo de roles de usuario, vamos a definir el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">users</span> en el modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Role</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Role extends Model\n{\n    /**\n    * The users that belong to the role.\n    */\n    public function users()\n    {\n        return \\$this-&gt;belongsToMany('App\\User');\n    }\n}\n</code></pre>\n  <p>Como puedes ver, la relación es definida exactamente de la misma forma que su contraparte <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span>, con la excepción de que referencia al modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\User</span>. Ya que estamos reusando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">belongsToMany</span>, todas las tablas y opciones de personalización de claves usuales están disponibles al momento de definir el inverso de las relaciones de muchos-a-muchos.\n  </p>\n  <h4>Obteniendo columnas de tablas intermedias (Pivote)</h4>\n  <p>Como ya has aprendido, trabajar con relaciones de muchos-a-muchos requiere la presencia de una tabla intermedia o pivote. Eloquent proporciona algunas formas muy útiles de interactuar con esta tabla. Por ejemplo, vamos a asumir que nuestro objeto <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span> tiene muchos objetos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Role</span> al que está relacionado. Después de acceder a esta relación, podemos acceder a la tabla intermedia usando el atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pivot</span> en los modelos:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = App\\User::find(1);\nforeach (\\$user-&gt;roles as \\$role) {\n    echo \\$role-&gt;pivot-&gt;created_at;\n}\n</code></pre>\n  <p>Ten en cuenta que a cada modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Role</span> que obtenemos se le asigna automáticamente un atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pivot</span>. Este atributo contiene un modelo que representa la tabla intermedia y puede ser usado como cualquier otro modelo de Eloquent.</p>\n  <p>De forma predeterminada, solo las claves del modelo estarán presentes en el objeto\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pivot</span>. Si tu tabla pivote contiene atributos extras, debes especificarlos cuando definas la relación.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>return \\$this-&gt;belongsToMany('App\\Role')-&gt;withPivot('column1', 'column2');\n</code></pre>\n  <p>Si quieres que tu tabla pivote automáticamente mantenga las marcas de tiempo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">created_at</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updated_at</span>, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withTimestamps</span> en la definición de la relación:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>return \\$this-&gt;belongsToMany('App\\Role')-&gt;withTimestamps();\n</code></pre>\n  <h4>Personalizando el nombre del atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pivot</span></h4>\n  <p>Como se señaló anteriormente, los atributos de la tabla intermedia pueden ser accedidos en modelos usando el atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pivot</span>. Sin embargo, eres libre de personalizar el nombre de este atributo para que refleje mejor su propósito dentro de tu aplicación.</p>\n  <p>Por ejemplo, si tu aplicación contiene usuarios que pueden suscribirse a podcasts, probablemente tengas una relación de muchos-a-muchos entre usuarios y podcasts. Si éste es el caso, puedes desear renombrar tu tabla pivote intermedia como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">subscription</span> en lugar de\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pivot</span>. Esto puede ser hecho usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">as</span> al momento de definir la relación:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>return \\$this-&gt;belongsToMany('App\\Podcast')\n                -&gt;as('subscription')\n                -&gt;withTimestamps();\n</code></pre>\n  <p>Una vez hecho esto, puedes acceder a los datos de la tabla intermedia usando el nombre personalizado:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = User::with('podcasts')-&gt;get();\nforeach (\\$users-&gt;flatMap-&gt;podcasts as \\$podcast) {\n    echo \\$podcast-&gt;subscription-&gt;created_at;\n}\n</code></pre>\n  <h4>Filtrando relaciones a través de columnas de tablas intermedias</h4>\n  <p>También puedes filtrar los resultados devueltos por <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">belongsToMany</span> usando los métodos\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">wherePivot</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">wherePivotIn</span> al momento de definir la relación:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>return \\$this-&gt;belongsToMany('App\\Role')-&gt;wherePivot('approved', 1);\nreturn \\$this-&gt;belongsToMany('App\\Role')-&gt;wherePivotIn('priority', [1, 2]);\n</code></pre>\n  <h3>Definiendo modelos de tabla intermedia personalizados</h3>\n  <p>Si prefieres definir un modelo personalizado para representar la tabla intermedia o pivote de tu relación, puedes ejecutar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">using</span> al momento de definir la relación. Los modelos de tablas intermedias de muchos-a-muchos personalizados deben extender la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Database\\Eloquent\\Relations\\Pivot</span> mientras que los modelos polimórficos muchos-a-muchos deben extender la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Database\\Eloquent\\Relations\\MorphPivot</span>. Por ejemplo, podemos definir un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Role</span> que use un modelo pivote <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RoleUser</span> personalizado:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Role extends Model\n{\n    /**\n    * The users that belong to the role.\n    */\n    public function users()\n    {\n        return \\$this-&gt;belongsToMany('App\\User')-&gt;using('App\\RoleUser');\n    }\n}\n</code></pre>\n  <p>Al momento de definir el modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RoleUser</span>, extenderemos la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Pivot</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Relations\\Pivot;\nclass RoleUser extends Pivot\n{\n    //\n}\n</code></pre>\n  <p>Puedes combinar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">using</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withPivot</span> para retornar columnas de la tabla intermedia. Por ejemplo, puedes retornar las columnas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">created_by</span> y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updated_by</span> desde la tabla pivote <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RoleUser</span> pasando los nombres de las columnas al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withPivot</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Role extends Model\n{\n    /**\n    * The users that belong to the role.\n    */\n    public function users()\n    {\n        return \\$this-&gt;belongsToMany('App\\User')\n                        -&gt;using('App\\RoleUser')\n                        -&gt;withPivot([\n                            'created_by',\n                            'updated_by'\n                        ]);\n    }\n}\n</code></pre>\n  <p>Nota</p>\n  <p><strong>Nota:</strong> Los modelos Pivot no pueden usar el trait <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">SoftDeletes</span>. Si necesitas hacer soft delete de registros pivot considera convertir tu modelo pivot a un modelo de Eloquent.</p>\n  <h4>Modelos de pivote personalizados e IDs incrementales</h4>\n  <p>Si has definido una relación de muchos a muchos que usa un modelo de pivote personalizado, y ese modelo de pivote tiene una clave primaria de incremento automático, debes asegurarte de que su clase de modelo de pivote personalizado defina una propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">incrementing</span> que se establece en<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Indicates if the IDs are auto-incrementing.\n*\n* @var bool\n*/\npublic \\$incrementing = true;\n</code></pre>\n  <h3>Tiene uno a través de (hasOneThrough)</h3>\n  <p>La relación \"tiene uno a través\" vincula los modelos a través de una única relación intermedia. Por ejemplo, si cada proveedor (supplier) tiene un usuario (user) y cada usuario está asociado con un registro del historial (history) de usuarios, entonces el modelo del proveedor puede acceder al historial del usuario <em>a través</em> del usuario. Veamos las tablas de base de datos necesarias para definir esta relación:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>users\n    id - integer\n    supplier_id - integer\nsuppliers\n    id - integer\nhistory\n    id - integer\n    user_id - integer\n</code></pre>\n  <p>Aunque la tabla <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">history</span> no contiene una columna<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">supplier_id</span>, la relación\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hasOneThrough</span> puede proporcionar acceso al historial del usuario desde el modelo del proveedor. Ahora que hemos examinado la estructura de la tabla para la relación, vamos a definirla en el modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Supplier</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Supplier extends Model\n{\n    /**\n    * Get the user's history.\n    */\n    public function userHistory()\n    {\n        return \\$this-&gt;hasOneThrough('App\\History', 'App\\User');\n    }\n}\n</code></pre>\n  <p>El primer argumento pasado al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hasOneThrough</span> es el nombre del modelo final al que queremos acceder, mientras que el segundo argumento es el nombre del modelo intermedio.</p>\n  <p>Se utilizarán las convenciones típicas de clave foránea de Eloquent al realizar las consultas de la relación. Si deseas personalizar las claves de la relación, puedes pasarlas como el tercer y cuarto argumento al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hasOneThrough</span>. El tercer argumento es el nombre de la clave foránea en el modelo intermedio. El cuarto argumento es el nombre de la clave foránea en el modelo final. El quinto argumento es la clave local, mientras que el sexto argumento es la clave local del modelo intermedio:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>class Supplier extends Model\n{\n    /**\n    * Get the user's history.\n    */\n    public function userHistory()\n    {\n        return \\$this-&gt;hasOneThrough(\n            'App\\History',\n            'App\\User',\n            'supplier_id', // Foreign key on users table...\n            'user_id', // Foreign key on history table...\n            'id', // Local key on suppliers table...\n            'id' // Local key on users table...\n        );\n    }\n}\n</code></pre>\n  <h3>Tiene muchos a través de (hasManyThrough)</h3>\n  <p>La relación \"tiene-muchos-a-través-de\" proporciona una abreviación conveniente para acceder a relaciones distantes por medio de una relación intermedia. Por ejemplo, un modelo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Country</span> podría tener muchos modelos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span> a través de un modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span> intermedio. En este ejemplo, podrías traer todos los posts de un blog para un país dado. Vamos a buscar las tablas requeridas para definir esta relación:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>countries\n    id - integer\n    name - string\nusers\n    id - integer\n    country_id - integer\n    name - string\nposts\n    id - integer\n    user_id - integer\n    title - string\n</code></pre>\n  <p>Aunque los <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">posts</span> no contienen una columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">country_id</span>, la relación\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hasManyThrough</span> proporciona acceso a los posts de un país por medio de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$country-&gt;posts</span>. Para ejecutar esta consulta, Eloquent inspecciona el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">country_id</span> de la tabla intermedia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">users</span>. Después de encontrar los ID de usuario que coincidan, serán usados para consultar la tabla <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">posts</span>.</p>\n  <p>Ahora que hemos examinado la estructura de la tabla para la relación, vamos a definirla en el modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Country</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Country extends Model\n{\n    /**\n    * Get all of the posts for the country.\n    */\n    public function posts()\n    {\n        return \\$this-&gt;hasManyThrough('App\\Post', 'App\\User');\n    }\n}\n</code></pre>\n  <p>El primer argumento pasado al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hasManyThrough</span> es el nombre del modelo final que deseamos acceder, mientras que el segundo argumento es el nombre del modelo intermedio.</p>\n  <p>Las convenciones de clave foránea típicas de Eloquent serán usadas al momento de ejecutar las consultas de la relación. Si prefieres personalizar las claves de la relación, puedes pasarlos como tercer y cuarto argumentos del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hasManyThrough</span>. El tercer argumento es el nombre de la clave foránea en el modelo intermedio. El cuarto argumento es el nombre de la clave foránea en el modelo final. El quinto argumento es la clave local, mientras el sexto argumento es la clave local del modelo intermedio:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>class Country extends Model\n{\n    public function posts()\n    {\n        return \\$this-&gt;hasManyThrough(\n            'App\\Post',\n            'App\\User',\n            'country_id', // Foreign key on users table...\n            'user_id', // Foreign key on posts table...\n            'id', // Local key on countries table...\n            'id' // Local key on users table...\n        );\n    }\n}\n</code></pre>\n  <h2>Relaciones polimórficas</h2>\n  <p>Una relación polimórfica permite que el modelo objetivo pertenezca a más de un tipo de modelo usando una sola asociación.</p>\n  <h3>Una a una (polimórfica)</h3>\n  <h4>Estructura de tabla</h4>\n  <p>Una relación polimorfica de uno-a-uno es similar a una relación de uno-a-uno simple; sin embargo, el modelo objetivo puede pertenecer a más de un tipo de modelo en una sola asociación. Por ejemplo, un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span> de un blog y un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span> pueden compartir una relación polimórfica con un modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Image</span>. Usando una relación polimórfica de uno-a-uno te permite tener una sola lista de imagenes únicas que son usadas tanto los posts del blog como por las cuentas de los usuarios. Primero, vamos a examinar la estructura de la tabla:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>posts\n    id - integer\n    name - string\nusers\n    id - integer\n    name - string\nimages\n    id - integer\n    url - string\n    imageable_id - integer\n    imageable_type - string\n</code></pre>\n  <p>Observa las columnas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">imageable_id</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">imageable_type</span> en la tabla <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">images</span>. La columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">imageable_id</span> contendrá el valor del ID del post o el usuario, mientras que la columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">imageable_type</span> contendrá el nombre de clase del modelo padre. La columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">imageable_type</span> es usada por Eloquent para determinar cuál \"tipo\" de modelo padre retornar al acceder a la relación <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">imageable</span>.</p>\n  <h4>Estructura del modelo</h4>\n  <p>A continuación, vamos a examinar las definiciones de modelo necesarias para construir esta relación:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Image extends Model\n{\n    /**\n    * Get the owning imageable model.\n    */\n    public function imageable()\n    {\n        return \\$this-&gt;morphTo();\n    }\n}\nclass Post extends Model\n{\n    /**\n    * Get the post's image.\n    */\n    public function image()\n    {\n        return \\$this-&gt;morphOne('App\\Image', 'imageable');\n    }\n}\nclass User extends Model\n{\n    /**\n    * Get the user's image.\n    */\n    public function image()\n    {\n        return \\$this-&gt;morphOne('App\\Image', 'imageable');\n    }\n}\n</code></pre>\n  <h4>Retornando la relación</h4>\n  <p>Una vez que tu base de datos y modelos son definidos, puedes acceder a las relaciones mediante tus modelos. Por ejemplo, para retornar la imagen para un post, podemos usar la propiedad dinámica <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">image</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$post = App\\Post::find(1);\n\\$image = \\$post-&gt;image;\n</code></pre>\n  <p>Puedes también retornar el padre del modelo polimórfico accediendo al nombre del método que realiza la llamada a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">morphTo</span>. En nuestro caso, éste es el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">imageable</span> en el modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Image</span>. Entonces, accederemos al método como una propiedad dinámica:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$image = App\\Image::find(1);\n\\$imageable = \\$image-&gt;imageable;\n</code></pre>\n  <p>La relación <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">imageable</span> en el modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Image</span> retornar ya sea una instancia de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span>, dependiendo del tipo de modelo que posea la imagen.\n  </p>\n  <h3>Uno a muchos (Polimórfica)</h3>\n  <h4>Estructura de tabla</h4>\n  <p>Una relación polimórfica de uno-a-muchos es similar a una relación de uno-a-muchos sencilla; sin embargo, el modelo objetivo puede pertenecer a más de un tipo de modelo en una sola asociación. Por ejemplo, imagina que usuarios de tu aplicación pueden comentar tanto en posts como en videos. Usando relaciones polimórficas, puedes usar una sola tabla <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">comments</span> para ambos escenarios. Primero, vamos a examinar la estructura de tabla requerida para esta relación:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>posts\n    id - integer\n    title - string\n    body - text\nvideos\n    id - integer\n    title - string\n    url - string\ncomments\n    id - integer\n    body - text\n    commentable_id - integer\n    commentable_type - string\n</code></pre>\n  <h4>Estructura de modelo</h4>\n  <p>A continuación, vamos a examinar las definiciones de modelos necesarias para construir esta relación:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Comment extends Model\n{\n    /**\n    * Get the owning commentable model.\n    */\n    public function commentable()\n    {\n        return \\$this-&gt;morphTo();\n    }\n}\nclass Post extends Model\n{\n    /**\n    * Get all of the post's comments.\n    */\n    public function comments()\n    {\n        return \\$this-&gt;morphMany('App\\Comment', 'commentable');\n    }\n}\nclass Video extends Model\n{\n    /**\n    * Get all of the video's comments.\n    */\n    public function comments()\n    {\n        return \\$this-&gt;morphMany('App\\Comment', 'commentable');\n    }\n}\n</code></pre>\n  <h4>Retornando la relación</h4>\n  <p>Una vez que tu base de datos y modelos son definidos, puedes acceder a las relaciones mediante tus modelos. Por ejemplo, para acceder a todos los comentarios de un post podemos usar la propiedad dinámica <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">comments</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$post = App\\Post::find(1);\nforeach (\\$post-&gt;comments as \\$comment) {\n    //\n}\n</code></pre>\n  <p>También puedes retornar al propietario de una relación polimórfica desde un modelo polimórfico accediendo al nombre del método que realiza la llamada a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">morphTo</span>. En nuestro caso, éste es el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">commentable</span> en el modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Comment</span>. Así que, accederemos a dicho método como una propiedad dinámica:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$comment = App\\Comment::find(1);\n\\$commentable = \\$comment-&gt;commentable;\n</code></pre>\n  <p>La relación <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">commentable</span> en el modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Comment</span> retornará ya sea una instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Video</span>, dependiendo de qué tipo de modelo es el propietario del comentario.</p>\n  <h3>Muchos A Muchos (Polimórfica)</h3>\n  <h4>Estructura de tabla</h4>\n  <p>Las relaciones polimórficas de muchos-a-muchos son un poco más complicadas que las relaciones\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">morphOne</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">morphMany</span>. Por ejemplo, un modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span> de un blog y un modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Video</span> pueden compartir una relación polimórfica con un modelo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Tag</span>. Usando una relación polimórfica de muchos-a-muchos te permite tener una única lista de etiquetas que son compartidas a través de posts y videos. Primero, vamos a examinar la estructura de tabla:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>posts\n    id - integer\n    name - string\nvideos\n    id - integer\n    name - string\ntags\n    id - integer\n    name - string\ntaggables\n    tag_id - integer\n    taggable_id - integer\n    taggable_type - string\n</code></pre>\n  <h4>Estructura del modelo</h4>\n  <p>Seguidamente, estamos listos para definir las relaciones en el modelo. Ambos modelos\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Video</span> tendrán un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tags</span> que ejecuta el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">morphToMany</span> en la clase base de Eloquent:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Post extends Model\n{\n    /**\n    * Get all of the tags for the post.\n    */\n    public function tags()\n    {\n        return \\$this-&gt;morphToMany('App\\Tag', 'taggable');\n    }\n}\n</code></pre>\n  <h4>Definiendo el inverso de la relación</h4>\n  <p>A continuación, en el modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Tag</span>, debes definir un método para cada uno de sus modelos relacionados. Así, para este ejemplo, definiremos un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">posts</span> y un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">videos</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Tag extends Model\n{\n    /**\n    * Get all of the posts that are assigned this tag.\n    */\n    public function posts()\n    {\n        return \\$this-&gt;morphedByMany('App\\Post', 'taggable');\n    }\n    /**\n    * Get all of the videos that are assigned this tag.\n    */\n    public function videos()\n    {\n        return \\$this-&gt;morphedByMany('App\\Video', 'taggable');\n    }\n}\n</code></pre>\n  <h4>Obteniendo la relación</h4>\n  <p>Una vez que tu tabla en la base de datos y modelos son definidos, puedes acceder las relaciones por medio de tus modelos. Por ejemplo, para acceder a todos los tags de un post, puedes usar la propiedad dinámica <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tags</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$post = App\\Post::find(1);\nforeach (\\$post-&gt;tags as \\$tag) {\n    //\n}\n</code></pre>\n  <p>También puedes obtener el propietario de una relación polimórfica desde el modelo polimórfico accediendo al nombre del método que ejecutó la llamada a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">morphedByMany</span>. En nuestro caso, estos son los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">posts</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">videos</span> en el modelo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Tag</span>. Así, accederemos a esos métodos como propiedades dinámicas:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$tag = App\\Tag::find(1);\nforeach (\\$tag-&gt;videos as \\$video) {\n    //\n}\n</code></pre>\n  <h3>Tipos polimórficos personalizados</h3>\n  <p>Por defecto, Laravel usará el nombre completo de clase para almacenar el tipo del modelo relacionado. Por ejemplo, dado el ejemplo uno-a-muchos de arriba donde un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Comment</span> puede pertenecer a un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span> o a un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Video</span>, el\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">commentable_type</span> por defecto será <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Post</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Video</span>, respectivamente. Sin embargo, puedes querer desacoplar tu base de datos de la estructura interna de tu aplicación. En dicho caso, puedes definir un \"mapa de morfología (morph map)\" para indicarle a Eloquent que use un nombre personalizado para cada modelo en lugar del nombre de la clase:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Illuminate\\Database\\Eloquent\\Relations\\Relation;\nRelation::morphMap([\n    'posts' =&gt; 'App\\Post',\n    'videos' =&gt; 'App\\Video',\n]);\n</code></pre>\n  <p>TIP</p>\n  <p>Al agregar un \"morph map\" a tu aplicación existente, cada valor de la columna de morfología\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">*_type</span> en tu base de datos que aún contenga una clase completamente calificada necesitará ser convertida a su nombre de \"mapa\".</p>\n  <h2>Consultando relaciones</h2>\n  <p>Ya que todos los tipos de relaciones Eloquent son definidas por medio de métodos, puedes ejecutar esos métodos para obtener una instancia de la relación sin ejecutar realmente las consultas de la relación. Además, todos los tipos de relaciones Eloquent también sirven como constructores de consultas, permitiendo que continues encadenando restricciones dentro de la consulta de la relación antes de ejecutar finalmente el SQL contra la base de datos.</p>\n  <p>Por ejemplo, imagina un sistema de blog en el cual un modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span> tiene muchos modelos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span> asociados:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass User extends Model\n{\n    /**\n    * Get all of the posts for the user.\n    */\n    public function posts()\n    {\n        return \\$this-&gt;hasMany('App\\Post');\n    }\n}\n</code></pre>\n  <p>Puedes consultar la relación <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">posts</span> y agregar limitaciones a la relación de la siguiente forma:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = App\\User::find(1);\n\\$user-&gt;posts()-&gt;where('active', 1)-&gt;get();\n</code></pre>\n  <p>Puedes usar cualquiera de los métodos de constructor de consultas y así que asegúrate de revisar la documentación del constructor de consultas para aprender sobre todos los métodos disponibles.\n  </p>\n  <h4>Encadenando cláusulas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">orWhere</span> en relaciones</h4>\n  <p>Como se demostró en el ejemplo superior, eres libre de agregar restriciones adicionales a las relaciones al momento de realizar peticiones. Sin embargo, ten cuidado al encadenar cláusulas\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">orWhere</span> a una relación, dado que las cláusulas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">orWhere</span> serán agrupadas lógicamente en el mismo nivel que la restricción de la relación:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user-&gt;posts()\n        -&gt;where('active', 1)\n        -&gt;orWhere('votes', '&gt;=', 100)\n        -&gt;get();\n// select * from posts\n// where user_id = ? and active = 1 or votes &gt;= 100\n</code></pre>\n  <p>En la mayoria de los casos, probablemente pretendes usar grupos de restricciones para agrupar logicamente las comprobaciones condicionales entre parentisis:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Illuminate\\Database\\Eloquent\\Builder;\n\\$user-&gt;posts()\n        -&gt;where(function (Builder \\$query) {\n            return \\$query-&gt;where('active', 1)\n                            -&gt;orWhere('votes', '&gt;=', 100);\n        })\n        -&gt;get();\n// select * from posts\n// where user_id = ? and (active = 1 or votes &gt;= 100)\n</code></pre>\n  <h3>Métodos de relación Vs. propiedades dinámicas</h3>\n  <p>Si no necesitas agregar restricciones adicionales a una consulta de relación de Eloquent, puedes acceder a la relación como si fuera una propiedad. Por ejemplo, continuando con el uso de nuestros modelos de ejemplo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span>, podemos acceder a todos los posts de un usuario como sigue:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = App\\User::find(1);\nforeach (\\$user-&gt;posts as \\$post) {\n    //\n}\n</code></pre>\n  <p>Las propiedades dinámicas son de \"carga diferida (lazy loading)\", lo que significa que cargarán solamente los datos de su relación cuando realmente accedas a ellas. Debido a esto, los desarrolladores con frecuencia usan carga previa (eager loading) para precargar las relaciones que ellos saben que serán accedidas después de cargar el modelo. La carga previa proporciona una reducción significativa en consultas SQL que deben ser ejecutadas para cargar las relaciones de un modelo.</p>\n  <h3>Consultando la existencia de una relación</h3>\n  <p>Cuando accedes a los registros de un modelo, puedes desear limitar sus resultados basados en la existencia de una relación. Por ejemplo, imagina que quieres obtener todos los posts de blog que tienen al menos un comentario. Para hacer eso, puedes pasar el nombre de la relación a los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">has</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">orHas</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Retrieve all posts that have at least one comment...\n\\$posts = App\\Post::has('comments')-&gt;get();\n</code></pre>\n  <p>También puedes especificar un operador y la cantidad para personalizar aún más la consulta:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Retrieve all posts that have three or more comments...\n\\$App/posts = Post::has('comments', '&gt;=', 3)-&gt;get();\n</code></pre>\n  <p>Las instrucciones <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">has</span> anidadas también pueden ser construidas usando la notación de \"punto\". Por ejemplo, puedes obtener todos los posts que tienen al menos un comentario con votos:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Retrieve posts that have at least one comment with votes...\n\\$App/posts = Post::has('comments.votes')-&gt;get();\n</code></pre>\n  <p>Incluso si necesitas más potencia, puedes usar los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereHas</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">orWhereHas</span> para poner condiciones \"where\" en tus consultas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">has</span>. Estos métodos permiten que agregues restricciones personalizadas a una restricción de relación, tal como verificar el contenido de un comentario:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Illuminate\\Database\\Eloquent\\Builder;\n// Retrieve posts with at least one comment containing words like foo%\n\\$posts = App\\Post::whereHas('comments', function (Builder \\$query) {\n    \\$query-&gt;where('content', 'like', 'foo%');\n})-&gt;get();\n// Retrieve posts with at least ten comments containing words like foo%\n\\$posts = App\\Post::whereHas('comments', function (Builder \\$query) {\n    \\$query-&gt;where('content', 'like', 'foo%');\n}, '&gt;=', 10)-&gt;get();\n</code></pre>\n  <h3>Consultando la ausencia de una relación</h3>\n  <p>Al momento de acceder a los registros de un modelo, puedes desear limitar tus resultados en base a la ausencia de una relación. Por ejemplo, imagina que quieras obtener todos los posts de blogs que <strong>no</strong> tienen algún comentario. Para hacer eso, puedes pasar el nombre de la relación a los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">doesntHave</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">orDoesntHave</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$posts = App\\Post::doesntHave('comments')-&gt;get();\n</code></pre>\n  <p>Incluso si necesitas más potencia, puedes usar los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereDoesntHave</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">orWhereDoesntHave</span> para poner condiciones \"where\" en tus consultas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">doesntHave</span>. Estos métodos permiten que agregues restricciones personalizadas a una restricción de relación, tal como verificar el contenido de un comentario:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Illuminate\\Database\\Eloquent\\Builder;\n\\$posts = Post::whereDoesntHave('comments', function (Builder \\$query) {\n    \\$query-&gt;where('content', 'like', 'foo%');\n})-&gt;get();\n</code></pre>\n  <p>Puedes usar notación \"de puntos\" para ejecutar una consulta contra una relación anidada. Por ejemplo, la siguiente consulta entregará todos los posts con comentarios de autores que no están vetados:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Illuminate\\Database\\Eloquent\\Builder;\n\\$posts = App\\Post::whereDoesntHave('comments.author', function (Builder \\$query) {\n    \\$query-&gt;where('banned', 1);\n})-&gt;get();\n</code></pre>\n  <h3>Consultando relaciones polimorficas</h3>\n  <p>Para consultar la existencia de relaciones <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">MorphTo</span>, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereHasMorph</span> y sus métodos correspondientes:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Illuminate\\Database\\Eloquent\\Builder;\n// Retrieve comments associated to posts or videos with a title like foo%...\n\\$comments = App\\Comment::whereHasMorph(\n    'commentable',\n    ['App\\Post', 'App\\Video'],\n    function (Builder \\$query) {\n        \\$query-&gt;where('title', 'like', 'foo%');\n    }\n)-&gt;get();\n// Retrieve comments associated to posts with a title not like foo%...\n\\$comments = App\\Comment::whereDoesntHaveMorph(\n    'commentable',\n    'App\\Post',\n    function (Builder \\$query) {\n        \\$query-&gt;where('title', 'like', 'foo%');\n    }\n)-&gt;get();\n</code></pre>\n  <p>Puedes usar el parametro <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$type</span> para agregar diferentes restricciones dependiendo del modelo relacionado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Illuminate\\Database\\Eloquent\\Builder;\n\\$comments = App\\Comment::whereHasMorph(\n    'commentable',\n    ['App\\Post', 'App\\Video'],\n    function (Builder \\$query, \\$type) {\n        \\$query-&gt;where('title', 'like', 'foo%');\n        if (\\$type === 'App\\Post') {\n            \\$query-&gt;orWhere('content', 'like', 'foo%');\n        }\n    }\n)-&gt;get();\n</code></pre>\n  <p>En lugar de pasar un arreglo de posibles modelos polimorficos, puedes proporcionar un\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">*</span> como comodín y dejar que Laravel retorne todos los posibles tipos polimorficos desde la base de datos. Laravel ejecutará una solicitud adicional para poder realizar esta operación:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Illuminate\\Database\\Eloquent\\Builder;\n\\$comments = App\\Comment::whereHasMorph('commentable', '*', function (Builder \\$query) {\n    \\$query-&gt;where('title', 'like', 'foo%');\n})-&gt;get();\n</code></pre>\n  <h3>Contando modelos relacionados</h3>\n  <p>Si quieres contar el número de resultados de una relación sin cargarlos realmente puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withCount</span>, el cual coloca una columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">{relation}_count</span> en tus modelos resultantes. Por ejemplo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$posts = App\\Post::withCount('comments')-&gt;get();\nforeach (\\$posts as \\$post) {\n    echo \\$post-&gt;comments_count;\n}\n</code></pre>\n  <p>Puedes agregar las \"cuentas\" para múltiples relaciones así como también agregar restricciones a las consultas:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$posts = Post::withCount(['votes', 'comments' =&gt; function (\\$query) {\n    \\$query-&gt;where('content', 'like', 'foo%');\n}])-&gt;get();\necho \\$posts[0]-&gt;votes_count;\necho \\$posts[0]-&gt;comments_count;\n</code></pre>\n  <p>También puedes poner un alias al resultado de la cuenta de la relación, permitiendo múltiples cuentas en la misma relación:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Illuminate\\Database\\Eloquent\\Builder;\n\\$posts = App/post::withCount([\n    'comments',\n    'comments as pending_comments_count' =&gt; function (Builder \\$query) {\n        \\$query-&gt;where('approved', false);\n    }\n])-&gt;get();\necho \\$posts[0]-&gt;comments_count;\necho \\$posts[0]-&gt;pending_comments_count;\n</code></pre>\n  <p>Si estás combinando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withCount</span> con una instrucción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">select</span>, asegúrate de llamar a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withCount</span> después del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">select</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$posts = App\\Post::select(['title', 'body'])-&gt;withCount('comments')-&gt;get();\necho \\$posts[0]-&gt;title;\necho \\$posts[0]-&gt;body;\necho \\$posts[0]-&gt;comments_count;\n</code></pre>\n  <h2>Carga previa (eager loading)</h2>\n  <p>Al momento de acceder a las relaciones Eloquent como propiedades, los datos de la relación son \"cargados diferidamente (lazy loading)\". Esto significa que los datos de la relación no son cargados realmente hasta que primero accedas a la propiedad. Sin embargo, Eloquent puede \"cargar previamente (eager loading)\" las relaciones al mismo tiempo que consultas el modelo padre. La carga previa alivia el problema de la consulta N + 1. Para ilustrar el problema de la consulta N + 1, considera un modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Book</span> que está relacionado a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Author</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Book extends Model\n{\n    /**\n    * Get the author that wrote the book.\n    */\n    public function author()\n    {\n        return \\$this-&gt;belongsTo('App\\Author');\n    }\n}\n</code></pre>\n  <p>Ahora, vamos a obtener todos los libros y sus autores:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$books = App\\Book::all();\nforeach (\\$books as \\$book) {\n    echo \\$book-&gt;author-&gt;name;\n}\n</code></pre>\n  <p>Este ciclo ejecutará una consulta para obtener todos los libros en la tabla, despues otra consulta para cada libro para obtener el autor. Así, si tenemos 25 libros, este ciclo debería ejecutar 26 consultas: 1 para el libro original y 25 consultas adicionales para obtener el autor de cada libro.</p>\n  <p>Afortunadamente, podemos usar la carga previa para reducir esta operación a solo 2 consultas. Al momento de consultar, puedes especificar cuáles relaciones deberían ser precargadas usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">with</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$books = App\\Book::with('author')-&gt;get();\nforeach (\\$books as \\$book) {\n    echo \\$book-&gt;author-&gt;name;\n}\n</code></pre>\n  <p>Para esta operación, solo dos consultas serán ejecutadas:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>select * from books\nselect * from authors where id in (1, 2, 3, 4, 5, ...)\n</code></pre>\n  <h4>Carga previa de múltiples relaciones</h4>\n  <p>Algunas veces puedes necesitar la carga previa de varias relaciones diferentes en una operación única. Para hacer eso, pasa sólo los argumentos adicionales al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">with</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$books = App\\Book::with(['author', 'publisher'])-&gt;get();\n</code></pre>\n  <h4>Carga previa anidada</h4>\n  <p>Para precargar relaciones anidadas, puedes usar la sintaxis de \"punto\". Por ejemplo, vamos a precargar todos los autores de los libros y todos los contactos personales del autor en una instrucción de Eloquent:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$books = App\\Book::with('author.contacts')-&gt;get();\n</code></pre>\n  <h4>Eager Load anidado de relaciones <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">morphTo</span></h4>\n  <p>Si te gustaría hacer eager load de relaciones <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">morphTo</span>, así como de relaciones anidadas en varias entidades que podrían ser retornadas por dicha relación, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">with</span> en combinación con el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">morphWith</span> de la relación\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">morphTo</span>. Para ayudarte a ilustrar este método, vamos a considerar el siguiente método:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nuse Illuminate\\Database\\Eloquent\\Model;\nclass ActivityFeed extends Model\n{\n    /**\n    * Get the parent of the activity feed record.\n    */\n    public function parentable()\n    {\n        return \\$this-&gt;morphTo();\n    }\n}\n</code></pre>\n  <p>En este ejemplo, vamos a asumir que los modelos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Èvent</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Photo</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span> podrían crear moelos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ActivityFeed</span>. Adicionalmente, vamos a asumir que los modelos\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Event</span> pertenecen a una modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Calendar</span>, que los modelos\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Photo</span> están asociados con modelos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Tag</span> y los modelos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span> pertenecen a una modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Author</span>.</p>\n  <p>Usando estas definiciones de modelos y relaciones, podríamos retornar instancias del modelo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ActivityFeed</span> y hacer eager load de todos los modelos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">parentable</span> y sus respectivas relaciones anidadas:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Illuminate\\Database\\Eloquent\\Relations\\MorphTo;\n\\$activities = ActivityFeed::query()\n    -&gt;with(['parentable' =&gt; function (MorphTo \\$morphTo) {\n        \\$morphTo-&gt;morphWith([\n            Event::class =&gt; ['calendar'],\n            Photo::class =&gt; ['tags'],\n            Post::class =&gt; ['author'],\n        ]);\n    }])-&gt;get();\n</code></pre>\n  <h4>Cargando previamente columnas específicas</h4>\n  <p>No siempre necesitas todas las columna de las relaciones que estás obteniendo. Por esta razón, Eloquent te permite que especificar cuáles columnas de la relación te gustaría obtener:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$books = App\\Book::with('author:id,name')-&gt;get();\n</code></pre>\n  <p>Nota</p>\n  <p>Al momento de usar esta característica, siempre debes incluir la columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">id</span> en la lista de columnas que deseas obtener.</p>\n  <p>Para relaciones \"tiene muchos\" necesitas especificar tanto <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">id</span> como\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">foreign_key</span></p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$books = App\\Book::with('chapter:id,book_id,name')-&gt;get();\n</code></pre>\n  <p>Nota</p>\n  <p>Al usar esta caracteristica, siempre debes incluir la columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">id</span> y cualquier columna de clave foranea relevante en la lista de columnas que deseas retornar.</p>\n  <h4>Carga previa por defecto</h4>\n  <p>Algunas veces vas a querer cargar siempre algunas relaciones al retornar un modelo. Para lograr esto, puedes definir una propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$with</span> en el modelo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Book extends Model\n{\n    /**\n    * Always load the related author when retrieving a book\n    * The relationships that should always be loaded.\n    *\n    * @var array\n    */\n    protected \\$with = ['author'];\n    /**\n    * Get the author that wrote the book.\n    */\n    public function author()\n    {\n        return \\$this-&gt;belongsTo('App\\Author');\n    }\n}\n</code></pre>\n  <p>Si te gustaria remover un elemento de la propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$with</span> para una sola petición, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">without</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$books = App\\Book::without('author')-&gt;get();\n</code></pre>\n  <h3>Restringiendo cargas previas</h3>\n  <p>Algunas veces puedes desear cargar previamente una relación, pero también especificar condiciones de consulta para la consulta de carga previa. Aquí está un ejemplo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Illuminate\\Database\\Eloquent\\Builder;\n\\$users = App\\User::with(['posts' =&gt; function (\\$query) {\n    \\$query-&gt;where('title', 'like', '%first%');\n}])-&gt;get();\n</code></pre>\n  <p>En este ejemplo, Eloquent solamente precargará los posts donde la columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">title</span> del post contenga la palabra <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">first</span>. Puedes ejecutar otros métodos del constructor de consulta para personalizar más la operación de carga previa:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Illuminate\\Database\\Eloquent\\Builder;\n\\$users = App\\User::with(['posts' =&gt; function (\\$query) {\n    \\$query-&gt;orderBy('created_at', 'desc');\n}])-&gt;get();\n</code></pre>\n  <p>Nota</p>\n  <p>Los métodos del constructor de consultas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">limit</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">take</span> no se pueden usar al restringir las cargas previas.</p>\n  <h3>Carga previa diferida (lazy eager loading)</h3>\n  <p>Algunas veces puedes necesitar precargar una relación después de que el modelo padre ya ha sido obtenido. Por ejemplo, esto puede ser útil si necesitas decidir dinámicamente si se cargan modelos relacionados:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$books = App\\Book::all();\nif (\\$someCondition) {\n    \\$books-&gt;load('author', 'publisher');\n}\n</code></pre>\n  <p>Si necesitas establecer restricciones de consultas adicionales en la consulta de carga previa, puedes pasar un arreglo clave / valor con las relaciones que deseas cargar. Los valores del arreglo deberían ser instancias de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Closure</span>, las cuales reciben la instancia de consulta:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Illuminate\\Database\\Eloquent\\Builder;\n\\$books-&gt;load(['author' =&gt; function (\\$query) {\n    \\$query-&gt;orderBy('published_date', 'asc');\n}]);\n</code></pre>\n  <p>Para cargar una relación solo cuando aún no se ha cargado, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">loadMissing</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>public function format(Book \\$book)\n{\n    \\$book-&gt;loadMissing('author');\n    return [\n        'name' =&gt; \\$book-&gt;name,\n        'author' =&gt; \\$book-&gt;author-&gt;name\n    ];\n}\n</code></pre>\n  <h4>Carga previa diferida anidada y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">morphTo</span></h4>\n  <p>Si deseas cargar previamente una relación <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">morphTo</span>, así como relaciones anidadas en las diversas entidades que pueden ser devueltas por esa relación, puedes usar el método<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">loadMorph</span>.\n  </p>\n  <p>Este método acepta el nombre de la relación <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">morphTo</span> como su primer argumento, y un arreglo de pares modelo / relación como su segundo argumento. Para ayudar a ilustrar este método, consideremos el siguiente modelo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nuse Illuminate\\Database\\Eloquent\\Model;\nclass ActivityFeed extends Model\n{\n    /**\n    * Get the parent of the activity feed record.\n    */\n    public function parentable()\n    {\n        return \\$this-&gt;morphTo();\n    }\n}\n</code></pre>\n  <p>En este ejemplo, asumamos que los modelos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Event</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Photo</span> y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span> pueden crear modelos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ActivityFeed</span>. Además, supongamos que los modelos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Event</span> pertenecen a un modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Calendar</span>, los modelos\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Photo</span> están asociados con los modelos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Tag</span> y los modelos\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span> pertenecen a un modelo<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Author</span>.</p>\n  <p>Usando estas definiciones y relaciones de modelo, podemos recuperar instancias de modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ActivityFeed</span> y cargar previamente todos los modelos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">parentables</span> y sus respectivas relaciones anidadas:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$activities = ActivityFeed::with('parentable')\n    -&gt;get()\n    -&gt;loadMorph('parentable', [\n        Event::class =&gt; ['calendar'],\n        Photo::class =&gt; ['tags'],\n        Post::class =&gt; ['author'],\n    ]);\n</code></pre>\n  <h2>Insertando y actualizando modelos relacionados</h2>\n  <h3>El método save</h3>\n  <p>Eloquent proporciona métodos convenientes para agregar nuevos modelos a las relaciones. Por ejemplo, quizá necesites insertar un nuevo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Comment</span> para un modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span>. En lugar de establecer manualmente el atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">post_id</span> en el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Comment</span>, puedes insertar el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Comment</span> directamente con el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">save</span> de la relación:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$comment = new App\\Comment(['message' =&gt; 'A new comment.']);\n\\$post = App\\Post::find(1);\n\\$post-&gt;comments()-&gt;save(\\$comment);\n</code></pre>\n  <p>Observa que no accedimos a la relación <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">comments</span> como una propiedad dinámica. En su lugar, ejecutamos el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">comments</span> para obtener una instancia de la relación. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">save</span> automáticamente agregará el valor <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">post_id</span> apropiado al nuevo modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Comment</span>.</p>\n  <p>Si necesitas guardar múltiples modelos relacionados, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">saveMany</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$post = App\\Post::find(1);\n\\$post-&gt;comments()-&gt;saveMany([\n    new App\\Comment(['message' =&gt; 'A new comment.']),\n    new App\\Comment(['message' =&gt; 'Another comment.']),\n]);\n</code></pre>\n  <h4>Guardando modelos y relaciones recursivamente</h4>\n  <p>SI quieres hacer <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">save</span> a tu modelo y a todas sus relaciones asociadas, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">push</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$post = App\\Post::find(1);\n\\$post-&gt;comments[0]-&gt;message = 'Message';\n\\$post-&gt;comments[0]-&gt;author-&gt;name = 'Author Name';\n\\$post-&gt;push();\n</code></pre>\n  <h3>El método create</h3>\n  <p>En adición a los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">save</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">saveMany</span>, también puedes usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span>, el cual acepta un arreglo de atributos, crea un modelo y lo inserta dentro de la base de datos. Otra vez, la diferencia entre <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">save</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span> es que <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">save</span> acepta una instancia de modelo Eloquent llena mientras <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span> acepta un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">array</span> PHP plano:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$post = App\\Post::find(1);\n\\$comment = \\$post-&gt;comments()-&gt;create([\n    'message' =&gt; 'A new comment.',\n]);\n</code></pre>\n  <p>TIP</p>\n  <p>Antes de usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span>, asegurate de revisar la documentación sobre la asignación masiva de atributos.</p>\n  <p>Puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">createMany</span> para crear múltiples modelos relacionados:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$post = App\\Post::find(1);\n\\$post-&gt;comments()-&gt;createMany([\n    [\n        'message' =&gt; 'A new comment.',\n    ],\n    [\n        'message' =&gt; 'Another new comment.',\n    ],\n]);\n</code></pre>\n  <p>\n    También puedes usar los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">findOrNew</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">firstOrNew</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">firstOrCreate</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updateOrCreate</span> para crear y actualizar modelos en relaciones .\n  </p>\n  <h3>Actualizar relación pertenece a (belongsTo)</h3>\n  <p>Al momento de actualizar una relación <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">belongsTo</span>, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">associate</span>. Este método establecerá la clave foránea en el modelo hijo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$account = App\\Account::find(10);\n\\$user-&gt;account()-&gt;associate(\\$account);\n\\$user-&gt;save();\n</code></pre>\n  <p>Al momento de eliminar una relación <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">belongsTo</span>, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dissociate</span>. Este método establecerá la clave foránea de la relación a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user-&gt;account()-&gt;dissociate();\n\\$user-&gt;save();\n</code></pre>\n  <h4>Modelos predeterminados</h4>\n  <p>\n    Las relaciones <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">belongsTo</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hasOne</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hasOneThrough</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">morphOne</span> te permiten definir un modelo predeterminado que se devolverá si la relación dada es\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">null</span>. A este patrón se le conoce comúnmente como patrón Null Object y puede ayudar a quitar comprobaciones condicionales en tu código. En el ejemplo siguiente, la relación <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">user</span> devolverá un modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\User</span> vacío si no hay un\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">user</span> adjunto a la publicación:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Get the author of the post.\n*/\npublic function user()\n{\n    return \\$this-&gt;belongsTo('App\\User')-&gt;withDefault();\n}\n</code></pre>\n  <p>Para rellenar el modelo predeterminado con atributos, puedes pasar un arreglo o Closure al método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withDefault</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Get the author of the post.\n*/\npublic function user()\n{\n    return \\$this-&gt;belongsTo('App\\User')-&gt;withDefault([\n        'name' =&gt; 'Guest Author',\n    ]);\n}\n/**\n* Get the author of the post.\n*/\npublic function user()\n{\n    return \\$this-&gt;belongsTo('App\\User')-&gt;withDefault(function (\\$user) {\n        \\$user-&gt;name = 'Guest Author';\n    });\n}\n</code></pre>\n  <h3>Relaciones muchos a muchos</h3>\n  <h4>Adjuntando (attach) / Quitando (detach)</h4>\n  <p>Eloquent también proporciona unos cuantas métodos helper para hacer que el trabajo con los modelos relacionados sea más conveniente. Por ejemplo, vamos a imaginar que un usuario tiene muchos roles y un rol puede tener muchos usuarios. Para adjuntar un rol a un usuario insertando un registro en la tabla intermedia que vincula los modelos, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">attach</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = App\\User::find(1);\n\\$user-&gt;roles()-&gt;attach(\\$roleId);\n</code></pre>\n  <p>Al momento de adjuntar una relación a un modelo, también puedes pasar un arreglo de datos adicionales para ser insertados dentro de la tabla intermedia:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user-&gt;roles()-&gt;attach(\\$roleId, ['expires' =&gt; \\$expires]);\n</code></pre>\n  <p>Algunas veces puede ser necesario quitar un rol de un usuario. Para remover un registro de una relación de muchos-a-muchos, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">detach</span>. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">detach</span> eliminará el registro apropiado de la tabla intermedia; sin embargo, ambos modelos permanecerán en la base de datos:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Detach a single role from the user...\n\\$user-&gt;roles()-&gt;detach(\\$roleId);\n// Detach all roles from the user...\n\\$user-&gt;roles()-&gt;detach();\n</code></pre>\n  <p>Por conveniencia, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">attach</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">detach</span> también aceptan arreglos de IDs como entrada:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = App\\User::find(1);\n\\$user-&gt;roles()-&gt;detach([1, 2, 3]);\n\\$user-&gt;roles()-&gt;attach([\n    1 =&gt; ['expires' =&gt; \\$expires],\n    2 =&gt; ['expires' =&gt; \\$expires]\n]);\n</code></pre>\n  <h4>Sincronizando asociaciones</h4>\n  <p>También puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sync</span> para construir asociaciones muchos-a-muchos. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sync</span> acepta un arreglo de IDs para colocar en la tabla intermedia. Algunos IDs que no estén en el arreglo dado serán removidos de la tabla intermedia. Por tanto, después que esta operación se complete, solamente los IDs en el arreglo dado existirán en la tabla intermedia:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user-&gt;roles()-&gt;sync([1, 2, 3]);\n</code></pre>\n  <p>También puedes pasar valores adicionales de tabla intermedia con los IDs:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user-&gt;roles()-&gt;sync([1 =&gt; ['expires' =&gt; true], 2, 3]);\n</code></pre>\n  <p>Si no quieres desatar IDs existentes, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">syncWithoutDetaching</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user-&gt;roles()-&gt;syncWithoutDetaching([1, 2, 3]);\n</code></pre>\n  <h4>Alternar asociaciones</h4>\n  <p>La relación de muchos-a-muchos también proporciona un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toggle</span> el cual \"alterna\" el estado adjunto de los IDs dados. Si el ID está actualmente adjuntado, será removido. De igual forma, si está actualmente removido, será adjuntado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user-&gt;roles()-&gt;toggle([1, 2, 3]);\n</code></pre>\n  <h4>Guardando datos adicionales en una tabla pivote</h4>\n  <p>Al momento de trabajar con una relación de muchos-a-muchos, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">save</span> acepta un arreglo de atributos adicionales de tabla intermedia como su segundo argumento:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>App\\User::find(1)-&gt;roles()-&gt;save(\\$role, ['expires' =&gt; \\$expires]);\n</code></pre>\n  <h4>Actualizando un registro en una tabla pivote</h4>\n  <p>Si necesitas actualizar una fila existente en tu tabla pivote, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updateExistingPivot</span>. Este método acepta la clave foránea del registro pivote y un arreglo de atributos para actualizar:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = App\\User::find(1);\n\\$user-&gt;roles()-&gt;updateExistingPivot(\\$roleId, \\$attributes);\n</code></pre>\n  <h2>Tocando marcas de tiempo del padre</h2>\n  <p>Cuando un modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">belongsTo</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">belongsToMany</span> a otro modelo, tal como un\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Comment</span> el cual pertenece a un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span>, algunas veces es útil actualizar la marca de tiempo del padre cuando el modelo hijo es actualizado. Por ejemplo, cuando un modelo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Comment</span> es actualizado, puedes querer \"tocar\" automáticamente la marca de tiempo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updated_at</span> del <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span> que lo posee. Eloquent hace esto fácil. Simplemente agrega una propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">touches</span> conteniendo los nombres de las relaciones al modelo hijo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Comment extends Model\n{\n    /**\n    * All of the relationships to be touched.\n    *\n    * @var array\n    */\n    protected \\$touches = ['post'];\n    /**\n    * Get the post that the comment belongs to.\n    */\n    public function post()\n    {\n        return \\$this-&gt;belongsTo('App\\Post');\n    }\n}\n</code></pre>\n  <p>Ahora, cuando actualices un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Comment</span>, el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span> que lo posee tendrá su columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updated_at</span> actualizada también, haciéndolo más conveniente para saber cuándo invalidar una caché del modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$comment = App\\Comment::find(1);\n\\$comment-&gt;text = 'Edit to this comment!';\n\\$comment-&gt;save();\n</code></pre>\n</div>"
      },
      {
        "titulo": "Colecciones",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Eloquent: Colecciones</h1>\n  <ul>\n    <li>Introducción</li>\n    <li>Métodos disponibles</li>\n    <li>Colecciones personalizadas</li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>\n    Todos los conjuntos de multi-resultados retornados por Eloquent son instancias del objeto <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Database\\Eloquent\\Collection</span>, incluyendo los resultados obtenidos por medio del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span> o accedidos por medio de una relación. El objeto de la colección Eloquent extiende la collección base de Laravel, así hereda naturalmente docenas de métodos usados para trabajar fluidamente con el arreglo subyacente de modelos de Eloquent.\n  </p>\n  <p>Todas las colecciones tambien sirven como iteradores, permitiendo que iteres sobre ellas como si fueran simples arreglos de PHP:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = App\\User::where('active', 1)-&gt;get();\nforeach (\\$users as \\$user) {\n    echo \\$user-&gt;name;\n}\n</code></pre>\n  <p>Sin embargo, las colecciones son mucho más poderosas que los arreglos y exponen una variedad de mapeos / reduce operaciones que pueden ser encadenadas usando una interfaz intuitiva. Por ejemplo, vamos a remover todos los modelos inactivos y traeremos el primer nombre para cada usuario restante:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = App\\User::all();\n\\$names = \\$users-&gt;reject(function (\\$user) {\n    return \\$user-&gt;active === false;\n})\n-&gt;map(function (\\$user) {\n    return \\$user-&gt;name;\n});\n</code></pre>\n  <p>Nota</p>\n  <p>\n    Mientras los métodos de colección de Eloquent devuelven una nueva instancia de una colección de Eloquent, los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pluck</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">keys</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">zip</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">collapse</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">flatten</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">flip</span> devuelven una instancia de colección base . De igual forma, si una operación devuelve una colección que no contiene modelos Eloquent, será automáticamente convertida a una colección base.\n  </p>\n  <h2>Métodos Disponibles</h2>\n  <h3>La colección base</h3>\n  <p>Todas las colecciones de Eloquent extienden el objeto de colección de Laravel base; sin embargo, heredan todos los métodos poderosos proporcionados por la clase de colección base:</p>\n  <p>Adicionalmente, la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Database\\Eloquent\\Collection</span> proporciona una serie de métodos para ayudarte a administrar tus colecciones de modelos. La mayoría de los métodos retornan instancias de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Database\\Eloquent\\Collection</span>; sin embargo, algunos métodos retornan una instancia base <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Support\\Collection</span>.\n  </p>\n  <h4><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">contains(\\$key, \\$operator = null, \\$value = null)</span></h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">contains</span> puede ser usado para determinar si una instancia de modelo dada es contenida por la colección. Este método acepta una clave primaria o una instancia de modelo:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users-&gt;contains(1);\n\\$users-&gt;contains(User::find(1));\n</code></pre>\n  <h4><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">diff(\\$items)</span></h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">diff</span> retorna todos los modelos que no están presentes en la colección dada:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use App\\User;\n\\$users = \\$users-&gt;diff(User::whereIn('id', [1, 2, 3])-&gt;get());\n</code></pre>\n  <h4><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">except(\\$keys)</span></h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">except</span> retorna todos los modelos que no tienen las claves primarias dadas:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = \\$users-&gt;except([1, 2, 3]);\n</code></pre>\n  <h4><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">find(\\$key)</span> {#collection-method .first-collection-method}</h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">find</span> encuentra un modelo que tienen una clave primaria dada. Si\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$key</span> es una instancia de modelo, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">find</span> intentará retornar un modelo que coincida con la clave primaria. Si <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$key</span> es un arreglo de claves, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">find</span> retornará todos los modelos que coincidan con las <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$keys</span> usando\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whereIn()</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = User::all();\n\\$user = \\$users-&gt;find(1);\n</code></pre>\n  <h4><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fresh(\\$with = [])</span></h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fresh</span> retorna una instancia nueva de cada modelo en la colección desde la base de datos. Adicionalmente, cualquier relación especificada será cargada por adelantado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = \\$users-&gt;fresh();\n\\$users = \\$users-&gt;fresh('comments');\n</code></pre>\n  <h4><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">intersect(\\$items)</span></h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">intersect</span> retorna todos los modelos que también están presentes en la colección dada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use App\\User;\n\\$users = \\$users-&gt;intersect(User::whereIn('id', [1, 2, 3])-&gt;get());\n</code></pre>\n  <h4><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">load(\\$relations)</span></h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">load</span> carga por adelantado las relaciones dadas para todos los modelos en la colección:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users-&gt;load('comments', 'posts');\n\\$users-&gt;load('comments.author');\n</code></pre>\n  <h4><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">loadMissing(\\$relations)</span></h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">loadMissing</span> carga por adelantado las relaciones dadas para todos los modelos en la colección si las relaciones aún no han sido cargadas:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users-&gt;loadMissing('comments', 'posts');\n\\$users-&gt;loadMissing('comments.author');\n</code></pre>\n  <h4><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">modelKeys()</span></h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">modelKeys</span> retorna las claves primarias para todos los modelos en la colección:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users-&gt;modelKeys();\n// [1, 2, 3, 4, 5]\n</code></pre>\n  <h4><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">makeVisible(\\$attributes)</span></h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">makeVisible</span> hace visibles los atributos que normalmente están \"ocultados\" en cada modelo de la colección:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = \\$users-&gt;makeVisible(['address', 'phone_number']);\n</code></pre>\n  <h4><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">makeHidden(\\$attributes)</span></h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">makeHidden</span> oculta los atributos que normalmente están \"visibles\" en cada modelo de la colección:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = \\$users-&gt;makeHidden(['address', 'phone_number']);\n</code></pre>\n  <h4><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">only(\\$keys)</span></h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">only</span> retorna todos los modelos que tienen las claves primarias dadas:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = \\$users-&gt;only([1, 2, 3]);\n</code></pre>\n  <h4><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unique(\\$key = null, \\$strict = false)</span></h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unique</span> retorna todos los modelos únicos en la colección. Cualquier modelo del mismo tipo con las mismas claves primarias que otro modelo en la colección es removido.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = \\$users-&gt;unique();\n</code></pre>\n  <h2>Colecciones personalizadas</h2>\n  <p>Si necesitas usar un objeto <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Collection</span> personalizado con tus propios métodos de extensión, puedes sobrescribir el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">newCollection</span> en tu modelo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse App\\CustomCollection;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass User extends Model\n{\n    /**\n        * Create a new Eloquent Collection instance.\n        *\n        * @param  array  \\$models\n        * @return \\Illuminate\\Database\\Eloquent\\Collection\n        */\n    public function newCollection(array \\$models = [])\n    {\n        return new CustomCollection(\\$models);\n    }\n}\n</code></pre>\n  <p>Una vez que has definido un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">newCollection</span>, recibirás una instancia de tu colección personalizada cada vez que Eloquent devuelva una instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Collection</span> de ese modelo. Si prefieres usar una colección personalizada para cada modelo en tu aplicación, deberías sobrescribir el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">newCollection</span> en una clase del modelo base que es extendida por todos tus modelos.</p>\n</div>"
      },
      {
        "titulo": "Mutadores",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Eloquent: Mutators</h1>\n  <ul>\n    <li>Introducción</li>\n    <li>\n      Accesadores y mutadores\n      <ul>\n        <li>Definiendo un accesador</li>\n        <li>Definiendo un mutador</li>\n      </ul>\n    </li>\n    <li>Mutadores de fecha</li>\n    <li>\n      Conversión de atributos\n      <ul>\n        <li>Conversión de arreglos y JSON</li>\n        <li>Conversión de fechas</li>\n      </ul>\n    </li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>Los accesadores y mutadores permiten que des formato a los valores de atributos de Eloquent cuando los obtienes o estableces en las instancias de modelo. Por ejemplo, puede que te guste usar el encriptador de Laravel para cifrar un valor mientras es almacenado en la base de datos y después descifrar automáticamente el atributo cuando accedes a él en un modelo de Eloquent.</p>\n  <p>\n    Además de los accesadores y los mutadores personalizados, Eloquent también puede convertir automáticamente campos de fecha a instancias Carbon\n    <outboundlink></outboundlink>\n    o incluso convertir campos de texto a JSON.\n  </p>\n  <h2>Accesadores y mutadores</h2>\n  <h3>Definiendo un accesador</h3>\n  <p>Para definir un accesador crea un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">getFooAttribute</span> en tu modelo, donde <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Foo</span> es el nombre de la columna que deseas acceder en el formato Studly Case (Primera letra de cada palabra en mayúscula). En este ejemplo, definiremos un accesador para el atributo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">first_name</span>. El accesador automáticamente será ejecutado por Eloquent al momento de intentar obtener el valor del atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">first_name</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass User extends Model\n{\n    /**\n    * Get the user's first name.\n    *\n    * @param  string  \\$value\n    * @return string\n    */\n    public function getFirstNameAttribute(\\$value)\n    {\n        return ucfirst(\\$value);\n    }\n}\n</code></pre>\n  <p>Como puedes ver, el valor original de la columna es pasado al accesador, permitiéndote manipular y devolver el valor. Para acceder al valor del accesador, puedes acceder al atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">first_name</span> en una instancia del modelo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = App\\User::find(1);\n\\$firstName = \\$user-&gt;first_name;\n</code></pre>\n  <p>También puedes usar accesadores para retornar nuevos valores computados de atributos existentes:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Get the user's full name.\n*\n* @return string\n*/\npublic function getFullNameAttribute()\n{\n    return \"{\\$this-&gt;first_name} {\\$this-&gt;last_name}\";\n}\n</code></pre>\n  <p>TIP</p>\n  <p>\n    Si deseas que estos valores computados sean agregados a las representaciones de arreglo / JSON de tu modelo, necesitarás adjuntarlos\n    <outboundlink></outboundlink>\n    .\n  </p>\n  <h3>Definiendo un mutador</h3>\n  <p>Para definir un mutador, define un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">setFooAttribute</span> en tu modelo, donde <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Foo</span> es el nombre de la columna que deseas acceder en el formato Studly Case (Primera letra de cada palabra en mayúscula). Así, otra vez, vamos a definir un mutador para el atributo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">first_name</span>. Este mutador será ejecutado automáticamente cuando intentamos establecer el valor del atributo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">first_name</span> en el modelo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass User extends Model\n{\n    /**\n    * Set the user's first name.\n    *\n    * @param  string  \\$value\n    * @return void\n    */\n    public function setFirstNameAttribute(\\$value)\n    {\n        \\$this-&gt;attributes['first_name'] = strtolower(\\$value);\n    }\n}\n</code></pre>\n  <p>El mutador recibirá el valor que está siendo establecido en el atributo, permitiéndote manipular el valor y establecer el valor manipulado en la propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$attributes</span> interna del modelo Eloquent. Así, por ejemplo, si intentamos establecer el atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">first_name</span> como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Sally</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = App\\User::find(1);\n\\$user-&gt;first_name = 'Sally';\n</code></pre>\n  <p>En este ejemplo, la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">setFirstNameAttribute</span> será ejecutada con el valor <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Sally</span>. El mutador entonces aplicará la función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">strtolower</span> al nombre y establecerá su valor resultante en el arreglo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$attributes</span> interno.</p>\n  <h2>Mutadores de fecha</h2>\n  <p>\n    De forma predeterminada, Eloquent convertirá las columnas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">created_at</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updated_at</span> a instancias de Carbon , la cual extiende la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DateTime</span> de PHP para proporcionar una variedad de métodos útiles. Puedes agregar atributos de fecha adicionales estableciendo la propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$dates</span> de tu modelo.\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass User extends Model\n{\n    /**\n    * The attributes that should be mutated to dates.\n    *\n    * @var array\n    */\n    protected \\$dates = [\n        'seen_at',\n    ];\n}\n</code></pre>\n  <p>TIP</p>\n  <p>Puedes desactivar las marcas de tiempo (timestamps) predeterminadas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">created_at</span> y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updated_at</span> configurando la propiedad pública <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$timestamps</span> de tu modelo en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>.</p>\n  <p>Cuando una columna es considerada una fecha, puedes establecer su valor a una marca de tiempo UNIX, cadena de fecha (<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Y-m-d</span>), cadena fecha-hora o una instancia\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DateTime</span> / <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Carbon</span>. El valor de la fecha será convertido y almacenado correctamente en tu base de datos:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = App\\User::find(1);\n\\$user-&gt;deleted_at = now();\n\\$user-&gt;save();\n</code></pre>\n  <p>\n    Como se apreció anteriormente, al momento de obtener atributos que están listados en tu propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$dates</span>, éstos serán automáticamente convertidos a instancias Carbon , permitiendo que uses cualquiera de los métodos de Carbon en tus atributos:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = App\\User::find(1);\nreturn \\$user-&gt;deleted_at-&gt;getTimestamp();\n</code></pre>\n  <h4>Formatos de fecha</h4>\n  <p>De forma predeterminada, las marcas de tiempo son formateadas como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">'Y-m-d H:i:s'</span>. Si necesitas personalizar el formato de marca de tiempo, establece la propiedad\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$dateFormat</span> en tu modelo. Esta propiedad determina como los atributos de fecha son almacenados en la base de datos así como también su formato cuando el modelo es serializado a un arreglo o JSON:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Flight extends Model\n{\n    /**\n    * The storage format of the model's date columns.\n    *\n    * @var string\n    */\n    protected \\$dateFormat = 'U';\n}\n</code></pre>\n  <h2>Conversión (casting) de atributos</h2>\n  <p>La propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$casts</span> en tu modelo proporciona un método conveniente de convertir atributos a tipos de datos comunes. La propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$casts</span> debería ser un arreglo donde la clave es el nombre del atributo que está siendo convertido y el valor es el tipo al que deseas convertir la columna. Los tipos de conversión soportados son: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">integer</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">real</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">float</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">double</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">decimal:&lt;digits&gt;</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">string</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boolean</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">object</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">array</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">collection</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">date</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">datetime</span>, and <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">timestamp</span>. Al convertir en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">decimal</span>, debes definir el número de digitos (<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">decimal:2</span>).</p>\n  <p>Para demostrar la conversión de atributos, vamos a convertir el atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">is_admin</span>, el cual es almacenado en nuestra base de datos como un entero (<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">0</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">1</span>) a un valor booleano:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass User extends Model\n{\n    /**\n    * The attributes that should be cast to native types.\n    *\n    * @var array\n    */\n    protected \\$casts = [\n        'is_admin' =&gt; 'boolean',\n    ];\n}\n</code></pre>\n  <p>Ahora el atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">is_admin</span> será siempre convertido a un booleano cuando lo accedas, incluso si el valor subyacente es almacenado en la base de datos como un entero:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = App\\User::find(1);\nif (\\$user-&gt;is_admin) {\n    //\n}\n</code></pre>\n  <h3>Conversión de arreglos y JSON</h3>\n  <p>El tipo de conversión <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">array</span> es particularmente útil al momento de trabajar con columnas que son almacenadas como JSON serializado. Por ejemplo, si tu base de datos tiene un tipo de campo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">JSON</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">TEXT</span> que contiene JSON serializado, agregar la conversión <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">array</span> a ese atributo deserializará automáticamente el atributo a un arreglo PHP cuando lo accedas en tu modelo Eloquent:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass User extends Model\n{\n    /**\n    * The attributes that should be cast to native types.\n    *\n    * @var array\n    */\n    protected \\$casts = [\n        'options' =&gt; 'array',\n    ];\n}\n</code></pre>\n  <p>Una vez que la conversión es definida, puedes acceder al atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">options</span> y será automáticamente deserializado desde JSON a un arreglo PHP. Cuando establezcas el valor del atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">options</span>, el arreglo dado será automáticamente serializado de vuelta en JSON para almacenamiento:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = App\\User::find(1);\n\\$options = \\$user-&gt;options;\n\\$options['key'] = 'value';\n\\$user-&gt;options = \\$options;\n\\$user-&gt;save();\n</code></pre>\n  <h3>Conversión de fechas</h3>\n  <p>Al usar el tipo de conversión <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">date</span> o<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">datetime</span>, puedes especificar el formato de la fecha. Este formato se utilizará cuando el modelo se serializa a un arreglo o JSON:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* The attributes that should be cast to native types.\n*\n* @var array\n*/\nprotected \\$casts = [\n    'created_at' =&gt; 'datetime:Y-m-d',\n];\n</code></pre>\n</div>"
      },
      {
        "titulo": "Recursos de API",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Eloquent: Recursos API</h1>\n  <ul>\n    <li>Introducción</li>\n    <li>Generación de recursos</li>\n    <li>\n      Descripción general del concepto\n      <ul>\n        <li>Colecciones de recursos</li>\n      </ul>\n    </li>\n    <li>\n      Escritura de recursos\n      <ul>\n        <li>Envoltura de datos</li>\n        <li>Paginación</li>\n        <li>Atributos condicionales</li>\n        <li>Relaciones condicionales</li>\n        <li>Añadiendo metadatos</li>\n      </ul>\n    </li>\n    <li>Respuestas de recursos</li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>Al crear una API, es posible que necesites una capa de transformación que se ubique entre tus modelos Eloquent y las respuestas JSON que realmente se devuelven a los usuarios de tu aplicación. Las clases de recursos de Laravel te permiten transformar tus modelos y colecciones de modelos de forma expresiva y sencilla en JSON.</p>\n  <h2>Generación de recursos</h2>\n  <p>Para generar un clase recurso, puedes usar el comando de Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:resource</span>. Por defecto, los recursos estará localizado en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Http/Resources</span> de tu aplicación. Los Recursos extiende de la clase\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Http\\Resources\\Json\\JsonResource</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan make:resource User\n</code></pre>\n  <h4>Colecciones de recurso</h4>\n  <p>Además de generar recursos que transforman modelos individuales, puedes generar recursos que sean responsables de transformar colecciones de modelos. Esto permite que tu respuesta incluya enlaces y otra metainformación relevante para una colección completa de un recurso determinado.\n  </p>\n  <p>Para crear una colección de recursos, debes utilizar la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--collection</span> al crear el recurso. O, incluir la palabra <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Colección</span> en el nombre del recurso que le indicará a Laravel que debe crear un recurso de colección. Los recursos de colección extienden la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Http\\Resources\\Json\\ResourceCollection</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan make:resource Users --collection\nphp artisan make:resource UserCollection\n</code></pre>\n  <h2>Descripción general del concepto</h2>\n  <p>TIP</p>\n  <p>Esta es una explicación general de recursos y colecciones de recursos. Te recomendamos que leas las otras secciones de esta documentación para obtener una comprensión más profunda de la personalización y el poder que te ofrecen los recursos.</p>\n  <p>Antes de sumergirse en todas las opciones disponibles para escribir recursos, primero analicemos cómo se utilizan los recursos dentro de Laravel. Una clase de recurso representa un modelo único que debe transformarse en una estructura JSON. Por ejemplo, aquí hay una clase de recurso <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span> simple:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Http\\Resources;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\nclass User extends JsonResource\n{\n    /**\n    * Transform the resource into an array.\n    *\n    * @param  \\Illuminate\\Http\\Request  \\$request\n    * @return array\n    */\n    public function toArray(\\$request)\n    {\n        return [\n            'id' =&gt; \\$this-&gt;id,\n            'name' =&gt; \\$this-&gt;name,\n            'email' =&gt; \\$this-&gt;email,\n            'created_at' =&gt; \\$this-&gt;created_at,\n            'updated_at' =&gt; \\$this-&gt;updated_at,\n        ];\n    }\n}\n</code></pre>\n  <p>Cada clase de recurso define un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toArray</span> que devuelve el arreglo de atributos que deben convertirse a JSON al enviar la respuesta. Observa que podemos acceder a las propiedades del modelo directamente desde la variable <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$this</span>. Esto es porque la clase del recurso va a redirigir de manera automática el acceso de propiedades y métodos al modelo asignado. Una vez que se define el recurso, se puede devolver desde una ruta o controlador:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use App\\User;\nuse App\\Http\\Resources\\User as UserResource;\nRoute::get('/user', function () {\n    return new UserResource(User::find(1));\n});\n</code></pre>\n  <h3>Colecciones de recurso</h3>\n  <p>Si estás devolviendo una colección de recursos o una respuesta paginada, puedes usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">collection</span> al crear la instancia de recursos en tu ruta o controlador:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use App\\User;\nuse App\\Http\\Resources\\User as UserResource;\nRoute::get('/user', function () {\n    return UserResource::collection(User::all());\n});\n</code></pre>\n  <p>Observa que esto no permite ninguna adición de metadatos que pueden necesitar ser retornados con la colección. Si deseas personalizar la respuesta de la colección de recursos, puedes crear un recurso dedicado para representar la colección:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan make:resource UserCollection\n</code></pre>\n  <p>Una vez que se ha generado la clase de colección de recursos, puedes definir fácilmente los metadatos que deben incluirse con la respuesta:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Http\\Resources;\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\nclass UserCollection extends ResourceCollection\n{\n    /**\n    * Transform the resource collection into an array.\n    *\n    * @param  \\Illuminate\\Http\\Request  \\$request\n    * @return array\n    */\n    public function toArray(\\$request)\n    {\n        return [\n            'data' =&gt; \\$this-&gt;collection,\n            'links' =&gt; [\n                'self' =&gt; 'link-value',\n            ],\n        ];\n    }\n}\n</code></pre>\n  <p>Después de definir tu colección de recursos, ésta la puedes devolver desde una ruta o controlador:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use App\\User;\nuse App\\Http\\Resources\\UserCollection;\nRoute::get('/users', function () {\n    return new UserCollection(User::all());\n});\n</code></pre>\n  <h4>Preservando la colección de llaves</h4>\n  <p>Cuando se retorna un recurso de colección desde una ruta, Laravel reinicia las llaves de la colección para que éstas estén en un simple orden numérico. Sin embargo, puedes añadir una propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">preserveKeys</span> a tu clase de recurso indicando si esta colección de llaves debería preservarse:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Http\\Resources;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\nclass User extends JsonResource\n{\n    /**\n    * Indicates if the resource's collection keys should be preserved.\n    *\n    * @var bool\n    */\n    public \\$preserveKeys = true;\n}\n</code></pre>\n  <p>Cuando la propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">preserveKeys</span> es colocada en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>, la colección de llaves será preservada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use App\\User;\nuse App\\Http\\Resources\\User as UserResource;\nRoute::get('/user', function () {\n    return UserResource::collection(User::all()-&gt;keyBy-&gt;id);\n});\n</code></pre>\n  <h4>Personalización de la clase de recurso subyacente</h4>\n  <p>Normalmente, la propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$this-&gt;collection</span> de una colección de recursos se rellena automáticamente con el resultado de la asignación de cada elemento de la colección a su clase de recurso singular. Se asume que la clase de recurso singular es el nombre de clase de la colección sin la cadena <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Collection</span> al final.</p>\n  <p>Por ejemplo, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">UserCollection</span> intentará asignar las instancias de usuario dadas al recurso <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span>. Para personalizar este comportamiento, puedes anular la propiedad\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$collects</span> de tu colección de recursos:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Http\\Resources;\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\nclass UserCollection extends ResourceCollection\n{\n    /**\n    * The resource that this resource collects.\n    *\n    * @var string\n    */\n    public \\$collects = 'App\\Http\\Resources\\Member';\n}\n</code></pre>\n  <h2>Escritura de recursos</h2>\n  <p>TIP</p>\n  <p>Si no has leído la descripción general del concepto, te recomendamos que lo hagas antes de continuar con esta documentación.</p>\n  <p>En esencia, los recursos son simples. Solo necesitan transformar un modelo dado en un arreglo. Por lo tanto, cada recurso contiene un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toArray</span> que traduce los atributos de tu modelo en un arreglo amigable con la API que se puede devolver a sus usuarios:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Http\\Resources;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\nclass User extends JsonResource\n{\n    /**\n    * Transform the resource into an array.\n    *\n    * @param  \\Illuminate\\Http\\Request  \\$request\n    * @return array\n    */\n    public function toArray(\\$request)\n    {\n        return [\n            'id' =&gt; \\$this-&gt;id,\n            'name' =&gt; \\$this-&gt;name,\n            'email' =&gt; \\$this-&gt;email,\n            'created_at' =&gt; \\$this-&gt;created_at,\n            'updated_at' =&gt; \\$this-&gt;updated_at,\n        ];\n    }\n}\n</code></pre>\n  <p>Una vez que has definido un recurso, lo puedes devolver directamente desde una ruta o controlador:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use App\\User;\nuse App\\Http\\Resources\\User as UserResource;\nRoute::get('/user', function () {\n    return new UserResource(User::find(1));\n});\n</code></pre>\n  <h4>Relaciones</h4>\n  <p>Si deseas incluir recursos relacionados en tu respuesta, puedes agregarlos al arreglo devuelto por tu método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toArray</span>. En este ejemplo, usaremos el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">collection</span> del recurso <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span> para agregar las publicaciones del blog del usuario a la respuesta del recurso:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Transform the resource into an array.\n*\n* @param  \\Illuminate\\Http\\Request  \\$request\n* @return array\n*/\npublic function toArray(\\$request)\n{\n    return [\n        'id' =&gt; \\$this-&gt;id,\n        'name' =&gt; \\$this-&gt;name,\n        'email' =&gt; \\$this-&gt;email,\n        'posts' =&gt; PostResource::collection(\\$this-&gt;posts),\n        'created_at' =&gt; \\$this-&gt;created_at,\n        'updated_at' =&gt; \\$this-&gt;updated_at,\n    ];\n}\n</code></pre>\n  <p>TIP</p>\n  <p>Si deseas incluir relaciones solo cuando ya se han cargado, consulte la documentación sobre relaciones condicionales.</p>\n  <h4>Colecciones de recurso</h4>\n  <p>Si bien los recursos traducen un modelo único en un arreglo, las colecciones de recursos traducen una colección de modelos en un arreglo. No es absolutamente necesario definir una clase de colección de recursos para cada uno de los tipos de modelo ya que todos los recursos proporcionan un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">collection</span> para generar una colección de recursos \"ad-hoc\" sobre la marcha:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use App\\User;\nuse App\\Http\\Resources\\User as UserResource;\nRoute::get('/user', function () {\n    return UserResource::collection(User::all());\n});\n</code></pre>\n  <p>Sin embargo, si necesitas personalizar los metadatos devueltos con la colección, será necesario definir una colección de recursos:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Http\\Resources;\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\nclass UserCollection extends ResourceCollection\n{\n    /**\n    * Transform the resource collection into an array.\n    *\n    * @param  \\Illuminate\\Http\\Request  \\$request\n    * @return array\n    */\n    public function toArray(\\$request)\n    {\n        return [\n            'data' =&gt; \\$this-&gt;collection,\n            'links' =&gt; [\n                'self' =&gt; 'link-value',\n            ],\n        ];\n    }\n}\n</code></pre>\n  <p>Al igual que los recursos singulares, las colecciones de recursos se pueden devolver directamente desde las rutas o los controladores:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use App\\User;\nuse App\\Http\\Resources\\UserCollection;\nRoute::get('/users', function () {\n    return new UserCollection(User::all());\n});\n</code></pre>\n  <h3>Envoltura de datos</h3>\n  <p>Por defecto, tu recurso más externo está envuelto en una clave <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">data</span> cuando la respuesta del recurso se convierte a JSON. Entonces, por ejemplo, una respuesta típica de colección de recursos se parece a lo siguiente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Eladio Schroeder Sr.\",\n            \"email\": \"therese28@example.com\",\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Liliana Mayert\",\n            \"email\": \"evandervort@example.com\",\n        }\n    ]\n}\n</code></pre>\n  <p>Si deseas deshabilitar la envoltura del recurso más externo, puede usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withoutWrapping</span> en la clase de recurso base. Por lo general, debes llamar a este método desde su <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AppServiceProvider</span> u otro proveedor de servicios que se carga en cada solicitud a tu aplicación:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Providers;\nuse Illuminate\\Support\\ServiceProvider;\nuse Illuminate\\Http\\Resources\\Json\\Resource;\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n    * Perform post-registration booting of services.\n    *\n    * @return void\n    */\n    public function boot()\n    {\n        Resource::withoutWrapping();\n    }\n    /**\n    * Register bindings in the container.\n    *\n    * @return void\n    */\n    public function register()\n    {\n        //\n    }\n}\n</code></pre>\n  <p>Nota</p>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withoutWrapping</span> solo afecta a la respuesta más externa y no eliminará las claves\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">data</span> que agregues manualmente a tus propias colecciones de recursos.</p>\n  <h3>Envoltura de recursos anidados</h3>\n  <p>Tienes total libertad para determinar cómo se envuelven las relaciones de tus recursos. Si deseas que todas las colecciones de recursos se envuelvan en una clave <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">data</span>, independientemente de su anidamiento, debes definir una clase de colección de recursos para cada recurso y devolver la colección dentro de una clave<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">data</span>.</p>\n  <p>Puedes que te estés preguntando si esto hará que tu recurso más externo se incluya en dos claves\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">data</span>. No te preocupes, Laravel nunca permitirá que tus recursos se envuelvan por error, por lo que no tienes que preocuparte por el nivel de anidamiento de la colección de recursos que estás transformando:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Http\\Resources;\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\nclass CommentsCollection extends ResourceCollection\n{\n    /**\n    * Transform the resource collection into an array.\n    *\n    * @param  \\Illuminate\\Http\\Request  \\$request\n    * @return array\n    */\n    public function toArray(\\$request)\n    {\n        return ['data' =&gt; \\$this-&gt;collection];\n    }\n}\n</code></pre>\n  <h3>Envoltura de datos y paginación</h3>\n  <p>Al devolver colecciones paginadas en una respuesta de recursos, Laravel ajustará tus datos de recursos en una clave <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">data</span> incluso si se ha llamado al método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withoutWrapping</span>. Esto se debe a que las respuestas paginadas siempre contienen claves <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">meta</span> y<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">links</span> con información sobre el estado del paginador:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Eladio Schroeder Sr.\",\n            \"email\": \"therese28@example.com\",\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Liliana Mayert\",\n            \"email\": \"evandervort@example.com\",\n        }\n    ],\n    \"links\":{\n        \"first\": \"http://example.com/pagination?page=1\",\n        \"last\": \"http://example.com/pagination?page=1\",\n        \"prev\": null,\n        \"next\": null\n    },\n    \"meta\":{\n        \"current_page\": 1,\n        \"from\": 1,\n        \"last_page\": 1,\n        \"path\": \"http://example.com/pagination\",\n        \"per_page\": 15,\n        \"to\": 10,\n        \"total\": 10\n    }\n}\n</code></pre>\n  <h3>Paginación</h3>\n  <p>Siempre puedes pasar una instancia del paginador al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">collection</span> de un recurso o a una colección de recursos personalizada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use App\\User;\nuse App\\Http\\Resources\\UserCollection;\nRoute::get('/users', function () {\n    return new UserCollection(User::paginate());\n});\n</code></pre>\n  <p>Las respuestas paginadas siempre contienen claves <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">meta</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">links</span> con información sobre el estado del paginador:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Eladio Schroeder Sr.\",\n            \"email\": \"therese28@example.com\",\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Liliana Mayert\",\n            \"email\": \"evandervort@example.com\",\n        }\n    ],\n    \"links\":{\n        \"first\": \"http://example.com/pagination?page=1\",\n        \"last\": \"http://example.com/pagination?page=1\",\n        \"prev\": null,\n        \"next\": null\n    },\n    \"meta\":{\n        \"current_page\": 1,\n        \"from\": 1,\n        \"last_page\": 1,\n        \"path\": \"http://example.com/pagination\",\n        \"per_page\": 15,\n        \"to\": 10,\n        \"total\": 10\n    }\n}\n</code></pre>\n  <h3>Atributos condicionales</h3>\n  <p>En ocasiones, es posible que desees incluir solo un atributo en una respuesta de recurso si se cumple una condición determinada. Por ejemplo, es posible que desee incluir solo un valor si el usuario actual es un \"administrador\". Laravel proporciona una variedad de métodos de ayuda para ayudarlo en esta situación. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">when</span> se puede usar para agregar condicionalmente un atributo a una respuesta de recurso:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Transform the resource into an array.\n*\n* @param  \\Illuminate\\Http\\Request  \\$request\n* @return array\n*/\npublic function toArray(\\$request)\n{\n    return [\n        'id' =&gt; \\$this-&gt;id,\n        'name' =&gt; \\$this-&gt;name,\n        'email' =&gt; \\$this-&gt;email,\n        'secret' =&gt; \\$this-&gt;when(Auth::user()-&gt;isAdmin(), 'secret-value'),\n        'created_at' =&gt; \\$this-&gt;created_at,\n        'updated_at' =&gt; \\$this-&gt;updated_at,\n    ];\n}\n</code></pre>\n  <p>En este ejemplo, la clave <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">secret</span> solo se devolverá en la respuesta final del recurso si el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">isAdmin</span> del usuario autenticado devuelve <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>. Si el método devuelve <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>, la clave <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">secret</span> se eliminará de la respuesta del recurso por completo antes de que se envíe de nuevo al cliente. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">when</span> te permite definir expresivamente tus recursos sin tener que recurrir a sentencias condicionales al construir el arreglo.</p>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">when</span> también acepta un Closure como segundo argumento, lo que te permite calcular el valor resultante solo si la condición dada es<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'secret' =&gt; \\$this-&gt;when(Auth::user()-&gt;isAdmin(), function () {\n    return 'secret-value';\n}),\n</code></pre>\n  <h4>Fusionar atributos condicionales</h4>\n  <p>En ocasiones, es posible que tenga varios atributos que solo deben incluirse en la respuesta del recurso según la misma condición. En este caso, puede usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mergeWhen</span> para incluir los atributos en la respuesta solo cuando la condición dada es <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Transform the resource into an array.\n*\n* @param  \\Illuminate\\Http\\Request  \\$request\n* @return array\n*/\npublic function toArray(\\$request)\n{\n    return [\n        'id' =&gt; \\$this-&gt;id,\n        'name' =&gt; \\$this-&gt;name,\n        'email' =&gt; \\$this-&gt;email,\n        \\$this-&gt;mergeWhen(Auth::user()-&gt;isAdmin(), [\n            'first-secret' =&gt; 'value',\n            'second-secret' =&gt; 'value',\n        ]),\n        'created_at' =&gt; \\$this-&gt;created_at,\n        'updated_at' =&gt; \\$this-&gt;updated_at,\n    ];\n}\n</code></pre>\n  <p>Nuevamente, si la condición dada es <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>, estos atributos se eliminarán de la respuesta del recurso por completo antes de que se envíe al cliente.</p>\n  <p>Nota</p>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mergeWhen</span> no debe usarse dentro de arreglos que mezclen claves de cadenas de caracteres y claves numéricas. Además, no se debe utilizar dentro de arreglos con claves numéricas que no están ordenadas secuencialmente.</p>\n  <h3>Relaciones condicionales</h3>\n  <p>Además de cargar condicionalmente los atributos, puedes incluir condicionalmente relaciones en tus respuestas de recursos en función de si la relación ya se ha cargado en el modelo. Esto permite que tu controlador decida qué relaciones deben cargarse en el modelo y tu recurso puede incluirlas fácilmente solo cuando realmente se hayan cargado.</p>\n  <p>Fundamentalmente, esto hace que sea más fácil evitar los problemas de consulta \"N + 1\" dentro de tus recursos. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whenLoaded</span> puede usarse para cargar condicionalmente una relación. Para evitar cargar relaciones innecesariamente, este método acepta el nombre de la relación en lugar de la relación en sí:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Transform the resource into an array.\n*\n* @param  \\Illuminate\\Http\\Request  \\$request\n* @return array\n*/\npublic function toArray(\\$request)\n{\n    return [\n        'id' =&gt; \\$this-&gt;id,\n        'name' =&gt; \\$this-&gt;name,\n        'email' =&gt; \\$this-&gt;email,\n        'posts' =&gt; PostResource::collection(\\$this-&gt;whenLoaded('posts')),\n        'created_at' =&gt; \\$this-&gt;created_at,\n        'updated_at' =&gt; \\$this-&gt;updated_at,\n    ];\n}\n</code></pre>\n  <p>En este ejemplo, si la relación no se ha cargado, la clave <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">posts</span> se eliminará de la respuesta del recurso por completo antes de que se envíe al cliente.</p>\n  <h4>Información de pivote condicional</h4>\n  <p>Además de incluir condicionalmente la información de la relación en tus respuestas de recursos, puedes incluir condicionalmente datos de las tablas intermedias de relaciones de muchos a muchos utilizando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whenPivotLoaded</span>. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whenPivotLoaded</span> acepta el nombre de la tabla pivote como su primer argumento. El segundo argumento debe ser un Closure que defina el valor que se devolverá si la información pivote está disponible en el modelo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Transform the resource into an array.\n*\n* @param  \\Illuminate\\Http\\Request  \\$request\n* @return array\n*/\npublic function toArray(\\$request)\n{\n    return [\n        'id' =&gt; \\$this-&gt;id,\n        'name' =&gt; \\$this-&gt;name,\n        'expires_at' =&gt; \\$this-&gt;whenPivotLoaded('role_user', function () {\n            return \\$this-&gt;pivot-&gt;expires_at;\n        }),\n    ];\n}\n</code></pre>\n  <p>Si tu tabla intermedia utiliza un accesador distinto de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pivot</span>, puede usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whenPivotLoadedAs</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Transform the resource into an array.\n*\n* @param  \\Illuminate\\Http\\Request  \\$request\n* @return array\n*/\npublic function toArray(\\$request)\n{\n    return [\n        'id' =&gt; \\$this-&gt;id,\n        'name' =&gt; \\$this-&gt;name,\n        'expires_at' =&gt; \\$this-&gt;whenPivotLoadedAs('subscription', 'role_user', function () {\n            return \\$this-&gt;subscription-&gt;expires_at;\n        }),\n    ];\n}\n</code></pre>\n  <h3>Añadiendo metadatos</h3>\n  <p>Algunos estándares de API de JSON requieren la adición de metadatos a tus respuestas de recursos y colecciones de recursos. Esto a menudo incluye cosas como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">links</span> al recurso o recursos relacionados, o metadatos sobre el recurso en sí. Si necesitas devolver metadatos adicionales sobre un recurso, inclúyelos en tu método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toArray</span>. Por ejemplo, puedes incluir información de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">link</span> al transformar una colección de recursos:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Transform the resource into an array.\n*\n* @param  \\Illuminate\\Http\\Request  \\$request\n* @return array\n*/\npublic function toArray(\\$request)\n{\n    return [\n        'data' =&gt; \\$this-&gt;collection,\n        'links' =&gt; [\n            'self' =&gt; 'link-value',\n        ],\n    ];\n}\n</code></pre>\n  <p>Al devolver metadatos adicionales de sus recursos, nunca tendrás que preocuparte por anular accidentalmente las claves <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">links</span> o<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">meta</span> que Laravel agrega automáticamente al devolver las respuestas paginadas. Cualquier <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">links</span> adicional que definas se fusionará con los enlaces proporcionados por el paginador.</p>\n  <h4>Metadatos de nivel superior</h4>\n  <p>A veces, es posible que desees incluir solo ciertos metadatos con una respuesta de recurso si el recurso es el recurso más externo que se devuelve. Por lo general, esto incluye información meta sobre la respuesta como un todo. Para definir estos metadatos, agrega un método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">with</span> a tu clase de recurso. Este método debería devolver un arreglo de metadatos que se incluirá con la respuesta del recurso solo cuando el recurso sea el recurso más externo que se está llamando:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Http\\Resources;\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\nclass UserCollection extends ResourceCollection\n{\n    /**\n    * Transform the resource collection into an array.\n    *\n    * @param  \\Illuminate\\Http\\Request  \\$request\n    * @return array\n    */\n    public function toArray(\\$request)\n    {\n        return parent::toArray(\\$request);\n    }\n    /**\n    * Get additional data that should be returned with the resource array.\n    *\n    * @param  \\Illuminate\\Http\\Request  \\$request\n    * @return array\n    */\n    public function with(\\$request)\n    {\n        return [\n            'meta' =&gt; [\n                'key' =&gt; 'value',\n            ],\n        ];\n    }\n}\n</code></pre>\n  <h4>Añadiendo metadatos al construir recursos</h4>\n  <p>También puedes agregar datos de nivel superior al construir de instancias de recursos en tu ruta o controlador. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">additional</span>, que está disponible en todos los recursos, acepta un arreglo de datos que deberían agregarse a la respuesta del recurso:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>return (new UserCollection(User::all()-&gt;load('roles')))\n                -&gt;additional(['meta' =&gt; [\n                    'key' =&gt; 'value',\n                ]]);\n</code></pre>\n  <h2>Respuestas de Recurso</h2>\n  <p>Como ya has leído, los recursos pueden devolverse directamente desde las rutas y los controladores:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use App\\User;\nuse App\\Http\\Resources\\User as UserResource;\nRoute::get('/user', function () {\n    return new UserResource(User::find(1));\n});\n</code></pre>\n  <p>Sin embargo, a veces es posible que necesites personalizar la respuesta HTTP saliente antes de enviarla al cliente. Hay dos maneras de lograr esto. Primero, puedes encadenar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">response</span> en el recurso. Este método devolverá una instancia de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Http\\Response</span>, que te permite un control total de los encabezados de la respuesta:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use App\\User;\nuse App\\Http\\Resources\\User as UserResource;\nRoute::get('/user', function () {\n    return (new UserResource(User::find(1)))\n                -&gt;response()\n                -&gt;header('X-Value', 'True');\n});\n</code></pre>\n  <p>Alternativamente, puedes definir un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withResponse</span> dentro del propio recurso. Este método se llamará cuando el recurso se devuelva como el recurso más externo en una respuesta:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Http\\Resources;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\nclass User extends JsonResource\n{\n    /**\n    * Transform the resource into an array.\n    *\n    * @param  \\Illuminate\\Http\\Request  \\$request\n    * @return array\n    */\n    public function toArray(\\$request)\n    {\n        return [\n            'id' =&gt; \\$this-&gt;id,\n        ];\n    }\n    /**\n    * Customize the outgoing response for the resource.\n    *\n    * @param  \\Illuminate\\Http\\Request  \\$request\n    * @param  \\Illuminate\\Http\\Response  \\$response\n    * @return void\n    */\n    public function withResponse(\\$request, \\$response)\n    {\n        \\$response-&gt;header('X-Value', 'True');\n    }\n}\n</code></pre>\n</div>"
      },
      {
        "titulo": "Serializacion",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Eloquent: Serialización</h1>\n  <ul>\n    <li>Introducción</li>\n    <li>\n      Serializando modelos y colecciones\n      <ul>\n        <li>Serializando a arreglos</li>\n        <li>Serializando a JSON</li>\n      </ul>\n    </li>\n    <li>Ocultando atributos de JSON</li>\n    <li>Añadiendo valores a JSON</li>\n    <li>Serialización de fechas</li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>Al momento de construir APIs JSON, con frecuencia necesitas convertir tus modelos y relaciones a arreglos o JSON. Eloquent incluye métodos convenientes para hacer estas conversiones, también como controlar cuáles atributos están incluidos en tus serializaciones.</p>\n  <h2>Serializando modelos y colecciones</h2>\n  <h3>Serializando a arreglos</h3>\n  <p>\n    Para convertir un modelo y sus relaciones cargadas a un arreglo, debes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toArray</span>. Este método es recursivo, ya que todos los atributos y todas las relaciones (incluyendo las relaciones de relaciones) serán convertidas a arreglos:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = App\\User::with('roles')-&gt;first();\nreturn \\$user-&gt;toArray();\n</code></pre>\n  <p>Para convertir solo los atributos de un modelo a un arreglo, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">attributedToArray</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = App\\User::first();\nreturn \\$user-&gt;attributesToArray();\n</code></pre>\n  <p>\n    También puedes convertir colecciones completas de modelos en arreglos:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = App\\User::all();\nreturn \\$users-&gt;toArray();\n</code></pre>\n  <h3>Serializando a JSON</h3>\n  <p>\n    Para convertir un modelo a JSON, deberías usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toJson</span>. Igual que <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toArray</span>, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toJson</span> es recursivo, así todos los atributos y relaciones serán convertidas a JSON. También puedes especificar las opciones de codificación JSON soportadas por PHP\n    <outboundlink></outboundlink>\n    :\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = App\\User::find(1);\nreturn \\$user-&gt;toJson();\nreturn \\$user-&gt;toJson(JSON_PRETTY_PRINT);\n</code></pre>\n  <p>Alternativamente, puedes convertir un modelo o colección en una cadena, la cual ejecutará automáticamente el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toJson</span> sobre el modelo o colección:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = App\\User::find(1);\nreturn (string) \\$user;\n</code></pre>\n  <p>Debido a que los modelos y colecciones son convertidos a JSON al momento de conversión a una cadena, puedes devolver objetos de Eloquent directamente desde las rutas o controladores de tu aplicación:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Route::get('users', function () {\n    return App\\User::all();\n});\n</code></pre>\n  <h4>Relaciones</h4>\n  <p>Cuando un modelo de Eloquent es convertido a JSON, las relaciones que sean cargadas serán incluidas automáticamente como atributos en el objeto JSON. Además, aunque los métodos de relación de Eloquent sean definidos usando \"camel case\", un atributo JSON de la relación en su lugar se verá como \"snake case\".</p>\n  <h2>Ocultando Atributos de JSON</h2>\n  <p>Algunas veces puedes querer limitar los atributos, tales como contraseñas, que están incluidos en la representación de arreglo o JSON de tu modelo. Para hacer eso, agrega una propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$hidden</span> en tu modelo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass User extends Model\n{\n    /**\n    * The attributes that should be hidden for arrays.\n    *\n    * @var array\n    */\n    protected \\$hidden = ['password'];\n}\n</code></pre>\n  <p>Nota</p>\n  <p>Al momento de ocultar relaciones, usa el nombre de método de la relación.</p>\n  <p>Alternativamente, puedes usar la propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">visible</span> para definir una lista blanca de atributos que deberían ser incluidos en la representación de arreglo y JSON de tu modelo. Todos los demás atributos estarán ocultos cuando el modelo sea convertido a un arreglo o JSON:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass User extends Model\n{\n    /**\n    * The attributes that should be visible in arrays.\n    *\n    * @var array\n    */\n    protected \\$visible = ['first_name', 'last_name'];\n}\n</code></pre>\n  <h4>Modificando la visibilidad de atributos temporalmente</h4>\n  <p>Si prefieres hacer visible algunos atributos típicamente ocultos en una instancia de modelo dado, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">makeVisible</span>. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">makeVisible</span> devuelve la instancia de modelo para encadenar métodos de forma conveniente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>return \\$user-&gt;makeVisible('attribute')-&gt;toArray();\n</code></pre>\n  <p>De igual manera, si prefieres ocultar algunos atributos típicamente visibles en una instancia de modelo dado, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">makeHidden</span>.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>return \\$user-&gt;makeHidden('attribute')-&gt;toArray();\n</code></pre>\n  <h2>Añadiendo Valores a JSON</h2>\n  <p>Ocasionalmente, al momento de convertir modelos a un arreglo o JSON, puedes querer agregar atributos que no tienen una columna correspondiente en tu base de datos. Para hacer eso, primero define un accesador para el valor:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass User extends Model\n{\n    /**\n    * Get the administrator flag for the user.\n    *\n    * @return bool\n    */\n    public function getIsAdminAttribute()\n    {\n        return \\$this-&gt;attributes['admin'] == 'yes';\n    }\n}\n</code></pre>\n  <p>Después de crear el accesador, agrega el nombre del atributo a la propiedad <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">appends</span> en el modelo. Nota que los nombres de atributo son referenciados típicamente en \"snake_case\", aun cuando el accesador sea definido usando \"camel case\":</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass User extends Model\n{\n    /**\n    * The accessors to append to the model's array form.\n    *\n    * @var array\n    */\n    protected \\$appends = ['is_admin'];\n}\n</code></pre>\n  <p>Una vez que el atributo ha sido agregado a la lista <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">appends</span>, será incluido en ambas representaciones de arreglo y JSON del modelo. Los atributos en el arreglo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">appends</span> también respetarán las configuraciones <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">visible</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hidden</span> configuradas en el modelo.</p>\n  <h4>Añadiendo en tiempo de ejecución</h4>\n  <p>Puedes indicar una única instancia de modelo que agregue atributos utilizando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">append</span>. También usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">setAppends</span> para sobrescribir el arreglo completo de propiedades adjuntadas para una instancia de un modelo dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>return \\$user-&gt;append('is_admin')-&gt;toArray();\nreturn \\$user-&gt;setAppends(['is_admin'])-&gt;toArray();\n</code></pre>\n  <h2>Serialización de Fecha</h2>\n  <h4>Personalizar el formato de la fecha por atributo</h4>\n  <p>Puedes personalizar el formato de serialización de atributos de fecha de Eloquent individuales especificando el formato de la fecha en la declaración de la conversión:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>protected \\$casts = [\n    'birthday' =&gt; 'date:Y-m-d',\n    'joined_at' =&gt; 'datetime:Y-m-d H:00',\n];\n</code></pre>\n  <h4>Personalización global mediante carbon</h4>\n  <p>\n    Laravel extiende la biblioteca de fechas Carbon con el propósito de proporcionar la personalización conveniente del formato de serialización de Carbon. Para personalizar la forma en que todas las fechas Carbon a través de tu aplicación sean serializadas, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Carbon::serializeUsing</span>. El método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">serializeUsing</span> acepta una Closure la cual devuelve una representación en forma de cadena de la fecha para la serialización JSON:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Providers;\nuse Illuminate\\Support\\Carbon;\nuse Illuminate\\Support\\ServiceProvider;\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n    * Perform post-registration booting of services.\n    *\n    * @return void\n    */\n    public function boot()\n    {\n        Carbon::serializeUsing(function (\\$carbon) {\n            return \\$carbon-&gt;format('U');\n        });\n    }\n    /**\n    * Register bindings in the container.\n    *\n    * @return void\n    */\n    public function register()\n    {\n        //\n    }\n}\n</code></pre>\n</div>"
      }
    ]
  },
  {
    "titulo": "9.- Testing",
    "subtitulo": "",
    "items": [
      {
        "titulo": "Empezando",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Pruebas: Primeros Pasos</h1>\n  <ul>\n    <li>Introducción</li>\n    <li>Entorno</li>\n    <li>Creando y ejecutando pruebas</li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>Laravel está construido pensando en las pruebas. De hecho, el soporte para pruebas con PHPUnit es incluido de forma predeterminada y un archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">phpunit.xml</span> ya está configurado para tu aplicación. El framework también viene con métodos de ayuda convenientes que permiten que pruebes tus aplicaciones de forma expresiva.</p>\n  <p>De forma predeterminada, el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tests</span> de tu aplicación contiene dos directorios: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Feature</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Unit</span>. Las pruebas unitarias (Unit) son pruebas que se enfocan en una muy pequeña porción aislada de tu código. De hecho, la mayoría de las pruebas unitarias se enfocan probablemente en un solo método. Las pruebas funcionales (Feature) pueden probar una porción más grande de tu código, incluyendo la forma en la que varios objetos interactúan entre sí e incluso una solicitud HTTP completa para un endpoint de JSON.</p>\n  <p>Un archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ExampleTest.php</span> es proporcionado en ambos directorios de prueba <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Feature</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Unit</span>. Después de instalar una nueva aplicación de Laravel, ejecuta\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">phpunit</span> en la línea de comandos para ejecutar tus pruebas.</p>\n  <h2>Entorno</h2>\n  <p>Al momento de ejecutar las pruebas por medio de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">phpunit</span>, Laravel establecerá automáticamente el entorno de configuración a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">testing</span> debido a las variables de entorno definidas en el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">phpunit.xml</span>. Laravel también configura automáticamente la sesión y cache del manejador <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">array</span> al momento de ejecutar las pruebas, lo que significa que ninguna sesión o cache de datos será conservada mientras las pruebas son ejecutadas.</p>\n  <p>Eres libre de definir otros valores de configuración del entorno de pruebas cuando sea necesario. Las variables de entorno <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">testing</span> pueden ser configuradas en el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">phpunit.xml</span>, pero ¡asegurate de limpiar tu cache de configuración usando el comando Artisan\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config:clear</span> antes de ejecutar tus pruebas!</p>\n  <p>Además, puedes crear un archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env.testing</span> en la raíz de tu proyecto. Este archivo anulará el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span> cuando ejecute las pruebas PHPUnit o cuando ejecute los comandos de Artisan con la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--env = testing</span>.</p>\n  <h2>Creando y ejecutando pruebas</h2>\n  <p>Para crear un nuevo caso de prueba, usa el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:test</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Create a test in the Feature directory...\nphp artisan make:test UserTest\n// Create a test in the Unit directory...\nphp artisan make:test UserTest --unit\n</code></pre>\n  <p>Una vez que la prueba ha sido generada, puedes definir métodos de pruebas como lo harías normalmente usando PHPUnit. Para ejecutar tus pruebas, ejecuta el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">phpunit</span> desde tu terminal:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace Tests\\Unit;\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nclass ExampleTest extends TestCase\n{\n    /**\n    * A basic test example.\n    *\n    * @return void\n    */\n    public function testBasicTest()\n    {\n        \\$this-&gt;assertTrue(true);\n    }\n}\n</code></pre>\n  <p>Nota</p>\n  <p>Si defines tus propios métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">setUp</span> / <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tearDown</span> dentro de una clase de prueba, asegurate de ejecutar los respectivos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">parent::setUp()</span> / <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">parent::tearDown()</span> metodos en la clase padre.</p>\n</div>"
      },
      {
        "titulo": "Pruebas HTTP",
        "contenido": "<section>\n  <h1>Pruebas HTTP</h1>\n  <ul>\n    <li>Introducción\n      <ul>\n        <li>Personalización de encabezados de solicitud</li>\n        <li>Galletas</li>\n        <li>Respuestas de depuración</li>\n      </ul></li>\n    <li>Sesión / Autenticación</li>\n    <li>Prueba de las API JSON</li>\n    <li>Prueba de cargas de archivos</li>\n    <li>Prueba de vistas</li>\n    <li>Afirmaciones disponibles\n      <ul>\n        <li>Afirmaciones de respuesta</li>\n        <li>Afirmaciones de autenticación</li>\n      </ul></li>\n  </ul>\n  <p></p>\n  <h2>Introducción</h2>\n  <p>Laravel proporciona una API muy fluida para realizar solicitudes HTTP a su aplicación y examinar la salida. Por ejemplo, eche un vistazo a la prueba de características que se define a continuación:</p>\n  <pre><code>&lt;?php\n\nnamespace Tests\\Feature;\n\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Illuminate\\Foundation\\Testing\\WithoutMiddleware;\nuse Tests\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    /**\n     * A basic test example.\n     *\n     * @return void\n     */\n    public function testBasicTest()\n    {\n        $response = $this-&gt;get('/');\n\n        $response-&gt;assertStatus(200);\n    }\n}</code></pre>\n  <p>El <code>get</code>método realiza una <code>GET</code>solicitud en la aplicación, mientras que el <code>assertStatus</code>método afirma que la respuesta devuelta debe tener el código de estado HTTP dado. Además de esta simple afirmación, Laravel también contiene una variedad de afirmaciones para inspeccionar los encabezados de respuesta, el contenido, la estructura JSON y más.</p>\n  <p></p>\n  <h3>Personalización de encabezados de solicitud</h3>\n  <p>Puede utilizar el <code>withHeaders</code>método para personalizar los encabezados de la solicitud antes de enviarla a la aplicación. Esto le permite agregar cualquier encabezado personalizado que le gustaría a la solicitud:</p>\n  <pre><code>&lt;?php\n\nclass ExampleTest extends TestCase\n{\n    /**\n     * A basic functional test example.\n     *\n     * @return void\n     */\n    public function testBasicExample()\n    {\n        $response = $this-&gt;withHeaders([\n            'X-Header' =&gt; 'Value',\n        ])-&gt;json('POST', '/user', ['name' =&gt; 'Sally']);\n\n        $response\n            -&gt;assertStatus(201)\n            -&gt;assertJson([\n                'created' =&gt; true,\n            ]);\n    }\n}</code></pre>\n  <blockquote>\n    <div><div></div><p> El middleware CSRF se desactiva automáticamente al ejecutar pruebas.</p></div>\n  </blockquote>\n  <p></p>\n  <h3>Galletas</h3>\n  <p>Puede usar los métodos <code>withCookie</code>o <code>withCookies</code>para establecer valores de cookies antes de realizar una solicitud. El <code>withCookie</code>método acepta un nombre y un valor de cookie como sus dos argumentos, mientras que el <code>withCookies</code>método acepta una matriz de pares de nombre / valor:</p>\n  <pre><code>&lt;?php\n\nclass ExampleTest extends TestCase\n{\n    public function testCookies()\n    {\n        $response = $this-&gt;withCookie('color', 'blue')-&gt;get('/');\n\n        $response = $this-&gt;withCookies([\n            'color' =&gt; 'blue',\n            'name' =&gt; 'Taylor',\n        ])-&gt;get('/');\n    }\n}</code></pre>\n  <p></p>\n  <h3>Respuestas de depuración</h3>\n  <p>Después de hacer una solicitud de prueba para su aplicación, el <code>dump</code>, <code>dumpHeaders</code>y <code>dumpSession</code>métodos se pueden utilizar para examinar y depurar los contenidos de respuesta:</p>\n  <pre><code>&lt;?php\n\nnamespace Tests\\Feature;\n\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Illuminate\\Foundation\\Testing\\WithoutMiddleware;\nuse Tests\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    /**\n     * A basic test example.\n     *\n     * @return void\n     */\n    public function testBasicTest()\n    {\n        $response = $this-&gt;get('/');\n\n        $response-&gt;dumpHeaders();\n\n        $response-&gt;dumpSession();\n\n        $response-&gt;dump();\n    }\n}</code></pre>\n  <p></p>\n  <h2>Sesión / Autenticación</h2>\n  <p>Laravel proporciona varios ayudantes para trabajar con la sesión durante las pruebas HTTP. Primero, puede configurar los datos de la sesión en una matriz dada usando el <code>withSession</code>método. Esto es útil para cargar la sesión con datos antes de enviar una solicitud a su aplicación:</p>\n  <pre><code>&lt;?php\n\nclass ExampleTest extends TestCase\n{\n    public function testApplication()\n    {\n        $response = $this-&gt;withSession(['foo' =&gt; 'bar'])\n                         -&gt;get('/');\n    }\n}</code></pre>\n  <p>Un uso común de la sesión es mantener el estado del usuario autenticado. El <code>actingAs</code>método auxiliar proporciona una forma sencilla de autenticar a un usuario determinado como usuario actual. Por ejemplo, podemos usar una fábrica de modelos para generar y autenticar a un usuario:</p>\n  <pre><code>&lt;?php\n\nuse App\\Models\\User;\n\nclass ExampleTest extends TestCase\n{\n    public function testApplication()\n    {\n        $user = User::factory()-&gt;create();\n\n        $response = $this-&gt;actingAs($user)\n                         -&gt;withSession(['foo' =&gt; 'bar'])\n                         -&gt;get('/');\n    }\n}</code></pre>\n  <p>También puede especificar qué guardia debe usarse para autenticar al usuario dado pasando el nombre de guardia como segundo argumento del <code>actingAs</code>método:</p>\n  <pre><code>$this-&gt;actingAs($user, 'api')</code></pre>\n  <p></p>\n  <h2>Prueba de las API JSON</h2>\n  <p>Laravel también proporciona varios ayudantes para probar las API JSON y sus respuestas. Por ejemplo, el <code>json</code>, <code>getJson</code>, <code>postJson</code>, <code>putJson</code>, <code>patchJson</code>, <code>deleteJson</code>, y <code>optionsJson</code>métodos se pueden utilizar para emitir solicitudes JSON con diversos verbos HTTP. También puede pasar fácilmente datos y encabezados a estos métodos. Para comenzar, escribamos una prueba para realizar una <code>POST</code>solicitud <code>/user</code>y afirmar que se devolvieron los datos esperados:</p>\n  <pre><code>&lt;?php\n\nclass ExampleTest extends TestCase\n{\n    /**\n     * A basic functional test example.\n     *\n     * @return void\n     */\n    public function testBasicExample()\n    {\n        $response = $this-&gt;postJson('/user', ['name' =&gt; 'Sally']);\n\n        $response\n            -&gt;assertStatus(201)\n            -&gt;assertJson([\n                'created' =&gt; true,\n            ]);\n    }\n}</code></pre>\n  <blockquote>\n    <div><div></div><p>El <code>assertJson</code>método convierte la respuesta en una matriz y se utiliza para verificar que la matriz dada existe dentro de la respuesta JSON devuelta por la aplicación. Por lo tanto, si hay otras propiedades en la respuesta JSON, esta prueba se aprobará siempre que el fragmento dado esté presente.<code>PHPUnit::assertArraySubset</code></p></div>\n  </blockquote>\n  <p>Además, se puede acceder a los datos de respuesta JSON como variables de matriz en la respuesta:</p>\n  <pre><code>$this-&gt;assertTrue($response['created']);</code></pre>\n  <p></p>\n  <h3>Verificación de una coincidencia JSON exacta</h3>\n  <p>Si desea verificar que la matriz dada es una coincidencia <strong>exacta</strong> para el JSON devuelto por la aplicación, debe usar el <code>assertExactJson</code>método:</p>\n  <pre><code>&lt;?php\n\nclass ExampleTest extends TestCase\n{\n    /**\n     * A basic functional test example.\n     *\n     * @return void\n     */\n    public function testBasicExample()\n    {\n        $response = $this-&gt;json('POST', '/user', ['name' =&gt; 'Sally']);\n\n        $response\n            -&gt;assertStatus(201)\n            -&gt;assertExactJson([\n                'created' =&gt; true,\n            ]);\n    }\n}</code></pre>\n  <p></p>\n  <h3>Verificación de rutas JSON</h3>\n  <p>Si desea verificar que la respuesta JSON contiene algunos datos dados en una ruta específica, debe usar el <code>assertJsonPath</code>método:</p>\n  <pre><code>&lt;?php\n\nclass ExampleTest extends TestCase\n{\n    /**\n     * A basic functional test example.\n     *\n     * @return void\n     */\n    public function testBasicExample()\n    {\n        $response = $this-&gt;json('POST', '/user', ['name' =&gt; 'Sally']);\n\n        $response\n            -&gt;assertStatus(201)\n            -&gt;assertJsonPath('team.owner.name', 'foo')\n    }\n}</code></pre>\n  <p></p>\n  <h2>Prueba de cargas de archivos</h2>\n  <p>La clase proporciona un método que puede usarse para generar archivos o imágenes ficticios para realizar pruebas. Esto, combinado con el método de la fachada, simplifica enormemente la prueba de carga de archivos. Por ejemplo, puede combinar estas dos funciones para probar fácilmente un formulario de carga de avatar:<code>Illuminate\\Http\\UploadedFile</code><code>fake</code><code>Storage</code><code>fake</code></p>\n  <pre><code>&lt;?php\n\nnamespace Tests\\Feature;\n\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Illuminate\\Foundation\\Testing\\WithoutMiddleware;\nuse Illuminate\\Http\\UploadedFile;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Tests\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    public function testAvatarUpload()\n    {\n        Storage::fake('avatars');\n\n        $file = UploadedFile::fake()-&gt;image('avatar.jpg');\n\n        $response = $this-&gt;json('POST', '/avatar', [\n            'avatar' =&gt; $file,\n        ]);\n\n        // Assert the file was stored...\n        Storage::disk('avatars')-&gt;assertExists($file-&gt;hashName());\n\n        // Assert a file does not exist...\n        Storage::disk('avatars')-&gt;assertMissing('missing.jpg');\n    }\n}</code></pre>\n  <h4>Personalización de archivos falsos</h4>\n  <p>Al crear archivos usando el <code>fake</code>método, puede especificar el ancho, alto y tamaño de la imagen para probar mejor sus reglas de validación:</p>\n  <pre><code>UploadedFile::fake()-&gt;image('avatar.jpg', $width, $height)-&gt;size(100);</code></pre>\n  <p>Además de crear imágenes, puede crear archivos de cualquier otro tipo utilizando el <code>create</code>método:</p>\n  <pre><code>UploadedFile::fake()-&gt;create('document.pdf', $sizeInKilobytes);</code></pre>\n  <p>Si es necesario, puede pasar un <code>$mimeType</code>argumento al método para definir explícitamente el tipo MIME que debe devolver el archivo:</p>\n  <pre><code>UploadedFile::fake()-&gt;create('document.pdf', $sizeInKilobytes, 'application/pdf');</code></pre>\n  <p></p>\n  <h2>Prueba de vistas</h2>\n  <p>Laravel le permite representar una vista de forma aislada sin realizar una solicitud HTTP simulada a la aplicación. Para lograr esto, puede usar el <code>view</code>método dentro de su prueba. El <code>view</code>método acepta el nombre de la vista y una matriz opcional de datos. El método devuelve una instancia de , que ofrece varios métodos para hacer afirmaciones de manera conveniente sobre el contenido de la vista:<code>Illuminate\\Testing\\TestView</code></p>\n  <pre><code>public function testWelcomeView()\n{\n    $view = $this-&gt;view('welcome', ['name' =&gt; 'Taylor']);\n\n    $view-&gt;assertSee('Taylor');\n}</code></pre>\n  <p>El <code>TestView</code>objeto proporciona los siguientes métodos de aserción: <code>assertSee</code>, <code>assertSeeInOrder</code>, <code>assertSeeText</code>, <code>assertSeeTextInOrder</code>, <code>assertDontSee</code>, y <code>assertDontSeeText</code>.</p>\n  <p>Si es necesario, puede obtener el contenido de la vista renderizada sin procesar al convertir la <code>TestView</code>instancia en una cadena:</p>\n  <pre><code>$contents = (string) $this-&gt;view('welcome');</code></pre>\n  <h4>Compartir errores</h4>\n  <p>Algunas vistas pueden depender de errores compartidos en la bolsa de errores global proporcionada por Laravel. Para hidratar la bolsa de error con mensajes de error, puede utilizar el <code>withViewErrors</code>método:</p>\n  <pre><code>$view = $this-&gt;withViewErrors([\n    'name' =&gt; ['Please provide a valid name.']\n])-&gt;view('form');\n\n$view-&gt;assertSee('Please provide a valid name.');</code></pre>\n  <h4>Representación de la hoja sin procesar</h4>\n  <p>Si es necesario, puede utilizar el <code>blade</code>método para evaluar y renderizar una cadena Blade sin procesar. Como el <code>view</code>método, el <code>blade</code>método devuelve una instancia de :<code>Illuminate\\Testing\\TestView</code></p>\n  <pre><code>$view = $this-&gt;blade(\n    '&lt;x-component :name=\"$name\" /&gt;',\n    ['name' =&gt; 'Taylor']\n);\n\n$view-&gt;assertSee('Taylor');</code></pre>\n  <p></p>\n  <h2>Afirmaciones disponibles</h2>\n  <p></p>\n  <h3>Afirmaciones de respuesta</h3>\n  <p>Laravel proporciona una variedad de métodos de afirmación personalizados para sus pruebas de funciones PHPUnit . Estas afirmaciones pueden ser accedidos en la respuesta que se devuelve desde los <code>json</code>, <code>get</code>, <code>post</code>, <code>put</code>, y <code>delete</code>métodos de ensayo:</p>\n  <style>\n    .collection-method-list > p {\n        column-count: 2; -moz-column-count: 2; -webkit-column-count: 2;\n        column-gap: 2em; -moz-column-gap: 2em; -webkit-column-gap: 2em;\n    }\n\n    .collection-method-list a {\n        display: block;\n    }\n</style>\n  <div>\n    <p>afirmarCookie\n      assertCookieExpired\n      asertCookieNotExpired\n      afirmarCookieMissing\n      aseverarCreado\n      AsertDontSee\n      asertDontSeeText\n      asertExactJson\n      aseverar Prohibido\n      assertHeader\n      assertHeaderMissing\n      asertJson\n      asertJsonCount\n      asertJsonFragment\n      asertJsonMissing\n      asertJsonMissingExact\n      asertJsonMissingValidationErrors\n      asertJsonPath\n      asertJsonStructure\n      asertJsonValidationErrors\n      asertLocation\n      assertNoContent\n      asertNotFound\n      afirmarOk\n      assertPlainCookie\n      asertRedirect\n      aseverarVer\n      asertSeeInOrder\n      asertSeeText\n      asertSeeTextInOrder\n      AsertSessionHas\n      asertSessionHasInput\n      asertSessionHasAll\n      asertSessionHasErrors\n      asertSessionHasErrorsIn\n      asertSessionHasNoErrors\n      asertSessionDoesntHaveErrors\n      asertSessionMissing\n      asertStatus\n      afirmar con éxito\n      aseverar no autorizado\n      assertViewHas\n      asertViewHasAll\n      assertViewIs\n      assertViewMissing</p>\n  </div>\n  <p></p>\n  <h4>afirmarCookie</h4>\n  <p>Afirma que la respuesta contiene la cookie dada:</p>\n  <pre><code>$response-&gt;assertCookie($cookieName, $value = null);</code></pre>\n  <p></p>\n  <h4>assertCookieExpired</h4>\n  <p>Afirma que la respuesta contiene la cookie dada y está vencida:</p>\n  <pre><code>$response-&gt;assertCookieExpired($cookieName);</code></pre>\n  <p></p>\n  <h4>asertCookieNotExpired</h4>\n  <p>Afirme que la respuesta contiene la cookie dada y que no está vencida:</p>\n  <pre><code>$response-&gt;assertCookieNotExpired($cookieName);</code></pre>\n  <p></p>\n  <h4>afirmarCookieMissing</h4>\n  <p>Afirme que la respuesta no contiene la cookie dada:</p>\n  <pre><code>$response-&gt;assertCookieMissing($cookieName);</code></pre>\n  <p></p>\n  <h4>aseverarCreado</h4>\n  <p>Afirme que la respuesta tiene un código de estado 201:</p>\n  <pre><code>$response-&gt;assertCreated();</code></pre>\n  <p></p>\n  <h4>AsertDontSee</h4>\n  <p>Afirme que la cadena dada no está contenida en la respuesta. Esta afirmación escapará automáticamente de la cadena dada a menos que pase un segundo argumento de <code>false</code>:</p>\n  <pre><code>$response-&gt;assertDontSee($value, $escaped = true);</code></pre>\n  <p></p>\n  <h4>asertDontSeeText</h4>\n  <p>Afirme que la cadena dada no está incluida en el texto de respuesta. Esta afirmación escapará automáticamente de la cadena dada a menos que pase un segundo argumento de <code>false</code>:</p>\n  <pre><code>$response-&gt;assertDontSeeText($value, $escaped = true);</code></pre>\n  <p></p>\n  <h4>asertExactJson</h4>\n  <p>Afirma que la respuesta contiene una coincidencia exacta de los datos JSON dados:</p>\n  <pre><code>$response-&gt;assertExactJson(array $data);</code></pre>\n  <p></p>\n  <h4>aseverar Prohibido</h4>\n  <p>Afirme que la respuesta tiene un código de estado prohibido (403):</p>\n  <pre><code>$response-&gt;assertForbidden();</code></pre>\n  <p></p>\n  <h4>assertHeader</h4>\n  <p>Afirma que el encabezado dado está presente en la respuesta:</p>\n  <pre><code>$response-&gt;assertHeader($headerName, $value = null);</code></pre>\n  <p></p>\n  <h4>assertHeaderMissing</h4>\n  <p>Afirma que el encabezado dado no está presente en la respuesta:</p>\n  <pre><code>$response-&gt;assertHeaderMissing($headerName);</code></pre>\n  <p></p>\n  <h4>asertJson</h4>\n  <p>Afirma que la respuesta contiene los datos JSON dados:</p>\n  <pre><code>$response-&gt;assertJson(array $data, $strict = false);</code></pre>\n  <p></p>\n  <h4>asertJsonCount</h4>\n  <p>Afirma que la respuesta JSON tiene una matriz con el número esperado de elementos en la clave dada:</p>\n  <pre><code>$response-&gt;assertJsonCount($count, $key = null);</code></pre>\n  <p></p>\n  <h4>asertJsonFragment</h4>\n  <p>Afirma que la respuesta contiene el fragmento JSON dado:</p>\n  <pre><code>$response-&gt;assertJsonFragment(array $data);</code></pre>\n  <p></p>\n  <h4>asertJsonMissing</h4>\n  <p>Afirma que la respuesta no contiene el fragmento JSON dado:</p>\n  <pre><code>$response-&gt;assertJsonMissing(array $data);</code></pre>\n  <p></p>\n  <h4>asertJsonMissingExact</h4>\n  <p>Afirma que la respuesta no contiene el fragmento JSON exacto:</p>\n  <pre><code>$response-&gt;assertJsonMissingExact(array $data);</code></pre>\n  <p></p>\n  <h4>asertJsonMissingValidationErrors</h4>\n  <p>Afirme que la respuesta no tiene errores de validación JSON para las claves dadas:</p>\n  <pre><code>$response-&gt;assertJsonMissingValidationErrors($keys);</code></pre>\n  <p></p>\n  <h4>asertJsonPath</h4>\n  <p>Afirma que la respuesta contiene los datos proporcionados en la ruta especificada:</p>\n  <pre><code>$response-&gt;assertJsonPath($path, array $data, $strict = false);</code></pre>\n  <p></p>\n  <h4>asertJsonStructure</h4>\n  <p>Afirma que la respuesta tiene una estructura JSON determinada:</p>\n  <pre><code>$response-&gt;assertJsonStructure(array $structure);</code></pre>\n  <p></p>\n  <h4>asertJsonValidationErrors</h4>\n  <p>Afirme que la respuesta tiene los errores de validación JSON dados:</p>\n  <pre><code>$response-&gt;assertJsonValidationErrors(array $data);</code></pre>\n  <p></p>\n  <h4>asertLocation</h4>\n  <p>Afirma que la respuesta tiene el valor URI dado en el <code>Location</code>encabezado:</p>\n  <pre><code>$response-&gt;assertLocation($uri);</code></pre>\n  <p></p>\n  <h4>assertNoContent</h4>\n  <p>Afirme que la respuesta tiene el código de estado dado y no tiene contenido.</p>\n  <pre><code>$response-&gt;assertNoContent($status = 204);</code></pre>\n  <p></p>\n  <h4>asertNotFound</h4>\n  <p>Afirma que la respuesta tiene un código de estado no encontrado:</p>\n  <pre><code>$response-&gt;assertNotFound();</code></pre>\n  <p></p>\n  <h4>afirmarOk</h4>\n  <p>Afirma que la respuesta tiene un código de estado 200:</p>\n  <pre><code>$response-&gt;assertOk();</code></pre>\n  <p></p>\n  <h4>assertPlainCookie</h4>\n  <p>Afirme que la respuesta contiene la cookie dada (sin cifrar):</p>\n  <pre><code>$response-&gt;assertPlainCookie($cookieName, $value = null);</code></pre>\n  <p></p>\n  <h4>asertRedirect</h4>\n  <p>Afirme que la respuesta es una redirección a un URI determinado:</p>\n  <pre><code>$response-&gt;assertRedirect($uri);</code></pre>\n  <p></p>\n  <h4>aseverarVer</h4>\n  <p>Afirma que la cadena dada está incluida en la respuesta. Esta afirmación escapará automáticamente de la cadena dada a menos que pase un segundo argumento de <code>false</code>:</p>\n  <pre><code>$response-&gt;assertSee($value, $escaped = true);</code></pre>\n  <p></p>\n  <h4>asertSeeInOrder</h4>\n  <p>Afirme que las cadenas dadas están contenidas en orden dentro de la respuesta. Esta afirmación escapará automáticamente de las cadenas dadas a menos que pase un segundo argumento de <code>false</code>:</p>\n  <pre><code>$response-&gt;assertSeeInOrder(array $values, $escaped = true);</code></pre>\n  <p></p>\n  <h4>asertSeeText</h4>\n  <p>Afirma que la cadena dada está contenida en el texto de respuesta. Esta afirmación escapará automáticamente de la cadena dada a menos que pase un segundo argumento de <code>false</code>:</p>\n  <pre><code>$response-&gt;assertSeeText($value, $escaped = true);</code></pre>\n  <p></p>\n  <h4>asertSeeTextInOrder</h4>\n  <p>Afirme que las cadenas dadas están contenidas en orden dentro del texto de respuesta. Esta afirmación escapará automáticamente de las cadenas dadas a menos que pase un segundo argumento de <code>false</code>:</p>\n  <pre><code>$response-&gt;assertSeeTextInOrder(array $values, $escaped = true);</code></pre>\n  <p></p>\n  <h4>AsertSessionHas</h4>\n  <p>Afirmar que la sesión contiene el dato dado:</p>\n  <pre><code>$response-&gt;assertSessionHas($key, $value = null);</code></pre>\n  <p></p>\n  <h4>asertSessionHasInput</h4>\n  <p>Afirme que la sesión tiene un valor dado en la matriz de entrada flasheada:</p>\n  <pre><code>$response-&gt;assertSessionHasInput($key, $value = null);</code></pre>\n  <p></p>\n  <h4>asertSessionHasAll</h4>\n  <p>Afirmar que la sesión tiene una lista determinada de valores:</p>\n  <pre><code>$response-&gt;assertSessionHasAll(array $data);</code></pre>\n  <p></p>\n  <h4>asertSessionHasErrors</h4>\n  <p>Afirme que la sesión contiene un error para el dado <code>$keys</code>. Si <code>$keys</code>es una matriz asociativa, afirme que la sesión contiene un mensaje de error específico (valor) para cada campo (clave):</p>\n  <pre><code>$response-&gt;assertSessionHasErrors(array $keys, $format = null, $errorBag = 'default');</code></pre>\n  <p></p>\n  <h4>asertSessionHasErrorsIn</h4>\n  <p>Afirme que la sesión contiene un error para lo dado <code>$keys</code>, dentro de una bolsa de errores específica. Si <code>$keys</code>es una matriz asociativa, afirme que la sesión contiene un mensaje de error específico (valor) para cada campo (clave), dentro de la bolsa de errores:</p>\n  <pre><code>$response-&gt;assertSessionHasErrorsIn($errorBag, $keys = [], $format = null);</code></pre>\n  <p></p>\n  <h4>asertSessionHasNoErrors</h4>\n  <p>Afirme que la sesión no tiene errores:</p>\n  <pre><code>$response-&gt;assertSessionHasNoErrors();</code></pre>\n  <p></p>\n  <h4>asertSessionDoesntHaveErrors</h4>\n  <p>Afirme que la sesión no tiene errores para las claves dadas:</p>\n  <pre><code>$response-&gt;assertSessionDoesntHaveErrors($keys = [], $format = null, $errorBag = 'default');</code></pre>\n  <p></p>\n  <h4>asertSessionMissing</h4>\n  <p>Afirme que la sesión no contiene la clave dada:</p>\n  <pre><code>$response-&gt;assertSessionMissing($key);</code></pre>\n  <p></p>\n  <h4>asertStatus</h4>\n  <p>Afirma que la respuesta tiene un código determinado:</p>\n  <pre><code>$response-&gt;assertStatus($code);</code></pre>\n  <p></p>\n  <h4>afirmar con éxito</h4>\n  <p>Afirmar que la respuesta tiene un código de estado correcto (&gt; = 200 y &lt;300):</p>\n  <pre><code>$response-&gt;assertSuccessful();</code></pre>\n  <p></p>\n  <h4>aseverar no autorizado</h4>\n  <p>Afirme que la respuesta tiene un código de estado no autorizado (401):</p>\n  <pre><code>$response-&gt;assertUnauthorized();</code></pre>\n  <p></p>\n  <h4>assertViewHas</h4>\n  <p>Afirmar que a la vista de respuesta se le dio un dato:</p>\n  <pre><code>$response-&gt;assertViewHas($key, $value = null);</code></pre>\n  <p>Además, se puede acceder a los datos de la vista como variables de matriz en la respuesta:</p>\n  <pre><code>$this-&gt;assertEquals('Taylor', $response['name']);</code></pre>\n  <p></p>\n  <h4>asertViewHasAll</h4>\n  <p>Afirme que la vista de respuesta tiene una lista de datos determinada:</p>\n  <pre><code>$response-&gt;assertViewHasAll(array $data);</code></pre>\n  <p></p>\n  <h4>assertViewIs</h4>\n  <p>Afirmar que la ruta devolvió la vista dada:</p>\n  <pre><code>$response-&gt;assertViewIs($value);</code></pre>\n  <p></p>\n  <h4>assertViewMissing</h4>\n  <p>Afirme que a la vista de respuesta le falta una parte de los datos vinculados:</p>\n  <pre><code>$response-&gt;assertViewMissing($key);</code></pre>\n  <p></p>\n  <h3>Afirmaciones de autenticación</h3>\n  <p>Laravel también proporciona una variedad de afirmaciones relacionadas con la autenticación para las pruebas de funciones de PHPUnit :</p>\n  <table>\n    <thead>\n    <tr>\n      <th>Método</th>\n      <th>Descripción</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n      <td><code>$this-&gt;assertAuthenticated($guard = null);</code></td>\n      <td>Afirme que el usuario está autenticado.</td>\n    </tr>\n    <tr>\n      <td><code>$this-&gt;assertGuest($guard = null);</code></td>\n      <td>Afirme que el usuario no está autenticado.</td>\n    </tr>\n    <tr>\n      <td><code>$this-&gt;assertAuthenticatedAs($user, $guard = null);</code></td>\n      <td>Afirmar que el usuario dado está autenticado.</td>\n    </tr>\n    <tr>\n      <td><code>$this-&gt;assertCredentials(array $credentials, $guard = null);</code></td>\n      <td>Asegúrate de que las credenciales proporcionadas son válidas.</td>\n    </tr>\n    <tr>\n      <td><code>$this-&gt;assertInvalidCredentials(array $credentials, $guard = null);</code></td>\n      <td>Confirme que las credenciales proporcionadas no son válidas.</td>\n    </tr>\n    </tbody>\n  </table>\n</section>"
      },
      {
        "titulo": "Pruebas de HTTP",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Pruebas HTTP</h1>\n  <ul>\n    <li>\n      Introducción\n      <ul>\n        <li>Personalizando encabezados de solicitud</li>\n        <li>Depurando respuestas</li>\n      </ul>\n    </li>\n    <li>Sesión y autenticación</li>\n    <li>Probando APIs JSON</li>\n    <li>Probando subidas de archivos</li>\n    <li>\n      Aserciones disponibles\n      <ul>\n        <li>Aserciones de respuesta</li>\n        <li>Aserciones de autenticación</li>\n      </ul>\n    </li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>Laravel proporciona una API muy fluida para hacer solicitudes HTTP a tu aplicación y examinar la salida. Por ejemplo, echemos un vistazo a la prueba definida a continuación:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace Tests\\Feature;\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Illuminate\\Foundation\\Testing\\WithoutMiddleware;\nclass ExampleTest extends TestCase\n{\n    /**\n    * A basic test example.\n    *\n    * @return void\n    */\n    public function testBasicTest()\n    {\n        \\$response = \\$this-&gt;get('/');\n        \\$response-&gt;assertStatus(200);\n    }\n}\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span> simula una solicitud <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">GET</span> dentro de la aplicación, mientras que el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">assertStatus</span> comprueba que la respuesta devuelta debería tener el código de estado HTTP dado. Además de esta sencilla aserción, Laravel también contiene una variedad de aserciones para inspeccionar de la respuesta los encabezados, contenidos, estructura JSON y más.</p>\n  <h3>Personalizando encabezados de solicitud</h3>\n  <p>Puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withHeaders</span> para personalzar los encabezados de la solicitud antes que sean enviados a la aplicación. Esto permitirá que agregues algunos encabezados personalizados de tu preferencia a la solicitud:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nclass ExampleTest extends TestCase\n{\n    /**\n    * A basic functional test example.\n    *\n    * @return void\n    */\n    public function testBasicExample()\n    {\n        \\$response = \\$this-&gt;withHeaders([\n            'X-Header' =&gt; 'Value',\n        ])-&gt;json('POST', '/user', ['name' =&gt; 'Sally']);\n        \\$response\n            -&gt;assertStatus(200)\n            -&gt;assertJson([\n                'created' =&gt; true,\n            ]);\n    }\n}\n</code></pre>\n  <p>TIP</p>\n  <p>El middleware CSRF es automáticamente deshabilitado cuando se ejecutan las pruebas.</p>\n  <h3>Depurando respuestas</h3>\n  <p>Luego de hacer una solicitud de prueba a tu aplicación, los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dump</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dumpHeaders</span> pueden ser usados para examinar y depurar el contenido de la respuesta:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace Tests\\Feature;\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Illuminate\\Foundation\\Testing\\WithoutMiddleware;\nclass ExampleTest extends TestCase\n{\n    /**\n    * A basic test example.\n    *\n    * @return void\n    */\n    public function testBasicTest()\n    {\n        \\$response = \\$this-&gt;get('/');\n        \\$response-&gt;dumpHeaders();\n        \\$response-&gt;dump();\n    }\n}\n</code></pre>\n  <h2>Sesión y autenticación</h2>\n  <p>Laravel proporciona varias funciones helper para trabajar con la sesión durante las pruebas HTTP. Primero, puedes colocar los datos de la sesión en un arreglo dado usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withSession</span>. Esto es útil para cargar la sesión con los datos antes de realizar una solicitud a tu aplicación:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nclass ExampleTest extends TestCase\n{\n    public function testApplication()\n    {\n        \\$response = \\$this-&gt;withSession(['foo' =&gt; 'bar'])\n                            -&gt;get('/');\n    }\n}\n</code></pre>\n  <p>Un uso común de la sesión es para mantener el estado del usuario autenticado. El método helper\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">actingAs</span> proporciona una foma sencilla de autenticar un usuario dado como el usuario actual. Por ejemplo, podemos usar un model factory para generar y autenticar un usuario:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nuse App\\User;\nclass ExampleTest extends TestCase\n{\n    public function testApplication()\n    {\n        \\$user = factory(User::class)-&gt;create();\n        \\$response = \\$this-&gt;actingAs(\\$user)\n                            -&gt;withSession(['foo' =&gt; 'bar'])\n                            -&gt;get('/');\n    }\n}\n</code></pre>\n  <p>También puedes especificar que \"guard\" debe ser usado para autenticar el usuario dado al pasar el nombre del guard como segundo argumento del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">actingAs</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$this-&gt;actingAs(\\$user, 'api')\n</code></pre>\n  <h2>Probando APIs JSON</h2>\n  <p>Laravel también proporciona varios helpers para probar APIs JSON y sus respuestas. Por ejemplo, los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">json</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">post</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">put</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">patch</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">delete</span> pueden ser usados para hacer solicitudes con varios verbos HTTP. También puedes pasar datos y encabezados fácilmente a estos métodos. Para empezar, vamos a escribir una prueba para hacer una solicitud <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">POST</span> a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">/user</span> y comprobar que los datos esperados fueron devueltos:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nclass ExampleTest extends TestCase\n{\n    /**\n    * A basic functional test example.\n    *\n    * @return void\n    */\n    public function testBasicExample()\n    {\n        \\$response = \\$this-&gt;json('POST', '/user', ['name' =&gt; 'Sally']);\n        \\$response\n            -&gt;assertStatus(200)\n            -&gt;assertJson([\n                'created' =&gt; true,\n            ]);\n    }\n}\n</code></pre>\n  <p>TIP</p>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">assertJson</span> convierte la respuesta a un arreglo y utiliza <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">PHPUnit::assertArraySubset</span> para verificar que el arreglo dado exista dentro de la respuesta JSON devuelta por la aplicación. Así, si hay otras propiedades en la respuesta JSON, esta prueba aún pasará siempre y cuando el fragmento dado esté presente.</p>\n  <h3>Verificando una coincidencia JSON exacta</h3>\n  <p>Si prefieres verificar que el arreglo dado esté contenido <strong>exactamente</strong> en la respuesta JSON devuelta por la aplicación, deberías usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">assertExactJson</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nclass ExampleTest extends TestCase\n{\n    /**\n    * A basic functional test example.\n    *\n    * @return void\n    */\n    public function testBasicExample()\n    {\n        \\$response = \\$this-&gt;json('POST', '/user', ['name' =&gt; 'Sally']);\n        \\$response\n            -&gt;assertStatus(200)\n            -&gt;assertExactJson([\n                'created' =&gt; true,\n            ]);\n    }\n}\n</code></pre>\n  <h2>Probando subidas de archivos</h2>\n  <p>La clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Illuminate\\Http\\UploadedFile</span> proporciona un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fake</span> el cual puede ser usado para generar archivos de prueba o imágenes para prueba. Esto, combinado con el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fake</span> de la clase facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Storage</span> simplifica grandemente la prueba de subidas de archivos. Por ejemplo, puedes combinar estas dos características para probar fácilmente un formulario de subida de un avatar:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace Tests\\Feature;\nuse Tests\\TestCase;\nuse Illuminate\\Http\\UploadedFile;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Illuminate\\Foundation\\Testing\\WithoutMiddleware;\nclass ExampleTest extends TestCase\n{\n    public function testAvatarUpload()\n    {\n        Storage::fake('avatars');\n        \\$file = UploadedFile::fake()-&gt;image('avatar.jpg');\n        \\$response = \\$this-&gt;json('POST', '/avatar', [\n            'avatar' =&gt; \\$file,\n        ]);\n        // Assert the file was stored...\n        Storage::disk('avatars')-&gt;assertExists(\\$file-&gt;hashName());\n        // Assert a file does not exist...\n        Storage::disk('avatars')-&gt;assertMissing('missing.jpg');\n    }\n}\n</code></pre>\n  <h4>Personalización de archivo fake</h4>\n  <p>Al momento de crear archivos usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fake</span>, puedes especificar el ancho, la altura y el tamaño de la imagen con el propósito de probar mejor tus reglas de validación:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>UploadedFile::fake()-&gt;image('avatar.jpg', \\$width, \\$height)-&gt;size(100);\n</code></pre>\n  <p>Además de crear imágenes, puedes crear archivos de cualquier otro tipo usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>UploadedFile::fake()-&gt;create('document.pdf', \\$sizeInKilobytes);\n</code></pre>\n  <h2>Aserciones disponibles</h2>\n  <h3>Aserciones de respuesta</h3>\n  <p>\n    Laravel proporciona una variedad de métodos de aserción personalizados para tus pruebas PHPUnit . Estas aserciones pueden ser accedidas en la respuesta que es retornada por los métodos de prueba <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">json</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">post</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">put</span> y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">delete</span>:\n  </p>\n  <p>assertCookie assertCookieExpired assertCookieNotExpired assertCookieMissing assertDontSee assertDontSeeText assertExactJson assertForbidden assertHeader assertHeaderMissing assertJson assertJsonCount assertJsonFragment assertJsonMissing assertJsonMissingExact assertJsonMissingValidationErrors assertJsonStructure assertJsonValidationErrors assertLocation assertNotFound assertOk assertPlainCookie assertRedirect assertSee assertSeeInOrder assertSeeText assertSeeTextInOrder assertSessionHas assertSessionHasAll assertSessionHasErrors assertSessionHasErrorsIn assertSessionHasNoErrors assertSessionDoesntHaveErrors assertSessionMissing assertStatus assertSuccessful assertSuccessful assertViewHas assertViewHasAll assertViewIs assertViewMissing</p>\n  <h4>assertCookie</h4>\n  <p>Comprueba que la respuesta contenga el cookie dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertCookie(\\$cookieName, \\$value = null);\n</code></pre>\n  <h4>assertCookieExpired</h4>\n  <p>Comprueba que la respuesta contenga el cookie dado y que esté vencido:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertCookieExpired(\\$cookieName);\n</code></pre>\n  <h4>assertCookieNotExpired</h4>\n  <p>Comprueba que la respuesta contenga la cookie dada y que no haya expirado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertCookieNotExpired(\\$cookieName);\n</code></pre>\n  <h4>assertCookieMissing</h4>\n  <p>Comprueba que la respuesta no contenga el cookie dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertCookieMissing(\\$cookieName);\n</code></pre>\n  <h4>assertDontSee</h4>\n  <p>Comprueba que la cadena dada no esté contenida dentro de la respuesta:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertDontSee(\\$value);\n</code></pre>\n  <h4>assertDontSeeText</h4>\n  <p>Comprueba que la cadena dada no esté contenida dentro del texto de la respuesta:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertDontSeeText(\\$value);\n</code></pre>\n  <h4>assertExactJson</h4>\n  <p>Comprueba que la respuesta contenga una coincidencia exacta de los datos JSON dados:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertExactJson(array \\$data);\n</code></pre>\n  <h4>assertForbidden</h4>\n  <p>Comprueba que la respuesta tenga un código de estado \"prohibido\":</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertForbidden();\n</code></pre>\n  <h4>assertHeader</h4>\n  <p>Comprueba que el encabezado dado esté presente en la respuesta:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertHeader(\\$headerName, \\$value = null);\n</code></pre>\n  <h4>assertHeaderMissing</h4>\n  <p>Comprueba que el encabezado dado no esté presente en la respuesta:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertHeaderMissing(\\$headerName);\n</code></pre>\n  <h4>assertJson</h4>\n  <p>Comprueba que la respuesta contenga los datos JSON dados:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertJson(array \\$data);\n</code></pre>\n  <h4>assertJsonCount</h4>\n  <p>Comprueba que la respuesta JSON tenga un arreglo con el número esperado de elementos en la llave dada:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertJsonCount(\\$count, \\$key = null);\n</code></pre>\n  <h4>assertJsonFragment</h4>\n  <p>Comprueba que la respuesta contenga el fragmento JSON dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertJsonFragment(array \\$data);\n</code></pre>\n  <h4>assertJsonMissing</h4>\n  <p>Comprueba que la respuesta no contenga el fragmento JSON dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertJsonMissing(array \\$data);\n</code></pre>\n  <h4>assertJsonMissingExact</h4>\n  <p>Comprueba que la respuesta no contenga el fragmento exacto JSON:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertJsonMissingExact(array \\$data);\n</code></pre>\n  <h4>assertJsonMissingValidationErrors</h4>\n  <p>Comprueba que la respuesta no contenga errores de validación JSON para la llaves dadas:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertJsonMissingValidationErrors(\\$keys);\n</code></pre>\n  <h4>assertJsonStructure</h4>\n  <p>Comprueba que la respuesta tenga una estructura JSON dada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertJsonStructure(array \\$structure);\n</code></pre>\n  <h4>assertJsonValidationErrors</h4>\n  <p>Comprueba que la respuesta tenga los errores de validación JSON dados:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertJsonValidationErrors(array \\$data);\n</code></pre>\n  <h4>assertLocation</h4>\n  <p>Comprueba que la respuesta tenga el valor URI dado en el encabezado <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Location</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertLocation(\\$uri);\n</code></pre>\n  <h4>assertNotFound</h4>\n  <p>Comprueba que la respuesta tenga un código de estado \"no encontrado\":</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertNotFound();\n</code></pre>\n  <h4>assertOk</h4>\n  <p>Comprueba que la respuesta tenga un código de estado 200:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertOk();\n</code></pre>\n  <h4>assertPlainCookie</h4>\n  <p>Comprueba que la respuesta contenga el cookie dado (desencriptado):</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertPlainCookie(\\$cookieName, \\$value = null);\n</code></pre>\n  <h4>assertRedirect</h4>\n  <p>Comprueba que la respuesta es una redirección a una URI dada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertRedirect(\\$uri);\n</code></pre>\n  <h4>assertSee</h4>\n  <p>Comprueba que la cadena dada esté contenida dentro de la respuesta:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertSee(\\$value);;\n</code></pre>\n  <h4>assertSeeInOrder</h4>\n  <p>Comprueba que las cadenas dadas estén en orden dentro de la respuesta:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertSeeInOrder(array \\$values);\n</code></pre>\n  <h4>assertSeeText</h4>\n  <p>Comprueba que la cadena dada esté contenida dentro del texto de la respuesta:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertSeeText(\\$value);\n</code></pre>\n  <h4>assertSeeTextInOrder</h4>\n  <p>Comprueba que las cadenas dadas estén en orden dentro del texto de respuesta:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertSeeTextInOrder(array \\$values);\n</code></pre>\n  <h4>assertSessionHas</h4>\n  <p>Comprueba que la sesión contenga la porción dada de datos:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertSessionHas(\\$key, \\$value = null);\n</code></pre>\n  <h4>assertSessionHasAll</h4>\n  <p>Comprueba que la sesión tenga una lista dada de valores:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertSessionHasAll(array \\$data);\n</code></pre>\n  <h4>assertSessionHasErrors</h4>\n  <p>Comprueba que la sesión contenga un error para el campo dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertSessionHasErrors(array \\$keys, \\$format = null, \\$errorBag = 'default');\n</code></pre>\n  <h4>assertSessionHasErrorsIn</h4>\n  <p>Comprueba que la sesión tenga los errores dados:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertSessionHasErrorsIn(\\$errorBag, \\$keys = [], \\$format = null);\n</code></pre>\n  <h4>assertSessionHasNoErrors</h4>\n  <p>Comprueba que la sesión no contenga errores:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertSessionHasNoErrors();\n</code></pre>\n  <h4>assertSessionDoesntHaveErrors</h4>\n  <p>Comprueba que la sesión no contenga errores para las llaves dadas:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertSessionDoesntHaveErrors(\\$keys = [], \\$format = null, \\$errorBag = 'default');\n</code></pre>\n  <h4>assertSessionMissing</h4>\n  <p>Comprueba que la sesión no contenga la llave dada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertSessionMissing(\\$key);\n</code></pre>\n  <h4>assertStatus</h4>\n  <p>Comprueba que la respuesta tenga un código dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertStatus(\\$span);\n</code></pre>\n  <h4>assertSuccessful</h4>\n  <p>Comprueba que la respuesta tenga un código de estado de éxito (200):</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertSuccessful();\n</code></pre>\n  <h4>assertUnauthorized</h4>\n  <p>Comprueba que la respuesta tiene un código de estado sin autorización (401):</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertUnauthorized();\n</code></pre>\n  <h4>assertViewHas</h4>\n  <p>Comprueba que la vista de la respuesta dada contiene los valores indicados:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertViewHas(\\$key, \\$value = null);\n</code></pre>\n  <h4>assertViewHasAll</h4>\n  <p>Comprueba que la vista de la respuesta tiene una lista de datos:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertViewHasAll(array \\$data);\n</code></pre>\n  <h4>assertViewIs</h4>\n  <p>Comprueba que la vista dada fue retornada por la ruta:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertViewIs(\\$value);\n</code></pre>\n  <h4>assertViewMissing</h4>\n  <p>Comprueba que a la vista de la respuesta le está faltando una porción de datos enlazados:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$response-&gt;assertViewMissing(\\$key);\n</code></pre>\n  <h3>Aserciones de autenticación</h3>\n  <p>\n    Laravel también proporciona una variedad de aserciones relacionadas con la autenticación para tus pruebas PHPUnit :\n  </p>\n  <table style=\"border: 1px solid #CFD8DC;\">\n    <thead>\n    <tr>\n      <th>Método</th>\n      <th>Descripción</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$this-&gt;assertAuthenticated(\\$guard = null);</span></td>\n      <td>Comprueba que el usuario está autenticado.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$this-&gt;assertGuest(\\$guard = null);</span></td>\n      <td>Comprueba que el usuario no está autenticado.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$this-&gt;assertAuthenticatedAs(\\$user, \\$guard = null);</span></td>\n      <td>Comprueba que el usuario dado está autenticado.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$this-&gt;assertCredentials(array \\$credentials, \\$guard = null);</span></td>\n      <td>Comprueba que las credenciales dadas son válidas.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$this-&gt;assertInvalidCredentials(array \\$credentials, \\$guard = null);</span></td>\n      <td>Comprueba que las credenciales dadas no son válidas.</td>\n    </tr>\n    </tbody>\n  </table>\n</div>"
      },
      {
        "titulo": "Laravel Dusk",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Laravel Dusk</h1>\n  <ul>\n    <li>Introducción</li>\n    <li>\n      Instalación\n      <ul>\n        <li>Administrando las instalaciones de ChromeDriver</li>\n        <li>Usando otros navegadores</li>\n      </ul>\n    </li>\n    <li>\n      Primeros pasos\n      <ul>\n        <li>Generando pruebas</li>\n        <li>Ejecutar pruebas</li>\n        <li>Manejo de entorno</li>\n        <li>Creando navegadores</li>\n        <li>Macros de navegador</li>\n        <li>Autenticación</li>\n        <li>Migraciones de base de datos</li>\n      </ul>\n    </li>\n    <li>\n      Interactuando con elementos\n      <ul>\n        <li>Selectores de Dusk</li>\n        <li>Haciendo clic en enlaces</li>\n        <li>Texto, valores y atributos</li>\n        <li>Usando formularios</li>\n        <li>Adjuntando archivos</li>\n        <li>Usando el teclado</li>\n        <li>Usando el ratón</li>\n        <li>Diálogos de JavaScript</li>\n        <li>Alcance de selectores</li>\n        <li>Esperando por elementos</li>\n        <li>Haciendo aserciones de Vue</li>\n      </ul>\n    </li>\n    <li>Aserciones disponibles</li>\n    <li>\n      Páginas\n      <ul>\n        <li>Generando páginas</li>\n        <li>Configurando páginas</li>\n        <li>Visitando páginas</li>\n        <li>Selectores abreviados</li>\n        <li>Métodos de página</li>\n      </ul>\n    </li>\n    <li>\n      Componentes\n      <ul>\n        <li>Generando componentes</li>\n        <li>Usando componentes</li>\n      </ul>\n    </li>\n    <li>\n      Integración continua\n      <ul>\n        <li>CircleCI</li>\n        <li>spanship</li>\n        <li>Heroku CI</li>\n        <li>Travis CI</li>\n      </ul>\n    </li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>\n    Laravel Dusk proporciona una API de automatización y prueba para navegador expresiva y fácil de usar. De forma predeterminada, Dusk no requiere que instales JDK o Selenium en tu computador. En su lugar, Dusk usa una instalación de ChromeDriver\n    <outboundlink></outboundlink>\n    independiente. Sin embargo, siéntete libre de utilizar cualquier otro driver compatible con Selenium que desees.\n  </p>\n  <h2>Instalación</h2>\n  <p>Para empezar, debes agregar la dependencia de Composer <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">laravel/dusk</span> a tu proyecto:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>composer require --dev laravel/dusk\n</code></pre>\n  <p>Nota</p>\n  <p>Si estás registrando manualmente el proveedor de servicio de Dusk, <strong>nunca</strong> deberías registrarlo en tu entorno de producción, ya que hacerlo así podría conducir a que usuarios arbitrarios sean capaces de autenticarse en tu aplicación.</p>\n  <p>Después de la instalación del paquete Dusk, ejecuta el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk:install</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan dusk:install\n</code></pre>\n  <p>Un directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Browser</span> será creado dentro de tu directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tests</span> y contendrá una prueba de ejemplo. Seguido, establece la variable de entorno <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">APP_URL</span> en tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span>. Este valor debería coincidir con la URL que uses para acceder a tu aplicación en un navegador.</p>\n  <p>Para ejecutar tus pruebas, usa el comando de Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk</span>. El comando\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk</span> acepta cualquier argumento que también sea aceptado por el comando\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">phpunit</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan dusk\n</code></pre>\n  <p>Si tuviste fallos en las pruebas la última vez que se ejecutó el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk</span>, puedes ahorrar tiempo volviendo a ejecutar las pruebas fallidas usando el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk:\n  fail</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan dusk:fails\n</code></pre>\n  <h3>Administrando las instalaciones de ChromeDriver</h3>\n  <p>Si te gustaria instalar una versión diferente de ChromeDriver a la incluida con Laravel Dusk, puedes usar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk:chrome-driver</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code># Install the latest version of ChromeDriver for your OS...\nphp artisan dusk:chrome-driver\n# Install a given version of ChromeDriver for your OS...\nphp artisan dusk:chrome-driver 74\n# Install a given version of ChromeDriver for all supported OSs...\nphp artisan dusk:chrome-driver --all\n</code></pre>\n  <p>Nota</p>\n  <p>Dusk requiere que los binarios de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">chromedriver</span> sean ejecutables. Si tienes problemas para ejecutar Dusk, asegurate de que los binarios sean ejecutables con el siguiente comando:\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">chmod -R 0755 vendor/laravel/dusk/bin/</span>.</p>\n  <h3>Usando otros navegadores</h3>\n  <p>\n    De forma predeterminada, Dusk usa Google Chrome y una instalación de ChromeDriver independiente para ejecutar tus pruebas de navegador. Sin embargo, puedes iniciar tu propio servidor Selenium y ejecutar tus pruebas en cualquier navegador que desees.\n  </p>\n  <p>Para empezar, abre tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tests/DuskTestCase.php</span>, el cual es el caso de prueba de Dusk básico para tu aplicación. Dentro de este archivo, puedes remover la ejecución del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">startChromeDriver</span>. Esto evitará que Dusk inicie automáticamente ChromeDriver:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Prepare for Dusk test execution.\n*\n* @beforeClass\n* @return void\n*/\npublic static function prepare()\n{\n    // static::startChromeDriver();\n}\n</code></pre>\n  <p>Luego de esto, puedes modificar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">driver</span> para conectar a la URL y puerto de tu preferencia. Además, puedes modificar las \"capacidades deseadas\" que deberían ser pasadas al WebDriver:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Create the RemoteWebDriver instance.\n*\n* @return \\Facebook\\WebDriver\\Remote\\RemoteWebDriver\n*/\nprotected function driver()\n{\n    return RemoteWebDriver::create(\n        'http://localhost:4444/wd/hub', DesiredCapabilities::phantomjs()\n    );\n}\n</code></pre>\n  <h2>Primeros pasos</h2>\n  <h3>Generando pruebas</h3>\n  <p>Para generar una prueba de Dusk, usa el comando de Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk:make</span>. La prueba generada será colocada en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tests/Browser</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan dusk:make LoginTest\n</code></pre>\n  <h3>Ejecutando pruebas</h3>\n  <p>Para ejecutar tus pruebas de navegador, usa el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan dusk\n</code></pre>\n  <p>Si tuviste fallos en las pruebas la última vez que se ejecutó el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk</span>, puedes ahorrar tiempo volviendo a ejecutar las pruebas fallidas usando el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk:\n  fail</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan dusk:fails\n</code></pre>\n  <p>\n    El comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk</span> acepta cualquier argumento que sea aceptado normalmente por el administrador de pruebas de PHPUnit, permitiendo que ejecutes solamente las pruebas para un grupo dado, etc:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan dusk --group=foo\n</code></pre>\n  <h4>Iniciando manualmente ChromeDriver</h4>\n  <p>De forma predeterminada, Dusk intentará automáticamente iniciar ChromeDriver. Si esto no funciona para tu sistema en particular, puedes iniciar manualmente ChromeDriver antes de ejecutar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk</span>. Si eliges iniciar manualmente ChromeDriver, debes comentar la siguiente línea de tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tests/DuskTestCase.php</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Prepare for Dusk test execution.\n*\n* @beforeClass\n* @return void\n*/\npublic static function prepare()\n{\n    // static::startChromeDriver();\n}\n</code></pre>\n  <p>Además, si inicias ChromeDriver en un puerto diferente a 9515, deberías modificar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">driver</span> de la misma clase:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Create the RemoteWebDriver instance.\n*\n* @return \\Facebook\\WebDriver\\Remote\\RemoteWebDriver\n*/\nprotected function driver()\n{\n    return RemoteWebDriver::create(\n        'http://localhost:9515', DesiredCapabilities::chrome()\n    );\n}\n</code></pre>\n  <h3>Manejo de entorno</h3>\n  <p>Para forzar que Dusk use su propio archivo de entorno al momento de ejecutar las pruebas, crea un archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env.dusk.{environment}</span> en el directorio raíz de tu proyecto. Por ejemplo, si estás iniciando el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk</span> desde tu entorno <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">local</span>, deberías crear un archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env.dusk.local</span>.</p>\n  <p>Al momento de ejecutar pruebas, Dusk respaldará tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span> y renombrará tu entorno Dusk a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span>. Una vez que las pruebas han sido completadas, tu archivo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span> será restaurado.</p>\n  <h3>Creando navegadores</h3>\n  <p>Para empezar, vamos a escribir una prueba que verifica que podemos entrar a nuestra aplicación. Después de generar una prueba, podemos modificarla para visitar la página de login, introducir algunas credenciales y presionar el botón \"Login\". Para crear una instancia del navegador, ejecuta el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">browse</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace Tests\\Browser;\nuse App\\User;\nuse Tests\\DuskTestCase;\nuse Laravel\\Dusk\\Chrome;\nuse Illuminate\\Foundation\\Testing\\DatabaseMigrations;\nclass ExampleTest extends DuskTestCase\n{\n    use DatabaseMigrations;\n    /**\n    * A basic browser test example.\n    *\n    * @return void\n    */\n    public function testBasicExample()\n    {\n        \\$user = factory(User::class)-&gt;create([\n            'email' =&gt; 'taylor@laravel.com',\n        ]);\n        \\$this-&gt;browse(function (\\$browser) use (\\$user) {\n            \\$browser-&gt;visit('/login')\n                    -&gt;type('email', \\$user-&gt;email)\n                    -&gt;type('password', 'password')\n                    -&gt;press('Login')\n                    -&gt;assertPathIs('/home');\n        });\n    }\n}\n</code></pre>\n  <p>Como puedes ver en el ejemplo anterior, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">browse</span> acepta una función callback. Una instancia de navegador será pasada automáticamente a esta función de retorno por Dusk y es el objeto principal utilizado para interactuar y hacer aserciones en la aplicación.\n  </p>\n  <p>TIP TIP</p>\n  <p>Esta prueba puede ser usada para probar la pantalla login generada por el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:auth</span>.\n  </p>\n  <h4>Creando múltiples navegadores</h4>\n  <p>Algunas veces puedes necesitar múltiples navegadores con el propósito de ejecutar apropiadamente una prueba. Por ejemplo, múltiples navegadores pueden ser necesitados para probar una pantalla de conversaciones que interactúa con websockets. Para crear múltiples navegadores, \"solicita\" más de un navegador en la firma del callback dado al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">browse</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$this-&gt;browse(function (\\$first, \\$second) {\n    \\$first-&gt;loginAs(User::find(1))\n            -&gt;visit('/home')\n            -&gt;waitForText('Message');\n    \\$second-&gt;loginAs(User::find(2))\n            -&gt;visit('/home')\n            -&gt;waitForText('Message')\n            -&gt;type('message', 'Hey Taylor')\n            -&gt;press('Send');\n    \\$first-&gt;waitForText('Hey Taylor')\n            -&gt;assertSee('Jeffrey Way');\n});\n</code></pre>\n  <h4>Redimensionando las ventanas del navegador</h4>\n  <p>Puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resize</span> para ajustar el tamaño de la ventana del navegador:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;resize(1920, 1080);\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">maximize</span> puede ser usado para maximizar la ventana del navegador:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;maximize();\n</code></pre>\n  <h3>Macros de navegador</h3>\n  <p>Si desea definir un método de navegador personalizado que puedas reutilizar en una variedad de tus pruebas, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">macro</span> en la clase<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Browser</span>. Normalmente, deberías llamar a este método desde el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span> del proveedor de servicios:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Providers;\nuse Laravel\\Dusk\\Browser;\nuse Illuminate\\Support\\ServiceProvider;\nclass DuskServiceProvider extends ServiceProvider\n{\n    /**\n    * Register the Dusk's browser macros.\n    *\n    * @return void\n    */\n    public function boot()\n    {\n        Browser::macro('scrollToElement', function (\\$element = null) {\n            \\$this-&gt;script(\"\\$('html, body').animate({ scrollTop: \\$('\\$element').offset().top }, 0);\");\n            return \\$this;\n        });\n    }\n}\n</code></pre>\n  <p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">macro</span> acepta un nombre como primer argumento y un Closure como segundo. El Closure del macro se ejecutará cuando se llame al macro como un método en una implementación de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Browser</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$this-&gt;browse(function (\\$browser) use (\\$user) {\n    \\$browser-&gt;visit('/pay')\n            -&gt;scrollToElement('#credit-card-details')\n            -&gt;assertSee('Enter Credit Card Details');\n});\n</code></pre>\n  <h3>Autenticación</h3>\n  <p>Frecuentemente, estarás probando páginas que requieren autenticación. Puedes usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">loginAs</span> de Dusk con el propósito de evitar interactuar con la pantalla de login durante cada prueba. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">loginAs</span> acepta un ID de usuario o una instancia de modelo de usuario:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$this-&gt;browse(function (\\$first, \\$second) {\n    \\$first-&gt;loginAs(User::find(1))\n            -&gt;visit('/home');\n});\n</code></pre>\n  <p>Nota</p>\n  <p>Después de usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">loginAs</span>, la sesión de usuario será mantenida para todas las pruebas dentro del archivo.</p>\n  <h3>Migraciones de bases de datos</h3>\n  <p>Cuando tu prueba requiere migraciones, como el ejemplo de autenticación visto antes, nunca deberías usar el trait <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RefreshDatabase</span>. El trait <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RefreshDatabase</span> se apoya en transacciones de base de datos, las cuales no serán aplicables a traves de las solicitudes HTTP. En su lugar, usa el trait <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DatabaseMigrations</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace Tests\\Browser;\nuse App\\User;\nuse Tests\\DuskTestCase;\nuse Laravel\\Dusk\\Chrome;\nuse Illuminate\\Foundation\\Testing\\DatabaseMigrations;\nclass ExampleTest extends DuskTestCase\n{\n    use DatabaseMigrations;\n}\n</code></pre>\n  <h2>Interactuando con elementos</h2>\n  <h3>Selectores de Dusk</h3>\n  <p>Elegir buenos selectores CSS para interactuar con elementos es una de las partes más difíciles de escribir las pruebas de Dusk. Con el tiempo, los cambios del diseño frontend pueden causar que los selectores CSS como los siguientes dañen tus pruebas:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// HTML...\n&lt;button&gt;Login&lt;/button&gt;\n// Test...\n\\$browser-&gt;click('.login-page .container div &gt; button');\n</code></pre>\n  <p>Los selectores de Dusk permiten que te enfoques en la escritura de pruebas efectivas en vez de recordar selectores CSS. Para definir un selector, agrega un atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk</span> a tu elemento HTML. Después, agrega un prefijo al selector con <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@</span> para manipular el elemento conectado dentro de una prueba de Dusk:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// HTML...\n&lt;button dusk=\"login-button\"&gt;Login&lt;/button&gt;\n// Test...\n\\$browser-&gt;click('@login-button');\n</code></pre>\n  <h3>Haciendo clic en enlaces</h3>\n  <p>Para hacer clic sobre un enlace, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">clickLink</span> en la instancia del navegador. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">clickLink</span> hará clic en el enlace que tiene el texto dado en la pantalla:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;clickLink(\\$linkText);\n</code></pre>\n  <p>Nota</p>\n  <p>Este método interactúa con jQuery. Si jQuery no está disponible en la página, Dusk lo inyectará automáticamente de modo que esté disponible por la duración de la prueba.</p>\n  <h3>Texto, Valores y Atributos</h3>\n  <h4>Obteniendo y estableciendo valores</h4>\n  <p>Dusk proporciona varios métodos para interactuar con el texto de pantalla, valor y atributos de elementos en la página actual. Por ejemplo, para obtener el \"valor\" de un elemento que coincida con un selector dado, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">value</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Retrieve the value...\n\\$value = \\$browser-&gt;value('selector');\n// Set the value...\n\\$browser-&gt;value('selector', 'value');\n</code></pre>\n  <h4>Obteniendo texto</h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">text</span> puede ser usado para obtener el texto de pantalla de un elemento que coincida con el selector dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$text = \\$browser-&gt;text('selector');\n</code></pre>\n  <h4>Obteniendo atributos</h4>\n  <p>Finalmente, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">attribute</span> puede ser usado para obtener un atributo de un elemento que coincida con el selector dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$attribute = \\$browser-&gt;attribute('selector', 'value');\n</code></pre>\n  <h3>Usando Formularios</h3>\n  <h4>Escribiendo valores</h4>\n  <p>Dusk proporciona una variedad de métodos para interactuar con formularios y elementos de entrada. Primero, vamos a echar un vistazo a un ejemplo de escribir texto dentro de un campo de entrada:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;type('email', 'taylor@laravel.com');\n</code></pre>\n  <p>Nota que, aunque el método acepta uno si es necesario, no estamos obligados a pasar un selector CSS dentro del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">type</span>. Si un selector CSS no es proporcionado, Dusk buscará un campo de entrada con el atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">name</span> dado. Finalmente, Dusk intentará encontrar un\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">textarea</span> con el atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">name</span> dado.</p>\n  <p>Para agregar texto a un campo sin limpiar su contenido, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">append</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;type('tags', 'foo')\n        -&gt;append('tags', ', bar, baz');\n</code></pre>\n  <p>Puedes limpiar el valor de un campo usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">clear</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;clear('email');\n</code></pre>\n  <h4>Listas desplegables</h4>\n  <p>Para seleccionar un valor en un cuadro de selección de lista desplegable, puedes usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">select</span>. Al momento de pasar un valor al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">select</span>, deberías pasar el valor de opción a resaltar en lugar del texto mostrado en pantalla:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;select('size', 'Large');\n</code></pre>\n  <p>Puedes seleccionar una opción aleatoria al omitir el segundo parámetro:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;select('size');\n</code></pre>\n  <h4>Casillas de verificación</h4>\n  <p>Para \"marcar\" un campo de casilla de verificación, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">check</span>. Al igual que muchos otros métodos relacionados con entradas, un selector CSS completo no es obligatorio. Si un selector que coincida exactamente no puede ser encontrado, Dusk buscará una casilla de verificación con un atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">name</span> coincidente.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;check('terms');\n\\$browser-&gt;uncheck('terms');\n</code></pre>\n  <h4>Botones de radio</h4>\n  <p>Para \"seleccionar\" una opción de botón de radio, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">radio</span>. Al igual que muchos otros métodos relacionados con campos, un selector CSS completo no es obligatorio. Si un selector que coincida exactamente no puede ser encontrado, Dusk buscará un radio con atributos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">name</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">value</span> coincidentes:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;radio('version', 'php7');\n</code></pre>\n  <h3>Adjuntando archivos</h3>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">attach</span> puede ser usado para adjuntar un archivo a un elemento\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">file</span>. Al igual que muchos otros métodos relacionados con campos, un selector CSS completo no es obligatorio. Si un selector que coincida exactamente no puede ser encontrado, Dusk buscará un campo de archivo con atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">name</span> coincidente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;attach('photo', __DIR__.'/photos/me.png');\n</code></pre>\n  <p>Nota</p>\n  <p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">attach</span> requiere que la extensión de PHP <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Zip</span> esté instalada y habilitada en tu servidor.</p>\n  <h3>Usando el teclado</h3>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">keys</span> permite que proporciones secuencias de entrada más complejas para un elemento dado que lo permitido normalmente por el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">type</span>. Por ejemplo, puedes mantener presionada las teclas modificadoras al introducir valores. En este ejemplo, la tecla\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">shift</span> será mantenida presionada mientras la palabra <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">taylor</span> es introducida dentro del elemento que coincida con el selector dado. Después de que la palabra\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">taylor</span> sea tipeada, la palabra <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">otwell</span> será tipeada sin alguna tecla modificadora:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;keys('selector', ['{shift}', 'taylor'], 'otwell');\n</code></pre>\n  <p>Incluso puedes enviar una \"tecla de función\" al selector CSS principal que contiene tu aplicación:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;keys('.app', ['{command}', 'j']);\n</code></pre>\n  <p>TIP TIP</p>\n  <p>\n    Todas las teclas modificadoras se envuelven entre corchetes <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">{}</span> y coinciden con las constantes definidas en la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Facebook\\WebDriver\\WebDriverKeys</span>, la cual puede ser encontrada en GitHub .\n  </p>\n  <h3>Usando el Ratón</h3>\n  <h4>Haciendo clic sobre elementos</h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">click</span> puede ser usado para \"clickear\" sobre un elemento que coincida con el selector dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;click('.selector');\n</code></pre>\n  <h4>Mouseover</h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mouseover</span> puede ser usado cuando necesitas mover el ratón sobre un elemento que coincida con el selector dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;mouseover('.selector');\n</code></pre>\n  <h4>Arrastrar y soltar</h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">drag</span> puede ser usado para arrastrar un elemento que coincida con el selector dado hasta otro elemento:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;drag('.from-selector', '.to-selector');\n</code></pre>\n  <p>O, puedes arrastrar un elemento en una única dirección:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;dragLeft('.selector', 10);\n\\$browser-&gt;dragRight('.selector', 10);\n\\$browser-&gt;dragUp('.selector', 10);\n\\$browser-&gt;dragDown('.selector', 10);\n</code></pre>\n  <h3>Diálogos de JavaScript</h3>\n  <p>Dusk provee de varios métodos para interactuar con Diálogos de JavaScript:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Wait for a dialog to appear:\n\\$browser-&gt;waitForDialog(\\$seconds = null);\n// Assert that a dialog has been displayed and that its message matches the given value:\n\\$browser-&gt;assertDialogOpened('value');\n// Type the given value in an open JavaScript prompt dialog:\n\\$browser-&gt;typeInDialog('Hello World');\n</code></pre>\n  <p>Para cerrar un Diálogo de JavaScript abierto, haga clic en el botón Aceptar o OK:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;acceptDialog();\n</code></pre>\n  <p>Para cerrar un Diálogo de JavaScript abierto, haga clic en el botón Cancelar (solo para un diálogo de confirmación):</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;dismissDialog();\n</code></pre>\n  <h3>Alcance de selectores</h3>\n  <p>Algunas veces puedes querer ejecutar varias operaciones dentro del alcance de un selector dado. Por ejemplo, puedes querer comprobar que algunos textos existen unicamente dentro de una tabla y después presionar un botón dentro de la tabla. Puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">with</span> para completar esta tarea. Todas las operaciones ejecutadas dentro de la función de retorno dada al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">with</span> serán exploradas en el selector original:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;with('.table', function (\\$table) {\n    \\$table-&gt;assertSee('Hello World')\n            -&gt;clickLink('Delete');\n});\n</code></pre>\n  <h3>Esperando por elementos</h3>\n  <p>Al momento de probar aplicaciones que usan JavaScript de forma extensiva, frecuentemente se vuelve necesario \"esperar\" por ciertos elementos o datos estén disponibles antes de proceder con una prueba. Dusk hace esto fácilmente. Usando una variedad de métodos, puedes esperar que los elementos estén visibles en la página e incluso esperar hasta que una expresión de JavaScript dada se evalúe como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>.</p>\n  <h4>Esperando</h4>\n  <p>Si necesitas pausar la prueba por un número de milisegundos dado, usa el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pause</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;pause(1000);\n</code></pre>\n  <h4>Esperando por selectores</h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">waitFor</span> puede ser usado para pausar la ejecución de la prueba hasta que el elemento que coincida con el selector CSS dado sea mostrado en la página. De forma predeterminada, esto pausará la prueba por un máximo de cinco segundos antes de arrojar una excepción. Si es necesario, puedes pasar un umbral de tiempo de expiración personalizado como segundo argumento del método:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Wait a maximum of five seconds for the selector...\n\\$browser-&gt;waitFor('.selector');\n// Wait a maximum of one second for the selector...\n\\$browser-&gt;waitFor('.selector', 1);\n</code></pre>\n  <p>También puede esperar hasta que el selector dado no se encuentre en la página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;waitUntilMissing('.selector');\n\\$browser-&gt;waitUntilMissing('.selector', 1);\n</code></pre>\n  <h4>Estableciendo el alcance de selectores cuando estén disponibles</h4>\n  <p>Ocasionalmente, puedes querer esperar por un selector dado y después interactuar con el elemento que coincida con el selector. Por ejemplo, puedes querer esperar hasta que una ventana modal esté disponible y después presionar el botón \"OK\" dentro de esa ventana. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whenAvailable</span> puede ser usado en este caso. Todas las operaciones de elementos ejecutadas dentro de la función de retorno dada serán ejecutadas dentro del selector original:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;whenAvailable('.modal', function (\\$modal) {\n    \\$modal-&gt;assertSee('Hello World')\n            -&gt;press('OK');\n});\n</code></pre>\n  <h4>Esperando por texto</h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">waitForText</span> puede ser usado para esperar hasta que el texto dado sea mostrado en la página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Wait a maximum of five seconds for the text...\n\\$browser-&gt;waitForText('Hello World');\n// Wait a maximum of one second for the text...\n\\$browser-&gt;waitForText('Hello World', 1);\n</code></pre>\n  <h4>Esperando por enlaces</h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">waitForLink</span> puede ser usado para esperar hasta que un enlace dado sea mostrada en la página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Wait a maximum of five seconds for the link...\n\\$browser-&gt;waitForLink('Create');\n// Wait a maximum of one second for the link...\n\\$browser-&gt;waitForLink('Create', 1);\n</code></pre>\n  <h4>Esperando por la localización de la página</h4>\n  <p>Al momento de hacer una comprobación de ruta tal como\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$browser-&gt;assertPathIs('/home')</span>, la comprobación puede fallar si <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">window.location.pathname</span> está siendo actualizada asincrónicamente. Puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">waitForLocation</span> para esperar por la localización que tenga un valor dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;waitForLocation('/secret');\n</code></pre>\n  <p>También puede esperar la localización de una ruta con nombre:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;waitForRoute(\\$routeName, \\$parameters);\n</code></pre>\n  <h4>Esperando por recargas de página</h4>\n  <p>Si necesita hacer aserciones después de que se ha recargado una página, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">waitForReload</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;click('.some-action')\n        -&gt;waitForReload()\n        -&gt;assertSee('something');\n</code></pre>\n  <h4>Esperando por expresiones de JavaScript</h4>\n  <p>Algunas veces puedes querer pausar la ejecución de una prueba hasta que una expresión de JavaScript dada se evalúe a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>. Puedes completar fácilmente esto usando el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">waitUntil</span>. Al momento de pasar una expresión a este método, no necesitas incluir al final la palabra clave <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">return</span> o un punto y coma <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">;</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Wait a maximum of five seconds for the expression to be true...\n\\$browser-&gt;waitUntil('App.dataLoaded');\n\\$browser-&gt;waitUntil('App.data.servers.length &gt; 0');\n// Wait a maximum of one second for the expression to be true...\n\\$browser-&gt;waitUntil('App.data.servers.length &gt; 0', 1);\n</code></pre>\n  <h4>Esperando por expresiones de Vue</h4>\n  <p>Los siguientes métodos puedes ser usados para esperar hasta que un atributo de componente de Vue dado tenga un determinado valor:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Wait until the component attribute contains the given value...\n\\$browser-&gt;waitUntilVue('user.name', 'Taylor', '@user');\n// Wait until the component attribute doesn't contain the given value...\n\\$browser-&gt;waitUntilVueIsNot('user.name', null, '@user');\n</code></pre>\n  <h4>Esperando por una función de retorno</h4>\n  <p>Muchos de los métodos de \"espera\" en Dusk confían en el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">waitUsing</span> subyacente. Puedes usar este método directamente para esperar por una función de retorno dada que devuelva\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">waitUsing</span> acepta el máximo número de segundos para esperar la Closure, el intervalo en el cual la Closure debería ser evaluada y un mensaje opcional de falla:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;waitUsing(10, 1, function () use (\\$something) {\n    return \\$something-&gt;isReady();\n}, \"Something wasn't ready in time.\");\n</code></pre>\n  <h3>Haciendo aserciones de Vue</h3>\n  <p>\n    Inclusive Dusk permite que hagas comprobaciones en el estado de componente de datos de Vue . Por ejemplo, imagina que tu aplicación contiene el siguiente componente de Vue:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// HTML...\n&lt;profile dusk=\"profile-component\"&gt;&lt;/profile&gt;\n// Component Definition...\nVue.component('profile', {\n    template: '&lt;div&gt;{{ user.name }}&lt;/div&gt;',\n    data: function () {\n        return {\n            user: {\n                name: 'Taylor'\n            }\n        };\n    }\n});\n</code></pre>\n  <p>Puedes comprobar el estado del componente de Vue de esta manera:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* A basic Vue test example.\n*\n* @return void\n*/\npublic function testVue()\n{\n    \\$this-&gt;browse(function (Browser \\$browser) {\n        \\$browser-&gt;visit('/')\n                -&gt;assertVue('user.name', 'Taylor', '@profile-component');\n    });\n}\n</code></pre>\n  <h2>Aserciones disponibles</h2>\n  <p>Dusk proporciona una variedad de aserciones que puedes hacer en tu apliación. Todas las aserciones disponibles están documentadas en la tabla de abajo:</p>\n  <p>assertTitle assertTitleContains assertUrlIs assertSchemeIs assertSchemeIsNot assertHostIs assertHostIsNot assertPortIs assertPortIsNot assertPathBeginsWith assertPathIs assertPathIsNot assertRouteIs assertQueryStringHas assertQueryStringMissing assertFragmentIs assertFragmentBeginsWith assertFragmentIsNot assertHasCookie assertCookieMissing assertCookieValue assertPlainCookieValue assertSee assertDontSee assertSeeIn assertDontSeeIn assertSourceHas assertSourceMissing assertSeeLink assertDontSeeLink assertInputValue assertInputValueIsNot assertChecked assertNotChecked assertRadioSelected assertRadioNotSelected assertSelected assertNotSelected assertSelectHasOptions assertSelectMissingOptions assertSelectHasOption assertValue assertVisible assertPresent assertMissing assertDialogOpened assertEnabled assertDisabled assertFocused assertNotFocused assertVue assertVueIsNot assertVueContains assertVueDoesNotContain</p>\n  <h4>assertTitle</h4>\n  <p>Comprueba que el título de la página coincida con el texto dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertTitle(\\$title);\n</code></pre>\n  <h4>assertTitleContains</h4>\n  <p>Comprueba que el título de página contenga el texto dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertTitleContains(\\$title);\n</code></pre>\n  <h4>assertUrlIs</h4>\n  <p>Comprueba que la URL actual (sin la cadena de consulta) coincida con la cadena dada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertUrlIs(\\$url);\n</code></pre>\n  <h4>assertSchemeIs</h4>\n  <p>Comprueba que el esquema de la URL actual coincide con el esquema dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertSchemeIs(\\$scheme);\n</code></pre>\n  <h4>assertSchemeIsNot</h4>\n  <p>Comprueba que el esquema de la URL actual no coincide con el esquema dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertSchemeIsNot(\\$scheme);\n</code></pre>\n  <h4>assertHostIs</h4>\n  <p>Comprueba que el Host de la URL actual coincide con el Host dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertHostIs(\\$host);\n</code></pre>\n  <h4>assertHostIsNot</h4>\n  <p>Comprueba que el Host de la URL actual no coincide con el Host dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertHostIsNot(\\$host);\n</code></pre>\n  <h4>assertPortIs</h4>\n  <p>Comprueba que el puerto de la URL actual coincide con el puerto dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertPortIs(\\$port);\n</code></pre>\n  <h4>assertPortIsNot</h4>\n  <p>Comprueba que el puerto de la URL actual no coincide con el puerto dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertPortIsNot(\\$port);\n</code></pre>\n  <h4>assertPathBeginsWith</h4>\n  <p>Comprueba que la ruta de la URL actual comience con la ruta dada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertPathBeginsWith(\\$path);\n</code></pre>\n  <h4>assertPathIs</h4>\n  <p>Comprueba que la ruta actual coincida con la ruta dada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertPathIs('/home');\n</code></pre>\n  <h4>assertPathIsNot</h4>\n  <p>Comprueba que la ruta actual no coincida con la ruta dada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertPathIsNot('/home');\n</code></pre>\n  <h4>assertRouteIs</h4>\n  <p>Comprueba que la URL actual coincida con la URL de ruta nombrada dada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertRouteIs(\\$name, \\$parameters);\n</code></pre>\n  <h4>assertQueryStringHas</h4>\n  <p>Comprueba que el parámetro de cadena para una consulta dada está presente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertQueryStringHas(\\$name);\n</code></pre>\n  <p>Comprueba que el parámetro de cadena para una consulta dada está presente y tiene un valor dado:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertQueryStringHas(\\$name, \\$value);\n</code></pre>\n  <h4>assertQueryStringMissing</h4>\n  <p>Comprueba que el parámetro de cadena para una consulta dada está ausente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertQueryStringMissing(\\$name);\n</code></pre>\n  <h4>assertFragmentIs</h4>\n  <p>Comprueba que el fragmento actual coincide con el fragmento dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertFragmentIs('anchor');\n</code></pre>\n  <h4>assertFragmentBeginsWith</h4>\n  <p>Comprueba que el fragmento actual comienza con el fragmento dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertFragmentBeginsWith('anchor');\n</code></pre>\n  <h4>assertFragmentIsNot</h4>\n  <p>AComprueba que el fragmento actual no coincide con el fragmento dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertFragmentIsNot('anchor');\n</code></pre>\n  <h4>assertHasCookie</h4>\n  <p>Comprueba que el cookie dado está presente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertHasCookie(\\$name);\n</code></pre>\n  <h4>assertCookieMissing</h4>\n  <p>Comprueba que el cookie dado no está presente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertCookieMissing(\\$name);\n</code></pre>\n  <h4>assertCookieValue</h4>\n  <p>Comprueba que un cookie tenga un valor dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertCookieValue(\\$name, \\$value);\n</code></pre>\n  <h4>assertPlainCookieValue</h4>\n  <p>Comprueba que un cookie desencriptado tenga un valor dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertPlainCookieValue(\\$name, \\$value);\n</code></pre>\n  <h4>assertSee</h4>\n  <p>Comprueba que el texto dado está presente en la página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertSee(\\$text);\n</code></pre>\n  <h4>assertDontSee</h4>\n  <p>Comprueba que el texto dado no está presente en la página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertDontSee(\\$text);\n</code></pre>\n  <h4>assertSeeIn</h4>\n  <p>Comprueba que el texto dado está presente dentro del selector:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertSeeIn(\\$selector, \\$text);\n</code></pre>\n  <h4>assertDontSeeIn</h4>\n  <p>Comprueba que el texto dado no está presente dentro del selector:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertDontSeeIn(\\$selector, \\$text);\n</code></pre>\n  <h4>assertSourceHas</h4>\n  <p>Comprueba que el código fuente dado está presente en la página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertSourceHas(\\$span);\n</code></pre>\n  <h4>assertSourceMissing</h4>\n  <p>Comprueba que el código fuente dado no está presente en la página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertSourceMissing(\\$span);\n</code></pre>\n  <h4>assertSeeLink</h4>\n  <p>Comprueba que el enlace dado está presente en la página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertSeeLink(\\$linkText);\n</code></pre>\n  <h4>assertDontSeeLink</h4>\n  <p>Comprueba que el enlace dado está no presente en la página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertDontSeeLink(\\$linkText);\n</code></pre>\n  <h4>assertInputValue</h4>\n  <p>Comprueba que el campo de entrada dado tiene el valor dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertInputValue(\\$field, \\$value);\n</code></pre>\n  <h4>assertInputValueIsNot</h4>\n  <p>Comprueba que el campo de entrada dado no tiene el valor dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertInputValueIsNot(\\$field, \\$value);\n</code></pre>\n  <h4>assertChecked</h4>\n  <p>Comprueba que la casilla de verificación está marcada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertChecked(\\$field);\n</code></pre>\n  <h4>assertNotChecked</h4>\n  <p>Comprueba que la casilla de verificación no está marcada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertNotChecked(\\$field);\n</code></pre>\n  <h4>assertRadioSelected</h4>\n  <p>Comprueba que el campo de radio está seleccionado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertRadioSelected(\\$field, \\$value);\n</code></pre>\n  <h4>assertRadioNotSelected</h4>\n  <p>Comprueba que el campo de radio no está seleccionado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertRadioNotSelected(\\$field, \\$value);\n</code></pre>\n  <h4>assertSelected</h4>\n  <p>Comprueba que la lista desplegable tiene seleccionado el valor dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertSelected(\\$field, \\$value);\n</code></pre>\n  <h4>assertNotSelected</h4>\n  <p>Comprueba que la lista desplegable no tiene seleccionado el valor dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertNotSelected(\\$field, \\$value);\n</code></pre>\n  <h4>assertSelectHasOptions</h4>\n  <p>Comprueba que el arreglo dado de valores están disponibles para ser seleccionados:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertSelectHasOptions(\\$field, \\$values);\n</code></pre>\n  <h4>assertSelectMissingOptions</h4>\n  <p>Comprueba que el arreglo dado de valores no están disponibles para ser seleccionados:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertSelectMissingOptions(\\$field, \\$values);\n</code></pre>\n  <h4>assertSelectHasOption</h4>\n  <p>Comprueba que el valor dado está disponible para ser seleccionado en el campo dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertSelectHasOption(\\$field, \\$value);\n</code></pre>\n  <h4>assertValue</h4>\n  <p>Comprueba que el elemento que coincida con el selector dado tenga el valor dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertValue(\\$selector, \\$value);\n</code></pre>\n  <h4>assertVisible</h4>\n  <p>Comprueba que el elemento que coincida con el selector dado sea visible:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertVisible(\\$selector);\n</code></pre>\n  <h4>assertPresent</h4>\n  <p>Comprueba que el elemento que coincida con el selector dado está presente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertPresent(\\$selector);\n</code></pre>\n  <h4>assertMissing</h4>\n  <p>Comprueba que el elemento que coincida con el selector dado no sea visible:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertMissing(\\$selector);\n</code></pre>\n  <h4>assertDialogOpened</h4>\n  <p>Comprueba que un diálogo JavaScript con un mensaje dado ha sido abierto:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertDialogOpened(\\$message);\n</code></pre>\n  <h4>assertEnabled</h4>\n  <p>Comprueba que el campo dado está activado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertEnabled(\\$field);\n</code></pre>\n  <h4>assertDisabled</h4>\n  <p>Comprueba que el campo dado está desactivado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertDisabled(\\$field);\n</code></pre>\n  <h4>assertFocused</h4>\n  <p>Comprueba que el campo dado está enfocado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertFocused(\\$field);\n</code></pre>\n  <h4>assertNotFocused</h4>\n  <p>Comprueba que el campo dado no está enfocado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertNotFocused(\\$field);\n</code></pre>\n  <h4>assertVue</h4>\n  <p>Comprueba que una propiedad de datos de un componente de Vue dado coincida con el valor dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertVue(\\$property, \\$value, \\$componentSelector = null);\n</code></pre>\n  <h4>assertVueIsNot</h4>\n  <p>Comprueba que una propiedad de datos de un componente de Vue dado no coincida con el valor dado:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertVueIsNot(\\$property, \\$value, \\$componentSelector = null);\n</code></pre>\n  <h4>assertVueContains</h4>\n  <p>Comprueba que una propiedad de datos de un componente de Vue dado es un arreglo y contiene el valor dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertVueContains(\\$property, \\$value, \\$componentSelector = null);\n</code></pre>\n  <h4>assertVueDoesNotContain</h4>\n  <p>Comprueba que una propiedad de datos de un componente de Vue dado es un arreglo y no contiene el valor dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertVueDoesNotContain(\\$property, \\$value, \\$componentSelector = null);\n</code></pre>\n  <h2>Páginas</h2>\n  <p>Alguna veces, las pruebas requieren que varias acciones complicadas sean ejecutadas en secuencia. Esto puede hacer tus pruebas más difíciles de leer y entender. Las páginas permiten que definas acciones expresivas que entonces pueden ser ejecutadas en una página dada usando un solo método. Las páginas también permiten que definas abreviaturas para selectores comunes para tu aplicación o una página única.</p>\n  <h3>Generando páginas</h3>\n  <p>Para generar un objeto de página, usa el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk:page</span>. Todos los objetos de página serán colocados en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tests/Browser/Pages</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan dusk:page Login\n</code></pre>\n  <h3>Configurando páginas</h3>\n  <p>De forma predeterminada, las páginas tienen tres métodos: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">assert</span>, y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">elements</span>. Discutiremos los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">assert</span> ahora. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">elements</span> será discutido con más detalle debajo.</p>\n  <h4>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url</span></h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url</span> debería devolver la ruta de la URL que representa la página. Dusk usará esta URL al momento de navegar a la página en el navegador:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Get the URL for the page.\n*\n* @return string\n*/\npublic function url()\n{\n    return '/login';\n}\n</code></pre>\n  <h4>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">assert</span></h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">assert</span> puede hacer algunas aserciones necesarias para verificar que el navegador en realidad está en la página dada. Completar este método no es necesario; sin embargo, eres libre de hacer estas aserciones si lo deseas. Estas aserciones serán ejecutadas automáticamente al momento de navegar hacia la página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Assert that the browser is on the page.\n*\n* @return void\n*/\npublic function assert(Browser \\$browser)\n{\n    \\$browser-&gt;assertPathIs(\\$this-&gt;url());\n}\n</code></pre>\n  <h3>Navegando hacia las páginas</h3>\n  <p>Una vez que se ha configurado una página, puedes navegar a ella utilizando el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">visit</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Tests\\Browser\\Pages\\Login;\n\\$browser-&gt;visit(new Login);\n</code></pre>\n  <p>A veces es posible que ya estés en una página determinada y necesitas \"cargar\" los selectores y métodos dentro del contexto de prueba actual. Esto es común al momento de presionar un botón y ser redireccionado a una página dada sin navegar explícitamente a ésta. En esta situación, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">on</span> para cargar la página.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Tests\\Browser\\Pages\\CreatePlaylist;\n\\$browser-&gt;visit('/dashboard')\n        -&gt;clickLink('Create Playlist')\n        -&gt;on(new CreatePlaylist)\n        -&gt;assertSee('@create');\n</code></pre>\n  <h3>Selectores abreviados</h3>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">elements</span> de páginas permite que definas abreviaturas rápidas, fáciles de recordar para cualquier selector CSS en tu página. Por ejemplo, vamos a definir una abreviación para el campo \"email\" de la página login de la aplicación:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Get the element shortcuts for the page.\n*\n* @return array\n*/\npublic function elements()\n{\n    return [\n        '@email' =&gt; 'input[name=email]',\n    ];\n}\n</code></pre>\n  <p>Ahora, puedes usar este selector de abreviación en cualquier lugar que usarías un selector de CSS completo:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;type('@email', 'taylor@laravel.com');\n</code></pre>\n  <h4>Selectores de abreviaturas globales</h4>\n  <p>Después de instalar Dusk, una clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Page</span> básica será colocada en tu directorio\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tests/Browser/Pages</span>. Esta clase contiene un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">siteElements</span> el cual puede ser usado para definir selectores de abreviaturas globales que deberían estar disponibles en cada página en cada parte de tu aplicación:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Get the global element shortcuts for the site.\n*\n* @return array\n*/\npublic static function siteElements()\n{\n    return [\n        '@element' =&gt; '#selector',\n    ];\n}\n</code></pre>\n  <h3>Métodos de página</h3>\n  <p>Además de los métodos predeterminados definidos en páginas, puedes definir métodos adicionales, los cuales pueden ser usados en cualquier parte de tus pruebas. Por ejemplo, vamos a imaginar que estamos construyendo una aplicación para administración de música. Una acción común para una página de la aplicación podría ser crear una lista de reproducción. En lugar de volver a escribir la lógica para crear una lista de reproducción en cada prueba, puedes definir un método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">createPlaylist</span> en una clase de página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace Tests\\Browser\\Pages;\nuse Laravel\\Dusk\\Browser;\nclass Dashboard extends Page\n{\n    // Other page methods...\n    /**\n    * Create a new playlist.\n    *\n    * @param  \\Laravel\\Dusk\\Browser  \\$browser\n    * @param  string  \\$name\n    * @return void\n    */\n    public function createPlaylist(Browser \\$browser, \\$name)\n    {\n        \\$browser-&gt;type('name', \\$name)\n                -&gt;check('share')\n                -&gt;press('Create Playlist');\n    }\n}\n</code></pre>\n  <p>Una vez que el método ha sido definido, puedes usarlo dentro de cualquier prueba que utilice la página. La instancia de navegador será pasada automáticamente al método de la página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Tests\\Browser\\Pages\\Dashboard;\n\\$browser-&gt;visit(new Dashboard)\n        -&gt;createPlaylist('My Playlist')\n        -&gt;assertSee('My Playlist');\n</code></pre>\n  <h2>Componentes</h2>\n  <p>Los componentes son similares a “los objetos de página” de Dusk, pero son planeados para partes de UI y funcionalidades que sean reusadas en otras partes de tu aplicación, tal como una barra de navegación o ventana de notificación. Como tal, los componentes no son enlazados a URLs específicas.\n  </p>\n  <h3>Generando componentes</h3>\n  <p>Para generar un componente, usa el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk:component</span>. Los nuevos componentes son colocados en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">test/Browser/Components</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan dusk:component DatePicker\n</code></pre>\n  <p>Como se muestra antes, un \"calendario\" es un ejemplo de un componente que puede existir en cualquier parte de tu aplicación en una variedad de páginas. Puede volverse complejo escribir manualmente lógica de automatización de navegador para seleccionar una fecha entre docenas de pruebas en cualquier parte de tu software de prueba. En lugar de esto, podemos definir un componente de Dusk para representar el calendario, permitiendo encapsular esa lógica dentro del componente:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace Tests\\Browser\\Components;\nuse Laravel\\Dusk\\Browser;\nuse Laravel\\Dusk\\Component as BaseComponent;\nclass DatePicker extends BaseComponent\n{\n    /**\n    * Get the root selector for the component.\n    *\n    * @return string\n    */\n    public function selector()\n    {\n        return '.date-picker';\n    }\n    /**\n    * Assert that the browser page contains the component.\n    *\n    * @param  Browser  \\$browser\n    * @return void\n    */\n    public function assert(Browser \\$browser)\n    {\n        \\$browser-&gt;assertVisible(\\$this-&gt;selector());\n    }\n    /**\n    * Get the element shortcuts for the component.\n    *\n    * @return array\n    */\n    public function elements()\n    {\n        return [\n            '@date-field' =&gt; 'input.datepicker-input',\n            '@month-list' =&gt; 'div &gt; div.datepicker-months',\n            '@day-list' =&gt; 'div &gt; div.datepicker-days',\n        ];\n    }\n    /**\n    * Select the given date.\n    *\n    * @param  \\Laravel\\Dusk\\Browser  \\$browser\n    * @param  int  \\$month\n    * @param  int  \\$day\n    * @return void\n    */\n    public function selectDate(\\$browser, \\$month, \\$day)\n    {\n        \\$browser-&gt;click('@date-field')\n                -&gt;within('@month-list', function (\\$browser) use (\\$month) {\n                    \\$browser-&gt;click(\\$month);\n                })\n                -&gt;within('@day-list', function (\\$browser) use (\\$day) {\n                    \\$browser-&gt;click(\\$day);\n                });\n    }\n}\n</code></pre>\n  <h3>Usando componentes</h3>\n  <p>Una vez que el componente ha sido definido, fácilmente podemos seleccionar una fecha dentro del calendario desde cualquier prueba. Y, si la lógica necesaria para seleccionar una fecha cambia, solamente necesitaremos actualizar el componente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace Tests\\Browser;\nuse Tests\\DuskTestCase;\nuse Laravel\\Dusk\\Browser;\nuse Tests\\Browser\\Components\\DatePicker;\nuse Illuminate\\Foundation\\Testing\\DatabaseMigrations;\nclass ExampleTest extends DuskTestCase\n{\n    /**\n    * A basic component test example.\n    *\n    * @return void\n    */\n    public function testBasicExample()\n    {\n        \\$this-&gt;browse(function (Browser \\$browser) {\n            \\$browser-&gt;visit('/')\n                    -&gt;within(new DatePicker, function (\\$browser) {\n                        \\$browser-&gt;selectDate(1, 2018);\n                    })\n                    -&gt;assertSee('January');\n        });\n    }\n}\n</code></pre>\n  <h2>Integración continua</h2>\n  <h3>CircleCI</h3>\n  <p>Si estás usando CircleCI para ejecutar tus pruebas de Dusk, puedes usar este archivo de configuración como punto de partida. Al igual que con TravisCI, usaremos el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">php\n  artisan serve</span> para ejecutar el servidor web integrado de PHP:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>version: 2\njobs:\n    build:\n        steps:\n            - run: sudo apt-get install -y libsqlite3-dev\n            - run: cp .env.testing .env\n            - run: composer install -n --ignore-platform-reqs\n            - run: npm install\n            - run: npm run production\n            - run: vendor/bin/phpunit\n            - run:\n                name: Start Chrome Driver\n                command: ./vendor/laravel/dusk/bin/chromedriver-linux\n                background: true\n            - run:\n                name: Run Laravel Server\n                command: php artisan serve\n                background: true\n            - run:\n                name: Run Laravel Dusk Tests\n                command: php artisan dusk\n</code></pre>\n  <h3>spanship</h3>\n  <p>\n    Para ejecutar pruebas de Dusk en spanship , agrega los siguientes comandos a tu proyecto spanship. Estos comandos son sólo un punto de partida y eres libre de agregar los comandos adicionales que necesites:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>phpenv local 7.2\ncp .env.testing .env\nmkdir -p ./bootstrap/cache\ncomposer install --no-interaction --prefer-dist\nphp artisan key:generate\nnohup bash -c \"php artisan serve 2&gt;&amp;1 &amp;\" &amp;&amp; sleep 5\nphp artisan dusk\n</code></pre>\n  <h3>Heroku CI</h3>\n  <p>\n    Para ejecutar tus pruebas de Dusk en Heroku CI , agrega el siguiente buildpack de Google Chrome y scripts a tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app.json</span> de Heroku:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>{\n    \"environments\": {\n        \"test\": {\n            \"buildpacks\": [\n                { \"url\": \"heroku/php\" },\n                { \"url\": \"https://github.com/heroku/heroku-buildpack-google-chrome\" }\n            ],\n            \"scripts\": {\n                \"test-setup\": \"cp .env.testing .env\",\n                \"test\": \"nohup bash -c './vendor/laravel/dusk/bin/chromedriver-linux &gt; /dev/null 2&gt;&amp;1 &amp;' &amp;&amp; nohup bash -c 'php artisan serve &gt; /dev/null 2&gt;&amp;1 &amp;' &amp;&amp; php artisan dusk\"\n            }\n        }\n    }\n}\n</code></pre>\n  <h3>Travis CI</h3>\n  <p>\n    Para ejecutar tus pruebas de Dusk en Travis CI , usa la siguiente configuración en el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.travis.yml</span>. Ya que Travis CI no es un entorno gráfico, necesitaremos tomar algunos pasos extras con el propósito de ejecutar un navegador Chrome. En adición a esto, usaremos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">php artisan serve</span> para ejecutar el servidor web integrado de PHP:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>language: php\nphp:\n    - 7.3\naddons:\n    chrome: stable\ninstall:\n    - cp .env.testing .env\n    - travis_retry composer install --no-interaction --prefer-dist --no-suggest\n    - php artisan key:generate\nbefore_script:\n    - google-chrome-stable --headless --disable-gpu --remote-debugging-port=9222 http://localhost &amp;\n    - php artisan serve &amp;\nscript:\n    - php artisan dusk\n</code></pre>\n  <p>En tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env.testing</span>, ajusta el valor de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">APP_URL</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>APP_URL=http://127.0.0.1:8000\n</code></pre>\n</div>"
      },
      {
        "titulo": "Pruebas de Base de datos",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Pruebas de Base de Datos</h1>\n  <ul>\n    <li>Introducción</li>\n    <li>Generando factories</li>\n    <li>Reiniciando la base de datos después de cada prueba</li>\n    <li>\n      Escribiendo factories\n      <ul>\n        <li>Estados de un factory</li>\n        <li>LLamadas de retorno de un factory</li>\n      </ul>\n    </li>\n    <li>\n      Usando factories\n      <ul>\n        <li>Creando modelos</li>\n        <li>Persistiendo modelos</li>\n        <li>Relaciones</li>\n      </ul>\n    </li>\n    <li>Aserciones disponibles</li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>Laravel proporciona una variedad de herramientas útiles para hacer que sea más fácil probar tus aplicaciones que manejan base de datos. Primero, puedes usar el método (helper) <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">assertDatabaseHas</span> para comprobar que los datos existentes en la base de datos coinciden con un conjunto dado de criterios. Por ejemplo, si quisieras verificar que hay un registro en la tabla\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">users</span> con el valor <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">email</span> de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">sally@example.com</span>, puedes hacer lo siguiente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>public function testDatabase()\n{\n    // Make call to application...\n    \\$this-&gt;assertDatabaseHas('users', [\n        'email' =&gt; 'sally@example.com',\n    ]);\n}\n</code></pre>\n  <p>También podrías usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">assertDatabaseMissing</span> para comprobar que esos datos no existen en la base de datos.</p>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">assertDatabaseHas</span> y otros métodos como éste son por conveniencia. Eres libre de usar cualquiera de los métodos de aserción de PHPUnit integrados para complementar tus pruebas.\n  </p>\n  <h2>Generando factories</h2>\n  <p>\n    Para crear un factory, usa el comando Artisan\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:factory</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan make:factory PostFactory\n</code></pre>\n  <p>El nuevo factory será colocado en tu directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database/factories</span>.</p>\n  <p>La opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--model</span> puede ser usada para indicar el nombre del modelo creado por el factory. Esta opción pre-rellenará el archivo de factory generado con el modelo dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan make:factory PostFactory --model=Post\n</code></pre>\n  <h2>Reiniciando la base de datos después de cada prueba</h2>\n  <p>Con frecuencia es útil reinicializar tu base de datos después de cada prueba de modo que los datos de una prueba previa no interfieran con las pruebas subsecuentes. El trait <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RefreshDatabase</span> toma el enfoque más óptimo para migrar tu base de datos de pruebas, dependiendo de si estás usando una base de datos en memoria o una base de datos tradicional. Usa el trait en tu clase de prueba y todo será manejado por ti:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace Tests\\Feature;\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Illuminate\\Foundation\\Testing\\WithoutMiddleware;\nclass ExampleTest extends TestCase\n{\n    use RefreshDatabase;\n    /**\n    * A basic functional test example.\n    *\n    * @return void\n    */\n    public function testBasicExample()\n    {\n        \\$response = \\$this-&gt;get('/');\n        // ...\n    }\n}\n</code></pre>\n  <h2>Escribiendo factories</h2>\n  <p>\n    Al momento de probar, puedes necesitar insertar unos pocos registros dentro de tu base de datos antes de ejecutar tu prueba. En lugar de especificar manualmente el valor de cada columna cuando crees estos datos de prueba, Laravel permite que definas un conjunto de atributos predeterminados para cada uno de tus modelos de Eloquent usando factories de modelos. Para empezar, echemos un vistazo al archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database/factories/UserFactory.php</span> en tu aplicación. De forma predeterminada, este archivo contiene una definición de factory:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Illuminate\\Support\\Str;\nuse Faker\\Generator as Faker;\n\\$factory-&gt;define(App\\User::class, function (Faker \\$faker) {\n    return [\n        'name' =&gt; \\$faker-&gt;name,\n        'email' =&gt; \\$faker-&gt;unique()-&gt;safeEmail,\n        'email_verified_at' =&gt; now(),\n        'password' =&gt; '\\$2y\\$10\\$TKh8H1.PfQx37YgCzwiKb.KjNyWgaHb9cbcoQgdIVFlYg7B77UdFm', // secret\n        'remember_token' =&gt; Str::random(10),\n    ];\n});\n</code></pre>\n  <p>\n    Dentro del Closure, la cual sirve como la definición del factory, puedes devolver los valores de prueba predeterminados de todos los atributos del modelo. El Closure recibirá una instancia de la biblioteca PHP Faker\n    <outboundlink></outboundlink>\n    , la cual permitirá que generes convenientemente varios tipos de datos aleatorios para las pruebas.\n  </p>\n  <p>También puedes crear archivos de factories adicionales para cada modelo para una mejor organización. Por ejemplo, podrías crear archivos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">UserFactory.php</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">CommentFactory.php</span> dentro de tu directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">database/factories</span>. Todos los archivos dentro del directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">factories</span> serán cargados automáticamente por Laravel.</p>\n  <p>TIP TIP</p>\n  <p>Puedes establecer la configuración regional de Faker agregando una opción\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">faker_locale</span> a tu archivo de configuración<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/app.php</span>.</p>\n  <h3>Estados de un factory</h3>\n  <p>Los estados te permiten definir modificaciones discretas que pueden ser aplicadas a tus factories de modelos en cualquier combinación. Por ejemplo, tu modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span> podría tener un estado <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">delinquent</span> que modifique uno de sus valores de atributo predeterminados. Puedes definir tus transformaciones de estado usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">state</span>. Para estados simples, puedes pasar un arreglo de modificaciones de atributos:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$factory-&gt;state(App\\User::class, 'delinquent', [\n    'account_status' =&gt; 'delinquent',\n]);\n</code></pre>\n  <p>Si tu estado requiere cálculo o una instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$faker</span>, puedes usar un Closure para calcular las modificaciones de los atributos del estado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$factory-&gt;state(App\\User::class, 'address', function (\\$faker) {\n    return [\n        'address' =&gt; \\$faker-&gt;address,\n    ];\n});\n</code></pre>\n  <h3>LLamadas de retorno de un factory</h3>\n  <p>Las llamadas de retorno de un Factory son registradas usando los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">afterMaking</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">afterCreating</span> y te permiten realizar tareas adicionales de hacer o crear un modelo. Por ejemplo, puedes usar llamadas de retorno para relacionar modelos adicionales con el modelo creado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$factory-&gt;afterMaking(App\\User::class, function (\\$user, \\$faker) {\n    // ...\n});\n\\$factory-&gt;afterCreating(App\\User::class, function (\\$user, \\$faker) {\n    \\$user-&gt;accounts()-&gt;save(factory(App\\Account::class)-&gt;make());\n});\n</code></pre>\n  <p>También puedes definir llamadas de retorno para estados de un factory:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$factory-&gt;afterMakingState(App\\User::class, 'delinquent', function (\\$user, \\$faker) {\n    // ...\n});\n\\$factory-&gt;afterCreatingState(App\\User::class, 'delinquent', function (\\$user, \\$faker) {\n    // ...\n});\n</code></pre>\n  <h2>Usando factories</h2>\n  <h3>Creando modelos</h3>\n  <p>Una vez que has definido tus factories, puedes usar la función global <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">factory</span> en tus pruebas o en archivos seeder para generar instancias de un modelo. Así, vamos a echar un vistazo en unos pocos ejemplos de creación de modelos. Primero, usaremos el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make</span> para crear modelos pero sin guardarlos en la base de datos:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>public function testDatabase()\n{\n    \\$user = factory(App\\User::class)-&gt;make();\n    // Use model in tests...\n}\n</code></pre>\n  <p>También puedes crear una colección de muchos modelos o crear modelos de un tipo dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Create three App\\User instances...\n\\$users = factory(App\\User::class, 3)-&gt;make();\n</code></pre>\n  <h4>Aplicando estados</h4>\n  <p>También puedes aplicar cualquiera de tus estados a los modelos. Si prefieres aplicar múltiples transformaciones de estado a los modelos, deberías especificar el nombre de cada estado que quisieras aplicar:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = factory(App\\User::class, 5)-&gt;states('delinquent')-&gt;make();\n\\$users = factory(App\\User::class, 5)-&gt;states('premium', 'delinquent')-&gt;make();\n</code></pre>\n  <h4>Sobrescribiendo atributos</h4>\n  <p>Si prefieres sobreescribir algunos de los valores predeterminados de tus modelos, puedes pasar un arreglo de valores al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make</span>. Solamente, los valores especificados serán reemplazados mientras que el resto de los valores permanecerán con sus valores predeterminados cómo se especificó en el factory:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = factory(App\\User::class)-&gt;make([\n    'name' =&gt; 'Abigail',\n]);\n</code></pre>\n  <h3>Persistiendo modelos</h3>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span> no solamente crea las instancias de un modelo sino que también los almacena en la base de datos usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">save</span> de Eloquent:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>public function testDatabase()\n{\n    // Create a single App\\User instance...\n    \\$user = factory(App\\User::class)-&gt;create();\n    // Create three App\\User instances...\n    \\$users = factory(App\\User::class, 3)-&gt;create();\n    // Use model in tests...\n}\n</code></pre>\n  <p>Puedes sobrescribir atributos en el modelo al pasar un arreglo al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = factory(App\\User::class)-&gt;create([\n    'name' =&gt; 'Abigail',\n]);\n</code></pre>\n  <h3>Relaciones</h3>\n  <p>En este ejemplo, adjuntaremos una relación para algunos modelos creados. Al momento de usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span> para crear múltiples modelos, una instancia de colección de Eloquent es devuelta, permitiendo que uses cualquiera de las funciones convenientes proporcionadas por la colección, tales como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">each</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$users = factory(App\\User::class, 3)\n            -&gt;create()\n            -&gt;each(function (\\$user) {\n                \\$user-&gt;posts()-&gt;save(factory(App\\Post::class)-&gt;make());\n            });\n</code></pre>\n  <h4>Relaciones y closures de atributos</h4>\n  <p>También puedes adjuntar relaciones a los modelos usando atributos de Closure en tus definiciones del factory. Por ejemplo, si prefieres crear una nueva instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span> al momento de crear un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Post</span>, puedes hacer lo siguiente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$factory-&gt;define(App\\Post::class, function (\\$faker) {\n    return [\n        'title' =&gt; \\$faker-&gt;title,\n        'content' =&gt; \\$faker-&gt;paragraph,\n        'user_id' =&gt; function () {\n            return factory(App\\User::class)-&gt;create()-&gt;id;\n        }\n    ];\n});\n</code></pre>\n  <p>Estas Closures también reciben el arreglo de atributos evaluados del factory que los define:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$factory-&gt;define(App\\Post::class, function (\\$faker) {\n    return [\n        'title' =&gt; \\$faker-&gt;title,\n        'content' =&gt; \\$faker-&gt;paragraph,\n        'user_id' =&gt; function () {\n            return factory(App\\User::class)-&gt;create()-&gt;id;\n        },\n        'user_type' =&gt; function (array \\$post) {\n            return App\\User::find(\\$post['user_id'])-&gt;type;\n        }\n    ];\n});\n</code></pre>\n  <h2>Aserciones disponibles</h2>\n  <p>\n    Laravel proporciona varias aserciones de base de datos para tus pruebas PHPUnit :\n  </p>\n  <table style=\"border: 1px solid #CFD8DC;\">\n    <thead>\n    <tr>\n      <th>Método</th>\n      <th>Descripción</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$this-&gt;assertDatabaseHas(\\$table, array \\$data);</span></td>\n      <td>Comprueba que una tabla en la base de datos contiene los datos dados.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$this-&gt;assertDatabaseMissing(\\$table, array \\$data);</span></td>\n      <td>Comprueba que una tabla en la base de datos no contiene los datos dados.</td>\n    </tr>\n    <tr>\n      <td><span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$this-&gt;assertSoftDeleted(\\$table, array \\$data);</span></td>\n      <td>Comprueba que el registro dado ha sido borrado lógicamente.</td>\n    </tr>\n    </tbody>\n  </table>\n</div>"
      },
      {
        "titulo": "Mocking",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Mocking</h1>\n  <ul>\n    <li>Introducción</li>\n    <li>Mocking de objectos</li>\n    <li>Fake de trabajos (Jobs)</li>\n    <li>\n      Fake de eventos\n      <ul>\n        <li>Fake de eventos con alcance</li>\n      </ul>\n    </li>\n    <li>Fake de correos electrónicos</li>\n    <li>Fake de notificaciones</li>\n    <li>Fake de colas</li>\n    <li>Fake de almacenamiento de archivos</li>\n    <li>Clases facade</li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>Al momento de probar aplicaciones de Laravel, puedes querer \"simular\" (mock) ciertos aspectos de tu aplicación de modo que realmente no sean ejecutados durante una prueba dada. Por ejemplo, al momento de probar un controlador que despacha un evento, puedes querer simular los listeners de eventos de modo que realmente no se ejecuten durante la prueba. Esto te permite probar solamente la respuesta HTTP del controlador sin preocuparte por la ejecución de los listeners de eventos, ya que los listeners de eventos pueden ser evaluados en sus propios casos de prueba.</p>\n  <p>\n    Laravel provee funciones helpers para simular eventos, tareas y clases facades predeterminadas. Estos helpers proporcionan principalmente una capa conveniente sobre la clase Mockery de modo que no tengas que hacer manualmente llamadas complicadas a métodos Mockery. Puedes también usar Mockery\n    <outboundlink></outboundlink>\n    o PHPUnit para crear tus propios mocks o spies.\n  </p>\n  <h2>Mocking de objetos</h2>\n  <p>Cuando hagas mocking de un objeto que vas a inyectar en tu aplicación a través del contenedor de servicio de Laravel, debes enlazar tu instancia a la que le has hecho mocking al contenedor como un enlace de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">instance</span>. Esto le indicará al contenedor que use tu instancia \"mockeada\" del objeto en lugar de construir el propio objeto:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Mockery;\nuse App\\Service;\n\\$this-&gt;instance(Service::class, Mockery::mock(Service::class, function (\\$mock) {\n    \\$mock-&gt;shouldReceive('process')-&gt;once();\n}));\n</code></pre>\n  <p>Para hacer esto más conveniente, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mock</span>, que es proporcionado por la clase TestCase base de Laravel:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use App\\Service;\n\\$this-&gt;mock(Service::class, function (\\$mock) {\n    \\$mock-&gt;shouldReceive('process')-&gt;once();\n});\n</code></pre>\n  <p>De forma similar, si quieres espiar un objeto, la clase de prueba base de Laravel ofrece un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">spy</span> como un wrapper conveniente del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Mockery::spy</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use App\\Service;\n\\$this-&gt;spy(Service::class, function (\\$mock) {\n    \\$mock-&gt;shouldHaveReceived('process');\n});\n</code></pre>\n  <h2>Fake de trabajos (jobs)</h2>\n  <p>Como una alternativa a mocking, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fake</span> de la clase facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Bus</span> para evitar que determinadas tareas sean despachadas. Al momento de usar fakes, las aserciones serán hechas después de que el código bajo prueba sea ejecutado.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace Tests\\Feature;\nuse Tests\\TestCase;\nuse App\\Jobs\\ShipOrder;\nuse Illuminate\\Support\\Facades\\Bus;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Illuminate\\Foundation\\Testing\\WithoutMiddleware;\nclass ExampleTest extends TestCase\n{\n    public function testOrderShipping()\n    {\n        Bus::fake();\n        // Perform order shipping...\n        Bus::assertDispatched(ShipOrder::class, function (\\$job) use (\\$order) {\n            return \\$job-&gt;order-&gt;id === \\$order-&gt;id;\n        });\n        // Comprueba que un trabajo no fue enviado...\n        Bus::assertNotDispatched(AnotherJob::class);\n    }\n}\n</code></pre>\n  <h2>Fake de eventos</h2>\n  <p>Como una alternativa a mocking, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fake</span> de la clase facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Event</span> para prevenir la ejecución de todos los listeners de eventos. Después puedes comprobar que los eventos fueron despachados e incluso inspeccionar los datos que recibieron. Al momento de usar fakes, las aserciones son hechas después de que el código bajo prueba sea ejecutado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace Tests\\Feature;\nuse Tests\\TestCase;\nuse App\\Events\\OrderShipped;\nuse App\\Events\\OrderFailedToShip;\nuse Illuminate\\Support\\Facades\\Event;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Illuminate\\Foundation\\Testing\\WithoutMiddleware;\nclass ExampleTest extends TestCase\n{\n    /**\n    * Test order shipping.\n    */\n    public function testOrderShipping()\n    {\n        Event::fake();\n        // Perform order shipping...\n        Event::assertDispatched(OrderShipped::class, function (\\$e) use (\\$order) {\n            return \\$e-&gt;order-&gt;id === \\$order-&gt;id;\n        });\n        // Comprueba que un evento fue enviado dos veces...\n        Event::assertDispatched(OrderShipped::class, 2);\n        // Comprueba que un evento no fue enviado...\n        Event::assertNotDispatched(OrderFailedToShip::class);\n    }\n}\n</code></pre>\n  <p>Nota</p>\n  <p>Después de llamar a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Event::fake()</span>, no se ejecutarán listeners de eventos. Entonces, si tus pruebas usan model factories que dependen de eventos, cómo crear una UUID durante el evento de modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">creating</span>, debes llamar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Event::fake()</span>\n    <strong>después</strong> de usar tus factories.</p>\n  <h4>Haciendo fake a un subconjunto de eventos</h4>\n  <p>Si sólo si deseas hacer fake a listeners de eventos para un grupo específico de eventos, puedes pasarlos a los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fake</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fakeFor</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Test order process.\n*/\npublic function testOrderProcess()\n{\n    Event::fake([\n        OrderCreated::class,\n    ]);\n    \\$order = factory(Order::class)-&gt;create();\n    Event::assertDispatched(OrderCreated::class);\n    // Otros eventos se envían de forma normal...\n    \\$order-&gt;update([...]);\n}\n</code></pre>\n  <h3>Fake de eventos con alcance</h3>\n  <p>Si sólo quieres hacer fake a oyentes de eventos para una porción de la prueba, se puede usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fakeFor</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace Tests\\Feature;\nuse App\\Order;\nuse Tests\\TestCase;\nuse App\\Events\\OrderCreated;\nuse Illuminate\\Support\\Facades\\Event;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Illuminate\\Foundation\\Testing\\WithoutMiddleware;\nclass ExampleTest extends TestCase\n{\n    /**\n    * Test order process.\n    */\n    public function testOrderProcess()\n    {\n        \\$order = Event::fakeFor(function () {\n            \\$order = factory(Order::class)-&gt;create();\n            Event::assertDispatched(OrderCreated::class);\n            return \\$order;\n        });\n        // Los eventos se envían normalmente y los observadores se ejecutarán...\n        \\$order-&gt;update([...]);\n    }\n}\n</code></pre>\n  <h2>Fake de correos electrónicos</h2>\n  <p>Puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fake</span> de la clase facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Mail</span> para prevenir que los correos sean enviados. Después puedes comprobar qué correos de clases mailables fueron enviados a los usuarios e incluso inspeccionar los datos que recibieron. Al momento de usar fakes, las aserciones son hechas después de que el código bajo prueba sea ejecutado.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace Tests\\Feature;\nuse Tests\\TestCase;\nuse App\\Mail\\OrderShipped;\nuse Illuminate\\Support\\Facades\\Mail;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Illuminate\\Foundation\\Testing\\WithoutMiddleware;\nclass ExampleTest extends TestCase\n{\n    public function testOrderShipping()\n    {\n        Mail::fake();\n        // Comprueba que no se enviaron mailables...\n        Mail::assertNothingSent();\n        // Perform order shipping...\n        Mail::assertSent(OrderShipped::class, function (\\$mail) use (\\$order) {\n            return \\$mail-&gt;order-&gt;id === \\$order-&gt;id;\n        });\n        // Comprueba que un mensaje fue enviado a los usuarios dados...\n        Mail::assertSent(OrderShipped::class, function (\\$mail) use (\\$user) {\n            return \\$mail-&gt;hasTo(\\$user-&gt;email) &amp;&amp;\n                    \\$mail-&gt;hasCc('...') &amp;&amp;\n                    \\$mail-&gt;hasBcc('...');\n        });\n        // Comprueba que un correo electrónico fue enviado dos veces...\n        Mail::assertSent(OrderShipped::class, 2);\n        // Comprueba que un correo electrónico no fue enviado...\n        Mail::assertNotSent(AnotherMailable::class);\n    }\n}\n</code></pre>\n  <p>Si estás haciendo colas de mailables para su entrega en segundo plano, deberías usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">assertQueued</span> en lugar de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">assertSent</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Mail::assertQueued(...);\nMail::assertNotQueued(...);\n</code></pre>\n  <h2>Fake de notificaciones</h2>\n  <p>Puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fake</span> de la clase facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Notification</span> para prevenir que se envíen las notificaciones. Después puedes comprobar qué notificaciones fueron enviadas a los usuarios e incluso inspeccionar los datos que recibieron. Al momento de usar fakes, las aserciones son hechas después de que el código bajo prueba es ejecutado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace Tests\\Feature;\nuse Tests\\TestCase;\nuse App\\Notifications\\OrderShipped;\nuse Illuminate\\Support\\Facades\\Notification;\nuse Illuminate\\Notifications\\AnonymousNotifiable;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Illuminate\\Foundation\\Testing\\WithoutMiddleware;\nclass ExampleTest extends TestCase\n{\n    public function testOrderShipping()\n    {\n        Notification::fake();\n        // Comprueba que no se enviaron notificaciones...\n        Notification::assertNothingSent();\n        // Perform order shipping...\n        Notification::assertSentTo(\n            \\$user,\n            OrderShipped::class,\n            function (\\$notification, \\$channels) use (\\$order) {\n                return \\$notification-&gt;order-&gt;id === \\$order-&gt;id;\n            }\n        );\n        // Comprueba que una notificación fue enviada a los usuarios dados...\n        Notification::assertSentTo(\n            [\\$user], OrderShipped::class\n        );\n        // Comprueba que una notificación no fue enviada...\n        Notification::assertNotSentTo(\n            [\\$user], AnotherNotification::class\n        );\n        // Comprueba que se envió una notificación mediante el método Notification::route ()...\n        Notification::assertSentTo(\n            new AnonymousNotifiable, OrderShipped::class\n        );\n    }\n}\n</code></pre>\n  <h2>Fake de colas</h2>\n  <p>Como alternativa a mocking, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fake</span> de la clase facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Queue</span> para prevenir que las tareas sean encoladas. Después puedes comprobar que tareas fueron agregadas a la cola e incluso inspeccionar los datos que recibieron. Al momento de usar fakes, las aserciones son hechas después de que el código bajo prueba es ejecutado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace Tests\\Feature;\nuse Tests\\TestCase;\nuse App\\Jobs\\ShipOrder;\nuse Illuminate\\Support\\Facades\\Queue;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Illuminate\\Foundation\\Testing\\WithoutMiddleware;\nclass ExampleTest extends TestCase\n{\n    public function testOrderShipping()\n    {\n        Queue::fake();\n        // Comprueba que no se agregaron trabajos...\n        Queue::assertNothingPushed();\n        // Perform order shipping...\n        Queue::assertPushed(ShipOrder::class, function (\\$job) use (\\$order) {\n            return \\$job-&gt;order-&gt;id === \\$order-&gt;id;\n        });\n        // Comprueba que un trabajo fue agregado a una cola dada...\n        Queue::assertPushedOn('queue-name', ShipOrder::class);\n        // Comprueba que un trabajo fue agregado dos veces...\n        Queue::assertPushed(ShipOrder::class, 2);\n        // Comprueba que un trabajo no fue agregado...\n        Queue::assertNotPushed(AnotherJob::class);\n        // Comprueba que un trabajo fue agregado con una cadena específica...\n        Queue::assertPushedWithChain(ShipOrder::class, [\n            AnotherJob::class,\n            FinalJob::class\n        ]);\n    }\n}\n</code></pre>\n  <h2>Fake de almacenamiento de archivos</h2>\n  <p>El método fake de la clase facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Storage</span> permite que generes fácilmente un disco falso que, combinado con las utilidades de generación de archivo de la clase\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">UploadedFile</span>, simplifica mucho la prueba de subidas de archivos. Por ejemplo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace Tests\\Feature;\nuse Tests\\TestCase;\nuse Illuminate\\Http\\UploadedFile;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Illuminate\\Foundation\\Testing\\WithoutMiddleware;\nclass ExampleTest extends TestCase\n{\n    public function testAlbumUpload()\n    {\n        Storage::fake('photos');\n        \\$response = \\$this-&gt;json('POST', '/photos', [\n            UploadedFile::fake()-&gt;image('photo1.jpg'),\n            UploadedFile::fake()-&gt;image('photo2.jpg')\n        ]);\n        // Comprueba que uno o más archivos fueron almacenados...\n        Storage::disk('photos')-&gt;assertExists('photo1.jpg');\n        Storage::disk('photos')-&gt;assertExists(['photo1.jpg', 'photo2.jpg']);\n        // Comprueba que uno o más archivos no fueron almacenados...\n        Storage::disk('photos')-&gt;assertMissing('missing.jpg');\n        Storage::disk('photos')-&gt;assertMissing(['missing.jpg', 'non-existing.jpg']);\n    }\n}\n</code></pre>\n  <p>TIP</p>\n  <p>De forma predeterminada, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">fake</span> borrará todos los archivos en su directorio temporal. Si prefieres mantener estos archivos, puedes usar en su lugar el método \"persistentFake\".\n  </p>\n  <h2>Las clases facade</h2>\n  <p>Diferente de las llamadas de métodos estáticos tradicionales, las clases facade pueden ser simuladas (mock). Esto proporciona una gran ventaja sobre los métodos estáticos tradicionales y te concede la misma capacidad de prueba que tendrías si estuvieras usando inyección de dependencias. Al momento de probar, con frecuencia puedes querer simular una llamada a una clase facade de Laravel en uno de tus controladores. Por ejemplo, considera la siguiente acción de controlador:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Support\\Facades\\Cache;\nclass UserController extends Controller\n{\n    /**\n    * Show a list of all users of the application.\n    *\n    * @return Response\n    */\n    public function index()\n    {\n        \\$value = Cache::get('key');\n        //\n    }\n}\n</code></pre>\n  <p>\n    Podemos simular (mock) la ejecución de la clase facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cache</span> usando el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">shouldReceive</span>, el cual devolverá una instancia mock de la clase Mockery . Ya que las clases facades realmente son resueltas y administradas por el contenedor de servicios de Laravel, tendrán mucho más capacidad de prueba que una clase estática típica. Por ejemplo, vamos a simular (mock) nuestra llamada al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span> de la clase facade\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cache</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace Tests\\Feature;\nuse Tests\\TestCase;\nuse Illuminate\\Support\\Facades\\Cache;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Illuminate\\Foundation\\Testing\\WithoutMiddleware;\nclass UserControllerTest extends TestCase\n{\n    public function testGetIndex()\n    {\n        Cache::shouldReceive('get')\n                    -&gt;once()\n                    -&gt;with('key')\n                    -&gt;andReturn('value');\n        \\$response = \\$this-&gt;get('/users');\n        // ...\n    }\n}\n</code></pre>\n  <p>Nota</p>\n  <p>No deberías hacer mock a la clase facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Request</span>. En lugar de eso, pasa la entrada que deseas dentro de los métodos helper HTTP tales como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">post</span> al momento de ejecutar tus pruebas. Del mismo modo, en lugar de simular (mock) la clase facade\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Config</span>, ejecuta el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Config::set</span> en tus pruebas.</p>\n</div>"
      }
    ]
  },
  {
    "titulo": "10.- Paquetes oficiales",
    "subtitulo": "",
    "items": [
      {
        "titulo": "Laravel Cashier",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Laravel Cashier</h1>\n  <ul>\n    <li>Introducción</li>\n    <li>Actualizando cashier</li>\n    <li>Instalación</li>\n    <li>\n      Configuración\n      <ul>\n        <li>Migraciones de base de datos</li>\n        <li>Modelo Billable</li>\n        <li>API Keys</li>\n        <li>Configuración de moneda</li>\n        <li>Webhooks</li>\n      </ul>\n    </li>\n    <li>\n      Suscripciones\n      <ul>\n        <li>Creando suscripciones</li>\n        <li>Verificando el estado de suscripción</li>\n        <li>Cambiando planes</li>\n        <li>Cantidad de suscripción</li>\n        <li>Impuestos de suscripción</li>\n        <li>Fecha de anclaje de suscripción</li>\n        <li>Cancelando suscripciones</li>\n        <li>Reanudando suscripciones</li>\n      </ul>\n    </li>\n    <li>\n      Periodos de prueba de suscripción\n      <ul>\n        <li>Con tarjeta de crédito</li>\n        <li>Sin tarjeta de crédito</li>\n      </ul>\n    </li>\n    <li>\n      Clientes\n      <ul>\n        <li>Creando clientes</li>\n      </ul>\n    </li>\n    <li>\n      Tarjetas\n      <ul>\n        <li>Retornando tarjetas de crédito</li>\n        <li>Determinando si una tarjeta está en el archivo</li>\n        <li>Actualizando tarjetas de crédito</li>\n        <li>Eliminando tarjetas de crédito</li>\n      </ul>\n    </li>\n    <li>\n      Manejando webhooks de Stripe\n      <ul>\n        <li>Definiendo manejadores de eventos de webhooks</li>\n        <li>Suscripciones fallidas</li>\n        <li>Verificando las firmas del webhook</li>\n      </ul>\n    </li>\n    <li>\n      Cargos únicos\n      <ul>\n        <li>Carga simple</li>\n        <li>Carga con factura</li>\n        <li>Reembolsar cargos</li>\n      </ul>\n    </li>\n    <li>\n      Facturas\n      <ul>\n        <li>Generando PDFs de facturas</li>\n      </ul>\n    </li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>\n    Laravel Cashier proporciona una expresiva interfaz fluida para los servicios de pagos en línea por suscripción de Stripe\n    <outboundlink></outboundlink>\n    . Maneja casi todo el código de facturación de suscripción que estás teniendo pavor de escribir. Además de la gestión de suscripción, Cashier puede manejar cupones, cambio de suscripciones, \"cantidades\" de suscripción, cancelación de períodos de gracia e incluso generar PDFs de facturas.\n  </p>\n  <p>Nota</p>\n  <p>Si solamente estás trabajando con cargos de \"un pago-único\" y no ofreces subscripciones, no deberías usar Cashier. En lugar de eso, usa directamente los SDKs de Stripe.</p>\n  <h2>Actualizando cashier</h2>\n  <p>\n    Al actualizar a una nueva versión mayor de Cashier, es importante que revises cuidadosamente la guía de actualización .\n  </p>\n  <h2>Instalación</h2>\n  <p>Primero, instala el paquete de Cashier para Stripe Con Composer:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>composer require laravel/cashier\n</code></pre>\n  <h2>Configuración</h2>\n  <h3>Migraciones de bases de datos</h3>\n  <p>Antes de usar Cashier, también necesitaremos preparar la base de datos. Necesitas agregar varias columnas a tu tabla <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">users</span> y crear una nueva tabla <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">subscriptions</span> para manejar todas las subscripciones de nuestros clientes:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Schema::table('users', function (Blueprint \\$table) {\n    \\$table-&gt;string('stripe_id')-&gt;nullable()-&gt;collation('utf8mb4_bin');\n    \\$table-&gt;string('card_brand')-&gt;nullable();\n    \\$table-&gt;string('card_last_four', 4)-&gt;nullable();\n    \\$table-&gt;timestamp('trial_ends_at')-&gt;nullable();\n});\nSchema::create('subscriptions', function (Blueprint \\$table) {\n    \\$table-&gt;bigIncrements('id');\n    \\$table-&gt;unsignedBigInteger('user_id');\n    \\$table-&gt;string('name');\n    \\$table-&gt;string('stripe_id')-&gt;collation('utf8mb4_bin');\n    \\$table-&gt;string('stripe_plan');\n    \\$table-&gt;integer('quantity');\n    \\$table-&gt;timestamp('trial_ends_at')-&gt;nullable();\n    \\$table-&gt;timestamp('ends_at')-&gt;nullable();\n    \\$table-&gt;timestamps();\n});\n</code></pre>\n  <p>Una vez que las migraciones han sido creadas, ejecuta el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">migrate</span>.\n  </p>\n  <h4>Modelo Billable</h4>\n  <p>A continuación, agrega el trait <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Billable</span> a tu definición de modelo. Este trait proporciona varios métodos para permitirte realizar tareas comunes de facturación, tales como creación de subscripciones, aplicación de cupones y actualización de la información de la tarjeta de crédito:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Laravel\\Cashier\\Billable;\nclass User extends Authenticatable\n{\n    use Billable;\n}\n</code></pre>\n  <h3>Claves de API</h3>\n  <p>Finalmente, deberías configurar tu clave de Stripe en tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">services.php</span>. Puedes obtener tus claves de API de Stripe desde el panel de control de Stripe:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'stripe' =&gt; [\n    'model' =&gt; App\\User::class,\n    'key' =&gt; env('STRIPE_KEY'),\n    'secret' =&gt; env('STRIPE_SECRET'),\n    'webhook' =&gt; [\n        'secret' =&gt; env('STRIPE_WEBHOOK_SECRET'),\n        'tolerance' =&gt; env('STRIPE_WEBHOOK_TOLERANCE', 300),\n    ],\n],\n</code></pre>\n  <h3>Configuración de moneda</h3>\n  <p>La moneda predeterminada de Cashier es Dólares estadounidenses (USD). Puedes cambiar la moneda predeterminada al ejecutar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cashier::useCurrency</span> dentro del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span> de uno de tus proveedores de servicio. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Cashier::useCurrency</span> acepta dos parámetros de cadena: la moneda y el símbolo de la moneda:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Laravel\\Cashier\\Cashier;\nCashier::useCurrency('eur', '€');\n</code></pre>\n  <h3>Webhooks</h3>\n  <p>Para asegurarte de que Cashier maneja apropiadamente todos los eventos de Stripe, recomendamos profundamente configurar el manejador de webhook de Cashier.</p>\n  <h2>Subscripciones</h2>\n  <h3>Creando suscripciones</h3>\n  <p>Para crear una suscripción, primero obtén una instancia de tu modelo facturable, el cual será típicamente una instancia de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\User</span>. Una vez que has obtenido la instancia de modelo, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">newSubscription</span> para crear la suscripción del modelo:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = User::find(1);\n\\$user-&gt;newSubscription('main', 'premium')-&gt;create(\\$token);\n</code></pre>\n  <p>El primer argumento pasado al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">newSubscription</span> debería ser el nombre de la suscripción. Si tu aplicación sólo ofrece una única suscripción, puedes llamarla\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">main</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">primary</span>. El segundo argumento es el plan específico al que el usuario se está suscribiendo. Este valor debería corresponder al identificador del plan en Stripe.\n  </p>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span> el cual acepta una tarjeta de crédito / token source de Stripe, comenzará la suscripción al igual que actualizará tu base de datos con el ID del cliente y otra información de facturación relevante.</p>\n  <h4>Detalles de usuario adicionales</h4>\n  <p>Si prefieres especificar detalles de cliente adicionales, puedes hacerlo pasándolos como segundo argumento del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">create</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user-&gt;newSubscription('main', 'monthly')-&gt;create(\\$token, [\n    'email' =&gt; \\$email,\n]);\n</code></pre>\n  <p>\n    Para aprender más sobre los campos adicionales soportados por Stripe, revisa la documentación sobre la creación de clientes .\n  </p>\n  <h4>Cupones</h4>\n  <p>Si prefieres aplicar un cupón al momento de crear la suscripción, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withCoupon</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user-&gt;newSubscription('main', 'monthly')\n        -&gt;withCoupon('span')\n        -&gt;create(\\$token);\n</code></pre>\n  <h3>Verificando el estado de la suscripción</h3>\n  <p>Una vez que un usuario está suscrito a tu aplicación, puedes verificar fácilmente su estado de suscripción usando una variedad conveniente de métodos. Primero, el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">subscribed</span> devuelve <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span> si el usuario tiene una suscripción activa, incluso si la suscripción está actualmente en su período de prueba:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>if (\\$user-&gt;subscribed('main')) {\n    //\n}\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">subscribed</span> también constituye un gran candidato para un middleware de ruta, permitiéndote filtrar el acceso a rutas y controladores basados en el estado de suscripción:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>public function handle(\\$request, Closure \\$next)\n{\n    if (\\$request-&gt;user() &amp;&amp; ! \\$request-&gt;user()-&gt;subscribed('main')) {\n        // This user is not a paying customer...\n        return redirect('billing');\n    }\n    return \\$next(\\$request);\n}\n</code></pre>\n  <p>Si prefieres determinar si un usuario está aún dentro de su período de prueba, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">onTrial</span>. Este método puede ser útil para mostrar una advertencia al usuario que todavía está en su período de prueba:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>if (\\$user-&gt;subscription('main')-&gt;onTrial()) {\n    //\n}\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">subscribedToPlan</span> puede ser usado para determinar si el usuario está suscrito a un plan dado basado en un ID de plan Stripe proporcionado. En este ejemplo, determinaremos si la suscripción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">main</span> del usuario está activa para al plan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">monthly</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>if (\\$user-&gt;subscribedToPlan('monthly', 'main')) {\n    //\n}\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">recurring</span> puede ser usado para determinar si el usuario está actualmente suscrito y ya no está dentro de su periodo de prueba:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>if (\\$user-&gt;subscription('main')-&gt;recurring()) {\n    //\n}\n</code></pre>\n  <h4>Estado de suscripción cancelada</h4>\n  <p>Para determinar si el usuario fue alguna vez un suscriptor activo, pero que ha cancelado su suscripción, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cancelled</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>if (\\$user-&gt;subscription('main')-&gt;cancelled()) {\n    //\n}\n</code></pre>\n  <p>También puedes determinar si un usuario ha cancelado su suscripción, pero todavía está en su \"período de gracia\" hasta que la suscripción caduque totalmente. Por ejemplo, si un usuario cancela una suscripción el 5 de Marzo que fue planificada para expirar originalmente el 10 de Marzo, el usuario está en su \"período de gracia\" hasta el 10 de Marzo. Nota que el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">subscribed</span> aún devuelve <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span> durante esta tiempo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>if (\\$user-&gt;subscription('main')-&gt;onGracePeriod()) {\n    //\n}\n</code></pre>\n  <p>Para determinar si el usuario que ha cancelado su suscripción ya no está dentro del \"periodo de gracia\", puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ended</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>if (\\$user-&gt;subscription('main')-&gt;ended()) {\n    //\n}\n</code></pre>\n  <h3>Cambiando planes</h3>\n  <p>Después que un usuario esté suscrito en tu aplicación, ocasionalmente puede querer cambiar a un nuevo plan de suscripción. Para cambiar un usuario a una nueva suscripción, pasa el identificador de plan al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">swap</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = App\\User::find(1);\n\\$user-&gt;subscription('main')-&gt;swap('provider-plan-id');\n</code></pre>\n  <p>Si el usuario está en período de prueba, se mantendrá el período de prueba. También, si una \"cantidad\" existe para la suscripción esa cantidad también será conservada.</p>\n  <p>Si prefieres cambiar planes y cancelar cualquier período de prueba en donde esté el usuario actualmente, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">skipTrial</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user-&gt;subscription('main')\n        -&gt;skipTrial()\n        -&gt;swap('provider-plan-id');\n</code></pre>\n  <h3>Cantidad de la suscripción</h3>\n  <p>Algunas veces las suscripciones son afectadas por la \"cantidad\". Por ejemplo, tu aplicación podría cargar 10\\$ por mes <strong>por usuario</strong> en una cuenta. Para incrementar o disminuir fácilmente tu cantidad de suscripción, usa los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">incrementQuantity</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">decrementQuantity</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = User::find(1);\n\\$user-&gt;subscription('main')-&gt;incrementQuantity();\n// Add five to the subscription's current quantity...\n\\$user-&gt;subscription('main')-&gt;incrementQuantity(5);\n\\$user-&gt;subscription('main')-&gt;decrementQuantity();\n// Subtract five to the subscription's current quantity...\n\\$user-&gt;subscription('main')-&gt;decrementQuantity(5);\n</code></pre>\n  <p>Alternativamente, puedes establecer una cantidad específica usando el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updateQuantity</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user-&gt;subscription('main')-&gt;updateQuantity(10);\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">noProrate</span> puede ser usado para actualizar la cantidad de la suscripción sin proratear los cargos:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user-&gt;subscription('main')-&gt;noProrate()-&gt;updateQuantity(10);\n</code></pre>\n  <p>\n    Para más información sobre cantidades de suscripción, consulta la documentación de Stripe .\n  </p>\n  <h3>Impuestos de suscripción</h3>\n  <p>Para especificar el porcentaje de impuesto que un usuario paga en una suscrípción, implementa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">taxPercentage</span> en tu modelo facturable y devuelve un valor numérico entre 0 y 100, sin más de 2 posiciones decimales.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>public function taxPercentage()\n{\n    return 20;\n}\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">taxPercentage</span> le permite aplicar una tasa de impuesto modelo por modelo, lo que puede ser útil para una base de usuarios que abarca varios países y tasas de impuestos.\n  </p>\n  <p>Nota</p>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">taxPercentage</span> solamente aplica para cargos por suscripción. Si usas Cashier para hacer cargos de \"pago único\", necesitarás especificar manualmente la tasa de impuesto en ese momento.</p>\n  <h4>Sincronizando los porcentajes del impuesto</h4>\n  <p>Al cambiar el valor retornado por el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">taxPercentage</span>, las configuraciones de impuesto en cualquier suscripción existente del usuario permanecerán igual. Si deseas actualizar el valor del impuesto para un suscripción existente con el valor <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">taxPercentage</span> retornado, debes llamar al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">syncTaxPercentage</span> en la instancia de suscripción del usuario:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user-&gt;subscription('main')-&gt;syncTaxPercentage();\n</code></pre>\n  <h3>Fecha de anclaje de la suscripción</h3>\n  <p>Nota</p>\n  <p>Modificar la fecha de suscripción sólo es soportado por la versión de Stripe de Cashier.</p>\n  <p>Por defecto, el anclaje del ciclo de facturación es la fecha en que se creó la suscripción o, si se usa un período de prueba, la fecha en que finaliza la prueba. Si deseas modificar la fecha de anclaje de facturación, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">anchorBillingCycleOn</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use App\\User;\nuse Carbon\\Carbon;\n\\$user = User::find(1);\n\\$anchor = Carbon::parse('first day of next month');\n\\$user-&gt;newSubscription('main', 'premium')\n            -&gt;anchorBillingCycleOn(\\$anchor-&gt;startOfDay())\n            -&gt;create(\\$token);\n</code></pre>\n  <p>\n    Para más información sobre administrar ciclos de facturación, consulta la documentación del ciclo de facturación de Stripe\n  </p>\n  <h3>Cancelando suscripciones</h3>\n  <p>Para cancelar una suscripción, ejecuta el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cancel</span> en la suscripción del usuario:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user-&gt;subscription('main')-&gt;cancel();\n</code></pre>\n  <p>Cuando una suscripción es cancelada, Cashier establecerá automáticamente la columna\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ends_at</span> en tu base de datos. Esta columna es usada para conocer cuando el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">subscribed</span> debería empezar, devolviendo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>. Por ejemplo, si un cliente cancela una suscripción el primero de Marzo, pero la suscripción no estaba planificada para finalizar sino para el 5 de Marzo, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">subscribed</span> continuará devolviendo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span> hasta el 5 de Marzo.</p>\n  <p>Puedes determinar si un usuario ha cancelado su suscripción pero aún está en su \"período de gracia\" usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">onGracePeriod</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>if (\\$user-&gt;subscription('main')-&gt;onGracePeriod()) {\n    //\n}\n</code></pre>\n  <p>Si deseas cancelar una suscripción inmediatamente, ejecuta el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cancelNow</span> en la suscripción del usuario:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user-&gt;subscription('main')-&gt;cancelNow();\n</code></pre>\n  <h3>Reanudando suscripciones</h3>\n  <p>Si un usuario ha cancelado su suscripción y deseas reanudarla, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resume</span>. El usuario <strong>debe</strong> estár aún en su período de gracia con el propósito de reanudar una suscripción:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user-&gt;subscription('main')-&gt;resume();\n</code></pre>\n  <p>Si el usuario cancela una suscripción y después reanuda esa suscripción antes que la suscripción haya expirado completamente, no será facturada inmediatamente. En lugar de eso, su suscripción será reactivada y será facturada en el ciclo de facturación original.</p>\n  <h2>Períodos de prueba de suscripción</h2>\n  <h3>Con información anticipada de la tarjeta de crédito</h3>\n  <p>Si prefieres ofrecer períodos de prueba a tus clientes mientras continuas coleccionando información anticipada del método de pago, deberías usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">trialDays</span> al momento de crear tus suscripciones:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = User::find(1);\n\\$user-&gt;newSubscription('main', 'monthly')\n            -&gt;trialDays(10)\n            -&gt;create(\\$token);\n</code></pre>\n  <p>Este método establecerá la fecha de finalización del período de prueba del registro de suscripción dentro de la base de datos, al igual que le indicará a Stripe a no empezar a facturar al cliente hasta después de esta fecha. Al usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">trialDays</span>, Cashier sobrescribirá cualquier periodo de prueba por defecto configurado para el plan en Stripe.\n  </p>\n  <p>Nota</p>\n  <p>Si la suscripción del cliente no es cancelada antes de la fecha de finalización del período de prueba, será cargada tan pronto como expire el período de prueba, así que deberías asegurarte de notificar a tus usuarios de la fecha de finalización de su período de prueba.</p>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">trialUntil</span> te permite proporcionar una instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DateTime</span> para especificar cuando el periodo de prueba debería terminar:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Carbon\\Carbon;\n\\$user-&gt;newSubscription('main', 'monthly')\n            -&gt;trialUntil(Carbon::now()-&gt;addDays(10))\n            -&gt;create(\\$token);\n</code></pre>\n  <p>Puedes determinar si el usuario está dentro de su período de prueba utilizando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">onTrial</span> de la instancia del usuario o el método<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">onTrial</span> de la instancia de suscripción. Los dos ejemplos que siguen son idénticos:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>if (\\$user-&gt;onTrial('main')) {\n    //\n}\nif (\\$user-&gt;subscription('main')-&gt;onTrial()) {\n    //\n}\n</code></pre>\n  <h3>Sin información anticipada de la tarjeta de crédito</h3>\n  <p>Si prefieres ofrecer períodos de prueba sin coleccionar la información anticipada del método de pago del usuario, puedes establecer la columna <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">trial_ends_at</span> del registro del usuario con la fecha de finalización del período de prueba deseado. Esto es hecho típicamente durante el registro del usuario:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = User::create([\n    // Populate other user properties...\n    'trial_ends_at' =&gt; now()-&gt;addDays(10),\n]);\n</code></pre>\n  <p>Nota</p>\n  <p>Asegúrate de agregar un mutador de fecha para <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">trial_ends_at</span> en tu definición de modelo.\n  </p>\n  <p>Cashier se refiere a este tipo de período de prueba como un \"período de prueba genérico\", debido a que no está conectado a ninguna suscripción existente. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">onTrial</span> en la instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">User</span> devolverá <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span> si la fecha actual no es mayor al valor de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">trial_ends_at</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>if (\\$user-&gt;onTrial()) {\n    // User is within their trial period...\n}\n</code></pre>\n  <p>También puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">onGenericTrial</span> si deseas conocer específicamente que el usuario está dentro de su período de prueba \"genérico\" y no ha creado una suscripción real todavía:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>if (\\$user-&gt;onGenericTrial()) {\n    // User is within their \"generic\" trial period...\n}\n</code></pre>\n  <p>Una vez que estés listo para crear una suscripción real para el usuario, puedes usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">newSubscription</span> como es usual:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = User::find(1);\n\\$user-&gt;newSubscription('main', 'monthly')-&gt;create(\\$token);\n</code></pre>\n  <h2>Clientes</h2>\n  <h3>Creando clientes</h3>\n  <p>Ocasionalmente, puedes desear crear un cliente de Stripe sin iniciar una suscripción. Puedes lograr esto usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">createAsStripeCustomer</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user-&gt;createAsStripeCustomer();\n</code></pre>\n  <p>Una vez el cliente ha sido creado en Stripe, puedes iniciar una suscripción en una fecha posterior.\n  </p>\n  <h2>Tarjetas</h2>\n  <h3>Recuperando tarjetas de crédito</h3>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">card</span> en la instancia del modelo facturable retorna una colección de instancias <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Laravel\\Cashier\\Card</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$cards = \\$user-&gt;cards();\n</code></pre>\n  <p>Para recuperar la tarjeta por defecto, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">defaultCard</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$card = \\$user-&gt;defaultCard();\n</code></pre>\n  <h3>Determinando si una tarjeta está en el archivo</h3>\n  <p>Puedes comprobar si un cliente tiene una tarjeta de credito agregada a su cuenta usando el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hasCardOnFile</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>if (\\$user-&gt;hasCardOnFile()) {\n    //\n}\n</code></pre>\n  <h3>Actualizando tarjetas de crédito</h3>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updateCard</span> puede ser usado para actualizar la información de tarjeta de crédito de un cliente. Este método acepta un token de Stripe y asignará la nueva tarjeta de crédito como el método de pago por defecto:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user-&gt;updateCard(\\$token);\n</code></pre>\n  <p>Para sincronizar tu información de tarjeta con la información de la tarjeta por defecto del cliente en Stripe, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updateCardFromStripe</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user-&gt;updateCardFromStripe();\n</code></pre>\n  <h3>Eliminando tarjetas de crédito</h3>\n  <p>Para eliminar una tarjeta, debes primero recuperar las tarjetas del cliente con el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cards</span>. Luego, puedes llamar al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">delete</span> en la instancia de la tarjeta que deseas eliminar:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>foreach (\\$user-&gt;cards() as \\$card) {\n    \\$card-&gt;delete();\n}\n</code></pre>\n  <p>Nota</p>\n  <p>Si eliminas la tarjeta por defecto, por favor asegurate de que sincronizas la nueva tarjeta por defecto con tu base de datos usando método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updateCardFromStripe</span>.</p>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">deleteCards</span> eliminará toda la información de la tarjeta almacenada por tu aplicación:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user-&gt;deleteCards();\n</code></pre>\n  <p>Nota</p>\n  <p>Si el usuario tiene una suscripción activa, debes considerar evitar que eliminen la última forma de pago restante.</p>\n  <h2>Manejando webhooks de Stripe</h2>\n  <p>Stripe puede notificar tu aplicación de una variedad de eventos por medio de Webhooks. Para manejar webhooks, define una ruta que apunte al controlador de webhook de Cashier. Este controlador manejará todas las solicitudes de webhook entrantes y despacharlos al método de controlador apropiado.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Route::post(\n    'stripe/webhook',\n    '\\Laravel\\Cashier\\Http\\Controllers\\WebhookController@handleWebhook'\n);\n</code></pre>\n  <p>Nota</p>\n  <p>Una vez que hayas resgistrado tu ruta, asegúrate de configurar la URL de webhook en tus opciones de configuración de panel de control de Stripe.</p>\n  <p>De forma predeterminada, este controlador manejará automáticamente la cancelación de suscripciones que tengan demasiados cargos fallidos (como sean definidos por tus opciones de configuración de Stripe), actualizaciones de clientes, eliminaciones de clientes, actualizaciones de suscripciones y cambios de tarjetas de crédito; sin embargo, como vamos a descubrir pronto, puedes extender este controlador para manejar cualquier evento de webhook que quieras.\n  </p>\n  <p>Nota</p>\n  <p>Asegurate de proteger las peticiones entrantes con el middleware [webhook de verificación de firma][/billing.html#verifying-webhook-signatures] incluido en Cashier.</p>\n  <h4>Webhooks &amp; Protección CSRF</h4>\n  <p>Ya que los webhooks de Stripe necesitan pasar por alto la protección CSRF de Laravel, asegurate de listar la URI como una excepción en tu middleware <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">VerifyCsrfToken</span> o lista la ruta fuera del grupo de middleware <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">web</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>protected \\$except = [\n    'stripe/*',\n];\n</code></pre>\n  <h3>Definiendo manejadores de eventos de webhooks</h3>\n  <p>Cashier maneja automáticamente la cancelación de suscripción por cargos fallidos, pero si tienes eventos de webhook adicionales que te gustaría manejar, extiende el controlador de Webhook. Tus nombres de métodos deberían corresponder con la convención esperada por Cashier, específicamente, los métodos deberían tener como prefijo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">handle</span> y el nombre \"camel case\" del webhook que deseas manejar. Por ejemplo, si deseas manejar el webhook <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">invoice.payment_succeeded</span>, deberías agregar un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">handleInvoicePaymentSucceeded</span> al controlador:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse Laravel\\Cashier\\Http\\Controllers\\WebhookController as CashierController;\nclass WebhookController extends CashierController\n{\n    /**\n    * Handle invoice payment succeeded.\n    *\n    * @param  array  \\$payload\n    * @return \\Symfony\\Component\\HttpFoundation\\Response\n    */\n    public function handleInvoicePaymentSucceeded(\\$payload)\n    {\n        // Handle The Event\n    }\n}\n</code></pre>\n  <p>Luego, define una ruta a tu controlador de Cashier dentro de tu archivo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">routes/web.php</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Route::post(\n    'stripe/webhook',\n    '\\App\\Http\\Controllers\\WebhookController@handleWebhook'\n);\n</code></pre>\n  <h3>Suscripciones fallidas</h3>\n  <p>¿Qué sucedería si una tarjeta de crédito expira? No importa - Cashier incluye un controlador de Webhook que puede cancelar fácilmente la suscripción del cliente por ti. Como notaste antes, todo lo que necesitas hacer es apuntar una ruta al controlador:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Route::post(\n    'stripe/webhook',\n    '\\Laravel\\Cashier\\Http\\Controllers\\WebhookController@handleWebhook'\n);\n</code></pre>\n  <p>¡Y eso es todo! Los pagos fallidos serán capturados y manejados por el controlador. El controlador cancelará la suscripción del cliente cuando Stripe determina que la suscripción ha fallado (normalmente después de tres intentos de pagos fallidos).</p>\n  <h3>Verificando las firmas de los webhooks</h3>\n  <p>\n    Para asegurar tus webhooks, puedes usar las firmas de webhook de Stripe . Por conveniencia, Cashier automáticamente incluye un middleware que verifica si la petición del webhook de Stripe entrante es válida.\n  </p>\n  <p>Para habilitar la verificación de webhook, asegurate de que el valor de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">stripe.webhook.secret</span> está establecido en tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">services</span>. El valor\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">secret</span> del webhook puede ser retornado desde el dashboard de tu cuenta de Stripe.\n  </p>\n  <h2>Cargos únicos</h2>\n  <h3>Cargo simple</h3>\n  <p>Nota</p>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">charge</span> acepta la cantidad que prefieras cargar en el <strong>denominador\n    más bajo de la moneda usada por tu aplicación</strong>.</p>\n  <p>Si desea realizar un \"cargo único\" en la tarjeta de crédito de un cliente suscrito, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">charge</span> en una instancia de modelo facturable.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Stripe Accepts Charges In Cents...\n\\$stripeCharge = \\$user-&gt;charge(100);\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">charge</span> acepta un arreglo como segundo argumento, permitiendo que pases algunas opciones que desees para la creación de cargo de Stripe subyacente. Consulte la documentación de Stripe sobre las opciones disponibles al crear cargos:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user-&gt;charge(100, [\n    'custom_option' =&gt; \\$value,\n]);\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">charge</span> arrojará una excepción si el cargo falla. Si el cargo es exitoso, la respuesta completa de Stripe será devuelta por el método:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>try {\n    \\$response = \\$user-&gt;charge(100);\n} catch (Exception \\$e) {\n    //\n}\n</code></pre>\n  <h3>Cargo con factura</h3>\n  <p>Algunas veces puedes necesitar hacer un cargo único pero también generar una factura por el cargo de modo que puedas ofrecer un recibo PDF a tu cliente. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">invoiceFor</span> permite que hagas justamente eso. Por ejemplo, vamos a facturar al cliente \\$5.00 por una \"cuota única\":\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Stripe Accepts Charges In Cents...\n\\$user-&gt;invoiceFor('One Time Fee', 500);\n</code></pre>\n  <p>La factura será cargada inmediatamente contra la tarjeta de crédito del usuario. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">invoiceFor</span> también acepta un arreglo como su tercer argumento. Este arreglo contiene las opciones de facturación para el elemento de la factura. El cuarto argumento aceptado por el método es también un arreglo. Este argumento final acepta las opciones de facturación de la factura en sí:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user-&gt;invoiceFor('Stickers', 500, [\n    'quantity' =&gt; 50,\n], [\n    'tax_percent' =&gt; 21,\n]);\n</code></pre>\n  <p>Nota</p>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">invoiceFor</span> creará una factura de Stripe la cual reintentará intentos de facturación fallidos. Si no quieres que las facturas reintenten cargos fallidos, necesitarás cerrarlas usando la API de Stripe después del primer cargo fallido.</p>\n  <h3>Reembolsando cargos</h3>\n  <p>Si necesitas reembolsar un cargo de Stripe, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">refund</span>. Este método acepta el id del cargo de Stripe como su único argumento:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$stripeCharge = \\$user-&gt;charge(100);\n\\$user-&gt;refund(\\$stripeCharge-&gt;id);\n</code></pre>\n  <h2>Facturas</h2>\n  <p>Puedes obtener fácilmente un arreglo de facturas de modelo facturables usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">invoices</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$invoices = \\$user-&gt;invoices();\n// Include pending invoices in the results...\n\\$invoices = \\$user-&gt;invoicesIncludingPending();\n</code></pre>\n  <p>Al momento de listar las facturas para el cliente, puedes usar los métodos helper de factura para mostrar la información de factura relevante. Por ejemplo, puedes querer listar todas las facturas en una tabla, permitiendo que el usuario descargue fácilmente algunas de ellas:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;table&gt;\n    @foreach (\\$invoices as \\$invoice)\n        &lt;tr&gt;\n            &lt;td&gt;{{ \\$invoice-&gt;date()-&gt;toFormattedDateString() }}&lt;/td&gt;\n            &lt;td&gt;{{ \\$invoice-&gt;total() }}&lt;/td&gt;\n            &lt;td&gt;&lt;a href=\"/user/invoice/{{ \\$invoice-&gt;id }}\"&gt;Download&lt;/a&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n    @endforeach\n&lt;/table&gt;\n</code></pre>\n  <h3>Generando PDFs de facturas</h3>\n  <p>Dentro de una ruta o controlador, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">downloadInvoice</span> para generar una descarga en PDF de la factura. Este método generará automáticamente la respuesta HTTP apropiada para enviar la descarga al navegador:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Illuminate\\Http\\Request;\nRoute::get('user/invoice/{invoice}', function (Request \\$request, \\$invoiceId) {\n    return \\$request-&gt;user()-&gt;downloadInvoice(\\$invoiceId, [\n        'vendor'  =&gt; 'Your Company',\n        'product' =&gt; 'Your Product',\n    ]);\n});\n</code></pre>\n</div>"
      },
      {
        "titulo": "Laravel Dusk",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Laravel Dusk</h1>\n  <ul>\n    <li>Introducción</li>\n    <li>\n      Instalación\n      <ul>\n        <li>Administrando las instalaciones de ChromeDriver</li>\n        <li>Usando otros navegadores</li>\n      </ul>\n    </li>\n    <li>\n      Primeros pasos\n      <ul>\n        <li>Generando pruebas</li>\n        <li>Ejecutar pruebas</li>\n        <li>Manejo de entorno</li>\n        <li>Creando navegadores</li>\n        <li>Macros de navegador</li>\n        <li>Autenticación</li>\n        <li>Migraciones de base de datos</li>\n      </ul>\n    </li>\n    <li>\n      Interactuando con elementos\n      <ul>\n        <li>Selectores de Dusk</li>\n        <li>Haciendo clic en enlaces</li>\n        <li>Texto, valores y atributos</li>\n        <li>Usando formularios</li>\n        <li>Adjuntando archivos</li>\n        <li>Usando el teclado</li>\n        <li>Usando el ratón</li>\n        <li>Diálogos de JavaScript</li>\n        <li>Alcance de selectores</li>\n        <li>Esperando por elementos</li>\n        <li>Haciendo aserciones de Vue</li>\n      </ul>\n    </li>\n    <li>Aserciones disponibles</li>\n    <li>\n      Páginas\n      <ul>\n        <li>Generando páginas</li>\n        <li>Configurando páginas</li>\n        <li>Visitando páginas</li>\n        <li>Selectores abreviados</li>\n        <li>Métodos de página</li>\n      </ul>\n    </li>\n    <li>\n      Componentes\n      <ul>\n        <li>Generando componentes</li>\n        <li>Usando componentes</li>\n      </ul>\n    </li>\n    <li>\n      Integración continua\n      <ul>\n        <li>CircleCI</li>\n        <li>spanship</li>\n        <li>Heroku CI</li>\n        <li>Travis CI</li>\n      </ul>\n    </li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>\n    Laravel Dusk proporciona una API de automatización y prueba para navegador expresiva y fácil de usar. De forma predeterminada, Dusk no requiere que instales JDK o Selenium en tu computador. En su lugar, Dusk usa una instalación de ChromeDriver\n    <outboundlink></outboundlink>\n    independiente. Sin embargo, siéntete libre de utilizar cualquier otro driver compatible con Selenium que desees.\n  </p>\n  <h2>Instalación</h2>\n  <p>Para empezar, debes agregar la dependencia de Composer <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">laravel/dusk</span> a tu proyecto:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>composer require --dev laravel/dusk\n</code></pre>\n  <p>Nota</p>\n  <p>Si estás registrando manualmente el proveedor de servicio de Dusk, <strong>nunca</strong> deberías registrarlo en tu entorno de producción, ya que hacerlo así podría conducir a que usuarios arbitrarios sean capaces de autenticarse en tu aplicación.</p>\n  <p>Después de la instalación del paquete Dusk, ejecuta el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk:install</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan dusk:install\n</code></pre>\n  <p>Un directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Browser</span> será creado dentro de tu directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tests</span> y contendrá una prueba de ejemplo. Seguido, establece la variable de entorno <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">APP_URL</span> en tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span>. Este valor debería coincidir con la URL que uses para acceder a tu aplicación en un navegador.</p>\n  <p>Para ejecutar tus pruebas, usa el comando de Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk</span>. El comando\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk</span> acepta cualquier argumento que también sea aceptado por el comando\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">phpunit</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan dusk\n</code></pre>\n  <p>Si tuviste fallos en las pruebas la última vez que se ejecutó el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk</span>, puedes ahorrar tiempo volviendo a ejecutar las pruebas fallidas usando el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk:\n  fail</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan dusk:fails\n</code></pre>\n  <h3>Administrando las instalaciones de ChromeDriver</h3>\n  <p>Si te gustaria instalar una versión diferente de ChromeDriver a la incluida con Laravel Dusk, puedes usar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk:chrome-driver</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code># Install the latest version of ChromeDriver for your OS...\nphp artisan dusk:chrome-driver\n# Install a given version of ChromeDriver for your OS...\nphp artisan dusk:chrome-driver 74\n# Install a given version of ChromeDriver for all supported OSs...\nphp artisan dusk:chrome-driver --all\n</code></pre>\n  <p>Nota</p>\n  <p>Dusk requiere que los binarios de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">chromedriver</span> sean ejecutables. Si tienes problemas para ejecutar Dusk, asegurate de que los binarios sean ejecutables con el siguiente comando:\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">chmod -R 0755 vendor/laravel/dusk/bin/</span>.</p>\n  <h3>Usando otros navegadores</h3>\n  <p>\n    De forma predeterminada, Dusk usa Google Chrome y una instalación de ChromeDriver independiente para ejecutar tus pruebas de navegador. Sin embargo, puedes iniciar tu propio servidor Selenium y ejecutar tus pruebas en cualquier navegador que desees.\n  </p>\n  <p>Para empezar, abre tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tests/DuskTestCase.php</span>, el cual es el caso de prueba de Dusk básico para tu aplicación. Dentro de este archivo, puedes remover la ejecución del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">startChromeDriver</span>. Esto evitará que Dusk inicie automáticamente ChromeDriver:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Prepare for Dusk test execution.\n*\n* @beforeClass\n* @return void\n*/\npublic static function prepare()\n{\n    // static::startChromeDriver();\n}\n</code></pre>\n  <p>Luego de esto, puedes modificar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">driver</span> para conectar a la URL y puerto de tu preferencia. Además, puedes modificar las \"capacidades deseadas\" que deberían ser pasadas al WebDriver:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Create the RemoteWebDriver instance.\n*\n* @return \\Facebook\\WebDriver\\Remote\\RemoteWebDriver\n*/\nprotected function driver()\n{\n    return RemoteWebDriver::create(\n        'http://localhost:4444/wd/hub', DesiredCapabilities::phantomjs()\n    );\n}\n</code></pre>\n  <h2>Primeros pasos</h2>\n  <h3>Generando pruebas</h3>\n  <p>Para generar una prueba de Dusk, usa el comando de Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk:make</span>. La prueba generada será colocada en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tests/Browser</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan dusk:make LoginTest\n</code></pre>\n  <h3>Ejecutando pruebas</h3>\n  <p>Para ejecutar tus pruebas de navegador, usa el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan dusk\n</code></pre>\n  <p>Si tuviste fallos en las pruebas la última vez que se ejecutó el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk</span>, puedes ahorrar tiempo volviendo a ejecutar las pruebas fallidas usando el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk:\n  fail</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan dusk:fails\n</code></pre>\n  <p>\n    El comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk</span> acepta cualquier argumento que sea aceptado normalmente por el administrador de pruebas de PHPUnit, permitiendo que ejecutes solamente las pruebas para un grupo dado, etc:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan dusk --group=foo\n</code></pre>\n  <h4>Iniciando manualmente ChromeDriver</h4>\n  <p>De forma predeterminada, Dusk intentará automáticamente iniciar ChromeDriver. Si esto no funciona para tu sistema en particular, puedes iniciar manualmente ChromeDriver antes de ejecutar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk</span>. Si eliges iniciar manualmente ChromeDriver, debes comentar la siguiente línea de tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tests/DuskTestCase.php</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Prepare for Dusk test execution.\n*\n* @beforeClass\n* @return void\n*/\npublic static function prepare()\n{\n    // static::startChromeDriver();\n}\n</code></pre>\n  <p>Además, si inicias ChromeDriver en un puerto diferente a 9515, deberías modificar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">driver</span> de la misma clase:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Create the RemoteWebDriver instance.\n*\n* @return \\Facebook\\WebDriver\\Remote\\RemoteWebDriver\n*/\nprotected function driver()\n{\n    return RemoteWebDriver::create(\n        'http://localhost:9515', DesiredCapabilities::chrome()\n    );\n}\n</code></pre>\n  <h3>Manejo de entorno</h3>\n  <p>Para forzar que Dusk use su propio archivo de entorno al momento de ejecutar las pruebas, crea un archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env.dusk.{environment}</span> en el directorio raíz de tu proyecto. Por ejemplo, si estás iniciando el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk</span> desde tu entorno <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">local</span>, deberías crear un archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env.dusk.local</span>.</p>\n  <p>Al momento de ejecutar pruebas, Dusk respaldará tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span> y renombrará tu entorno Dusk a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span>. Una vez que las pruebas han sido completadas, tu archivo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env</span> será restaurado.</p>\n  <h3>Creando navegadores</h3>\n  <p>Para empezar, vamos a escribir una prueba que verifica que podemos entrar a nuestra aplicación. Después de generar una prueba, podemos modificarla para visitar la página de login, introducir algunas credenciales y presionar el botón \"Login\". Para crear una instancia del navegador, ejecuta el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">browse</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace Tests\\Browser;\nuse App\\User;\nuse Tests\\DuskTestCase;\nuse Laravel\\Dusk\\Chrome;\nuse Illuminate\\Foundation\\Testing\\DatabaseMigrations;\nclass ExampleTest extends DuskTestCase\n{\n    use DatabaseMigrations;\n    /**\n    * A basic browser test example.\n    *\n    * @return void\n    */\n    public function testBasicExample()\n    {\n        \\$user = factory(User::class)-&gt;create([\n            'email' =&gt; 'taylor@laravel.com',\n        ]);\n        \\$this-&gt;browse(function (\\$browser) use (\\$user) {\n            \\$browser-&gt;visit('/login')\n                    -&gt;type('email', \\$user-&gt;email)\n                    -&gt;type('password', 'password')\n                    -&gt;press('Login')\n                    -&gt;assertPathIs('/home');\n        });\n    }\n}\n</code></pre>\n  <p>Como puedes ver en el ejemplo anterior, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">browse</span> acepta una función callback. Una instancia de navegador será pasada automáticamente a esta función de retorno por Dusk y es el objeto principal utilizado para interactuar y hacer aserciones en la aplicación.\n  </p>\n  <p>TIP TIP</p>\n  <p>Esta prueba puede ser usada para probar la pantalla login generada por el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">make:auth</span>.\n  </p>\n  <h4>Creando múltiples navegadores</h4>\n  <p>Algunas veces puedes necesitar múltiples navegadores con el propósito de ejecutar apropiadamente una prueba. Por ejemplo, múltiples navegadores pueden ser necesitados para probar una pantalla de conversaciones que interactúa con websockets. Para crear múltiples navegadores, \"solicita\" más de un navegador en la firma del callback dado al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">browse</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$this-&gt;browse(function (\\$first, \\$second) {\n    \\$first-&gt;loginAs(User::find(1))\n            -&gt;visit('/home')\n            -&gt;waitForText('Message');\n    \\$second-&gt;loginAs(User::find(2))\n            -&gt;visit('/home')\n            -&gt;waitForText('Message')\n            -&gt;type('message', 'Hey Taylor')\n            -&gt;press('Send');\n    \\$first-&gt;waitForText('Hey Taylor')\n            -&gt;assertSee('Jeffrey Way');\n});\n</code></pre>\n  <h4>Redimensionando las ventanas del navegador</h4>\n  <p>Puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resize</span> para ajustar el tamaño de la ventana del navegador:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;resize(1920, 1080);\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">maximize</span> puede ser usado para maximizar la ventana del navegador:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;maximize();\n</code></pre>\n  <h3>Macros de navegador</h3>\n  <p>Si desea definir un método de navegador personalizado que puedas reutilizar en una variedad de tus pruebas, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">macro</span> en la clase<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Browser</span>. Normalmente, deberías llamar a este método desde el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span> del proveedor de servicios:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Providers;\nuse Laravel\\Dusk\\Browser;\nuse Illuminate\\Support\\ServiceProvider;\nclass DuskServiceProvider extends ServiceProvider\n{\n    /**\n    * Register the Dusk's browser macros.\n    *\n    * @return void\n    */\n    public function boot()\n    {\n        Browser::macro('scrollToElement', function (\\$element = null) {\n            \\$this-&gt;script(\"\\$('html, body').animate({ scrollTop: \\$('\\$element').offset().top }, 0);\");\n            return \\$this;\n        });\n    }\n}\n</code></pre>\n  <p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">macro</span> acepta un nombre como primer argumento y un Closure como segundo. El Closure del macro se ejecutará cuando se llame al macro como un método en una implementación de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Browser</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$this-&gt;browse(function (\\$browser) use (\\$user) {\n    \\$browser-&gt;visit('/pay')\n            -&gt;scrollToElement('#credit-card-details')\n            -&gt;assertSee('Enter Credit Card Details');\n});\n</code></pre>\n  <h3>Autenticación</h3>\n  <p>Frecuentemente, estarás probando páginas que requieren autenticación. Puedes usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">loginAs</span> de Dusk con el propósito de evitar interactuar con la pantalla de login durante cada prueba. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">loginAs</span> acepta un ID de usuario o una instancia de modelo de usuario:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$this-&gt;browse(function (\\$first, \\$second) {\n    \\$first-&gt;loginAs(User::find(1))\n            -&gt;visit('/home');\n});\n</code></pre>\n  <p>Nota</p>\n  <p>Después de usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">loginAs</span>, la sesión de usuario será mantenida para todas las pruebas dentro del archivo.</p>\n  <h3>Migraciones de bases de datos</h3>\n  <p>Cuando tu prueba requiere migraciones, como el ejemplo de autenticación visto antes, nunca deberías usar el trait <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RefreshDatabase</span>. El trait <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">RefreshDatabase</span> se apoya en transacciones de base de datos, las cuales no serán aplicables a traves de las solicitudes HTTP. En su lugar, usa el trait <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">DatabaseMigrations</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace Tests\\Browser;\nuse App\\User;\nuse Tests\\DuskTestCase;\nuse Laravel\\Dusk\\Chrome;\nuse Illuminate\\Foundation\\Testing\\DatabaseMigrations;\nclass ExampleTest extends DuskTestCase\n{\n    use DatabaseMigrations;\n}\n</code></pre>\n  <h2>Interactuando con elementos</h2>\n  <h3>Selectores de Dusk</h3>\n  <p>Elegir buenos selectores CSS para interactuar con elementos es una de las partes más difíciles de escribir las pruebas de Dusk. Con el tiempo, los cambios del diseño frontend pueden causar que los selectores CSS como los siguientes dañen tus pruebas:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// HTML...\n&lt;button&gt;Login&lt;/button&gt;\n// Test...\n\\$browser-&gt;click('.login-page .container div &gt; button');\n</code></pre>\n  <p>Los selectores de Dusk permiten que te enfoques en la escritura de pruebas efectivas en vez de recordar selectores CSS. Para definir un selector, agrega un atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk</span> a tu elemento HTML. Después, agrega un prefijo al selector con <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@</span> para manipular el elemento conectado dentro de una prueba de Dusk:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// HTML...\n&lt;button dusk=\"login-button\"&gt;Login&lt;/button&gt;\n// Test...\n\\$browser-&gt;click('@login-button');\n</code></pre>\n  <h3>Haciendo clic en enlaces</h3>\n  <p>Para hacer clic sobre un enlace, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">clickLink</span> en la instancia del navegador. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">clickLink</span> hará clic en el enlace que tiene el texto dado en la pantalla:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;clickLink(\\$linkText);\n</code></pre>\n  <p>Nota</p>\n  <p>Este método interactúa con jQuery. Si jQuery no está disponible en la página, Dusk lo inyectará automáticamente de modo que esté disponible por la duración de la prueba.</p>\n  <h3>Texto, Valores y Atributos</h3>\n  <h4>Obteniendo y estableciendo valores</h4>\n  <p>Dusk proporciona varios métodos para interactuar con el texto de pantalla, valor y atributos de elementos en la página actual. Por ejemplo, para obtener el \"valor\" de un elemento que coincida con un selector dado, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">value</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Retrieve the value...\n\\$value = \\$browser-&gt;value('selector');\n// Set the value...\n\\$browser-&gt;value('selector', 'value');\n</code></pre>\n  <h4>Obteniendo texto</h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">text</span> puede ser usado para obtener el texto de pantalla de un elemento que coincida con el selector dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$text = \\$browser-&gt;text('selector');\n</code></pre>\n  <h4>Obteniendo atributos</h4>\n  <p>Finalmente, el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">attribute</span> puede ser usado para obtener un atributo de un elemento que coincida con el selector dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$attribute = \\$browser-&gt;attribute('selector', 'value');\n</code></pre>\n  <h3>Usando Formularios</h3>\n  <h4>Escribiendo valores</h4>\n  <p>Dusk proporciona una variedad de métodos para interactuar con formularios y elementos de entrada. Primero, vamos a echar un vistazo a un ejemplo de escribir texto dentro de un campo de entrada:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;type('email', 'taylor@laravel.com');\n</code></pre>\n  <p>Nota que, aunque el método acepta uno si es necesario, no estamos obligados a pasar un selector CSS dentro del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">type</span>. Si un selector CSS no es proporcionado, Dusk buscará un campo de entrada con el atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">name</span> dado. Finalmente, Dusk intentará encontrar un\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">textarea</span> con el atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">name</span> dado.</p>\n  <p>Para agregar texto a un campo sin limpiar su contenido, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">append</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;type('tags', 'foo')\n        -&gt;append('tags', ', bar, baz');\n</code></pre>\n  <p>Puedes limpiar el valor de un campo usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">clear</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;clear('email');\n</code></pre>\n  <h4>Listas desplegables</h4>\n  <p>Para seleccionar un valor en un cuadro de selección de lista desplegable, puedes usar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">select</span>. Al momento de pasar un valor al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">select</span>, deberías pasar el valor de opción a resaltar en lugar del texto mostrado en pantalla:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;select('size', 'Large');\n</code></pre>\n  <p>Puedes seleccionar una opción aleatoria al omitir el segundo parámetro:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;select('size');\n</code></pre>\n  <h4>Casillas de verificación</h4>\n  <p>Para \"marcar\" un campo de casilla de verificación, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">check</span>. Al igual que muchos otros métodos relacionados con entradas, un selector CSS completo no es obligatorio. Si un selector que coincida exactamente no puede ser encontrado, Dusk buscará una casilla de verificación con un atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">name</span> coincidente.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;check('terms');\n\\$browser-&gt;uncheck('terms');\n</code></pre>\n  <h4>Botones de radio</h4>\n  <p>Para \"seleccionar\" una opción de botón de radio, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">radio</span>. Al igual que muchos otros métodos relacionados con campos, un selector CSS completo no es obligatorio. Si un selector que coincida exactamente no puede ser encontrado, Dusk buscará un radio con atributos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">name</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">value</span> coincidentes:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;radio('version', 'php7');\n</code></pre>\n  <h3>Adjuntando archivos</h3>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">attach</span> puede ser usado para adjuntar un archivo a un elemento\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">file</span>. Al igual que muchos otros métodos relacionados con campos, un selector CSS completo no es obligatorio. Si un selector que coincida exactamente no puede ser encontrado, Dusk buscará un campo de archivo con atributo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">name</span> coincidente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;attach('photo', __DIR__.'/photos/me.png');\n</code></pre>\n  <p>Nota</p>\n  <p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">attach</span> requiere que la extensión de PHP <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Zip</span> esté instalada y habilitada en tu servidor.</p>\n  <h3>Usando el teclado</h3>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">keys</span> permite que proporciones secuencias de entrada más complejas para un elemento dado que lo permitido normalmente por el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">type</span>. Por ejemplo, puedes mantener presionada las teclas modificadoras al introducir valores. En este ejemplo, la tecla\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">shift</span> será mantenida presionada mientras la palabra <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">taylor</span> es introducida dentro del elemento que coincida con el selector dado. Después de que la palabra\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">taylor</span> sea tipeada, la palabra <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">otwell</span> será tipeada sin alguna tecla modificadora:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;keys('selector', ['{shift}', 'taylor'], 'otwell');\n</code></pre>\n  <p>Incluso puedes enviar una \"tecla de función\" al selector CSS principal que contiene tu aplicación:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;keys('.app', ['{command}', 'j']);\n</code></pre>\n  <p>TIP TIP</p>\n  <p>\n    Todas las teclas modificadoras se envuelven entre corchetes <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">{}</span> y coinciden con las constantes definidas en la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Facebook\\WebDriver\\WebDriverKeys</span>, la cual puede ser encontrada en GitHub .\n  </p>\n  <h3>Usando el Ratón</h3>\n  <h4>Haciendo clic sobre elementos</h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">click</span> puede ser usado para \"clickear\" sobre un elemento que coincida con el selector dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;click('.selector');\n</code></pre>\n  <h4>Mouseover</h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">mouseover</span> puede ser usado cuando necesitas mover el ratón sobre un elemento que coincida con el selector dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;mouseover('.selector');\n</code></pre>\n  <h4>Arrastrar y soltar</h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">drag</span> puede ser usado para arrastrar un elemento que coincida con el selector dado hasta otro elemento:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;drag('.from-selector', '.to-selector');\n</code></pre>\n  <p>O, puedes arrastrar un elemento en una única dirección:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;dragLeft('.selector', 10);\n\\$browser-&gt;dragRight('.selector', 10);\n\\$browser-&gt;dragUp('.selector', 10);\n\\$browser-&gt;dragDown('.selector', 10);\n</code></pre>\n  <h3>Diálogos de JavaScript</h3>\n  <p>Dusk provee de varios métodos para interactuar con Diálogos de JavaScript:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Wait for a dialog to appear:\n\\$browser-&gt;waitForDialog(\\$seconds = null);\n// Assert that a dialog has been displayed and that its message matches the given value:\n\\$browser-&gt;assertDialogOpened('value');\n// Type the given value in an open JavaScript prompt dialog:\n\\$browser-&gt;typeInDialog('Hello World');\n</code></pre>\n  <p>Para cerrar un Diálogo de JavaScript abierto, haga clic en el botón Aceptar o OK:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;acceptDialog();\n</code></pre>\n  <p>Para cerrar un Diálogo de JavaScript abierto, haga clic en el botón Cancelar (solo para un diálogo de confirmación):</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;dismissDialog();\n</code></pre>\n  <h3>Alcance de selectores</h3>\n  <p>Algunas veces puedes querer ejecutar varias operaciones dentro del alcance de un selector dado. Por ejemplo, puedes querer comprobar que algunos textos existen unicamente dentro de una tabla y después presionar un botón dentro de la tabla. Puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">with</span> para completar esta tarea. Todas las operaciones ejecutadas dentro de la función de retorno dada al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">with</span> serán exploradas en el selector original:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;with('.table', function (\\$table) {\n    \\$table-&gt;assertSee('Hello World')\n            -&gt;clickLink('Delete');\n});\n</code></pre>\n  <h3>Esperando por elementos</h3>\n  <p>Al momento de probar aplicaciones que usan JavaScript de forma extensiva, frecuentemente se vuelve necesario \"esperar\" por ciertos elementos o datos estén disponibles antes de proceder con una prueba. Dusk hace esto fácilmente. Usando una variedad de métodos, puedes esperar que los elementos estén visibles en la página e incluso esperar hasta que una expresión de JavaScript dada se evalúe como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>.</p>\n  <h4>Esperando</h4>\n  <p>Si necesitas pausar la prueba por un número de milisegundos dado, usa el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">pause</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;pause(1000);\n</code></pre>\n  <h4>Esperando por selectores</h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">waitFor</span> puede ser usado para pausar la ejecución de la prueba hasta que el elemento que coincida con el selector CSS dado sea mostrado en la página. De forma predeterminada, esto pausará la prueba por un máximo de cinco segundos antes de arrojar una excepción. Si es necesario, puedes pasar un umbral de tiempo de expiración personalizado como segundo argumento del método:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Wait a maximum of five seconds for the selector...\n\\$browser-&gt;waitFor('.selector');\n// Wait a maximum of one second for the selector...\n\\$browser-&gt;waitFor('.selector', 1);\n</code></pre>\n  <p>También puede esperar hasta que el selector dado no se encuentre en la página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;waitUntilMissing('.selector');\n\\$browser-&gt;waitUntilMissing('.selector', 1);\n</code></pre>\n  <h4>Estableciendo el alcance de selectores cuando estén disponibles</h4>\n  <p>Ocasionalmente, puedes querer esperar por un selector dado y después interactuar con el elemento que coincida con el selector. Por ejemplo, puedes querer esperar hasta que una ventana modal esté disponible y después presionar el botón \"OK\" dentro de esa ventana. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">whenAvailable</span> puede ser usado en este caso. Todas las operaciones de elementos ejecutadas dentro de la función de retorno dada serán ejecutadas dentro del selector original:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;whenAvailable('.modal', function (\\$modal) {\n    \\$modal-&gt;assertSee('Hello World')\n            -&gt;press('OK');\n});\n</code></pre>\n  <h4>Esperando por texto</h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">waitForText</span> puede ser usado para esperar hasta que el texto dado sea mostrado en la página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Wait a maximum of five seconds for the text...\n\\$browser-&gt;waitForText('Hello World');\n// Wait a maximum of one second for the text...\n\\$browser-&gt;waitForText('Hello World', 1);\n</code></pre>\n  <h4>Esperando por enlaces</h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">waitForLink</span> puede ser usado para esperar hasta que un enlace dado sea mostrada en la página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Wait a maximum of five seconds for the link...\n\\$browser-&gt;waitForLink('Create');\n// Wait a maximum of one second for the link...\n\\$browser-&gt;waitForLink('Create', 1);\n</code></pre>\n  <h4>Esperando por la localización de la página</h4>\n  <p>Al momento de hacer una comprobación de ruta tal como\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$browser-&gt;assertPathIs('/home')</span>, la comprobación puede fallar si <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">window.location.pathname</span> está siendo actualizada asincrónicamente. Puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">waitForLocation</span> para esperar por la localización que tenga un valor dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;waitForLocation('/secret');\n</code></pre>\n  <p>También puede esperar la localización de una ruta con nombre:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;waitForRoute(\\$routeName, \\$parameters);\n</code></pre>\n  <h4>Esperando por recargas de página</h4>\n  <p>Si necesita hacer aserciones después de que se ha recargado una página, usa el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">waitForReload</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;click('.some-action')\n        -&gt;waitForReload()\n        -&gt;assertSee('something');\n</code></pre>\n  <h4>Esperando por expresiones de JavaScript</h4>\n  <p>Algunas veces puedes querer pausar la ejecución de una prueba hasta que una expresión de JavaScript dada se evalúe a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>. Puedes completar fácilmente esto usando el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">waitUntil</span>. Al momento de pasar una expresión a este método, no necesitas incluir al final la palabra clave <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">return</span> o un punto y coma <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">;</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Wait a maximum of five seconds for the expression to be true...\n\\$browser-&gt;waitUntil('App.dataLoaded');\n\\$browser-&gt;waitUntil('App.data.servers.length &gt; 0');\n// Wait a maximum of one second for the expression to be true...\n\\$browser-&gt;waitUntil('App.data.servers.length &gt; 0', 1);\n</code></pre>\n  <h4>Esperando por expresiones de Vue</h4>\n  <p>Los siguientes métodos puedes ser usados para esperar hasta que un atributo de componente de Vue dado tenga un determinado valor:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Wait until the component attribute contains the given value...\n\\$browser-&gt;waitUntilVue('user.name', 'Taylor', '@user');\n// Wait until the component attribute doesn't contain the given value...\n\\$browser-&gt;waitUntilVueIsNot('user.name', null, '@user');\n</code></pre>\n  <h4>Esperando por una función de retorno</h4>\n  <p>Muchos de los métodos de \"espera\" en Dusk confían en el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">waitUsing</span> subyacente. Puedes usar este método directamente para esperar por una función de retorno dada que devuelva\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">waitUsing</span> acepta el máximo número de segundos para esperar la Closure, el intervalo en el cual la Closure debería ser evaluada y un mensaje opcional de falla:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;waitUsing(10, 1, function () use (\\$something) {\n    return \\$something-&gt;isReady();\n}, \"Something wasn't ready in time.\");\n</code></pre>\n  <h3>Haciendo aserciones de Vue</h3>\n  <p>\n    Inclusive Dusk permite que hagas comprobaciones en el estado de componente de datos de Vue . Por ejemplo, imagina que tu aplicación contiene el siguiente componente de Vue:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// HTML...\n&lt;profile dusk=\"profile-component\"&gt;&lt;/profile&gt;\n// Component Definition...\nVue.component('profile', {\n    template: '&lt;div&gt;{{ user.name }}&lt;/div&gt;',\n    data: function () {\n        return {\n            user: {\n                name: 'Taylor'\n            }\n        };\n    }\n});\n</code></pre>\n  <p>Puedes comprobar el estado del componente de Vue de esta manera:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* A basic Vue test example.\n*\n* @return void\n*/\npublic function testVue()\n{\n    \\$this-&gt;browse(function (Browser \\$browser) {\n        \\$browser-&gt;visit('/')\n                -&gt;assertVue('user.name', 'Taylor', '@profile-component');\n    });\n}\n</code></pre>\n  <h2>Aserciones disponibles</h2>\n  <p>Dusk proporciona una variedad de aserciones que puedes hacer en tu apliación. Todas las aserciones disponibles están documentadas en la tabla de abajo:</p>\n  <p>assertTitle assertTitleContains assertUrlIs assertSchemeIs assertSchemeIsNot assertHostIs assertHostIsNot assertPortIs assertPortIsNot assertPathBeginsWith assertPathIs assertPathIsNot assertRouteIs assertQueryStringHas assertQueryStringMissing assertFragmentIs assertFragmentBeginsWith assertFragmentIsNot assertHasCookie assertCookieMissing assertCookieValue assertPlainCookieValue assertSee assertDontSee assertSeeIn assertDontSeeIn assertSourceHas assertSourceMissing assertSeeLink assertDontSeeLink assertInputValue assertInputValueIsNot assertChecked assertNotChecked assertRadioSelected assertRadioNotSelected assertSelected assertNotSelected assertSelectHasOptions assertSelectMissingOptions assertSelectHasOption assertValue assertVisible assertPresent assertMissing assertDialogOpened assertEnabled assertDisabled assertFocused assertNotFocused assertVue assertVueIsNot assertVueContains assertVueDoesNotContain</p>\n  <h4>assertTitle</h4>\n  <p>Comprueba que el título de la página coincida con el texto dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertTitle(\\$title);\n</code></pre>\n  <h4>assertTitleContains</h4>\n  <p>Comprueba que el título de página contenga el texto dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertTitleContains(\\$title);\n</code></pre>\n  <h4>assertUrlIs</h4>\n  <p>Comprueba que la URL actual (sin la cadena de consulta) coincida con la cadena dada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertUrlIs(\\$url);\n</code></pre>\n  <h4>assertSchemeIs</h4>\n  <p>Comprueba que el esquema de la URL actual coincide con el esquema dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertSchemeIs(\\$scheme);\n</code></pre>\n  <h4>assertSchemeIsNot</h4>\n  <p>Comprueba que el esquema de la URL actual no coincide con el esquema dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertSchemeIsNot(\\$scheme);\n</code></pre>\n  <h4>assertHostIs</h4>\n  <p>Comprueba que el Host de la URL actual coincide con el Host dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertHostIs(\\$host);\n</code></pre>\n  <h4>assertHostIsNot</h4>\n  <p>Comprueba que el Host de la URL actual no coincide con el Host dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertHostIsNot(\\$host);\n</code></pre>\n  <h4>assertPortIs</h4>\n  <p>Comprueba que el puerto de la URL actual coincide con el puerto dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertPortIs(\\$port);\n</code></pre>\n  <h4>assertPortIsNot</h4>\n  <p>Comprueba que el puerto de la URL actual no coincide con el puerto dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertPortIsNot(\\$port);\n</code></pre>\n  <h4>assertPathBeginsWith</h4>\n  <p>Comprueba que la ruta de la URL actual comience con la ruta dada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertPathBeginsWith(\\$path);\n</code></pre>\n  <h4>assertPathIs</h4>\n  <p>Comprueba que la ruta actual coincida con la ruta dada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertPathIs('/home');\n</code></pre>\n  <h4>assertPathIsNot</h4>\n  <p>Comprueba que la ruta actual no coincida con la ruta dada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertPathIsNot('/home');\n</code></pre>\n  <h4>assertRouteIs</h4>\n  <p>Comprueba que la URL actual coincida con la URL de ruta nombrada dada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertRouteIs(\\$name, \\$parameters);\n</code></pre>\n  <h4>assertQueryStringHas</h4>\n  <p>Comprueba que el parámetro de cadena para una consulta dada está presente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertQueryStringHas(\\$name);\n</code></pre>\n  <p>Comprueba que el parámetro de cadena para una consulta dada está presente y tiene un valor dado:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertQueryStringHas(\\$name, \\$value);\n</code></pre>\n  <h4>assertQueryStringMissing</h4>\n  <p>Comprueba que el parámetro de cadena para una consulta dada está ausente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertQueryStringMissing(\\$name);\n</code></pre>\n  <h4>assertFragmentIs</h4>\n  <p>Comprueba que el fragmento actual coincide con el fragmento dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertFragmentIs('anchor');\n</code></pre>\n  <h4>assertFragmentBeginsWith</h4>\n  <p>Comprueba que el fragmento actual comienza con el fragmento dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertFragmentBeginsWith('anchor');\n</code></pre>\n  <h4>assertFragmentIsNot</h4>\n  <p>AComprueba que el fragmento actual no coincide con el fragmento dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertFragmentIsNot('anchor');\n</code></pre>\n  <h4>assertHasCookie</h4>\n  <p>Comprueba que el cookie dado está presente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertHasCookie(\\$name);\n</code></pre>\n  <h4>assertCookieMissing</h4>\n  <p>Comprueba que el cookie dado no está presente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertCookieMissing(\\$name);\n</code></pre>\n  <h4>assertCookieValue</h4>\n  <p>Comprueba que un cookie tenga un valor dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertCookieValue(\\$name, \\$value);\n</code></pre>\n  <h4>assertPlainCookieValue</h4>\n  <p>Comprueba que un cookie desencriptado tenga un valor dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertPlainCookieValue(\\$name, \\$value);\n</code></pre>\n  <h4>assertSee</h4>\n  <p>Comprueba que el texto dado está presente en la página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertSee(\\$text);\n</code></pre>\n  <h4>assertDontSee</h4>\n  <p>Comprueba que el texto dado no está presente en la página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertDontSee(\\$text);\n</code></pre>\n  <h4>assertSeeIn</h4>\n  <p>Comprueba que el texto dado está presente dentro del selector:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertSeeIn(\\$selector, \\$text);\n</code></pre>\n  <h4>assertDontSeeIn</h4>\n  <p>Comprueba que el texto dado no está presente dentro del selector:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertDontSeeIn(\\$selector, \\$text);\n</code></pre>\n  <h4>assertSourceHas</h4>\n  <p>Comprueba que el código fuente dado está presente en la página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertSourceHas(\\$span);\n</code></pre>\n  <h4>assertSourceMissing</h4>\n  <p>Comprueba que el código fuente dado no está presente en la página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertSourceMissing(\\$span);\n</code></pre>\n  <h4>assertSeeLink</h4>\n  <p>Comprueba que el enlace dado está presente en la página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertSeeLink(\\$linkText);\n</code></pre>\n  <h4>assertDontSeeLink</h4>\n  <p>Comprueba que el enlace dado está no presente en la página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertDontSeeLink(\\$linkText);\n</code></pre>\n  <h4>assertInputValue</h4>\n  <p>Comprueba que el campo de entrada dado tiene el valor dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertInputValue(\\$field, \\$value);\n</code></pre>\n  <h4>assertInputValueIsNot</h4>\n  <p>Comprueba que el campo de entrada dado no tiene el valor dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertInputValueIsNot(\\$field, \\$value);\n</code></pre>\n  <h4>assertChecked</h4>\n  <p>Comprueba que la casilla de verificación está marcada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertChecked(\\$field);\n</code></pre>\n  <h4>assertNotChecked</h4>\n  <p>Comprueba que la casilla de verificación no está marcada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertNotChecked(\\$field);\n</code></pre>\n  <h4>assertRadioSelected</h4>\n  <p>Comprueba que el campo de radio está seleccionado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertRadioSelected(\\$field, \\$value);\n</code></pre>\n  <h4>assertRadioNotSelected</h4>\n  <p>Comprueba que el campo de radio no está seleccionado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertRadioNotSelected(\\$field, \\$value);\n</code></pre>\n  <h4>assertSelected</h4>\n  <p>Comprueba que la lista desplegable tiene seleccionado el valor dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertSelected(\\$field, \\$value);\n</code></pre>\n  <h4>assertNotSelected</h4>\n  <p>Comprueba que la lista desplegable no tiene seleccionado el valor dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertNotSelected(\\$field, \\$value);\n</code></pre>\n  <h4>assertSelectHasOptions</h4>\n  <p>Comprueba que el arreglo dado de valores están disponibles para ser seleccionados:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertSelectHasOptions(\\$field, \\$values);\n</code></pre>\n  <h4>assertSelectMissingOptions</h4>\n  <p>Comprueba que el arreglo dado de valores no están disponibles para ser seleccionados:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertSelectMissingOptions(\\$field, \\$values);\n</code></pre>\n  <h4>assertSelectHasOption</h4>\n  <p>Comprueba que el valor dado está disponible para ser seleccionado en el campo dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertSelectHasOption(\\$field, \\$value);\n</code></pre>\n  <h4>assertValue</h4>\n  <p>Comprueba que el elemento que coincida con el selector dado tenga el valor dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertValue(\\$selector, \\$value);\n</code></pre>\n  <h4>assertVisible</h4>\n  <p>Comprueba que el elemento que coincida con el selector dado sea visible:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertVisible(\\$selector);\n</code></pre>\n  <h4>assertPresent</h4>\n  <p>Comprueba que el elemento que coincida con el selector dado está presente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertPresent(\\$selector);\n</code></pre>\n  <h4>assertMissing</h4>\n  <p>Comprueba que el elemento que coincida con el selector dado no sea visible:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertMissing(\\$selector);\n</code></pre>\n  <h4>assertDialogOpened</h4>\n  <p>Comprueba que un diálogo JavaScript con un mensaje dado ha sido abierto:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertDialogOpened(\\$message);\n</code></pre>\n  <h4>assertEnabled</h4>\n  <p>Comprueba que el campo dado está activado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertEnabled(\\$field);\n</code></pre>\n  <h4>assertDisabled</h4>\n  <p>Comprueba que el campo dado está desactivado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertDisabled(\\$field);\n</code></pre>\n  <h4>assertFocused</h4>\n  <p>Comprueba que el campo dado está enfocado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertFocused(\\$field);\n</code></pre>\n  <h4>assertNotFocused</h4>\n  <p>Comprueba que el campo dado no está enfocado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertNotFocused(\\$field);\n</code></pre>\n  <h4>assertVue</h4>\n  <p>Comprueba que una propiedad de datos de un componente de Vue dado coincida con el valor dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertVue(\\$property, \\$value, \\$componentSelector = null);\n</code></pre>\n  <h4>assertVueIsNot</h4>\n  <p>Comprueba que una propiedad de datos de un componente de Vue dado no coincida con el valor dado:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertVueIsNot(\\$property, \\$value, \\$componentSelector = null);\n</code></pre>\n  <h4>assertVueContains</h4>\n  <p>Comprueba que una propiedad de datos de un componente de Vue dado es un arreglo y contiene el valor dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertVueContains(\\$property, \\$value, \\$componentSelector = null);\n</code></pre>\n  <h4>assertVueDoesNotContain</h4>\n  <p>Comprueba que una propiedad de datos de un componente de Vue dado es un arreglo y no contiene el valor dado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;assertVueDoesNotContain(\\$property, \\$value, \\$componentSelector = null);\n</code></pre>\n  <h2>Páginas</h2>\n  <p>Alguna veces, las pruebas requieren que varias acciones complicadas sean ejecutadas en secuencia. Esto puede hacer tus pruebas más difíciles de leer y entender. Las páginas permiten que definas acciones expresivas que entonces pueden ser ejecutadas en una página dada usando un solo método. Las páginas también permiten que definas abreviaturas para selectores comunes para tu aplicación o una página única.</p>\n  <h3>Generando páginas</h3>\n  <p>Para generar un objeto de página, usa el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk:page</span>. Todos los objetos de página serán colocados en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tests/Browser/Pages</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan dusk:page Login\n</code></pre>\n  <h3>Configurando páginas</h3>\n  <p>De forma predeterminada, las páginas tienen tres métodos: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">assert</span>, y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">elements</span>. Discutiremos los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">assert</span> ahora. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">elements</span> será discutido con más detalle debajo.</p>\n  <h4>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url</span></h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">url</span> debería devolver la ruta de la URL que representa la página. Dusk usará esta URL al momento de navegar a la página en el navegador:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Get the URL for the page.\n*\n* @return string\n*/\npublic function url()\n{\n    return '/login';\n}\n</code></pre>\n  <h4>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">assert</span></h4>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">assert</span> puede hacer algunas aserciones necesarias para verificar que el navegador en realidad está en la página dada. Completar este método no es necesario; sin embargo, eres libre de hacer estas aserciones si lo deseas. Estas aserciones serán ejecutadas automáticamente al momento de navegar hacia la página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Assert that the browser is on the page.\n*\n* @return void\n*/\npublic function assert(Browser \\$browser)\n{\n    \\$browser-&gt;assertPathIs(\\$this-&gt;url());\n}\n</code></pre>\n  <h3>Navegando hacia las páginas</h3>\n  <p>Una vez que se ha configurado una página, puedes navegar a ella utilizando el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">visit</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Tests\\Browser\\Pages\\Login;\n\\$browser-&gt;visit(new Login);\n</code></pre>\n  <p>A veces es posible que ya estés en una página determinada y necesitas \"cargar\" los selectores y métodos dentro del contexto de prueba actual. Esto es común al momento de presionar un botón y ser redireccionado a una página dada sin navegar explícitamente a ésta. En esta situación, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">on</span> para cargar la página.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Tests\\Browser\\Pages\\CreatePlaylist;\n\\$browser-&gt;visit('/dashboard')\n        -&gt;clickLink('Create Playlist')\n        -&gt;on(new CreatePlaylist)\n        -&gt;assertSee('@create');\n</code></pre>\n  <h3>Selectores abreviados</h3>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">elements</span> de páginas permite que definas abreviaturas rápidas, fáciles de recordar para cualquier selector CSS en tu página. Por ejemplo, vamos a definir una abreviación para el campo \"email\" de la página login de la aplicación:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Get the element shortcuts for the page.\n*\n* @return array\n*/\npublic function elements()\n{\n    return [\n        '@email' =&gt; 'input[name=email]',\n    ];\n}\n</code></pre>\n  <p>Ahora, puedes usar este selector de abreviación en cualquier lugar que usarías un selector de CSS completo:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$browser-&gt;type('@email', 'taylor@laravel.com');\n</code></pre>\n  <h4>Selectores de abreviaturas globales</h4>\n  <p>Después de instalar Dusk, una clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Page</span> básica será colocada en tu directorio\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tests/Browser/Pages</span>. Esta clase contiene un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">siteElements</span> el cual puede ser usado para definir selectores de abreviaturas globales que deberían estar disponibles en cada página en cada parte de tu aplicación:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Get the global element shortcuts for the site.\n*\n* @return array\n*/\npublic static function siteElements()\n{\n    return [\n        '@element' =&gt; '#selector',\n    ];\n}\n</code></pre>\n  <h3>Métodos de página</h3>\n  <p>Además de los métodos predeterminados definidos en páginas, puedes definir métodos adicionales, los cuales pueden ser usados en cualquier parte de tus pruebas. Por ejemplo, vamos a imaginar que estamos construyendo una aplicación para administración de música. Una acción común para una página de la aplicación podría ser crear una lista de reproducción. En lugar de volver a escribir la lógica para crear una lista de reproducción en cada prueba, puedes definir un método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">createPlaylist</span> en una clase de página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace Tests\\Browser\\Pages;\nuse Laravel\\Dusk\\Browser;\nclass Dashboard extends Page\n{\n    // Other page methods...\n    /**\n    * Create a new playlist.\n    *\n    * @param  \\Laravel\\Dusk\\Browser  \\$browser\n    * @param  string  \\$name\n    * @return void\n    */\n    public function createPlaylist(Browser \\$browser, \\$name)\n    {\n        \\$browser-&gt;type('name', \\$name)\n                -&gt;check('share')\n                -&gt;press('Create Playlist');\n    }\n}\n</code></pre>\n  <p>Una vez que el método ha sido definido, puedes usarlo dentro de cualquier prueba que utilice la página. La instancia de navegador será pasada automáticamente al método de la página:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Tests\\Browser\\Pages\\Dashboard;\n\\$browser-&gt;visit(new Dashboard)\n        -&gt;createPlaylist('My Playlist')\n        -&gt;assertSee('My Playlist');\n</code></pre>\n  <h2>Componentes</h2>\n  <p>Los componentes son similares a “los objetos de página” de Dusk, pero son planeados para partes de UI y funcionalidades que sean reusadas en otras partes de tu aplicación, tal como una barra de navegación o ventana de notificación. Como tal, los componentes no son enlazados a URLs específicas.\n  </p>\n  <h3>Generando componentes</h3>\n  <p>Para generar un componente, usa el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dusk:component</span>. Los nuevos componentes son colocados en el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">test/Browser/Components</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan dusk:component DatePicker\n</code></pre>\n  <p>Como se muestra antes, un \"calendario\" es un ejemplo de un componente que puede existir en cualquier parte de tu aplicación en una variedad de páginas. Puede volverse complejo escribir manualmente lógica de automatización de navegador para seleccionar una fecha entre docenas de pruebas en cualquier parte de tu software de prueba. En lugar de esto, podemos definir un componente de Dusk para representar el calendario, permitiendo encapsular esa lógica dentro del componente:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace Tests\\Browser\\Components;\nuse Laravel\\Dusk\\Browser;\nuse Laravel\\Dusk\\Component as BaseComponent;\nclass DatePicker extends BaseComponent\n{\n    /**\n    * Get the root selector for the component.\n    *\n    * @return string\n    */\n    public function selector()\n    {\n        return '.date-picker';\n    }\n    /**\n    * Assert that the browser page contains the component.\n    *\n    * @param  Browser  \\$browser\n    * @return void\n    */\n    public function assert(Browser \\$browser)\n    {\n        \\$browser-&gt;assertVisible(\\$this-&gt;selector());\n    }\n    /**\n    * Get the element shortcuts for the component.\n    *\n    * @return array\n    */\n    public function elements()\n    {\n        return [\n            '@date-field' =&gt; 'input.datepicker-input',\n            '@month-list' =&gt; 'div &gt; div.datepicker-months',\n            '@day-list' =&gt; 'div &gt; div.datepicker-days',\n        ];\n    }\n    /**\n    * Select the given date.\n    *\n    * @param  \\Laravel\\Dusk\\Browser  \\$browser\n    * @param  int  \\$month\n    * @param  int  \\$day\n    * @return void\n    */\n    public function selectDate(\\$browser, \\$month, \\$day)\n    {\n        \\$browser-&gt;click('@date-field')\n                -&gt;within('@month-list', function (\\$browser) use (\\$month) {\n                    \\$browser-&gt;click(\\$month);\n                })\n                -&gt;within('@day-list', function (\\$browser) use (\\$day) {\n                    \\$browser-&gt;click(\\$day);\n                });\n    }\n}\n</code></pre>\n  <h3>Usando componentes</h3>\n  <p>Una vez que el componente ha sido definido, fácilmente podemos seleccionar una fecha dentro del calendario desde cualquier prueba. Y, si la lógica necesaria para seleccionar una fecha cambia, solamente necesitaremos actualizar el componente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace Tests\\Browser;\nuse Tests\\DuskTestCase;\nuse Laravel\\Dusk\\Browser;\nuse Tests\\Browser\\Components\\DatePicker;\nuse Illuminate\\Foundation\\Testing\\DatabaseMigrations;\nclass ExampleTest extends DuskTestCase\n{\n    /**\n    * A basic component test example.\n    *\n    * @return void\n    */\n    public function testBasicExample()\n    {\n        \\$this-&gt;browse(function (Browser \\$browser) {\n            \\$browser-&gt;visit('/')\n                    -&gt;within(new DatePicker, function (\\$browser) {\n                        \\$browser-&gt;selectDate(1, 2018);\n                    })\n                    -&gt;assertSee('January');\n        });\n    }\n}\n</code></pre>\n  <h2>Integración continua</h2>\n  <h3>CircleCI</h3>\n  <p>Si estás usando CircleCI para ejecutar tus pruebas de Dusk, puedes usar este archivo de configuración como punto de partida. Al igual que con TravisCI, usaremos el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">php\n  artisan serve</span> para ejecutar el servidor web integrado de PHP:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>version: 2\njobs:\n    build:\n        steps:\n            - run: sudo apt-get install -y libsqlite3-dev\n            - run: cp .env.testing .env\n            - run: composer install -n --ignore-platform-reqs\n            - run: npm install\n            - run: npm run production\n            - run: vendor/bin/phpunit\n            - run:\n                name: Start Chrome Driver\n                command: ./vendor/laravel/dusk/bin/chromedriver-linux\n                background: true\n            - run:\n                name: Run Laravel Server\n                command: php artisan serve\n                background: true\n            - run:\n                name: Run Laravel Dusk Tests\n                command: php artisan dusk\n</code></pre>\n  <h3>spanship</h3>\n  <p>\n    Para ejecutar pruebas de Dusk en spanship , agrega los siguientes comandos a tu proyecto spanship. Estos comandos son sólo un punto de partida y eres libre de agregar los comandos adicionales que necesites:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>phpenv local 7.2\ncp .env.testing .env\nmkdir -p ./bootstrap/cache\ncomposer install --no-interaction --prefer-dist\nphp artisan key:generate\nnohup bash -c \"php artisan serve 2&gt;&amp;1 &amp;\" &amp;&amp; sleep 5\nphp artisan dusk\n</code></pre>\n  <h3>Heroku CI</h3>\n  <p>\n    Para ejecutar tus pruebas de Dusk en Heroku CI , agrega el siguiente buildpack de Google Chrome y scripts a tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app.json</span> de Heroku:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>{\n    \"environments\": {\n        \"test\": {\n            \"buildpacks\": [\n                { \"url\": \"heroku/php\" },\n                { \"url\": \"https://github.com/heroku/heroku-buildpack-google-chrome\" }\n            ],\n            \"scripts\": {\n                \"test-setup\": \"cp .env.testing .env\",\n                \"test\": \"nohup bash -c './vendor/laravel/dusk/bin/chromedriver-linux &gt; /dev/null 2&gt;&amp;1 &amp;' &amp;&amp; nohup bash -c 'php artisan serve &gt; /dev/null 2&gt;&amp;1 &amp;' &amp;&amp; php artisan dusk\"\n            }\n        }\n    }\n}\n</code></pre>\n  <h3>Travis CI</h3>\n  <p>\n    Para ejecutar tus pruebas de Dusk en Travis CI , usa la siguiente configuración en el archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.travis.yml</span>. Ya que Travis CI no es un entorno gráfico, necesitaremos tomar algunos pasos extras con el propósito de ejecutar un navegador Chrome. En adición a esto, usaremos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">php artisan serve</span> para ejecutar el servidor web integrado de PHP:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>language: php\nphp:\n    - 7.3\naddons:\n    chrome: stable\ninstall:\n    - cp .env.testing .env\n    - travis_retry composer install --no-interaction --prefer-dist --no-suggest\n    - php artisan key:generate\nbefore_script:\n    - google-chrome-stable --headless --disable-gpu --remote-debugging-port=9222 http://localhost &amp;\n    - php artisan serve &amp;\nscript:\n    - php artisan dusk\n</code></pre>\n  <p>En tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.env.testing</span>, ajusta el valor de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">APP_URL</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>APP_URL=http://127.0.0.1:8000\n</code></pre>\n</div>"
      },
      {
        "titulo": "Laravel Envoy",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Laravel Envoy</h1>\n  <ul>\n    <li>\n      Introducción\n      <ul>\n        <li>Instalación</li>\n      </ul>\n    </li>\n    <li>\n      Escribir tareas\n      <ul>\n        <li>Setup</li>\n        <li>Variables</li>\n        <li>Historias</li>\n        <li>Múltiples servidores</li>\n      </ul>\n    </li>\n    <li>\n      Ejecutar tareas\n      <ul>\n        <li>Confirmar ejecución de tarea</li>\n      </ul>\n    </li>\n    <li>\n      Notificaciones\n      <ul>\n        <li>Slack</li>\n        <li>Discord</li>\n      </ul>\n    </li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>\n    Laravel Envoy\n    <outboundlink></outboundlink>\n    proporciona una sintaxis limpia y mínima para definir las tareas comunes que ejecutas en tus servidores remotos. Utilizando el estilo de sintaxis de Blade, puedes configurar fácilmente tareas para deploy, comandos de Artisan y más. Envoy solamente es compatible con sistemas operativos Mac y Linux.\n  </p>\n  <h3>Instalación</h3>\n  <p>Primero, instala Envoy utilizando el comando de composer <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">global require</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>composer global require laravel/envoy\n</code></pre>\n  <p>\n    Dado que las librerías globales de Composer ocasionalmente pueden causar conflictos en la versión del paquete, puedes considerar utilizar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">cgr</span>, el cual es un reemplazo directo para el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">composer global require</span>. Las instrucciones de instalación de la librería <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">gcr</span> pueden ser encontradas en GitHub\n    <outboundlink></outboundlink>\n    .\n  </p>\n  <p>Nota</p>\n  <p>Asegurate de colocar el directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">~/.composer/vendor/bin</span> en tu PATH para que el ejecutable <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">envoy</span> pueda ser localizado cuando se ejecute el comando\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">envoy</span> en tu terminal.</p>\n  <h4>Actualizar envoy</h4>\n  <p>También puedes usar Composer para mantener tu instalación de Envoy actualizada. Ejecutar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">composer global update</span> actualizará todos tus paquetes de Composer instalados globalmente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>composer global update\n</code></pre>\n  <h2>Escribir tareas</h2>\n  <p>Todas tus tareas de Envoy deberán definirse en un archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Envoy.blade.php</span> en la raíz de tu proyecto. Aquí un ejemplo para comenzar:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>@servers(['web' =&gt; ['user@192.168.1.1']])\n@task('foo', ['on' =&gt; 'web'])\n    ls -la\n@endtask\n</code></pre>\n  <p>Como puedes ver, un arreglo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@servers</span> es definido en la parte superior del archivo, permitiéndote hacer referencia a estos servidores en la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">on</span> en la declaración de tus tareas. Dentro de tus declaraciones <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@task</span>, deberás colocar el código Bash que se deberá ejecutar en tu servidor una vez que la tarea sea ejecutada.</p>\n  <p>Puedes forzar que un script se ejecute localmente especificando la dirección IP del servidor como\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">127.0.0.1</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>@servers(['localhost' =&gt; '127.0.0.1'])\n</code></pre>\n  <h3>Setup</h3>\n  <p>En ocasiones, puede que necesites ejecutar algún código PHP antes de tus tareas de Envoy. Puedes hacer uso de la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@setup</span> para declarar variables y hacer uso de PHP en general antes de que tus otras tareas sean ejecutadas:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>@setup\n    \\$now = new DateTime();\n    \\$environment = isset(\\$env) ? \\$env : \"testing\";\n@endsetup\n</code></pre>\n  <p>Si necesitas de otros archivos PHP antes de ejecutar tus tareas, puedes utilizar la directiva\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@include</span> en la parte superior de tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Envoy.blade.php</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>@include('vendor/autoload.php')\n@task('foo')\n    # ...\n@endtask\n</code></pre>\n  <h3>Variables</h3>\n  <p>Si es necesario, puedes pasar valores de opciones a las tareas de Envoy usando la línea de comandos:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>envoy run deploy --branch=master\n</code></pre>\n  <p>Puedes acceder a las opciones en tus tareas por medio de la sintaxis \"echo\" de Blade. También puedes usar declaraciones <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">if</span> y bucles dentro de tus tareas. Por ejemplo, para verificar la presencia de la variable <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">\\$branch</span> antes de ejecutar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">git\n  pull</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>@servers(['web' =&gt; '192.168.1.1'])\n@task('deploy', ['on' =&gt; 'web'])\n    cd site\n    @if (\\$branch)\n        git pull origin {{ \\$branch }}\n    @endif\n    php artisan migrate\n@endtask\n</code></pre>\n  <h3>Historias</h3>\n  <p>Las historias agrupan un conjunto de tareas con un nombre único y conveniente, permitiendo agrupar tareas pequeñas enfocandose en tareas más grandes. Por ejemplo, una historia\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">deploy</span> puede ejecutar las tareas <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">git</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">composer</span> al listar los nombres de las tareas en tu definición:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>@servers(['web' =&gt; '192.168.1.1'])\n@story('deploy')\n    git\n    composer\n@endstory\n@task('git')\n    git pull origin master\n@endtask\n@task('composer')\n    composer install\n@endtask\n</code></pre>\n  <p>Una vez que hayas finalizado de escribir tu historia, puedes ejecutarla como una tarea típica:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>envoy run deploy\n</code></pre>\n  <h3>Múltiples servidores</h3>\n  <p>Envoy te permite fácilmente ejecutar tareas a través de múltiples servidores. Primero, agrega servidores adicionales a tu declaración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@servers</span>. A cada servidor se le debe asignar un nombre único. Una vez definidos los servidores adicionales, deberás indicar en cuáles servidores se van a ejecutar las tareas, esto puede hacerse en el arreglo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">on</span> de cada tarea:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>@servers(['web-1' =&gt; '192.168.1.1', 'web-2' =&gt; '192.168.1.2'])\n@task('deploy', ['on' =&gt; ['web-1', 'web-2']])\n    cd site\n    git pull origin {{ \\$branch }}\n    php artisan migrate\n@endtask\n</code></pre>\n  <h4>Ejecución paralela</h4>\n  <p>Por defecto, las tareas serán ejecutadas en cada servidor en serie. En otras palabras, una tarea finaliza su ejecución en el primer servidor antes de proceder a ejecutarse en el segundo servidor. Si deseas ejecutar una tarea a través de múltiples servidores en paralelo, agrega la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">parallel</span> a la declaración de tu tarea:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>@servers(['web-1' =&gt; '192.168.1.1', 'web-2' =&gt; '192.168.1.2'])\n@task('deploy', ['on' =&gt; ['web-1', 'web-2'], 'parallel' =&gt; true])\n    cd site\n    git pull origin {{ \\$branch }}\n    php artisan migrate\n@endtask\n</code></pre>\n  <h2>Ejecutar tareas</h2>\n  <p>Para ejecutar una tarea o historia que esté definida en tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Envoy.blade.php</span>, ejecuta el comando de Envoy <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">run</span>, pasando el nombre de la tarea o historia que deseas ejecutar. Envoy va a ejecutar la tarea y mostrará el resultado de los servidores mientras se ejecuta la tarea:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>envoy run deploy\n</code></pre>\n  <h3>Confirmar ejecución de tarea</h3>\n  <p>Si deseas que se solicite confirmación antes de ejecutar una tarea en tus servidores, deberás añadir la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">confirm</span> a la declaración de tu tarea. Esta opción es particularmente útil para operaciones destructivas:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>@task('deploy', ['on' =&gt; 'web', 'confirm' =&gt; true])\n    cd site\n    git pull origin {{ \\$branch }}\n    php artisan migrate\n@endtask\n</code></pre>\n  <h2>Notificaciones</h2>\n  <h3>Slack</h3>\n  <p>\n    Envoy también permite enviar notificaciones a Slack después de ejecutar cada tarea. La directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@slack</span> acepta una URL de webhook a Slack y un nombre de canal. Puedes recuperar tu URL de webhook creando una integración \"Incoming WebHooks\" en el panel de control de Slack. Debes pasar la URL de webhook completa en la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@slack</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>@finished\n    @slack('webhook-url', '#bots')\n@endfinished\n</code></pre>\n  <p>Puedes proporcionar uno de los siguientes como el argumento del canal:</p>\n  <ul>\n    <li>Para enviar notificaciones a un canal: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">#canal</span></li>\n    <li>Para enviar notificaciones a un usuario: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@usuario</span></li>\n  </ul>\n  <h3>Discord</h3>\n  <p>\n    Envoy también soporta el envío de notificaciones a Discord después de que cada tarea es ejecutada. La dirctiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@discord</span> acepta una URL WebHook y un mensaje de Discord. Puedes recuperar tu URL webhook creando una \"Webhook\" en los ajustes de tu servidor y seleccionando en cuál canal publicar la webhook. También deberías pasar la URL de Webhook completa en la directiva <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">@discord</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>@finished\n    @discord('discord-webhook-url')\n@endfinished\n</code></pre>\n</div>"
      },
      {
        "titulo": "Laravel Horizon",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Laravel Horizon</h1>\n  <ul>\n    <li>Introducción</li>\n    <li>Actualización de Horizon</li>\n    <li>\n      Instalación\n      <ul>\n        <li>Configuración</li>\n        <li>Autorización del dashboard</li>\n      </ul>\n    </li>\n    <li>\n      Ejecutando Horizon\n      <ul>\n        <li>Usando Horizon</li>\n      </ul>\n    </li>\n    <li>Etiquetas</li>\n    <li>Notificaciones</li>\n    <li>Métricas</li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>Horizon proporciona un bonito panel de control y sistema de configuración controlado por código para Laravel, potenciado por colas de Redis. Horizon te permite monitorear fácilmente métricas claves de tu sistema de colas tales como tasa de rendimiento, tiempo de ejecución y fallas de tareas.\n  </p>\n  <p>Toda la configuración de tu worker es almacenada en un solo archivo de configuración sencillo, permitiendo que tu configuración quede en el código fuente donde tu equipo completo pueda colaborar.\n  </p>\n  <p></p>\n  <h2>Instalación</h2>\n  <p>Nota</p>\n  <p>Debes asegurarte de que tu conexión de cola está establecido a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redis</span> en tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue</span>.</p>\n  <p>Puedes usar Composer para instalar Horizon en tu proyecto de Laravel:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>composer require laravel/horizon\n</code></pre>\n  <p>Después de instalar Horizon, publica sus assets usando el comando Artisan\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">horizon:install</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan horizon:install\n</code></pre>\n  <p>Debes también crear la tabla <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">failed_jobs</span> que Laravel usará para almacenar cualquier trabajo en cola fallido:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan queue:failed-table\nphp artisan migrate\n</code></pre>\n  <h4>Actualización de horizon</h4>\n  <p>\n    Al actualizar a una nueva versión mayor de Horizon, es importante que revises cuidadosamente la guía de actualización .\n  </p>\n  <p>Además, debes volver a publicar los assets de Horizon:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan horizon:assets\n</code></pre>\n  <h3>Configuración</h3>\n  <p>Después de publicar los assets de Horizon, su principal archivo de configuración será colocado en\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/horizon.php</span>. Este archivo de configuración permite que configures las opciones del worker y cada opción de configuración incluye una descripción de su propósito, así que asegurate de explorar con gran detalle este archivo.</p>\n  <p>Nota</p>\n  <p>Debes asegurarte de que la porción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">environments</span> de tu archivo de configuración\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">horizon</span> contiene una entrada para cada entorno en el que planeas ejecutrar Horizon.\n  </p>\n  <h4>Opciones de balance</h4>\n  <p>Horizon permite que elijas entre tres estrategias de balance: <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">simple</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">auto</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>. La estrategia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">simple</span>, que es la opción por defecto del archivo de configuración, divide los trabajos entrantes de manera uniforme entre procesos:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'balance' =&gt; 'simple',\n</code></pre>\n  <p>La estrategia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">auto</span> ajusta el número de procesos trabajadores por cola basado en la carga de trabajo de la cola. Por ejemplo, si tu cola <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">notifications</span> tiene 1.000 trabajos esperando mientras tu cola <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">render</span> está vacía, Horizon asignará mas trabajadores a tu cola <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">notifications</span> hasta que esté vacía. Cuando la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">balance</span> esté establecida a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">false</span>, el comportamiento predeterminado de Laravel será usado, el cual procesa las colas en el orden que son listadas en tu configuración.</p>\n  <h4>Recorte de trabajos</h4>\n  <p>El archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">horizon</span> te permite configurar cuánto tiempo los trabajos de recientes y fallidos deben ser persistidos (en minutos). Por defecto, los trabajos recientes son mantenidos por una hora mientras que los trabajos fallidos son mantenidos por una semana:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'trim' =&gt; [\n    'recent' =&gt; 60,\n    'failed' =&gt; 10080,\n],\n</code></pre>\n  <h3>Autorización del dashboard</h3>\n  <p>Horizon muestra un dashboard o panel de control en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">/horizon</span>. Por defecto, sólo serás capaz de acceder a este dashboard en el entorno <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">local</span>. Dentro de tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Providers/HorizonServiceProvider.php</span>, hay un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">gate</span>. Este gate de autorización controla el acceso a Horizon en entornos <strong>no locales</strong>. Eres libre de modificar este gate como sea necesario para restringir el acceso a tu instalación de Horizon:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Register the Horizon gate.\n*\n* This gate determines who can access Horizon in non-local environments.\n*\n* @return void\n*/\nprotected function gate()\n{\n    Gate::define('viewHorizon', function (\\$user) {\n        return in_array(\\$user-&gt;email, [\n            'taylor@laravel.com',\n        ]);\n    });\n}\n</code></pre>\n  <h2>Ejecutando Horizon</h2>\n  <p>Una vez que has configurado tus workers en el archivo de configuración\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/horizon.php</span>, puedes ejecutar Horizon usando el comando Artisan\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">horizon</span>. Este único comando iniciará todos tus workers configurados:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan horizon\n</code></pre>\n  <p>Puedes pausar los procesos de Horizon e instruirlo para continuar procesando trabajos usando los comandos Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">horizon:pause</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">horizon:continue</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan horizon:pause\nphp artisan horizon:continue\n</code></pre>\n  <p>Puedes terminar elegantemente el proceso maestro de Horizon en tu máquina usando el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">horizon:terminate</span>. Cualquiera de los trabajos que Horizon esté procesando actualmente será completado y después Horizon parará:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan horizon:terminate\n</code></pre>\n  <h3>Usando Horizon</h3>\n  <p>Si estás usando Horizon en un servidor activo, deberías configurar un monitor de proceso para monitorear el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">php artisan horizon</span> y reiniciarlo si éste sale inesperadamente. Al momento de usar código reciente en tu servidor, necesitarás instruir el proceso maestro de Horizon para que termine así puede ser reiniciado por tu monitor de proceso y recibir tu cambios de código.</p>\n  <h4>Configuración de Supervisor</h4>\n  <p>Si estás usando el monitor de procesos de Supervisor para administrar tu proceso\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">horizon</span>, el siguiente archivo de configuración debería ser suficiente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>[program:horizon]\nprocess_name=%(program_name)s\ncommand=php /home/forge/app.com/artisan horizon\nautostart=true\nautorestart=true\nuser=forge\nredirect_stderr=true\nstdout_logfile=/home/forge/app.com/horizon.log\n</code></pre>\n  <p>TIP</p>\n  <p>\n    Si no estás cómodo administrando tus propios servidores, considera usar Laravel Forge . Forge aprovisiona tus propios servidores PHP 7+ con todo lo que necesitas para administrar modernas aplicaciones robustas de Laravel con Horizon.\n  </p>\n  <h2>Etiquetas</h2>\n  <p>Horizon permite que asignes “etiquetas” a los trabajos, incluyendo correos válidos, difusiones de eventos, notificaciones y listeners de eventos encolados. De hecho, Horizon etiquetará inteligente y automáticamente la mayoría de los trabajos dependiendo de los modelos Eloquent que estén adjuntos al trabajo. Por ejemplo, echemos un vistazo al siguiente worker:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Jobs;\nuse App\\Video;\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Queue\\SerializesModels;\nuse Illuminate\\Queue\\InteractsWithQueue;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Foundation\\Bus\\Dispatchable;\nclass RenderVideo implements ShouldQueue\n{\n    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;\n    /**\n    * The video instance.\n    *\n    * @var \\App\\Video\n    */\n    public \\$video;\n    /**\n    * Create a new job instance.\n    *\n    * @param  \\App\\Video  \\$video\n    * @return void\n    */\n    public function __construct(Video \\$video)\n    {\n        \\$this-&gt;video = \\$video;\n    }\n    /**\n    * Execute the job.\n    *\n    * @return void\n    */\n    public function handle()\n    {\n        //\n    }\n}\n</code></pre>\n  <p>Si este trabajo es encolado con una instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Video</span> que tenga un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">id</span> de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">1</span>, recibirá automáticamente la etiqueta <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Video:1</span>. Esto es debido a que Horizon examinará las propiedades del trabajo para cualquier modelo Eloquent. Si los modelos Eloquent son encontrados, Horizon etiquetará inteligentemente el trabajo usando el nombre de la clase y la clave primaria del modelo.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$video = App\\Video::find(1);\nApp\\Jobs\\RenderVideo::dispatch(\\$video);\n</code></pre>\n  <h4>Etiquetado manual</h4>\n  <p>Si prefieres definir manualmente las etiquetas para uno de tus objetos encolables, puedes definir un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tags</span> en la clase:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>class RenderVideo implements ShouldQueue\n{\n    /**\n    * Get the tags that should be assigned to the job.\n    *\n    * @return array\n    */\n    public function tags()\n    {\n        return ['render', 'video:'.\\$this-&gt;video-&gt;id];\n    }\n}\n</code></pre>\n  <h2>Notificaciones</h2>\n  <blockquote>\n    <p><strong>Note:</strong> Al momento de configurar Horizon para enviar notificaciones de Slack o SMS, también deberías revisar los prerequisitos para el manejador de notificaciones relevante.\n    </p>\n  </blockquote>\n  <p>Si prefieres ser notificado cuando una de tus colas tenga un largo tiempo de inactividad, puedes usar los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Horizon::routeMailNotificationsTo</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Horizon::routeSlackNotificationsTo</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Horizon::routeSmsNotificationsTo</span>. Puedes ejecutar estos métodos desde el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">HorizonServiceProvider</span> de tu aplicación:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Horizon::routeMailNotificationsTo('example@example.com');\nHorizon::routeSlackNotificationsTo('slack-webhook-url', '#channel');\nHorizon::routeSmsNotificationsTo('15556667777');\n</code></pre>\n  <h4>Configurando las notificaciones de umbrales de tiempo de inactividad</h4>\n  <p>Puedes configurar cuántos segundos son considerados un \"tiempo de inactividad\" dentro de tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/horizon.php</span>. La opción de configuración\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">waits</span> dentro de este archivo permite que controles el umbral de tiempo de inactividad para cada combinación conexión / cola:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'waits' =&gt; [\n    'redis:default' =&gt; 60,\n],\n</code></pre>\n  <h2>Métricas</h2>\n  <p>Horizon incluye un panel de métricas, el cual proporciona información de tus tiempos de trabajo y de espera en cola y tasa de rendimiento. Con el propósito de agregar contenido a este panel, deberías configurar el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">snapshot</span> de Horizon para que se ejecute cada 5 minutos por medio del planificador de tu aplicación:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Define the application's command schedule.\n*\n* @param  \\Illuminate\\Console\\Scheduling\\Schedule  \\$schedule\n* @return void\n*/\nprotected function schedule(Schedule \\$schedule)\n{\n    \\$schedule-&gt;command('horizon:snapshot')-&gt;everyFiveMinutes();\n}\n</code></pre>\n</div>"
      },
      {
        "titulo": "Laravel Passport",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Laravel Passport</h1>\n  <ul>\n    <li>Introducción</li>\n    <li>\n      Instalación\n      <ul>\n        <li>Inicio rápido de frontend</li>\n        <li>Despliegue de passport</li>\n      </ul>\n    </li>\n    <li>\n      Configuración\n      <ul>\n        <li>Duración de tokens</li>\n        <li>Sobrescribiendo modelos predeterminados</li>\n      </ul>\n    </li>\n    <li>\n      Emitiendo tokens de acceso\n      <ul>\n        <li>Administrando clientes</li>\n        <li>Solicitando tokens</li>\n        <li>Actualización de tokens</li>\n      </ul>\n    </li>\n    <li>\n      Tokens de permiso de contraseña\n      <ul>\n        <li>Creando un cliente con permiso de contraseña</li>\n        <li>Solicitando tokens</li>\n        <li>Solicitando todos los alcances</li>\n        <li>Personalizando el campo username</li>\n      </ul>\n    </li>\n    <li>Tokens de permiso implícitos</li>\n    <li>Tokens de permiso de credenciales de cliente</li>\n    <li>\n      Tokens de acceso personal\n      <ul>\n        <li>Creando un cliente de acceso personal</li>\n        <li>Administrando tokens de acceso personal</li>\n      </ul>\n    </li>\n    <li>\n      Protegiendo rutas\n      <ul>\n        <li>Por medio de middleware</li>\n        <li>Pasando el token de acceso</li>\n      </ul>\n    </li>\n    <li>\n      Alcances de token\n      <ul>\n        <li>Definiendo alcances</li>\n        <li>Alcance predeterminado</li>\n        <li>Asignando alcances a los Tokens</li>\n        <li>Verificando alcances</li>\n      </ul>\n    </li>\n    <li>Consumiendo tu API con JavaScript</li>\n    <li>Eventos</li>\n    <li>Pruebas</li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>\n    Laravel ya hace fácil ejecutar la autenticación por medio de los tradicionales formularios de inicio de sesión, pero ¿Qué información tenemos sobre APIs? Las APIs típicamente usan tokens para autenticar a los usuarios y no mantienen el estado de sesión entre solicitudes. Laravel hace de la autenticación de API algo muy simple usando Passport de Laravel, el cual proporciona una implementación de servidor OAuth2 completa para tu aplicación Laravel en sólo minutos. Passport está construido sobre el servidor OAuth2\n    <outboundlink></outboundlink>\n    que es mantenido por Andy Millington y Simon Hamp..\n  </p>\n  <p>Nota</p>\n  <p>\n    Esta documentación asume que estás familiarizado con OAuth2. Si no sabes nada sobre OAuth2, considera familiarizarte con la terminología general\n    <outboundlink></outboundlink>\n    y las características de Outh2 antes de continuar.\n  </p>\n  <h2>Instalación</h2>\n  <p>Para empezar, instala Passport por medio del gestor de paquetes Composer:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>composer require laravel/passport\n</code></pre>\n  <p>El proveedor de servicio de Passport registra su propio directorio de migración de base de datos con el framework, así que deberías migrar tu base de datos después de registrar el paquete. Las migraciones de Passport crearán las tablas que tu aplicación necesita para almacenar clientes y tokens de acceso:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan migrate\n</code></pre>\n  <p>A continuación, debes ejecutar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">passport:install</span>. Este comando creará las claves de encriptación necesarias para generar tokens de acceso seguro. Además, el comando creará clientes de \"acceso personal\" y \"permiso de contraseña\" los cuales serán usados para generar tokens de acceso:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan passport:install\n</code></pre>\n  <p>Después de ejecutar este comando, agrega el trait <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Laravel\\Passport\\HasApiTokens</span> a tu modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\User</span>. Este trait proporcionará algunos métodos helper para tu modelo los cuales permitirán que inspecciones el token y alcances del usuario autenticado:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Laravel\\Passport\\HasApiTokens;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nclass User extends Authenticatable\n{\n    use HasApiTokens, Notifiable;\n}\n</code></pre>\n  <p>Lo próximo, deberías ejecutar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Passport::routes</span> dentro del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span> de tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AuthServiceProvider</span>. Este método registrará las rutas necesarias para suministrar tokens y revocar tokens de acceso, clientes y tokens de acceso personal:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Providers;\nuse Laravel\\Passport\\Passport;\nuse Illuminate\\Support\\Facades\\Gate;\nuse Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\nclass AuthServiceProvider extends ServiceProvider\n{\n    /**\n    * The policy mappings for the application.\n    *\n    * @var array\n    */\n    protected \\$policies = [\n        'App\\Model' =&gt; 'App\\Policies\\ModelPolicy',\n    ];\n    /**\n    * Register any authentication / authorization services.\n    *\n    * @return void\n    */\n    public function boot()\n    {\n        \\$this-&gt;registerPolicies();\n        Passport::routes();\n    }\n}\n</code></pre>\n  <p>Finalmente, en tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/auth.php</span>, debes establecer la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">driver</span> del guardia de autenticación de <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">api</span> a\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">passport</span>. Esto indicará a tu aplicación que utilice el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">TokenGuard</span> de Passport al momento de autenticar las solicitudes de API entrantes:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'guards' =&gt; [\n    'web' =&gt; [\n        'driver' =&gt; 'session',\n        'provider' =&gt; 'users',\n    ],\n    'api' =&gt; [\n        'driver' =&gt; 'passport',\n        'provider' =&gt; 'users',\n    ],\n],\n</code></pre>\n  <h3>Personalización de la migración</h3>\n  <p>Si no vas a utilizar las migraciones predeterminadas de Passport, debes llamar al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Passport::ignoreMigrations</span> en el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">register</span> de tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AppServiceProvider</span>. Puedes exportar las migraciones por defecto usando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">php artisan vendor:publish --tag=passport-migrations</span>.\n  </p>\n  <p>Por defecto, Passport usa una columna de enteros para almacenar el <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">user_id</span>. Si tu aplicación utiliza un tipo de columna diferente para identificar a los usuarios (por ejemplo: UUID), debes modificar las migraciones de Passport predeterminadas después de publicarlas.</p>\n  <h3>Inicio rápido de frontend</h3>\n  <p>Nota</p>\n  <p>\n    Para usar los componentes de Vue, debes estar usando el framework de JavaScript Vue . Estos componentes también usarán el framework de CSS Bootstrap. Sin embargo, incluso si no estás usando estas herramientas, los componentes sirven como una referencia valiosa para tu propia implementación de frontend.\n  </p>\n  <p>\n    Passport viene con una API JSON que puedes usar para permitir que tus usuarios creen tokens de acceso de clientes y personal. Sin embargo, puede ser que consuma tiempo codificar un frontend para interactuar con estas APIs. Así que, Passport también incluye componentes de Vue pre-construidos que puedes usar como implementación de ejemplo o punto de inicio para tu propia implementación.\n  </p>\n  <p>Para publicar los componentes de Vue de Passport, usa el comando Artisan\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">vendor:publish</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan vendor:publish --tag=passport-components\n</code></pre>\n  <p>Los componentes publicados serán colocados en tu directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/js/components</span>. Una vez que los componentes han sido publicados, debes registrarlos en tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">resources/js/app.js</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Vue.component(\n    'passport-clients',\n    require('./components/passport/Clients.vue').default\n);\nVue.component(\n    'passport-authorized-clients',\n    require('./components/passport/AuthorizedClients.vue').default\n);\nVue.component(\n    'passport-personal-access-tokens',\n    require('./components/passport/PersonalAccessTokens.vue').default\n);\n</code></pre>\n  <p>Nota</p>\n  <p>\n    Antes de Laravel v 5.7.19, anexar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.default</span> al registrar componentes da como resultado un error de consola. Una explicación para este cambio puedes encontrarla en las notas de lanzamiento de Laravel Mix v 4.0.0 .\n  </p>\n  <p>Después de registrar los componentes, asegurate de ejecutar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">npm run dev</span> para recompilar tu código CSS/JS. Una vez que has recompilado tus código CSS/JS, puedes colocar los componentes dentro de una de las plantillas de tu aplicación para empezar a crear tokens de acceso clientes y personal:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;passport-clients&gt;&lt;/passport-clients&gt;\n&lt;passport-authorized-clients&gt;&lt;/passport-authorized-clients&gt;\n&lt;passport-personal-access-tokens&gt;&lt;/passport-personal-access-tokens&gt;\n</code></pre>\n  <h3>Despliegue de passport</h3>\n  <p>Al momento de usar Passport en tus servidores de producción por primera vez, es probable que debas ejecutar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">passport:keys</span>. Este comando genera las claves de encriptación que Passport necesita con el propósito de generar el token de acceso. Las claves generadas normalmente no son guardadas en control de código fuente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan passport:keys\n</code></pre>\n  <p>De ser necesario, puedes definir la ruta en la que se deben cargar las claves de Passport. Para lograr esto puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Passport::loadKeysFrom</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Register any authentication / authorization services.\n*\n* @return void\n*/\npublic function boot()\n{\n    \\$this-&gt;registerPolicies();\n    Passport::routes();\n    Passport::loadKeysFrom('/secret-keys/oauth');\n}\n</code></pre>\n  <h2>Configuración</h2>\n  <h3>Duración de tokens</h3>\n  <p>De forma predeterminada, Passport emite tokens de acceso de larga duración que caducan después de un año. Si prefieres configurar una duración de token más larga o más corta, puedes usar los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tokensExpireIn</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">refreshTokensExpireIn</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">personalAccessTokensExpireIn</span>. Estos métodos deberían ser ejecutados desde el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span> de tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AuthServiceProvider</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Register any authentication / authorization services.\n*\n* @return void\n*/\npublic function boot()\n{\n    \\$this-&gt;registerPolicies();\n    Passport::routes();\n    Passport::tokensExpireIn(now()-&gt;addDays(15));\n    Passport::refreshTokensExpireIn(now()-&gt;addDays(30));\n    Passport::personalAccessTokensExpireIn(now()-&gt;addMonths(6));\n}\n</code></pre>\n  <h3>Sobrescribiendo modelos predeterminados</h3>\n  <p>Eres en libre de extender los modelos usados internamente por Passport. A continuación, puedes indicarle a Passport que utilice tus modelos personalizados a través de la clase\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Passport</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use App\\Models\\Passport\\Client;\nuse App\\Models\\Passport\\Token;\nuse App\\Models\\Passport\\Authspan;\nuse App\\Models\\Passport\\PersonalAccessClient;\n/**\n* Register any authentication / authorization services.\n*\n* @return void\n*/\npublic function boot()\n{\n    \\$this-&gt;registerPolicies();\n    Passport::routes();\n    Passport::useTokenModel(Token::class);\n    Passport::useClientModel(Client::class);\n    Passport::useAuthspanModel(Authspan::class);\n    Passport::usePersonalAccessClientModel(PersonalAccessClient::class);\n}\n</code></pre>\n  <h2>Emitiendo tokens de acceso</h2>\n  <p>Usar OAuth2 con códigos de autorización es la forma en que la mayoría de los desarrolladores están familiarizados con OAuth2. Al usar códigos de autorización, una aplicación cliente redireccionará un usuario a tu servidor donde aprobará o denegará la solicitud para emitir un token de acceso al cliente.</p>\n  <h3>Administrando clientes</h3>\n  <p>En primer lugar, los desarrolladores que crean aplicaciones que necesitan interactuar con la API de tu aplicación necesitarán registrar su aplicación con la tuya creando un \"cliente\". Normalmente, esto consiste en proporcionar el nombre de su aplicación y una dirección URL a la que tu aplicación puede redirigir después de que los usuarios aprueben su solicitud de autorización.\n  </p>\n  <h4>El comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">passport:client</span></h4>\n  <p>La forma más simple de crear un cliente es usando el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">passport:client</span>. Este comando puede ser usado para crear tus propios clientes para probar tu funcionalidad OAuth2. Cuando ejecutes el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">client</span>, Passport te pedirá más información sobre tu cliente y te proporcionará un ID y clave secreta de cliente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan passport:client\n</code></pre>\n  <p><strong>Redirigir URLs</strong></p>\n  <p>Si deseas incluir en la lista blanca varias direcciones URL de redireccionamiento para tu cliente, puedse especificarlas mediante una lista delimitadas por comas cuando se le solicite la dirección URL mediante el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">passport:client</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>http://example.com/callback,http://examplefoo.com/callback\n</code></pre>\n  <p>Nota</p>\n  <p>Cualquier URL que contenga comas debe estar codificada.</p>\n  <h4>API JSON</h4>\n  <p>Debido a que tus usuarios no podrán utilizar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">client</span>, Passport proporciona una API JSON que puedes usar para crear clientes. Esto te ahorra la molestia de tener que codificar manualmente los controladores para crear, actualizar y eliminar clientes.</p>\n  <p>\n    Sin embargo, necesitarás acoplar la API JSON de Passport con tu propio frontend para proporcionar un dashboard para que tus usuarios administren sus clientes. A continuación, revisaremos todos los endpoints de API para administrar clientes. Por conveniencia, usaremos Axios para demostrar la realización de solicitudes HTTP a los endpoints.\n  </p>\n  <p>La API JSON está protegida por los middleware <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">web</span> y <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">auth</span>; por lo tanto, sólo puede ser llamada desde tu propia aplicación. No se puede llamar desde una fuente externa.\n  </p>\n  <p>TIP</p>\n  <p>Si no quieres implementar tu mismo el frontend completo para administra</p>\n</div>"
      },
      {
        "titulo": "Scout para Laravel",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Scout para Laravel</h1>\n  <ul>\n    <li>Introducción</li>\n    <li>\n      Instalación\n      <ul>\n        <li>Colas</li>\n        <li>Requisitos previos del driver</li>\n      </ul>\n    </li>\n    <li>\n      Configuración\n      <ul>\n        <li>Configurando indices de modelo</li>\n        <li>Configurando datos de búsqueda</li>\n        <li>Configurando el ID de modelo</li>\n      </ul>\n    </li>\n    <li>\n      Indexando\n      <ul>\n        <li>Importación en lote (batch)</li>\n        <li>Agregando registros</li>\n        <li>Actualizando registros</li>\n        <li>Eliminando registros</li>\n        <li>Pausando indexamiento</li>\n        <li>Instancias de modelos searchable condicionales</li>\n      </ul>\n    </li>\n    <li>\n      Búsqueda\n      <ul>\n        <li>Cláusulas where</li>\n        <li>Paginación</li>\n        <li>Eliminación lógica</li>\n        <li>Personalizando motores de búsqueda</li>\n      </ul>\n    </li>\n    <li>Motores personalizados</li>\n    <li>Macros de constructor (builder)</li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>\n    Laravel Scout proporciona una sencilla solución para agregar búsquedas de texto completo a tus modelos Eloquent . Usando observadores de modelo, Scout mantendrá automáticamente tus índices de búsqueda sincronizados con tus registros de Eloquent.\n  </p>\n  <p>\n    Actualmente, Scout viene con el controlador (driver) Algolia\n    <outboundlink></outboundlink>\n    ; sin embargo, la escritura de controladores personalizados es simple y eres libre de extender Scout con tus propias implementaciones de búsqueda.\n  </p>\n  <h2>Instalación</h2>\n  <p>Primero, instala Scout por medio del paquete administrador de Composer:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>composer require laravel/scout\n</code></pre>\n  <p>Después de instalar Scout, debes publicar la configuración de Scout usando el comando Artisan\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">vendor:publish</span>. Este comando publicará el archivo de configuración\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">scout.php</span> en tu directorio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan vendor:publish --provider=\"Laravel\\Scout\\ScoutServiceProvider\"\n</code></pre>\n  <p>Finalmente, agrega el trait <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Laravel\\Scout\\Searchable</span> al modelo en el que te gustaría hacer búsquedas. Este trait registrará un observador de modelo para mantener sincronizado con tu controlador de búsqueda:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Laravel\\Scout\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Post extends Model\n{\n    use Searchable;\n}\n</code></pre>\n  <h3>Colas</h3>\n  <p>\n    Aunque no es estrictamente necesario para usar Scout, deberías considerar fuertemente configurar un controlador de cola antes de usar el paquete. La ejecución de un trabajador (worker) de cola permitirá a Scout poner en cola todas las operaciones que sincronizan la información de tu modelo con tus índices de búsqueda, proporcionando mejores tiempos de respuesta para la interfaz web de tu aplicación.\n  </p>\n  <p>Una vez que hayas configurado tu controlador de cola, establece el valor de la opción\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">queue</span> en tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/scout.php</span> a\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'queue' =&gt; true,\n</code></pre>\n  <h3>Requisitos previos del driver</h3>\n  <h4>Algolia</h4>\n  <p>Al usar el controlador Algolia, debes configurar tus credenciales <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">id</span> y\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">secret</span> en tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/scout.php</span>. Una vez que tus credenciales han sido configuradas, también necesitarás instalar Algolia PHP SDK por medio del gestor de paquetes Composer:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>composer require algolia/algoliasearch-client-php:^2.2\n</code></pre>\n  <h2>Configuración</h2>\n  <h3>Configurando indices de modelo</h3>\n  <p>Cada modelo Eloquent es sincronizado con un \"índice\" de búsqueda dado, el cual contiene todos los registros que pueden ser encontrados para ese modelo. En otras palabras, puedes pensar en cada índice como una tabla MySQL. De forma predeterminada, cada modelo será persistido en un índice que coincida con el típico nombre de la \"tabla\" del modelo. Típicamente, esta es la forma plural del nombre del modelo; sin embargo, eres libre de personalizar el índice del modelo sobrescribiendo el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">searchableAs</span> en el modelo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Laravel\\Scout\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Post extends Model\n{\n    use Searchable;\n    /**\n    * Get the index name for the model.\n    *\n    * @return string\n    */\n    public function searchableAs()\n    {\n        return 'posts_index';\n    }\n}\n</code></pre>\n  <h3>Configuración de datos de búsqueda</h3>\n  <p>De forma predeterminada, la forma <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toArray</span> completa de un modelo dado será persistida en su índice de búsqueda. Si prefieres personalizar los datos que son sincronizados en el índice de búsqueda, puedes sobrescribir el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">toSearchableArray</span> en el modelo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Laravel\\Scout\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Post extends Model\n{\n    use Searchable;\n    /**\n    * Get the indexable data array for the model.\n    *\n    * @return array\n    */\n    public function toSearchableArray()\n    {\n        \\$array = \\$this-&gt;toArray();\n        // Customize array...\n        return \\$array;\n    }\n}\n</code></pre>\n  <h3>Configurando el ID del modelo</h3>\n  <p>Por defecto, Scout usará la clave primaria del modelo como su ID única, almacenada en el índice de búsqueda. Si necesitas personalizar este comportamiento, se puede sobrescribir el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">getScoutKey</span> en el modelo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App;\nuse Laravel\\Scout\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass User extends Model\n{\n    use Searchable;\n    /**\n    * Get the value used to index the model.\n    *\n    * @return mixed\n    */\n    public function getScoutKey()\n    {\n        return \\$this-&gt;email;\n    }\n}\n</code></pre>\n  <h2>Indexando</h2>\n  <h3>Importación en lote (batch)</h3>\n  <p>Si estás instalando Scout en un proyecto existente, puede que ya tengas registros de base de datos que necesites importar dentro de tu manejador de búsqueda. Scout proporciona un comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">import</span> que puedes usar para importar todos tus registros existentes a tus índices de búsqueda:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan scout:import \"App\\Post\"\n</code></pre>\n  <p>El comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">flush</span> puede ser usado para eliminar todos los registros de un modelo de los indicies de busqueda:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan scout:flush \"App\\Post\"\n</code></pre>\n  <h3>Agregando registros</h3>\n  <p>Una vez que has agregado el trait <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Laravel\\Scout\\Searchable</span> a tu modelo, todo lo que necesitas hacer es llamar a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">save</span> en una instancia de modelo y será agregada automáticamente a tu índice de búsqueda. Si has configurado Scout para usar colas esta operación será ejecutada en segundo plano por tu worker de cola:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$order = new App\\Order;\n// ...\n\\$order-&gt;save();\n</code></pre>\n  <h4>Agregando por medio de consulta</h4>\n  <p>\n    Si prefieres agregar una colección de modelos a tu índice de búsqueda por medio de una consulta Eloquent, puedes encadenar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">searchable</span> con una consulta Eloquent. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">searchable</span> dividirá (chunk) los resultados de la consulta y agregará los registros a tu índice de búsqueda. Otra vez, si has configurado Scout para usar colas, todos estas porciones serán agregadas en segundo plano por tus workers de cola:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Agregando Por Medio de consulta Eloquent...\nApp\\Order::where('price', '&gt;', 100)-&gt;searchable();\n// Puedes también agregar registros a través de relaciones...\n\\$user-&gt;orders()-&gt;searchable();\n// Puedes también agregar registros a través de colecciones...\n\\$orders-&gt;searchable();\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">searchable</span> puede ser considerado una operación \"upsert\". En otras palabras, si el registro del modelo ya está en tu índice, será actualizado. Si no existe en el índice de búsqueda, será agregado al índice.</p>\n  <h3>Actualizando registros</h3>\n  <p>Para actualizar un modelo searchable, sólo necesitas actualizar las propiedades de la instancia del modelo y llamar a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">save</span> en el modelo en tu base de datos. Scout persistirá automáticamente los cambios en tu índice de búsqueda:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$order = App\\Order::find(1);\n// Update the order...\n\\$order-&gt;save();\n</code></pre>\n  <p>También puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">searchable</span> en una consulta Eloquent para actualizar una colección de modelos. Si los modelos no existen en tu índice de búsqueda, serán creados:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Actualizando a través de consulta de Eloquent...\nApp\\Order::where('price', '&gt;', 100)-&gt;searchable();\n// Puedes actualizar por medio de relaciones...\n\\$user-&gt;orders()-&gt;searchable();\n// También puedes actualizar a través de colecciones...\n\\$orders-&gt;searchable();\n</code></pre>\n  <h3>Eliminando registros</h3>\n  <p>\n    Para eliminar un registro de tu índice, llama a <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">delete</span> en el modelo de la base de datos. Esta forma de eliminar es también compatible con los modelos eliminados lógicamente :\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$order = App\\Order::find(1);\n\\$order-&gt;delete();\n</code></pre>\n  <p>Si no quieres obtener el modelo antes de eliminar el registro, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">unsearchable</span> en una instancia de consulta de Eloquent o una colección:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Removing via Eloquent query...\nApp\\Order::where('price', '&gt;', 100)-&gt;unsearchable();\n// You may also remove via relationships...\n\\$user-&gt;orders()-&gt;unsearchable();\n// You may also remove via collections...\n\\$orders-&gt;unsearchable();\n</code></pre>\n  <h3>Pausando el indexamiento</h3>\n  <p>Algunas veces puedes necesitar ejecutar un lote de operaciones de Eloquent en un modelo sin sincronizar los datos del modelo con tu índice de búsqueda. Puedes hacer esto usando el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withoutSyncingToSearch</span>. Este método acepta una sola función de retorno la cual será ejecutada inmediatamente. Cualquiera de las operaciones de modelo que ocurran dentro de la función de retorno no serán sincronizadas con el índice del modelo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>App\\Order::withoutSyncingToSearch(function () {\n    // Perform model actions...\n});\n</code></pre>\n  <h3>Instancias de modelos searchable condicionales</h3>\n  <p>A veces es posible que solo tengas que hacer que un modelo searchable bajo ciertas condiciones. Por ejemplo, imagina que tienes el modelo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">App\\Post</span> que puede estar en uno de dos estados: \" borrador (draft)\" y \"publicado (published)\". Es posible que solo desees permitir que las publicaciones \"publicadas\" puedan buscarse. Para lograr esto, puede definir un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">shouldBeSearchable</span> en su modelo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>public function shouldBeSearchable()\n{\n    return \\$this-&gt;isPublished();\n}\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">shouldBeSearchable</span> solo se aplica cuando se manipulan modelos a través del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">save</span>, las consultas o las relaciones. Puedes hacer que los modelos o las colecciones se puedan buscar directamente utilizando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">searchable</span> que sobrescribirá el resultado del método<span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">shouldBeSearchable</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Respetará \"shouldBeSearchable\"...\nApp\\Order::where('price', '&gt;', 100)-&gt;searchable();\n\\$user-&gt;orders()-&gt;searchable();\n\\$order-&gt;save();\n// Sobrescribirá \"shouldBeSearchable\"...\n\\$orders-&gt;searchable();\n\\$order-&gt;searchable();\n</code></pre>\n  <h2>Búsqueda</h2>\n  <p>Puedes empezar a buscar un modelo usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">search</span>. Este método acepta una sola cadena que será usada para buscar tus modelos. Luego debes encadenar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">get</span> con la consulta de búsqueda para obtener los modelos Eloquent que coincidan con la consulta de búsqueda dada:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$orders = App\\Order::search('Star Trek')-&gt;get();\n</code></pre>\n  <p>Ya que las búsquedas de Scout devuelven una colección de modelos, incluso puedes devolver los resultados directamente desde una ruta o controlador y serán convertidos automáticamente a JSON:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Illuminate\\Http\\Request;\nRoute::get('/search', function (Request \\$request) {\n    return App\\Order::search(\\$request-&gt;search)-&gt;get();\n});\n</code></pre>\n  <p>Si prefieres obtener los resultados crudos (raw) antes de que sean convertidos a modelos de Eloquent, deberías usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">raw</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$orders = App\\Order::search('Star Trek')-&gt;raw();\n</code></pre>\n  <p>Las consultas de búsqueda son ejecutadas típicamente en el índice especificado por el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">searchableAs</span> del modelo. Sin embargo, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">within</span> para especificar un índice personalizado que debería ser buscado en su lugar:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$orders = App\\Order::search('Star Trek')\n    -&gt;within('tv_shows_popularity_desc')\n    -&gt;get();\n</code></pre>\n  <h2>Cláusulas where</h2>\n  <p>Scout permite que agregues cláusulas \"where\" sencillas a tus consultas de búsqueda. Actualmente, estas cláusulas solamente soportan verificaciones básicas de igualdad numérica y son útiles principalmente para establecer el alcance de las consultas de búsqueda por un ID. Ya que un índice de búsqueda no es una base de datos relacional, cláusulas \"where\" más avanzadas no están soportadas actualmente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$orders = App\\Order::search('Star Trek')-&gt;where('user_id', 1)-&gt;get();\n</code></pre>\n  <h3>Paginación</h3>\n  <p>\n    Además de obtener una colección de modelos, puedes paginar los resultados de tu búsqueda usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">paginate</span>. Este método devolverá una instancia <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Paginator</span> justo como si hubieras paginada una consulta Eloquent tradicional :\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$orders = App\\Order::search('Star Trek')-&gt;paginate();\n</code></pre>\n  <p>Puedes especificar cuántos modelos obtener por página al pasar la cantidad como primer argumento del método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">paginate</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$orders = App\\Order::search('Star Trek')-&gt;paginate(15);\n</code></pre>\n  <p>\n    Una vez que has obtenido los resultados, puedes mostrar los resultados y renderizar los enlaces de página usando Blade justo como si hubieras paginado una consulta Eloquent tradicional:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;div class=\"container\"&gt;\n    @foreach (\\$orders as \\$order)\n        {{ \\$order-&gt;price }}\n    @endforeach\n&lt;/div&gt;\n{{ \\$orders-&gt;links() }}\n</code></pre>\n  <h3>Eliminación lógica</h3>\n  <p>\n    Si tus modelos indexados son de eliminación lógica y necesitas buscar tus modelos eliminados lógicamente, establece la opción\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">soft_delete</span> del archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/scout.php</span> en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'soft_delete' =&gt; true,\n</code></pre>\n  <p>Cuando esta opción de configuración es <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>, Scout no removerá del índice los modelos eliminados lógicamente. En su lugar, establecerá un atributo escondido <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">__soft_deleted</span> en el registro indexado. Luego, puedes usar los métodos <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">withTrashed</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">onlyTrashed</span> para recuperar los registros eliminados lógicamente al realizar una búsqueda:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>// Include trashed records when retrieving results...\n\\$orders = App\\Order::search('Star Trek')-&gt;withTrashed()-&gt;get();\n// Only include trashed records when retrieving results...\n\\$orders = App\\Order::search('Star Trek')-&gt;onlyTrashed()-&gt;get();\n</code></pre>\n  <p>TIP</p>\n  <p>Cuando un modelo eliminado lógicamente es eliminado permanentemente utilizando\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">forceDelete</span>, Scout lo removerá del índice de búsqueda automáticamente.</p>\n  <h3>Personalizando motores de búsqueda</h3>\n  <p>Si necesitas personalizar el comportamiento de un motor de búsqueda, puedes pasar una función de retorno (callback) como el segundo argumento al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">search</span>. Por ejemplo, podrías usar este callback para añadir datos de geolocalización a tus opciones de búsqueda antes de que la consulta de búsqueda sea pasada a Algolia:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Algolia\\AlgoliaSearch\\SearchIndex;\nApp\\Order::search('Star Trek', function (SearchIndex \\$algolia, string \\$query, array \\$options) {\n    \\$options['body']['query']['bool']['filter']['geo_distance'] = [\n        'distance' =&gt; '1000km',\n        'location' =&gt; ['lat' =&gt; 36, 'lon' =&gt; 111],\n    ];\n    return \\$algolia-&gt;search(\\$query, \\$options);\n})-&gt;get();\n</code></pre>\n  <h2>Motores personalizados</h2>\n  <h4>Escribiendo el motor</h4>\n  <p>Si ninguno de los motores de búsqueda integrados en Scout no se ajustan a tus necesidades, puedes escribir tu propio motor personalizado y registrarlo con Scout. Tu motor debería extender la clase abstracta <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Laravel\\Scout\\Engines\\Engine</span>. Esta clase abstracta contiene ocho métodos que tu motor de búsqueda personalizado debe implementar:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Laravel\\Scout\\Builder;\nabstract public function update(\\$models);\nabstract public function delete(\\$models);\nabstract public function search(Builder \\$builder);\nabstract public function paginate(Builder \\$builder, \\$perPage, \\$page);\nabstract public function mapIds(\\$results);\nabstract public function map(\\$results, \\$model);\nabstract public function getTotalCount(\\$results);\nabstract public function flush(\\$model);\n</code></pre>\n  <p>Puedes encontrar útil revisar las implementaciones de estos métodos en la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Laravel\\Scout\\Engines\\AlgoliaEngine</span>. Esta clase te proporcionará un buen punto de inicio para aprender cómo implementar cada uno de estos métodos en tu propio motor.</p>\n  <h4>Registrando el motor</h4>\n  <p>Una vez que hayas escrito tu motor personalizado, puedes registrarlo con Scout usando el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">extend</span> del administrador de motor de Scout. Deberías ejecutar el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">extend</span> desde el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span> de tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AppServiceProvider</span> o cualquier otro proveedor de servicio usado por tu aplicación. Por ejemplo, si has escrito un <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">MySqlSearchEngine</span>, puedes registrarlo como sigue:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Laravel\\Scout\\EngineManager;\n/**\n* Bootstrap any application services.\n*\n* @return void\n*/\npublic function boot()\n{\n    resolve(EngineManager::class)-&gt;extend('mysql', function () {\n        return new MySqlSearchEngine;\n    });\n}\n</code></pre>\n  <p>Una vez que tu motor ha sido registrado, puedes especificarlo como tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">driver</span> predeterminado de Scout en tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/scout.php</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'driver' =&gt; 'mysql',\n</code></pre>\n  <h2>Macros de constructor (builder)</h2>\n  <p>Si deseas definir un método constructor personalizado, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">macro</span> en la clase <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Laravel\\Scout\\Builder</span>. Típicamente, las \"macros\" deben ser definidas dentro de un método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span> de un proveedor de servicios:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Providers;\nuse Laravel\\Scout\\Builder;\nuse Illuminate\\Support\\ServiceProvider;\nuse Illuminate\\Support\\Facades\\Response;\nclass ScoutMacroServiceProvider extends ServiceProvider\n{\n    /**\n    * Register the application's scout macros.\n    *\n    * @return void\n    */\n    public function boot()\n    {\n        Builder::macro('count', function () {\n            return \\$this-&gt;engine-&gt;getTotalCount(\n                \\$this-&gt;engine()-&gt;search(\\$this)\n            );\n        });\n    }\n}\n</code></pre>\n  <p>La función <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">macro</span> acepta un nombre como su primer argumento y un Closure como el segundo. El CLosure del macro será ejecutado al momento de llamar el nombre del macro desde una implementación <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Laravel\\Scout\\Builder</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>App\\Order::search('Star Trek')-&gt;count();\n</code></pre>\n</div>"
      },
      {
        "titulo": "Laravel Telescope",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Laravel Socialite</h1>\n  <ul>\n    <li>Introducción</li>\n    <li>Actualizando Socialite</li>\n    <li>Instalación</li>\n    <li>Configuración</li>\n    <li>Enrutamiento</li>\n    <li>Parámetros opcionales</li>\n    <li>Alcances de acceso</li>\n    <li>Autenticación sin estado</li>\n    <li>Obteniendo detalles de usuario</li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>\n    Además de la típica, autenticación basada en formularios, Laravel también proporciona una sencilla y conveniente forma de autenticar con proveedores OAuth usando Laravel Socialite\n    <outboundlink></outboundlink>\n    . Actualmente Socialite soporta autenticación con Facebook, Twitter, LinkedIn, Google, Github, GitLab y Bitbucket.\n  </p>\n  <p>TIP</p>\n  <p>\n    Los adaptadores para otras plataformas son listados en el sitio web de Proveedores de Socialite\n    <outboundlink></outboundlink>\n    manejado por la comunidad.\n  </p>\n  <h2>Actualizando Socialite</h2>\n  <p>\n    Al actualizar a una nueva versión principal de Socialite, es importante que revise cuidadosamente la guía de actualización .\n  </p>\n  <h2>Instalación</h2>\n  <p>Para empezar con Socialite, usa Composer para agregar el paquete a las dependencias de tu proyecto:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>composer require laravel/socialite\n</code></pre>\n  <h2>Configuración</h2>\n  <p>Antes de usar Socialite, también necesitaras agregar las credenciales para los servicios OAuth que tu aplicación utiliza. Estas credenciales deberían estar colocadas en tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/services.php</span>, y debería usar la clave <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">facebook</span>,\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">twitter</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">linkedin</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">google</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">github</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">gitlab</span> o <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">bitbucket</span> dependiendo del proveedor que tu aplicación requiera. Por ejemplo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'github' =&gt; [\n    'client_id' =&gt; env('GITHUB_CLIENT_ID'),         // Your GitHub Client ID\n    'client_secret' =&gt; env('GITHUB_CLIENT_SECRET'), // Your GitHub Client Secret\n    'redirect' =&gt; 'http://your-callback-url',\n],\n</code></pre>\n  <p>TIP</p>\n  <p>Si la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redirect</span> contiene una ruta relativa, será resuelta automáticamente a una URL completamente calificada.</p>\n  <h2>Enrutamiento</h2>\n  <p>A continuación, ¡estás listo para autenticar usuarios! Necesitarás dos rutas: una para redireccionar el usuario al proveedor OAuth y otra para recibir la función de retorno del proveedor después de la autenticación. Accederemos a Socialite usando la clase facade <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Socialite</span>:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>&lt;?php\nnamespace App\\Http\\Controllers\\Auth;\nuse Socialite;\nclass LoginController extends Controller\n{\n    /**\n    * Redirect the user to the GitHub authentication page.\n    *\n    * @return \\Illuminate\\Http\\Response\n    */\n    public function redirectToProvider()\n    {\n        return Socialite::driver('github')-&gt;redirect();\n    }\n    /**\n    * Obtain the user information from GitHub.\n    *\n    * @return \\Illuminate\\Http\\Response\n    */\n    public function handleProviderCallback()\n    {\n        \\$user = Socialite::driver('github')-&gt;user();\n        // \\$user-&gt;token;\n    }\n}\n</code></pre>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">redirect</span> se toma la tarea de enviar el usuario al proveedor OAuth, mientras que el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">user</span> leerá la solicitud entrante y obtendrá lá información del usuario desde el proveedor.</p>\n  <p>Necesitarás definir las rutas para tus métodos de controlador:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>Route::get('login/github', 'Auth\\LoginController@redirectToProvider');\nRoute::get('login/github/callback', 'Auth\\LoginController@handleProviderCallback');\n</code></pre>\n  <h2>Parámetros opcionales</h2>\n  <p>Un número de proveedores OAuth soportan parámetros opcionales en la solicitud de redirección. Para incluir algunos de los parámetros opcionales en la solicitud, llama el método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">with</span> con un arreglo asociativo:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>return Socialite::driver('google')\n    -&gt;with(['hd' =&gt; 'example.com'])\n    -&gt;redirect();\n</code></pre>\n  <p>Nota</p>\n  <p>Al momento de usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">with</span>, procura no pasar algunas palabras reservadas tales como <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">state</span> or <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">response_type</span>.</p>\n  <h2>Alcances de acceso</h2>\n  <p>Antes de redirecionar al usuario, también puedes agregar \"alcances (scopes)\" adicionales en la solicitud usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">scopes</span>. Este método mezclará todos los alcances existentes con los que suministras:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>return Socialite::driver('github')\n    -&gt;scopes(['read:user', 'public_repo'])\n    -&gt;redirect();\n</code></pre>\n  <p>Puedes sobrescribir todos los alcances existentes usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">setScopes</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>return Socialite::driver('github')\n    -&gt;setScopes(['read:user', 'public_repo'])\n    -&gt;redirect();\n</code></pre>\n  <h2>Autenticación sin estado</h2>\n  <p>El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">stateless</span> puede ser usado para deshabilitar la verificación de estado de sesión. Esto es útil al momento de agregar la autenticación de una red social a una API.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>return Socialite::driver('google')-&gt;stateless()-&gt;user();\n</code></pre>\n  <h2>Obteniendo detalles de usuario</h2>\n  <p>Una vez que tengas una instancia de usuario, puedes aprovechar de obtener algunos detalles del usuario:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = Socialite::driver('github')-&gt;user();\n// OAuth Two Providers\n\\$token = \\$user-&gt;token;\n\\$refreshToken = \\$user-&gt;refreshToken; // not always provided\n\\$expiresIn = \\$user-&gt;expiresIn;\n// OAuth One Providers\n\\$token = \\$user-&gt;token;\n\\$tokenSecret = \\$user-&gt;tokenSecret;\n// All Providers\n\\$user-&gt;getId();\n\\$user-&gt;getNickname();\n\\$user-&gt;getName();\n\\$user-&gt;getEmail();\n\\$user-&gt;getAvatar();\n</code></pre>\n  <h4>Obteniendo Los detalles de usuario desde un token (OAuth2)</h4>\n  <p>Si ya tienes un token de acceso válido de un usuario, puedes obtener sus detalles usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">userFromToken</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = Socialite::driver('github')-&gt;userFromToken(\\$token);\n</code></pre>\n  <h4>Obteniendo los detalles de usuario desde un token y secreto (OAuth1)</h4>\n  <p>Si ya tienes un par válido de token / secreto de un usuario, puedes obtener sus detalles usando el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">userFromTokenAndSecret</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$user = Socialite::driver('twitter')-&gt;userFromTokenAndSecret(\\$token, \\$secret);\n</code></pre>\n</div>"
      },
      {
        "titulo": "Mocking",
        "contenido": "<div style='font-size: 14.2px;'>\n  <h1>Laravel Telescope</h1>\n  <ul>\n    <li>Introducción</li>\n    <li>\n      Instalación\n      <ul>\n        <li>Configuración</li>\n        <li>Remover datos de entradas de Telescope</li>\n        <li>Personalizar la migración</li>\n      </ul>\n    </li>\n    <li>Autorización para el panel de control</li>\n    <li>\n      Filtros\n      <ul>\n        <li>Entradas</li>\n        <li>Lotes</li>\n      </ul>\n    </li>\n    <li>\n      Etiquetado\n      <ul>\n        <li>Agregar etiquetas personalizadas</li>\n      </ul>\n    </li>\n    <li>\n      Observadores disponibles\n      <ul>\n        <li>Observador De caché</li>\n        <li>Observador De comandos</li>\n        <li>Observador De variables</li>\n        <li>Observador De eventos</li>\n        <li>Observador De excepciones</li>\n        <li>Observador De gates</li>\n        <li>Observador De trabajos</li>\n        <li>Observador De registros (log)</li>\n        <li>Observador De correos</li>\n        <li>Observador De modelos</li>\n        <li>Observador De notificaciones</li>\n        <li>Observador De consultas De Bases De Datos</li>\n        <li>Observador De Redis</li>\n        <li>Observador De solicitudes (request)</li>\n        <li>Observador De tareas programadas</li>\n      </ul>\n    </li>\n  </ul>\n  <h2>Introducción</h2>\n  <p>Telescope de Laravel es un elegante asistente para depurar código para el framework de Laravel. Telescope proporciona información detallada de las solicitudes entrantes de tu aplicación, excepciones, entradas de log, consultas de bases de datos, trabajos en cola, correos, notificaciones, operaciones de caché, tareas programadas, valores de variables y mucho más. Telescope acompaña maravillosamente tu entorno de desarrollo de Laravel.</p>\n  <p></p>\n  <h2>Instalación</h2>\n  <p>Puedes usar Composer para instalar Telescope dentro de tu proyecto de Laravel:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>composer require laravel/telescope\n</code></pre>\n  <p>Después de instalar Telescope, publica sus recursos usando el comando Artisan <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">telescope:install</span>. Después de instalar Telescope, también deberías ejecutar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">migrate</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan telescope:install\nphp artisan migrate\n</code></pre>\n  <h4>Actualizando Telescope</h4>\n  <p>Si haces una actualización de Telescope, deberías volver a publicar los recursos de Telescope:\n  </p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>php artisan telescope:publish\n</code></pre>\n  <h3>Instalando únicamente en entornos específicos</h3>\n  <p>Si planeas usar Telescope solamente para apoyar tu desarrollo local, puedes instalar Telescope usando la bandera <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">--dev</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>composer require laravel/telescope --dev\n</code></pre>\n  <p>Después de ejecutar <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">telescope:install</span>, deberías remover el registro de proveedor de servicio <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">TelescopeServiceProvider</span> de tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app</span>. En su lugar, registra manualmente el proveedor de servicio en el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">register</span> de tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AppServiceProvider</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use App\\Providers\\TelescopeServiceProvider;\n/**\n* Register any application services.\n*\n* @return void\n*/\npublic function register()\n{\n    if (\\$this-&gt;app-&gt;isLocal()) {\n        \\$this-&gt;app-&gt;register(TelescopeServiceProvider::class);\n    }\n}\n</code></pre>\n  <h3>Personalización de la migración</h3>\n  <p>Si no vas a usar las migraciones predeterminadas de Telescope, deberías ejecutar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Telescope::ignoreMigrations</span> en el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">register</span> de tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">AppServiceProvider</span>. Puedes exportar las migraciones predeterminadas usando el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">php artisan vendor:publish\n  --tag=telescope-migrations</span>.</p>\n  <h3>Configuración</h3>\n  <p>Después de publicar los recursos de Telescope, su archivo de configuración principal estará ubicado en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/telescope.php</span>. Este archivo de configuración permite que configures tus opciones de observador (watcher) y cada opción de configuración incluye una descripción de su propósito, así que asegúrate de examinar meticulosamente este archivo.</p>\n  <p>Si lo deseas, puedes deshabilitar completamente la colección de datos de Telescope usando la opción de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">enabled</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'enabled' =&gt; env('TELESCOPE_ENABLED', true),\n</code></pre>\n  <h3>Remover datos de entradas de Telescope</h3>\n  <p>Sin la remoción, la tabla <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">telescope_entries</span> puede acumular registros muy rápidamente. Para mitigar esto, deberías programar el comando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">telescope:prune</span> para que se ejecute diariamente:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$schedule-&gt;command('telescope:prune')-&gt;daily();\n</code></pre>\n  <p>De forma predeterminada, aquellas entradas con más de 24 horas serán removidas. Puedes usar la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">hours</span> al momento de ejecutar el comando para indicar cuánto tiempo retiene los datos Telescope. Por ejemplo, el siguiente comando eliminará todos los registros con más de 48 horas desde que fueron creados.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>\\$schedule-&gt;command('telescope:prune --hours=48')-&gt;daily();\n</code></pre>\n  <h2>Autorización para el panel de control</h2>\n  <p>Telescope viene con un panel de control en <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">/telescope</span>. De forma predeterminada, solamente serás capaz de acceder este panel de control en el entorno <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">local</span>. Dentro de tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Providers/TelescopeServiceProvider.php</span>, hay un método\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">gate</span>. Esta gate de autorización controla el acceso a Telescope en los entornos\n    <strong>que no son locales</strong>. Eres libre de modificar este gate de acuerdo a tus necesidades para restringir el acceso a tu instalación de Telescope:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Register the Telescope gate.\n*\n* This gate determines who can access Telescope in non-local environments.\n*\n* @return void\n*/\nprotected function gate()\n{\n    Gate::define('viewTelescope', function (\\$user) {\n        return in_array(\\$user-&gt;email, [\n            'taylor@laravel.com',\n        ]);\n    });\n}\n</code></pre>\n  <h2>Filtros</h2>\n  <h3>Entradas</h3>\n  <p>Puedes filtrar los datos que son guardados por Telescope por medio de la función de retorno (callback) <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">filter</span> que está registrada en tu <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">TelescopeServiceProvider</span>. De forma predeterminada, esta función de retorno guarda todos los datos en el entorno\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">local</span> y las excepciones, trabajos que fallan, tareas programadas, y datos de las etiquetas monitoreadas en los demás entornos.</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>/**\n* Register any application services.\n*\n* @return void\n*/\npublic function register()\n{\n    \\$this-&gt;hideSensitiveRequestDetails();\n    Telescope::filter(function (IncomingEntry \\$entry) {\n        if (\\$this-&gt;app-&gt;isLocal()) {\n            return true;\n        }\n        return \\$entry-&gt;isReportableException() ||\n            \\$entry-&gt;isFailedJob() ||\n            \\$entry-&gt;isScheduledTask() ||\n            \\$entry-&gt;hasMonitoredTag();\n    });\n}\n</code></pre>\n  <h3>Lotes</h3>\n  <p>Mientras la función de retorno <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">filter</span> filtra datos por entradas individuales, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">filterBatch</span> para registrar una función de retorno que filtra todos los datos para un comando de consola o solicitud dado. Si la función de retorno devuelve <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">true</span>, la totalidad de las entradas son guardadas por Telescope:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Illuminate\\Support\\Collection;\n/**\n* Register any application services.\n*\n* @return void\n*/\npublic function register()\n{\n    \\$this-&gt;hideSensitiveRequestDetails();\n    Telescope::filterBatch(function (Collection \\$entries) {\n        if (\\$this-&gt;app-&gt;isLocal()) {\n            return true;\n        }\n        return \\$entries-&gt;contains(function (\\$entry) {\n            return \\$entry-&gt;isReportableException() ||\n                \\$entry-&gt;isFailedJob() ||\n                \\$entry-&gt;isScheduledTask() ||\n                \\$entry-&gt;hasMonitoredTag();\n            });\n    });\n}\n</code></pre>\n  <h2>Etiquetado</h2>\n  <p>Telescope te permite buscar entradas por \"etiqueta\". A menudo, las etiquetas son nombres de clases de modelos de Eloquent o IDs de usuarios autenticados que Telescope automáticamente agrega a entradas. Ocasionalmente, puede que quieras adjuntar tus propias etiquetas personalizadas a entradas. Para lograr esto, puedes usar el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Telescope::tag</span>. El método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tags</span> acepta un callback que debe retornar un arreglo de etiquetas. Las etiquetas retornadas por el callback se fusionarán con cualquier etiqueta que Telescope automáticamente agregaría a la entrada. Debes llamar al método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">tags</span> dentro de tu\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">TelescopeServiceProvider</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>use Laravel\\Telescope\\Telescope;\n/**\n* Register any application services.\n*\n* @return void\n*/\npublic function register()\n{\n    \\$this-&gt;hideSensitiveRequestDetails();\n    Telescope::tag(function (IncomingEntry \\$entry) {\n        if (\\$entry-&gt;type === 'request') {\n            return ['status:'.\\$entry-&gt;content['response_status']];\n        }\n        return [];\n    });\n}\n</code></pre>\n  <h2>Observadores disponibles</h2>\n  <p>Los observadores de Telescope coleccionan los datos de la aplicación cuando una solicitud o comando de consola es ejecutado. Puedes personalizar la lista de observadores que deseas habilitar dentro de tu archivo de configuración <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/telescope.php</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'watchers' =&gt; [\n    Watchers\\CacheWatcher::class =&gt; true,\n    Watchers\\CommandWatcher::class =&gt; true,\n    ...\n],\n</code></pre>\n  <p>Algunos observadores también permiten que agregues opciones de personalización extra:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'watchers' =&gt; [\n    Watchers\\QueryWatcher::class =&gt; [\n        'enabled' =&gt; env('TELESCOPE_QUERY_WATCHER', true),\n        'slow' =&gt; 100,\n    ],\n    ...\n],\n</code></pre>\n  <h3>Observador de caché</h3>\n  <p>El observador de caché (Cache Watcher) guarda datos cuando una clave está presente, falta, es actualizada u olvidada en caché.</p>\n  <h3>Observador de comandos</h3>\n  <p>El observador de comandos (command watcher) guarda los argumentos, opciones, códigos de salida, información enviada a la pantalla cada vez que se ejecuta un comando Artisan. Si deseas excluir ciertos comandos para que no sean grabados por el observador, puedes especificar el comando junto con la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ignore</span> en tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/telescope.php</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'watchers' =&gt; [\n    Watchers\\CommandWatcher::class =&gt; [\n        'enabled' =&gt; env('TELESCOPE_COMMAND_WATCHER', true),\n        'ignore' =&gt; ['key:generate'],\n    ],\n    ...\n],\n</code></pre>\n  <h3>Observador de variables</h3>\n  <p>El observador de variables (dump watcher) guarda y muestra los valores de tus variables en Telescope. Al momento de usar Laravel, los valores de las variables pueden ser mostrados usando la función global <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">dump</span>. La pestaña del observador de variables debe estar abierta en un navegador para que los valores sean guardados, de lo contrario serán ignorados por el observador.\n  </p>\n  <h3>Observador de eventos</h3>\n  <p>El observador de eventos (event watcher) guarda la carga, oyentes (listeners) y los datos de difusión (broadcast) para cualquier evento que sea despachado por tu aplicación. Los eventos internos del framework de Laravel son ignorados por el observador de eventos.</p>\n  <h3>Observador de excepciones</h3>\n  <p>El observador de excepciones (exception watcher) guarda los datos y el seguimiento de la pila para cualquier excepción reportable que sea lanzada por tu aplicación.</p>\n  <h3>Observador de gates</h3>\n  <p>El observador de gate (gate watcher) guarda los datos y el resultado de verificaciones de gates y políticas hechas por tu aplicación. Si deseas excluir ciertas habilidades para que no sean guardadas por el observador, puedes especificar aquellas en la opción\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">ignore_abilities</span> en tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">config/telescope.php</span>:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'watchers' =&gt; [\n    Watchers\\GateWatcher::class =&gt; [\n        'enabled' =&gt; env('TELESCOPE_GATE_WATCHER', true),\n        'ignore_abilities' =&gt; ['viewNova'],\n    ],\n    ...\n],\n</code></pre>\n  <h3>Observador de trabajos</h3>\n  <p>El observador de trabajos (job watcher) guarda los datos y estado de los trabajos despachado por tu aplicación.</p>\n  <h3>Observador de registros</h3>\n  <p>El observador de registros (log watcher) guarda datos de los registros escritos por tu aplicación.\n  </p>\n  <h3>Observador de correos</h3>\n  <p>El observador de correos (mail watcher) permite que veas una pre-visualización en el navegador de los correos junto con sus datos adjuntados. También puedes descargar los correos como un archivo\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">.eml</span>.</p>\n  <h3>Observador de modelos</h3>\n  <p>El observador de modelos (model watcher) guarda los cambios del modelo cada vez que se despacha un evento <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">created</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">updated</span>, <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">restored</span>, o\n    <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">deleted</span> de Eloquent. Puedes especificar cuáles eventos de modelos deberían ser guardados por medio de la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">events</span> del observador:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'watchers' =&gt; [\n    Watchers\\ModelWatcher::class =&gt; [\n        'enabled' =&gt; env('TELESCOPE_MODEL_WATCHER', true),\n        'events' =&gt; ['eloquent.created*', 'eloquent.updated*'],\n    ],\n    ...\n],\n</code></pre>\n  <h3>Observador de notificaciones</h3>\n  <p>El observador de notificaciones (notification watcher) guarda todas las notificaciones enviadas por tu aplicación. Si la notificación dispara un correo y tienes el observador de correos habilitado, el correo también estará disponible para pre-visualizar en la pantalla del observador de correos.</p>\n  <h3>Observador de consultas de bases de datos</h3>\n  <p>El observador de consultas de bases de datos (query watcher) guarda los comandos SQL, enlaces, y tiempo de ejecución para todas las consultas de bases de datos que sean ejecutadas por tu aplicación. El observador también coloca una etiqueta <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">slow</span> a las consultas más lentas, aquellas que tardan más de 100 micro segundos. Puedes personalizar el umbral para las consultas lentas usando la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">slow</span> del observador:</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'watchers' =&gt; [\n    Watchers\\QueryWatcher::class =&gt; [\n        'enabled' =&gt; env('TELESCOPE_QUERY_WATCHER', true),\n        'slow' =&gt; 50,\n    ],\n    ...\n],\n</code></pre>\n  <h3>Observador de Redis</h3>\n  <p>Nota</p>\n  <p>Los eventos de Redis deben ser habilitados por el observador de Redis (Redis watcher) para que funcione de forma correcta. Puedes habilitar los eventos de Redis ejecutando <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">Redis::enableEvents()</span> en el método <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">boot</span> de tu archivo <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">app/Providers/AppServiceProvider.php</span>.\n  </p>\n  <p>El observador de Redis (redis watcher) guarda todos los comandos de Redis ejecutados por tu aplicación. Si estás usando Redis para el almacenamiento de caché, también los comandos de caché serán guardados por el observador de Redis.</p>\n  <h3>Observador de solicitudes</h3>\n  <p>El observador de solicitudes (request watcher) guarda la solicitud, encabezados, la sesión y los datos de respuesta asociados con las solicitudes manejadas por la aplicación. Puedes limitar tus datos de respuesta por medio de la opción <span style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\">size_limit</span> (en KB):</p>\n  <pre style=\"background-color: #CFD8DC; color: #37474F; font-family: monospace;\"><code>'watchers' =&gt; [\n    Watchers\\RequestWatcher::class =&gt; [\n        'enabled' =&gt; env('TELESCOPE_REQUEST_WATCHER', true),\n        'size_limit' =&gt; env('TELESCOPE_RESPONSE_SIZE_LIMIT', 64),\n    ],\n    ...\n],\n</code></pre>\n  <h3>Observador de tareas programadas</h3>\n  <p>El observador de tareas programadas (schedule watcher) guarda el comando y la información enviada a la pantalla de las tareas programadas que ejecuta tu aplicación.</p>\n</div>"
      }
    ]
  }
]